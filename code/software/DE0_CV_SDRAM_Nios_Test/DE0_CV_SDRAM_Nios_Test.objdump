
DE0_CV_SDRAM_Nios_Test.elf:     file format elf32-littlenios2
DE0_CV_SDRAM_Nios_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x200201c0

Program Header:
    LOAD off    0x00001000 vaddr 0x20020000 paddr 0x20020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20020020 paddr 0x20020020 align 2**12
         filesz 0x00015a6c memsz 0x00015a6c flags r-x
    LOAD off    0x00016a8c vaddr 0x20035a8c paddr 0x200375ec align 2**12
         filesz 0x00001b60 memsz 0x00001b60 flags rw-
    LOAD off    0x0001914c vaddr 0x2003914c paddr 0x2003914c align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20020000  20020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  20020020  20020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014e00  200201c0  200201c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000acc  20034fc0  20034fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b60  20035a8c  200375ec  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  2003914c  2003914c  0001914c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00000000  00000000  000185ec  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  200392a8  200392a8  000185ec  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000185ec  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001360  00000000  00000000  00018610  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00033284  00000000  00000000  00019970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c7bf  00000000  00000000  0004cbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f761  00000000  00000000  000593b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002db0  00000000  00000000  00068b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042d0  00000000  00000000  0006b8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001a2e1  00000000  00000000  0006fb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00089e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c48  00000000  00000000  00089ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008faaa  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  0008faad  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008fab7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008fab8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008fab9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008fabd  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008fac1  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008fac5  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008face  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008fad7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0008fae0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000056  00000000  00000000  0008faeb  2**0
                  CONTENTS, READONLY
 30 .jdi          0000535d  00000000  00000000  0008fb41  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005c4fa  00000000  00000000  00094e9e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20020000 l    d  .entry	00000000 .entry
20020020 l    d  .exceptions	00000000 .exceptions
200201c0 l    d  .text	00000000 .text
20034fc0 l    d  .rodata	00000000 .rodata
20035a8c l    d  .rwdata	00000000 .rwdata
2003914c l    d  .bss	00000000 .bss
00000000 l    d  .sdram	00000000 .sdram
200392a8 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE0_CV_SDRAM_Nios_Test_bsp//obj/HAL/src/crt0.o
20020208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
20020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 cnn.c
2002020c l     F .text	00000070 rnd
2002027c l     F .text	00000130 nrnd
200203ac l     F .text	00000084 tanh_g
20020430 l     F .text	00000068 relu
20020498 l     F .text	00000068 relu_g
20020500 l     F .text	0000029c Layer_create
200352dc l     O .rodata	0000000d __func__.3759
200352ec l     O .rodata	0000000e __func__.3763
200352fc l     O .rodata	0000000b __func__.3768
20020d38 l     F .text	00000464 Layer_feedForw_full
20035308 l     O .rodata	00000014 __func__.3812
2002119c l     F .text	00000334 Layer_feedBack_full
2003531c l     O .rodata	00000014 __func__.3850
200214d0 l     F .text	0000041c Layer_feedForw_conv
20035330 l     O .rodata	00000014 __func__.3869
200218ec l     F .text	00000530 Layer_feedBack_conv
20035344 l     O .rodata	00000014 __func__.3909
20035358 l     O .rodata	00000010 __func__.3954
20035368 l     O .rodata	00000011 __func__.3971
2003537c l     O .rodata	00000014 __func__.3979
20035390 l     O .rodata	00000013 __func__.3990
200353a4 l     O .rodata	00000012 __func__.4025
200353b8 l     O .rodata	00000012 __func__.4041
00000000 l    df *ABS*	00000000 mnist.c
20022918 l     F .text	00000024 __uint32_identity
200356dc l     O .rodata	00000010 __func__.4488
200356ec l     O .rodata	0000000d __func__.4493
200356fc l     O .rodata	0000000d __func__.4499
2003570c l     O .rodata	00000009 __func__.4508
00000000 l    df *ABS*	00000000 s_tanh.c
00000000 l    df *ABS*	00000000 w_exp.c
00000000 l    df *ABS*	00000000 e_exp.c
2003573c l     O .rodata	00000010 halF
2003572c l     O .rodata	00000010 ln2HI
2003571c l     O .rodata	00000010 ln2LO
00000000 l    df *ABS*	00000000 s_expm1.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20027368 l     F .text	00000008 __fp_unlock
2002737c l     F .text	0000019c __sinit.part.1
20027518 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
20035a8c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 refill.c
2002945c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
200358d2 l     O .rodata	00000010 zeroes.4404
2002ba08 l     F .text	000000bc __sbprintf
200358e2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
2002bce4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
200362d8 l     O .rwdata	00000020 lc_ctype_charset
200362b8 l     O .rwdata	00000020 lc_message_charset
200362f8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
20035910 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
2002f950 l     F .text	000000fc __sprint_r.part.0
20035a44 l     O .rodata	00000010 blanks.4348
20035a34 l     O .rodata	00000010 zeroes.4349
20030edc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
20032120 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
2003222c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2003228c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
20032398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
20032478 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
200325e4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
200326d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
200328a4 l     F .text	0000003c alt_get_errno
200328e0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
20032b34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
20037594 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
20032d80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
20032eb4 l     F .text	00000034 alt_dev_reg
200364d8 l     O .rwdata	00001060 jtag_uart
20037538 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
200331b4 l     F .text	0000020c altera_avalon_jtag_uart_irq
200333c0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
200339f8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
20037598 l     O .rwdata	00000009 hcinfo.2538
200375a4 l     O .rwdata	0000000a hcinfo.2551
200375b0 l     O .rwdata	00000009 hcinfo.2560
200375bc l     O .rwdata	0000000a hcinfo.2573
200375c8 l     O .rwdata	0000000a hcinfo.2586
200375d4 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
200340e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
20034814 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
2002ed28 g     F .text	00000074 _mprec_log10
2002ee14 g     F .text	0000008c __any_on
2002dad4 g     F .text	00000054 _isatty_r
2003591c g     O .rodata	00000028 __mprec_tinytens
200327e0 g     F .text	0000007c alt_main
20023fbc g     F .text	00000774 expm1
200391a8 g     O .bss	00000100 alt_irq
20024730 g     F .text	00000014 fabs
2002dc04 g     F .text	00000060 _lseek_r
200375ec g       *ABS*	00000000 __flash_rwdata_start
2002d56c g     F .text	000000ac __sflags
20031ff0 g     F .text	00000088 .hidden __eqdf2
200392a8 g       *ABS*	00000000 __alt_heap_start
2002f77c g     F .text	0000005c _kill_r
200293a4 g     F .text	0000003c printf
20020868 g     F .text	000004d0 Layer_dump
200312f8 g     F .text	0000009c _wcrtomb_r
2002f544 g     F .text	00000084 _signal_r
20029778 g     F .text	0000005c __sseek
200276b8 g     F .text	00000010 __sinit
200311a0 g     F .text	00000140 __swbuf_r
2002db28 g     F .text	0000007c _setlocale_r
20027520 g     F .text	00000068 __sfmoreglue
20032880 g     F .text	00000024 __malloc_unlock
20033aec g     F .text	0000011c alt_hostfs_open
2002dd48 g     F .text	0000015c memmove
200276a0 g     F .text	00000018 _cleanup
2002dea4 g     F .text	000000a8 _Balloc
20032af8 g     F .text	0000003c alt_putstr
20025ab0 g     F .text	000000dc .hidden __gtdf2
20026fac g     F .text	00000010 __errno
20020000 g     F .entry	0000001c __reset
20020020 g       *ABS*	00000000 __flash_exceptions_start
200283d0 g     F .text	0000005c _fstat_r
2003914c g     O .bss	00000004 errno
200296f4 g     F .text	00000008 __seofread
2003916c g     O .bss	00000004 alt_argv
2003f560 g       *ABS*	00000000 _gp
20032378 g     F .text	00000020 getpid
20036358 g     O .rwdata	00000180 alt_fd_list
20033d24 g     F .text	00000068 alt_hostfs_seek
20034284 g     F .text	00000090 alt_find_dev
200290a4 g     F .text	00000148 memcpy
20022c74 g     F .text	000000cc IdxFile_get1
20027370 g     F .text	0000000c _cleanup_r
20026d14 g     F .text	000000dc .hidden __floatsidf
2003441c g     F .text	00000080 alt_fs_reg
200348d8 g     F .text	0000007c alt_io_redirect
20025b8c g     F .text	000000f4 .hidden __ltdf2
20034fc0 g       *ABS*	00000000 __DTOR_END__
2002f464 g     F .text	00000074 __fpclassifyd
2002ec84 g     F .text	000000a4 __ratio
20030ec0 g     F .text	0000001c __vfiprintf_internal
20021f7c g     F .text	000000b0 Layer_getOutputs
200335b8 g     F .text	0000021c altera_avalon_jtag_uart_read
20028870 g     F .text	00000014 malloc
20029374 g     F .text	00000030 _printf_r
20024860 g     F .text	00000064 .hidden __udivsi3
200323d4 g     F .text	000000a4 isatty
2002f5c8 g     F .text	000000bc _raise_r
20026e54 g     F .text	00000068 __assert_func
2003596c g     O .rodata	000000c8 __mprec_tens
2002dba4 g     F .text	0000000c __locale_charset
20034b1c g     F .text	00000090 alt_icache_flush
20039158 g     O .bss	00000004 __malloc_top_pad
2002f7d8 g     F .text	00000004 _getpid_r
20037574 g     O .rwdata	00000004 __mb_cur_max
20022e50 g     F .text	000008d4 my_mnist
2002dbd4 g     F .text	0000000c _localeconv_r
2002e2b0 g     F .text	0000003c __i2b
2002d618 g     F .text	000004bc __sfvwrite_r
2002f684 g     F .text	000000a8 __sigtramp_r
2002964c g     F .text	00000054 _sbrk_r
20033c4c g     F .text	0000006c alt_hostfs_read
2002eea0 g     F .text	00000060 _read_r
2003758c g     O .rwdata	00000004 alt_max_fd
20026fbc g     F .text	000000f0 _fclose_r
20027338 g     F .text	00000030 fflush
20039154 g     O .bss	00000004 __malloc_max_sbrked_mem
2002491c g     F .text	000008ac .hidden __adddf3
2002ea2c g     F .text	0000010c __b2d
20031ab8 g     F .text	00000538 .hidden __umoddi3
2003270c g     F .text	000000d4 lseek
20037560 g     O .rwdata	00000004 __fdlib_version
20037564 g     O .rwdata	00000004 _global_impure_ptr
2002ef00 g     F .text	00000564 _realloc_r
200392a8 g       *ABS*	00000000 __bss_end
20034724 g     F .text	000000f0 alt_iic_isr_register
20023ad4 g     F .text	000004e8 __ieee754_exp
200349f0 g     F .text	00000108 alt_tick
20031540 g     F .text	00000578 .hidden __udivdi3
200310fc g     F .text	00000024 _fputwc_r
20035944 g     O .rodata	00000028 __mprec_bigtens
2002e094 g     F .text	00000104 __s2b
2002bccc g     F .text	00000018 abort
20032078 g     F .text	000000a8 .hidden __floatunsidf
2002e76c g     F .text	00000060 __mcmp
200276d8 g     F .text	00000018 __fp_lock_all
200346d8 g     F .text	0000004c alt_ic_irq_enabled
20034954 g     F .text	0000009c alt_alarm_stop
20039174 g     O .bss	00000004 alt_irq_active
20027f70 g     F .text	00000444 _fseeko_r
20021e1c g     F .text	00000160 Layer_setInputs
20033c08 g     F .text	00000044 alt_hostfs_close
200200ec g     F .exceptions	000000d4 alt_irq_handler
20036330 g     O .rwdata	00000028 alt_dev_null
2003409c g     F .text	00000048 alt_dcache_flush_all
2002e198 g     F .text	00000068 __hi0bits
20026c94 g     F .text	00000080 .hidden __fixdfsi
20026ed0 g     F .text	00000018 calloc
20022bd0 g     F .text	000000a4 IdxFile_destroy
200375ec g       *ABS*	00000000 __ram_rwdata_end
20037584 g     O .rwdata	00000008 alt_dev_list
20032dbc g     F .text	000000f8 write
20035a8c g       *ABS*	00000000 __ram_rodata_end
200322c8 g     F .text	000000b0 fstat
20027898 g     F .text	00000024 fprintf
200324b4 g     F .text	00000130 kill
20025b8c g     F .text	000000f4 .hidden __ledf2
2002e4e4 g     F .text	00000140 __pow5mult
20039164 g     O .bss	00000004 __nlocale_changed
2002fa64 g     F .text	0000145c ___vfiprintf_internal_r
200248c4 g     F .text	00000058 .hidden __umodsi3
200392a8 g       *ABS*	00000000 end
200283b4 g     F .text	0000001c fseeko
20027f54 g     F .text	0000001c fseek
200330f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
20034fc0 g       *ABS*	00000000 __CTOR_LIST__
2003f400 g       *ABS*	00000000 __alt_stack_pointer
20033a70 g     F .text	0000007c alt_avalon_timer_sc_init
20026df0 g     F .text	00000064 .hidden __clzsi2
200337d4 g     F .text	00000224 altera_avalon_jtag_uart_write
20023790 g     F .text	000001b4 tanh
200276c8 g     F .text	00000004 __sfp_lock_acquire
2002dc64 g     F .text	000000e4 memchr
200297f4 g     F .text	000021f8 ___vfprintf_internal_r
20022160 g     F .text	000001a4 Layer_learnOutputs
20027c40 g     F .text	00000310 _free_r
2002dbb0 g     F .text	00000010 __locale_mb_cur_max
20034e40 g     F .text	00000180 __call_exitprocs
20039160 g     O .bss	00000004 __mlocale_changed
2003756c g     O .rwdata	00000004 __malloc_sbrk_base
200201c0 g     F .text	0000004c _start
20039178 g     O .bss	00000004 _alt_tick_rate
200293f8 g     F .text	00000064 rand
2002e624 g     F .text	00000148 __lshift
2003917c g     O .bss	00000004 _alt_nticks
2002f740 g     F .text	00000018 signal
20032b70 g     F .text	000000fc read
20032f20 g     F .text	00000070 alt_sys_init
20029314 g     F .text	00000060 _open_r
20034d28 g     F .text	00000118 __register_exitproc
2002e2ec g     F .text	000001f8 __multiply
20033460 g     F .text	00000068 altera_avalon_jtag_uart_close
20035a8c g       *ABS*	00000000 __ram_rwdata_start
20034fc0 g       *ABS*	00000000 __ram_rodata_start
20039180 g     O .bss	00000028 __malloc_current_mallinfo
2002eb38 g     F .text	0000014c __d2b
20032f90 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
2003449c g     F .text	000000a4 alt_get_fd
2002bc78 g     F .text	00000054 _close_r
20034cac g     F .text	0000007c memcmp
20033050 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
200392a8 g       *ABS*	00000000 __alt_stack_base
200330a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
200285b4 g     F .text	000000cc _fwrite_r
2002bb24 g     F .text	00000154 __swsetup_r
20022304 g     F .text	00000228 Layer_update
200251c8 g     F .text	000008e8 .hidden __divdf3
20027588 g     F .text	00000118 __sfp
2002ed9c g     F .text	00000078 __copybits
20035eb0 g     O .rwdata	00000408 __malloc_av_
200276d4 g     F .text	00000004 __sinit_lock_release
20025c80 g     F .text	00000718 .hidden __muldf3
200296a0 g     F .text	00000054 __sread
20027ae8 g     F .text	00000034 fread
20034314 g     F .text	00000108 alt_find_file
20034120 g     F .text	000000a4 alt_dev_llist_insert
2003285c g     F .text	00000024 __malloc_lock
20027870 g     F .text	00000028 _fprintf_r
20032cd0 g     F .text	000000b0 sbrk
200272dc g     F .text	0000005c _fflush_r
20026ee8 g     F .text	000000c4 _calloc_r
2002293c g     F .text	00000294 IdxFile_read
20027858 g     F .text	00000018 fopen
2003914c g       *ABS*	00000000 __bss_start
200291ec g     F .text	00000128 memset
20023724 g     F .text	0000006c main
20039170 g     O .bss	00000004 alt_envp
20039150 g     O .bss	00000004 __malloc_max_total_mem
20032ff0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
200312e0 g     F .text	00000018 __swbuf
200293e0 g     F .text	00000018 srand
200278bc g     F .text	0000022c _fread_r
200297d4 g     F .text	00000008 __sclose
20024760 g     F .text	00000008 matherr
2003f400 g       *ABS*	00000000 __alt_heap_limit
200270ac g     F .text	00000014 fclose
2002bee4 g     F .text	00001688 _dtoa_r
20028898 g     F .text	0000080c _malloc_r
20031454 g     F .text	00000030 __ascii_wctomb
20037590 g     O .rwdata	00000004 alt_errno
20027708 g     F .text	00000020 _fiprintf_r
2002f758 g     F .text	00000010 _init_signal
2002842c g     F .text	000000c4 _fwalk
20023944 g     F .text	00000190 exp
20024768 g     F .text	00000084 .hidden __divsi3
20027b1c g     F .text	00000124 _malloc_trim_r
20034fc0 g       *ABS*	00000000 __CTOR_END__
20024744 g     F .text	0000001c finite
2002f7dc g     F .text	000000dc strcmp
20034fc0 g       *ABS*	00000000 __flash_rodata_start
2002079c g     F .text	000000cc Layer_destroy
20034fc0 g       *ABS*	00000000 __DTOR_LIST__
20031ff0 g     F .text	00000088 .hidden __nedf2
20032ee8 g     F .text	00000038 alt_irq_init
20032c6c g     F .text	00000064 alt_release_fd
2003574c g     O .rodata	00000100 .hidden __clz_tab
2003915c g     O .bss	00000004 _PathLocale
2002202c g     F .text	00000134 Layer_getErrorTotal
20034bac g     F .text	00000014 atexit
2002bac4 g     F .text	00000060 _write_r
2002dbe0 g     F .text	00000018 setlocale
20037568 g     O .rwdata	00000004 _impure_ptr
20039168 g     O .bss	00000004 alt_argc
200270c0 g     F .text	0000021c __sflush_r
20034224 g     F .text	00000060 _do_dtors
2002dbcc g     F .text	00000008 __locale_cjk_lang
20027f50 g     F .text	00000004 _fseek_r
20029478 g     F .text	000001d4 __srefill_r
20020020 g       .exceptions	00000000 alt_irq_entry
2002e9c8 g     F .text	00000064 __ulp
200276f0 g     F .text	00000018 __fp_unlock_all
2003757c g     O .rwdata	00000008 alt_fs_list
20033cb8 g     F .text	0000006c alt_hostfs_write
20020020 g       *ABS*	00000000 __ram_exceptions_start
2002dbf8 g     F .text	0000000c localeconv
20020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
20034574 g     F .text	00000050 alt_ic_isr_register
20028680 g     F .text	00000034 fwrite
200375ec g       *ABS*	00000000 _edata
200392a8 g       *ABS*	00000000 _end
20030f98 g     F .text	00000164 __fputwc
200201c0 g       *ABS*	00000000 __ram_exceptions_end
200334c8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
20034bf8 g     F .text	0000009c _fputs_r
2003464c g     F .text	0000008c alt_ic_irq_disable
200296fc g     F .text	0000007c __swrite
20037570 g     O .rwdata	00000004 __malloc_trim_threshold
20022d40 g     F .text	00000110 IdxFile_get3
20034af8 g     F .text	00000024 altera_nios2_qsys_irq_init
2002dbc0 g     F .text	0000000c __locale_msgcharset
20034bc0 g     F .text	00000038 exit
20027728 g     F .text	0000003c fiprintf
200297dc g     F .text	00000018 _vfiprintf_r
200284f0 g     F .text	000000c4 _fwalk_reent
2002e7cc g     F .text	000001fc __mdiff
20022580 g     F .text	0000013c Layer_create_full
200247ec g     F .text	00000074 .hidden __modsi3
2003f400 g       *ABS*	00000000 __alt_data_end
20020020 g     F .exceptions	00000000 alt_exception
200276cc g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
20027764 g     F .text	000000f4 _fopen_r
20032258 g     F .text	00000034 _exit
20033f70 g     F .text	0000012c alt_alarm_start
200314e0 g     F .text	00000060 .hidden __muldi3
200286b4 g     F .text	000001bc __smakebuf_r
2002f8b8 g     F .text	00000098 strlen
2002f4d8 g     F .text	0000006c _init_signal_r
200329a4 g     F .text	00000154 open
20025ab0 g     F .text	000000dc .hidden __gedf2
20026ebc g     F .text	00000014 __assert
20037578 g     O .rwdata	00000004 __wctomb
2002fa4c g     F .text	00000018 __sprint_r
20034540 g     F .text	00000034 alt_icache_flush_all
20034c94 g     F .text	00000018 fputs
200375e0 g     O .rwdata	00000004 alt_priority_mask
200345c4 g     F .text	00000088 alt_ic_irq_enable
2002b9ec g     F .text	0000001c __vfprintf_internal
20031484 g     F .text	0000005c _wctomb_r
20026398 g     F .text	000008fc .hidden __subdf3
2002252c g     F .text	00000054 Layer_create_input
2002e200 g     F .text	000000b0 __lo0bits
200226bc g     F .text	0000025c Layer_create_conv
200375e4 g     O .rwdata	00000008 alt_alarm_list
200341c4 g     F .text	00000060 _do_ctors
2002f768 g     F .text	00000014 __sigtramp
20031394 g     F .text	000000c0 wcrtomb
2003215c g     F .text	000000d0 close
2003264c g     F .text	00000084 alt_load
20031120 g     F .text	00000080 fputwc
2002f72c g     F .text	00000014 raise
20028884 g     F .text	00000014 free
200276d0 g     F .text	00000004 __sinit_lock_acquire
2002df74 g     F .text	00000120 __multadd
2002df4c g     F .text	00000028 _Bfree
20033d8c g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

20020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2002000c:	00bffd16 	blt	zero,r2,20020004 <_gp+0xfffe0aa4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20020010:	004800b4 	movhi	at,8194
    ori r1, r1, %lo(_start)
20020014:	08407014 	ori	at,at,448
    jmp r1
20020018:	0800683a 	jmp	at
2002001c:	00000000 	call	20000000 <__alt_mem_sdram+0x20000000>

Disassembly of section .exceptions:

20020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2002002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2002003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2002004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2002005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2002006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2002007c:	10000326 	beq	r2,zero,2002008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20020080:	20000226 	beq	r4,zero,2002008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20020084:	00200ec0 	call	200200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20020088:	00000306 	br	20020098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2002008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20020090:	e8bfff17 	ldw	r2,-4(ea)

20020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
20020094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
20020098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
2002009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200200e8:	ef80083a 	eret

200200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200200ec:	defff904 	addi	sp,sp,-28
200200f0:	dfc00615 	stw	ra,24(sp)
200200f4:	df000515 	stw	fp,20(sp)
200200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
200200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20020100:	0005313a 	rdctl	r2,ipending
20020104:	e0bffe15 	stw	r2,-8(fp)

  return active;
20020108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2002010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20020110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20020114:	00800044 	movi	r2,1
20020118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2002011c:	e0fffb17 	ldw	r3,-20(fp)
20020120:	e0bffc17 	ldw	r2,-16(fp)
20020124:	1884703a 	and	r2,r3,r2
20020128:	10001426 	beq	r2,zero,2002017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2002012c:	00880134 	movhi	r2,8196
20020130:	10a46a04 	addi	r2,r2,-28248
20020134:	e0fffd17 	ldw	r3,-12(fp)
20020138:	180690fa 	slli	r3,r3,3
2002013c:	10c5883a 	add	r2,r2,r3
20020140:	10c00017 	ldw	r3,0(r2)
20020144:	00880134 	movhi	r2,8196
20020148:	10a46a04 	addi	r2,r2,-28248
2002014c:	e13ffd17 	ldw	r4,-12(fp)
20020150:	200890fa 	slli	r4,r4,3
20020154:	1105883a 	add	r2,r2,r4
20020158:	10800104 	addi	r2,r2,4
2002015c:	10800017 	ldw	r2,0(r2)
20020160:	1009883a 	mov	r4,r2
20020164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20020168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2002016c:	0005313a 	rdctl	r2,ipending
20020170:	e0bfff15 	stw	r2,-4(fp)

  return active;
20020174:	e0bfff17 	ldw	r2,-4(fp)
20020178:	00000706 	br	20020198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2002017c:	e0bffc17 	ldw	r2,-16(fp)
20020180:	1085883a 	add	r2,r2,r2
20020184:	e0bffc15 	stw	r2,-16(fp)
      i++;
20020188:	e0bffd17 	ldw	r2,-12(fp)
2002018c:	10800044 	addi	r2,r2,1
20020190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
20020194:	003fe106 	br	2002011c <_gp+0xfffe0bbc>

    active = alt_irq_pending ();
20020198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
2002019c:	e0bffb17 	ldw	r2,-20(fp)
200201a0:	103fdb1e 	bne	r2,zero,20020110 <_gp+0xfffe0bb0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200201a4:	0001883a 	nop
}
200201a8:	0001883a 	nop
200201ac:	e037883a 	mov	sp,fp
200201b0:	dfc00117 	ldw	ra,4(sp)
200201b4:	df000017 	ldw	fp,0(sp)
200201b8:	dec00204 	addi	sp,sp,8
200201bc:	f800283a 	ret

Disassembly of section .text:

200201c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
200201c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
200201c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
200201c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
200201cc:	00bffd16 	blt	zero,r2,200201c4 <_gp+0xfffe0c64>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
200201d0:	06c800f4 	movhi	sp,8195
    ori sp, sp, %lo(__alt_stack_pointer)
200201d4:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
200201d8:	068800f4 	movhi	gp,8195
    ori gp, gp, %lo(_gp)
200201dc:	d6bd5814 	ori	gp,gp,62816
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
200201e0:	008800f4 	movhi	r2,8195
    ori r2, r2, %lo(__bss_start)
200201e4:	10a45314 	ori	r2,r2,37196

    movhi r3, %hi(__bss_end)
200201e8:	00c800f4 	movhi	r3,8195
    ori r3, r3, %lo(__bss_end)
200201ec:	18e4aa14 	ori	r3,r3,37544

    beq r2, r3, 1f
200201f0:	10c00326 	beq	r2,r3,20020200 <_start+0x40>

0:
    stw zero, (r2)
200201f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
200201f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
200201fc:	10fffd36 	bltu	r2,r3,200201f4 <_gp+0xfffe0c94>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20020200:	003264c0 	call	2003264c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20020204:	00327e00 	call	200327e0 <alt_main>

20020208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20020208:	003fff06 	br	20020208 <_gp+0xfffe0ca8>

2002020c <rnd>:
/*  Misc. functions
 */

/* rnd(): uniform random [0.0, 1.0] */
static inline double rnd()
{
2002020c:	defffe04 	addi	sp,sp,-8
20020210:	dfc00115 	stw	ra,4(sp)
20020214:	df000015 	stw	fp,0(sp)
20020218:	d839883a 	mov	fp,sp
    return ((double)rand() / RAND_MAX);
2002021c:	00293f80 	call	200293f8 <rand>
20020220:	1009883a 	mov	r4,r2
20020224:	0026d140 	call	20026d14 <__floatsidf>
20020228:	1011883a 	mov	r8,r2
2002022c:	1813883a 	mov	r9,r3
20020230:	01bff034 	movhi	r6,65472
20020234:	01d07834 	movhi	r7,16864
20020238:	39ffffc4 	addi	r7,r7,-1
2002023c:	4009883a 	mov	r4,r8
20020240:	480b883a 	mov	r5,r9
20020244:	00251c80 	call	200251c8 <__divdf3>
20020248:	100f883a 	mov	r7,r2
2002024c:	1811883a 	mov	r8,r3
20020250:	380b883a 	mov	r5,r7
20020254:	400d883a 	mov	r6,r8
20020258:	2807883a 	mov	r3,r5
2002025c:	3009883a 	mov	r4,r6
}
20020260:	1805883a 	mov	r2,r3
20020264:	2007883a 	mov	r3,r4
20020268:	e037883a 	mov	sp,fp
2002026c:	dfc00117 	ldw	ra,4(sp)
20020270:	df000017 	ldw	fp,0(sp)
20020274:	dec00204 	addi	sp,sp,8
20020278:	f800283a 	ret

2002027c <nrnd>:

/* nrnd(): normal random (std=1.0) */
static inline double nrnd()
{
2002027c:	defffc04 	addi	sp,sp,-16
20020280:	dfc00315 	stw	ra,12(sp)
20020284:	df000215 	stw	fp,8(sp)
20020288:	dc400115 	stw	r17,4(sp)
2002028c:	dc000015 	stw	r16,0(sp)
20020290:	df000204 	addi	fp,sp,8
    return (rnd()+rnd()+rnd()+rnd()-2.0) * 1.724; /* std=1.0 */
20020294:	002020c0 	call	2002020c <rnd>
20020298:	1021883a 	mov	r16,r2
2002029c:	1823883a 	mov	r17,r3
200202a0:	002020c0 	call	2002020c <rnd>
200202a4:	1009883a 	mov	r4,r2
200202a8:	180b883a 	mov	r5,r3
200202ac:	200d883a 	mov	r6,r4
200202b0:	280f883a 	mov	r7,r5
200202b4:	8009883a 	mov	r4,r16
200202b8:	880b883a 	mov	r5,r17
200202bc:	002491c0 	call	2002491c <__adddf3>
200202c0:	1009883a 	mov	r4,r2
200202c4:	180b883a 	mov	r5,r3
200202c8:	2021883a 	mov	r16,r4
200202cc:	2823883a 	mov	r17,r5
200202d0:	002020c0 	call	2002020c <rnd>
200202d4:	1009883a 	mov	r4,r2
200202d8:	180b883a 	mov	r5,r3
200202dc:	200d883a 	mov	r6,r4
200202e0:	280f883a 	mov	r7,r5
200202e4:	8009883a 	mov	r4,r16
200202e8:	880b883a 	mov	r5,r17
200202ec:	002491c0 	call	2002491c <__adddf3>
200202f0:	1009883a 	mov	r4,r2
200202f4:	180b883a 	mov	r5,r3
200202f8:	2021883a 	mov	r16,r4
200202fc:	2823883a 	mov	r17,r5
20020300:	002020c0 	call	2002020c <rnd>
20020304:	1009883a 	mov	r4,r2
20020308:	180b883a 	mov	r5,r3
2002030c:	200d883a 	mov	r6,r4
20020310:	280f883a 	mov	r7,r5
20020314:	8009883a 	mov	r4,r16
20020318:	880b883a 	mov	r5,r17
2002031c:	002491c0 	call	2002491c <__adddf3>
20020320:	1009883a 	mov	r4,r2
20020324:	180b883a 	mov	r5,r3
20020328:	2005883a 	mov	r2,r4
2002032c:	2807883a 	mov	r3,r5
20020330:	000d883a 	mov	r6,zero
20020334:	01d00034 	movhi	r7,16384
20020338:	1009883a 	mov	r4,r2
2002033c:	180b883a 	mov	r5,r3
20020340:	00263980 	call	20026398 <__subdf3>
20020344:	1009883a 	mov	r4,r2
20020348:	180b883a 	mov	r5,r3
2002034c:	2005883a 	mov	r2,r4
20020350:	2807883a 	mov	r3,r5
20020354:	01818974 	movhi	r6,1573
20020358:	31b74bc4 	addi	r6,r6,-8913
2002035c:	01cfff34 	movhi	r7,16380
20020360:	39e56044 	addi	r7,r7,-27263
20020364:	1009883a 	mov	r4,r2
20020368:	180b883a 	mov	r5,r3
2002036c:	0025c800 	call	20025c80 <__muldf3>
20020370:	100f883a 	mov	r7,r2
20020374:	1811883a 	mov	r8,r3
20020378:	380b883a 	mov	r5,r7
2002037c:	400d883a 	mov	r6,r8
20020380:	2807883a 	mov	r3,r5
20020384:	3009883a 	mov	r4,r6
}
20020388:	1805883a 	mov	r2,r3
2002038c:	2007883a 	mov	r3,r4
20020390:	e6fffe04 	addi	sp,fp,-8
20020394:	dfc00317 	ldw	ra,12(sp)
20020398:	df000217 	ldw	fp,8(sp)
2002039c:	dc400117 	ldw	r17,4(sp)
200203a0:	dc000017 	ldw	r16,0(sp)
200203a4:	dec00404 	addi	sp,sp,16
200203a8:	f800283a 	ret

200203ac <tanh_g>:
    return 2.0 / (1.0 + exp(-2*x)) - 1.0;
}
#endif
/* tanh_g(y): hyperbolic tangent gradient */
static inline double tanh_g(double y)
{
200203ac:	defffc04 	addi	sp,sp,-16
200203b0:	dfc00315 	stw	ra,12(sp)
200203b4:	df000215 	stw	fp,8(sp)
200203b8:	df000204 	addi	fp,sp,8
200203bc:	e13ffe15 	stw	r4,-8(fp)
200203c0:	e17fff15 	stw	r5,-4(fp)
    return 1.0 - y*y;
200203c4:	e1bffe17 	ldw	r6,-8(fp)
200203c8:	e1ffff17 	ldw	r7,-4(fp)
200203cc:	e13ffe17 	ldw	r4,-8(fp)
200203d0:	e17fff17 	ldw	r5,-4(fp)
200203d4:	0025c800 	call	20025c80 <__muldf3>
200203d8:	1009883a 	mov	r4,r2
200203dc:	180b883a 	mov	r5,r3
200203e0:	2005883a 	mov	r2,r4
200203e4:	2807883a 	mov	r3,r5
200203e8:	100d883a 	mov	r6,r2
200203ec:	180f883a 	mov	r7,r3
200203f0:	0009883a 	mov	r4,zero
200203f4:	014ffc34 	movhi	r5,16368
200203f8:	00263980 	call	20026398 <__subdf3>
200203fc:	100f883a 	mov	r7,r2
20020400:	1811883a 	mov	r8,r3
20020404:	380b883a 	mov	r5,r7
20020408:	400d883a 	mov	r6,r8
2002040c:	2807883a 	mov	r3,r5
20020410:	3009883a 	mov	r4,r6
}
20020414:	1805883a 	mov	r2,r3
20020418:	2007883a 	mov	r3,r4
2002041c:	e037883a 	mov	sp,fp
20020420:	dfc00117 	ldw	ra,4(sp)
20020424:	df000017 	ldw	fp,0(sp)
20020428:	dec00204 	addi	sp,sp,8
2002042c:	f800283a 	ret

20020430 <relu>:

/* relu(x): ReLU */
static inline double relu(double x)
{
20020430:	defffc04 	addi	sp,sp,-16
20020434:	dfc00315 	stw	ra,12(sp)
20020438:	df000215 	stw	fp,8(sp)
2002043c:	df000204 	addi	fp,sp,8
20020440:	e13ffe15 	stw	r4,-8(fp)
20020444:	e17fff15 	stw	r5,-4(fp)
    return (0 < x)? x : 0;
20020448:	000d883a 	mov	r6,zero
2002044c:	000f883a 	mov	r7,zero
20020450:	e13ffe17 	ldw	r4,-8(fp)
20020454:	e17fff17 	ldw	r5,-4(fp)
20020458:	0025ab00 	call	20025ab0 <__gedf2>
2002045c:	0080030e 	bge	zero,r2,2002046c <relu+0x3c>
20020460:	e0bffe17 	ldw	r2,-8(fp)
20020464:	e0ffff17 	ldw	r3,-4(fp)
20020468:	00000206 	br	20020474 <relu+0x44>
2002046c:	0005883a 	mov	r2,zero
20020470:	0007883a 	mov	r3,zero
20020474:	1009883a 	mov	r4,r2
20020478:	180b883a 	mov	r5,r3
}
2002047c:	2005883a 	mov	r2,r4
20020480:	2807883a 	mov	r3,r5
20020484:	e037883a 	mov	sp,fp
20020488:	dfc00117 	ldw	ra,4(sp)
2002048c:	df000017 	ldw	fp,0(sp)
20020490:	dec00204 	addi	sp,sp,8
20020494:	f800283a 	ret

20020498 <relu_g>:
/* relu_g(y): ReLU gradient */
static inline double relu_g(double y)
{
20020498:	defffc04 	addi	sp,sp,-16
2002049c:	dfc00315 	stw	ra,12(sp)
200204a0:	df000215 	stw	fp,8(sp)
200204a4:	df000204 	addi	fp,sp,8
200204a8:	e13ffe15 	stw	r4,-8(fp)
200204ac:	e17fff15 	stw	r5,-4(fp)
    return (0 < y)? 1 : 0;
200204b0:	000d883a 	mov	r6,zero
200204b4:	000f883a 	mov	r7,zero
200204b8:	e13ffe17 	ldw	r4,-8(fp)
200204bc:	e17fff17 	ldw	r5,-4(fp)
200204c0:	0025ab00 	call	20025ab0 <__gedf2>
200204c4:	0080030e 	bge	zero,r2,200204d4 <relu_g+0x3c>
200204c8:	0005883a 	mov	r2,zero
200204cc:	00cffc34 	movhi	r3,16368
200204d0:	00000206 	br	200204dc <relu_g+0x44>
200204d4:	0005883a 	mov	r2,zero
200204d8:	0007883a 	mov	r3,zero
200204dc:	1009883a 	mov	r4,r2
200204e0:	180b883a 	mov	r5,r3
}
200204e4:	2005883a 	mov	r2,r4
200204e8:	2807883a 	mov	r3,r5
200204ec:	e037883a 	mov	sp,fp
200204f0:	dfc00117 	ldw	ra,4(sp)
200204f4:	df000017 	ldw	fp,0(sp)
200204f8:	dec00204 	addi	sp,sp,8
200204fc:	f800283a 	ret

20020500 <Layer_create>:

static Layer* Layer_create(
    Layer* lprev, LayerType ltype,
    int depth, int width, int height,
    int nbiases, int nweights)
{
20020500:	defff904 	addi	sp,sp,-28
20020504:	dfc00615 	stw	ra,24(sp)
20020508:	df000515 	stw	fp,20(sp)
2002050c:	df000504 	addi	fp,sp,20
20020510:	e13ffc15 	stw	r4,-16(fp)
20020514:	e17ffd15 	stw	r5,-12(fp)
20020518:	e1bffe15 	stw	r6,-8(fp)
2002051c:	e1ffff15 	stw	r7,-4(fp)
    Layer* self = (Layer*)calloc(1, sizeof(Layer));
20020520:	01401404 	movi	r5,80
20020524:	01000044 	movi	r4,1
20020528:	0026ed00 	call	20026ed0 <calloc>
2002052c:	e0bffb15 	stw	r2,-20(fp)
    if (self == NULL){
20020530:	e0bffb17 	ldw	r2,-20(fp)
20020534:	1000021e 	bne	r2,zero,20020540 <Layer_create+0x40>
    	return NULL;
20020538:	0005883a 	mov	r2,zero
2002053c:	00009206 	br	20020788 <Layer_create+0x288>
    }

    self->lprev = lprev;
20020540:	e0bffb17 	ldw	r2,-20(fp)
20020544:	e0fffc17 	ldw	r3,-16(fp)
20020548:	10c00115 	stw	r3,4(r2)
    self->lnext = NULL;
2002054c:	e0bffb17 	ldw	r2,-20(fp)
20020550:	10000215 	stw	zero,8(r2)
    self->ltype = ltype;
20020554:	e0bffb17 	ldw	r2,-20(fp)
20020558:	e0fffd17 	ldw	r3,-12(fp)
2002055c:	10c01015 	stw	r3,64(r2)
    self->lid = 0;
20020560:	e0bffb17 	ldw	r2,-20(fp)
20020564:	10000015 	stw	zero,0(r2)
    if (lprev != NULL) {
20020568:	e0bffc17 	ldw	r2,-16(fp)
2002056c:	10001326 	beq	r2,zero,200205bc <Layer_create+0xbc>
        assert (lprev->lnext == NULL);
20020570:	e0bffc17 	ldw	r2,-16(fp)
20020574:	10800217 	ldw	r2,8(r2)
20020578:	10000826 	beq	r2,zero,2002059c <Layer_create+0x9c>
2002057c:	01c800f4 	movhi	r7,8195
20020580:	39d3f004 	addi	r7,r7,20416
20020584:	018800f4 	movhi	r6,8195
20020588:	3194b704 	addi	r6,r6,21212
2002058c:	014017c4 	movi	r5,95
20020590:	010800f4 	movhi	r4,8195
20020594:	2113f604 	addi	r4,r4,20440
20020598:	0026e540 	call	20026e54 <__assert_func>
        lprev->lnext = self;
2002059c:	e0bffc17 	ldw	r2,-16(fp)
200205a0:	e0fffb17 	ldw	r3,-20(fp)
200205a4:	10c00215 	stw	r3,8(r2)
        self->lid = lprev->lid+1;
200205a8:	e0bffc17 	ldw	r2,-16(fp)
200205ac:	10800017 	ldw	r2,0(r2)
200205b0:	10c00044 	addi	r3,r2,1
200205b4:	e0bffb17 	ldw	r2,-20(fp)
200205b8:	10c00015 	stw	r3,0(r2)
    }
    self->depth = depth;
200205bc:	e0bffb17 	ldw	r2,-20(fp)
200205c0:	e0fffe17 	ldw	r3,-8(fp)
200205c4:	10c00315 	stw	r3,12(r2)
    self->width = width;
200205c8:	e0bffb17 	ldw	r2,-20(fp)
200205cc:	e0ffff17 	ldw	r3,-4(fp)
200205d0:	10c00415 	stw	r3,16(r2)
    self->height = height;
200205d4:	e0bffb17 	ldw	r2,-20(fp)
200205d8:	e0c00217 	ldw	r3,8(fp)
200205dc:	10c00515 	stw	r3,20(r2)

    self->nnodes = depth * width * height;
200205e0:	e0fffe17 	ldw	r3,-8(fp)
200205e4:	e0bfff17 	ldw	r2,-4(fp)
200205e8:	1887383a 	mul	r3,r3,r2
200205ec:	e0800217 	ldw	r2,8(fp)
200205f0:	1887383a 	mul	r3,r3,r2
200205f4:	e0bffb17 	ldw	r2,-20(fp)
200205f8:	10c00615 	stw	r3,24(r2)
    printf("\n in line 104 self->nnodes %i",self->nnodes);
200205fc:	e0bffb17 	ldw	r2,-20(fp)
20020600:	10800617 	ldw	r2,24(r2)
20020604:	100b883a 	mov	r5,r2
20020608:	010800f4 	movhi	r4,8195
2002060c:	2113f804 	addi	r4,r4,20448
20020610:	00293a40 	call	200293a4 <printf>
    //self->nnodes = 10;
    self->outputs = (double*)calloc(self->nnodes, sizeof(double));
20020614:	e0bffb17 	ldw	r2,-20(fp)
20020618:	10800617 	ldw	r2,24(r2)
2002061c:	01400204 	movi	r5,8
20020620:	1009883a 	mov	r4,r2
20020624:	0026ed00 	call	20026ed0 <calloc>
20020628:	1007883a 	mov	r3,r2
2002062c:	e0bffb17 	ldw	r2,-20(fp)
20020630:	10c00715 	stw	r3,28(r2)
    printf("\n in line 111 self->outputs %i",self->outputs);
20020634:	e0bffb17 	ldw	r2,-20(fp)
20020638:	10800717 	ldw	r2,28(r2)
2002063c:	100b883a 	mov	r5,r2
20020640:	010800f4 	movhi	r4,8195
20020644:	21140004 	addi	r4,r4,20480
20020648:	00293a40 	call	200293a4 <printf>
    self->gradients = (double*)calloc(self->nnodes, sizeof(double));
2002064c:	e0bffb17 	ldw	r2,-20(fp)
20020650:	10800617 	ldw	r2,24(r2)
20020654:	01400204 	movi	r5,8
20020658:	1009883a 	mov	r4,r2
2002065c:	0026ed00 	call	20026ed0 <calloc>
20020660:	1007883a 	mov	r3,r2
20020664:	e0bffb17 	ldw	r2,-20(fp)
20020668:	10c00815 	stw	r3,32(r2)
    printf("\n in line 111 self->gradients %i",self->gradients);
2002066c:	e0bffb17 	ldw	r2,-20(fp)
20020670:	10800817 	ldw	r2,32(r2)
20020674:	100b883a 	mov	r5,r2
20020678:	010800f4 	movhi	r4,8195
2002067c:	21140804 	addi	r4,r4,20512
20020680:	00293a40 	call	200293a4 <printf>
    self->errors = (double*)calloc(self->nnodes, sizeof(double));
20020684:	e0bffb17 	ldw	r2,-20(fp)
20020688:	10800617 	ldw	r2,24(r2)
2002068c:	01400204 	movi	r5,8
20020690:	1009883a 	mov	r4,r2
20020694:	0026ed00 	call	20026ed0 <calloc>
20020698:	1007883a 	mov	r3,r2
2002069c:	e0bffb17 	ldw	r2,-20(fp)
200206a0:	10c00915 	stw	r3,36(r2)
    printf("\n in line 111 self->errors %i",self->errors);
200206a4:	e0bffb17 	ldw	r2,-20(fp)
200206a8:	10800917 	ldw	r2,36(r2)
200206ac:	100b883a 	mov	r5,r2
200206b0:	010800f4 	movhi	r4,8195
200206b4:	21141104 	addi	r4,r4,20548
200206b8:	00293a40 	call	200293a4 <printf>

    self->nbiases = nbiases;
200206bc:	e0bffb17 	ldw	r2,-20(fp)
200206c0:	e0c00317 	ldw	r3,12(fp)
200206c4:	10c00a15 	stw	r3,40(r2)
    printf("\n in line 111 self->nbiases %i",self->nbiases);
200206c8:	e0bffb17 	ldw	r2,-20(fp)
200206cc:	10800a17 	ldw	r2,40(r2)
200206d0:	100b883a 	mov	r5,r2
200206d4:	010800f4 	movhi	r4,8195
200206d8:	21141904 	addi	r4,r4,20580
200206dc:	00293a40 	call	200293a4 <printf>
    self->biases = (double*)calloc(self->nbiases, sizeof(double));
200206e0:	e0bffb17 	ldw	r2,-20(fp)
200206e4:	10800a17 	ldw	r2,40(r2)
200206e8:	01400204 	movi	r5,8
200206ec:	1009883a 	mov	r4,r2
200206f0:	0026ed00 	call	20026ed0 <calloc>
200206f4:	1007883a 	mov	r3,r2
200206f8:	e0bffb17 	ldw	r2,-20(fp)
200206fc:	10c00b15 	stw	r3,44(r2)
    self->u_biases = (double*)calloc(self->nbiases, sizeof(double));
20020700:	e0bffb17 	ldw	r2,-20(fp)
20020704:	10800a17 	ldw	r2,40(r2)
20020708:	01400204 	movi	r5,8
2002070c:	1009883a 	mov	r4,r2
20020710:	0026ed00 	call	20026ed0 <calloc>
20020714:	1007883a 	mov	r3,r2
20020718:	e0bffb17 	ldw	r2,-20(fp)
2002071c:	10c00c15 	stw	r3,48(r2)

    self->nweights = nweights;
20020720:	e0bffb17 	ldw	r2,-20(fp)
20020724:	e0c00417 	ldw	r3,16(fp)
20020728:	10c00d15 	stw	r3,52(r2)
    printf("\n in line 115 self->nweights %i ",self->nweights);
2002072c:	e0bffb17 	ldw	r2,-20(fp)
20020730:	10800d17 	ldw	r2,52(r2)
20020734:	100b883a 	mov	r5,r2
20020738:	010800f4 	movhi	r4,8195
2002073c:	21142104 	addi	r4,r4,20612
20020740:	00293a40 	call	200293a4 <printf>
    //self->nweights = 5;
    self->weights = (double*)calloc(self->nweights, sizeof(double));
20020744:	e0bffb17 	ldw	r2,-20(fp)
20020748:	10800d17 	ldw	r2,52(r2)
2002074c:	01400204 	movi	r5,8
20020750:	1009883a 	mov	r4,r2
20020754:	0026ed00 	call	20026ed0 <calloc>
20020758:	1007883a 	mov	r3,r2
2002075c:	e0bffb17 	ldw	r2,-20(fp)
20020760:	10c00e15 	stw	r3,56(r2)
    self->u_weights = (double*)calloc(self->nweights, sizeof(double));
20020764:	e0bffb17 	ldw	r2,-20(fp)
20020768:	10800d17 	ldw	r2,52(r2)
2002076c:	01400204 	movi	r5,8
20020770:	1009883a 	mov	r4,r2
20020774:	0026ed00 	call	20026ed0 <calloc>
20020778:	1007883a 	mov	r3,r2
2002077c:	e0bffb17 	ldw	r2,-20(fp)
20020780:	10c00f15 	stw	r3,60(r2)
    //alt_putstr("line 119 \n");

    return self;
20020784:	e0bffb17 	ldw	r2,-20(fp)
}
20020788:	e037883a 	mov	sp,fp
2002078c:	dfc00117 	ldw	ra,4(sp)
20020790:	df000017 	ldw	fp,0(sp)
20020794:	dec00204 	addi	sp,sp,8
20020798:	f800283a 	ret

2002079c <Layer_destroy>:

/* Layer_destroy(self)
   Releases the memory.
*/
void Layer_destroy(Layer* self)
{
2002079c:	defffd04 	addi	sp,sp,-12
200207a0:	dfc00215 	stw	ra,8(sp)
200207a4:	df000115 	stw	fp,4(sp)
200207a8:	df000104 	addi	fp,sp,4
200207ac:	e13fff15 	stw	r4,-4(fp)
    assert (self != NULL);
200207b0:	e0bfff17 	ldw	r2,-4(fp)
200207b4:	1000081e 	bne	r2,zero,200207d8 <Layer_destroy+0x3c>
200207b8:	01c800f4 	movhi	r7,8195
200207bc:	39d42a04 	addi	r7,r7,20648
200207c0:	018800f4 	movhi	r6,8195
200207c4:	3194bb04 	addi	r6,r6,21228
200207c8:	01402184 	movi	r5,134
200207cc:	010800f4 	movhi	r4,8195
200207d0:	2113f604 	addi	r4,r4,20440
200207d4:	0026e540 	call	20026e54 <__assert_func>

    free(self->outputs);
200207d8:	e0bfff17 	ldw	r2,-4(fp)
200207dc:	10800717 	ldw	r2,28(r2)
200207e0:	1009883a 	mov	r4,r2
200207e4:	00288840 	call	20028884 <free>
    free(self->gradients);
200207e8:	e0bfff17 	ldw	r2,-4(fp)
200207ec:	10800817 	ldw	r2,32(r2)
200207f0:	1009883a 	mov	r4,r2
200207f4:	00288840 	call	20028884 <free>
    free(self->errors);
200207f8:	e0bfff17 	ldw	r2,-4(fp)
200207fc:	10800917 	ldw	r2,36(r2)
20020800:	1009883a 	mov	r4,r2
20020804:	00288840 	call	20028884 <free>

    free(self->biases);
20020808:	e0bfff17 	ldw	r2,-4(fp)
2002080c:	10800b17 	ldw	r2,44(r2)
20020810:	1009883a 	mov	r4,r2
20020814:	00288840 	call	20028884 <free>
    free(self->u_biases);
20020818:	e0bfff17 	ldw	r2,-4(fp)
2002081c:	10800c17 	ldw	r2,48(r2)
20020820:	1009883a 	mov	r4,r2
20020824:	00288840 	call	20028884 <free>
    free(self->weights);
20020828:	e0bfff17 	ldw	r2,-4(fp)
2002082c:	10800e17 	ldw	r2,56(r2)
20020830:	1009883a 	mov	r4,r2
20020834:	00288840 	call	20028884 <free>
    free(self->u_weights);
20020838:	e0bfff17 	ldw	r2,-4(fp)
2002083c:	10800f17 	ldw	r2,60(r2)
20020840:	1009883a 	mov	r4,r2
20020844:	00288840 	call	20028884 <free>

    free(self);
20020848:	e13fff17 	ldw	r4,-4(fp)
2002084c:	00288840 	call	20028884 <free>
}
20020850:	0001883a 	nop
20020854:	e037883a 	mov	sp,fp
20020858:	dfc00117 	ldw	ra,4(sp)
2002085c:	df000017 	ldw	fp,0(sp)
20020860:	dec00204 	addi	sp,sp,8
20020864:	f800283a 	ret

20020868 <Layer_dump>:

/* Layer_dump(self, fp)
   Shows the debug output.
*/
void Layer_dump(const Layer* self, FILE* fp)
{
20020868:	deffee04 	addi	sp,sp,-72
2002086c:	dfc01115 	stw	ra,68(sp)
20020870:	df001015 	stw	fp,64(sp)
20020874:	df001004 	addi	fp,sp,64
20020878:	e13ffe15 	stw	r4,-8(fp)
2002087c:	e17fff15 	stw	r5,-4(fp)
    assert (self != NULL);
20020880:	e0bffe17 	ldw	r2,-8(fp)
20020884:	1000081e 	bne	r2,zero,200208a8 <Layer_dump+0x40>
20020888:	01c800f4 	movhi	r7,8195
2002088c:	39d42a04 	addi	r7,r7,20648
20020890:	018800f4 	movhi	r6,8195
20020894:	3194bf04 	addi	r6,r6,21244
20020898:	01402644 	movi	r5,153
2002089c:	010800f4 	movhi	r4,8195
200208a0:	2113f604 	addi	r4,r4,20440
200208a4:	0026e540 	call	20026e54 <__assert_func>
    Layer* lprev = self->lprev;
200208a8:	e0bffe17 	ldw	r2,-8(fp)
200208ac:	10800117 	ldw	r2,4(r2)
200208b0:	e0bffd15 	stw	r2,-12(fp)
    fprintf(fp, "Layer%d ", self->lid);
200208b4:	e0bffe17 	ldw	r2,-8(fp)
200208b8:	10800017 	ldw	r2,0(r2)
200208bc:	100d883a 	mov	r6,r2
200208c0:	014800f4 	movhi	r5,8195
200208c4:	29542e04 	addi	r5,r5,20664
200208c8:	e13fff17 	ldw	r4,-4(fp)
200208cc:	00278980 	call	20027898 <fprintf>
    if (lprev != NULL) {
200208d0:	e0bffd17 	ldw	r2,-12(fp)
200208d4:	10000726 	beq	r2,zero,200208f4 <Layer_dump+0x8c>
        fprintf(fp, "(lprev=Layer%d) ", lprev->lid);
200208d8:	e0bffd17 	ldw	r2,-12(fp)
200208dc:	10800017 	ldw	r2,0(r2)
200208e0:	100d883a 	mov	r6,r2
200208e4:	014800f4 	movhi	r5,8195
200208e8:	29543104 	addi	r5,r5,20676
200208ec:	e13fff17 	ldw	r4,-4(fp)
200208f0:	00278980 	call	20027898 <fprintf>
    }
    fprintf(fp, "shape=(%d,%d,%d), nodes=%d\n",
200208f4:	e0bffe17 	ldw	r2,-8(fp)
200208f8:	11000317 	ldw	r4,12(r2)
200208fc:	e0bffe17 	ldw	r2,-8(fp)
20020900:	11400417 	ldw	r5,16(r2)
20020904:	e0bffe17 	ldw	r2,-8(fp)
20020908:	10800517 	ldw	r2,20(r2)
2002090c:	e0fffe17 	ldw	r3,-8(fp)
20020910:	18c00617 	ldw	r3,24(r3)
20020914:	d8c00115 	stw	r3,4(sp)
20020918:	d8800015 	stw	r2,0(sp)
2002091c:	280f883a 	mov	r7,r5
20020920:	200d883a 	mov	r6,r4
20020924:	014800f4 	movhi	r5,8195
20020928:	29543604 	addi	r5,r5,20696
2002092c:	e13fff17 	ldw	r4,-4(fp)
20020930:	00278980 	call	20027898 <fprintf>
            self->depth, self->width, self->height, self->nnodes);
    {
        int i = 0;
20020934:	e03ff215 	stw	zero,-56(fp)
        for (int z = 0; z < self->depth; z++) {
20020938:	e03ff315 	stw	zero,-52(fp)
2002093c:	00003506 	br	20020a14 <Layer_dump+0x1ac>
            fprintf(fp, "  %d:\n", z);
20020940:	e1bff317 	ldw	r6,-52(fp)
20020944:	014800f4 	movhi	r5,8195
20020948:	29543d04 	addi	r5,r5,20724
2002094c:	e13fff17 	ldw	r4,-4(fp)
20020950:	00278980 	call	20027898 <fprintf>
            for (int y = 0; y < self->height; y++) {
20020954:	e03ff415 	stw	zero,-48(fp)
20020958:	00002706 	br	200209f8 <Layer_dump+0x190>
                fprintf(fp, "    [");
2002095c:	e1ffff17 	ldw	r7,-4(fp)
20020960:	01800144 	movi	r6,5
20020964:	01400044 	movi	r5,1
20020968:	010800f4 	movhi	r4,8195
2002096c:	21143f04 	addi	r4,r4,20732
20020970:	00286800 	call	20028680 <fwrite>
                for (int x = 0; x < self->width; x++) {
20020974:	e03ff515 	stw	zero,-44(fp)
20020978:	00001206 	br	200209c4 <Layer_dump+0x15c>
                    fprintf(fp, " %.4f", self->outputs[i++]);
2002097c:	e0bffe17 	ldw	r2,-8(fp)
20020980:	10c00717 	ldw	r3,28(r2)
20020984:	e0bff217 	ldw	r2,-56(fp)
20020988:	11000044 	addi	r4,r2,1
2002098c:	e13ff215 	stw	r4,-56(fp)
20020990:	100490fa 	slli	r2,r2,3
20020994:	1889883a 	add	r4,r3,r2
20020998:	20800017 	ldw	r2,0(r4)
2002099c:	20c00117 	ldw	r3,4(r4)
200209a0:	100d883a 	mov	r6,r2
200209a4:	180f883a 	mov	r7,r3
200209a8:	014800f4 	movhi	r5,8195
200209ac:	29544104 	addi	r5,r5,20740
200209b0:	e13fff17 	ldw	r4,-4(fp)
200209b4:	00278980 	call	20027898 <fprintf>
        int i = 0;
        for (int z = 0; z < self->depth; z++) {
            fprintf(fp, "  %d:\n", z);
            for (int y = 0; y < self->height; y++) {
                fprintf(fp, "    [");
                for (int x = 0; x < self->width; x++) {
200209b8:	e0bff517 	ldw	r2,-44(fp)
200209bc:	10800044 	addi	r2,r2,1
200209c0:	e0bff515 	stw	r2,-44(fp)
200209c4:	e0bffe17 	ldw	r2,-8(fp)
200209c8:	10800417 	ldw	r2,16(r2)
200209cc:	e0fff517 	ldw	r3,-44(fp)
200209d0:	18bfea16 	blt	r3,r2,2002097c <_gp+0xfffe141c>
                    fprintf(fp, " %.4f", self->outputs[i++]);
                }
                fprintf(fp, "]\n");
200209d4:	e1ffff17 	ldw	r7,-4(fp)
200209d8:	01800084 	movi	r6,2
200209dc:	01400044 	movi	r5,1
200209e0:	010800f4 	movhi	r4,8195
200209e4:	21144304 	addi	r4,r4,20748
200209e8:	00286800 	call	20028680 <fwrite>
            self->depth, self->width, self->height, self->nnodes);
    {
        int i = 0;
        for (int z = 0; z < self->depth; z++) {
            fprintf(fp, "  %d:\n", z);
            for (int y = 0; y < self->height; y++) {
200209ec:	e0bff417 	ldw	r2,-48(fp)
200209f0:	10800044 	addi	r2,r2,1
200209f4:	e0bff415 	stw	r2,-48(fp)
200209f8:	e0bffe17 	ldw	r2,-8(fp)
200209fc:	10800517 	ldw	r2,20(r2)
20020a00:	e0fff417 	ldw	r3,-48(fp)
20020a04:	18bfd516 	blt	r3,r2,2002095c <_gp+0xfffe13fc>
    }
    fprintf(fp, "shape=(%d,%d,%d), nodes=%d\n",
            self->depth, self->width, self->height, self->nnodes);
    {
        int i = 0;
        for (int z = 0; z < self->depth; z++) {
20020a08:	e0bff317 	ldw	r2,-52(fp)
20020a0c:	10800044 	addi	r2,r2,1
20020a10:	e0bff315 	stw	r2,-52(fp)
20020a14:	e0bffe17 	ldw	r2,-8(fp)
20020a18:	10800317 	ldw	r2,12(r2)
20020a1c:	e0fff317 	ldw	r3,-52(fp)
20020a20:	18bfc716 	blt	r3,r2,20020940 <_gp+0xfffe13e0>
                fprintf(fp, "]\n");
            }
        }
    }

    switch (self->ltype) {
20020a24:	e0bffe17 	ldw	r2,-8(fp)
20020a28:	10801017 	ldw	r2,64(r2)
20020a2c:	10c00060 	cmpeqi	r3,r2,1
20020a30:	1800031e 	bne	r3,zero,20020a40 <Layer_dump+0x1d8>
20020a34:	108000a0 	cmpeqi	r2,r2,2
20020a38:	1000681e 	bne	r2,zero,20020bdc <Layer_dump+0x374>
            }
        }
        break;

    default:
        break;
20020a3c:	0000b806 	br	20020d20 <Layer_dump+0x4b8>
    }

    switch (self->ltype) {
    case LAYER_FULL:
        /* Fully connected layer. */
        assert (lprev != NULL);
20020a40:	e0bffd17 	ldw	r2,-12(fp)
20020a44:	1000081e 	bne	r2,zero,20020a68 <Layer_dump+0x200>
20020a48:	01c800f4 	movhi	r7,8195
20020a4c:	39d44404 	addi	r7,r7,20752
20020a50:	018800f4 	movhi	r6,8195
20020a54:	3194bf04 	addi	r6,r6,21244
20020a58:	01402c84 	movi	r5,178
20020a5c:	010800f4 	movhi	r4,8195
20020a60:	2113f604 	addi	r4,r4,20440
20020a64:	0026e540 	call	20026e54 <__assert_func>
        fprintf(fp, "  biases = [");
20020a68:	e1ffff17 	ldw	r7,-4(fp)
20020a6c:	01800304 	movi	r6,12
20020a70:	01400044 	movi	r5,1
20020a74:	010800f4 	movhi	r4,8195
20020a78:	21144804 	addi	r4,r4,20768
20020a7c:	00286800 	call	20028680 <fwrite>
        for (int i = 0; i < self->nnodes; i++) {
20020a80:	e03ff615 	stw	zero,-40(fp)
20020a84:	00001006 	br	20020ac8 <Layer_dump+0x260>
            fprintf(fp, " %.4f", self->biases[i]);
20020a88:	e0bffe17 	ldw	r2,-8(fp)
20020a8c:	10c00b17 	ldw	r3,44(r2)
20020a90:	e0bff617 	ldw	r2,-40(fp)
20020a94:	100490fa 	slli	r2,r2,3
20020a98:	1889883a 	add	r4,r3,r2
20020a9c:	20800017 	ldw	r2,0(r4)
20020aa0:	20c00117 	ldw	r3,4(r4)
20020aa4:	100d883a 	mov	r6,r2
20020aa8:	180f883a 	mov	r7,r3
20020aac:	014800f4 	movhi	r5,8195
20020ab0:	29544104 	addi	r5,r5,20740
20020ab4:	e13fff17 	ldw	r4,-4(fp)
20020ab8:	00278980 	call	20027898 <fprintf>
    switch (self->ltype) {
    case LAYER_FULL:
        /* Fully connected layer. */
        assert (lprev != NULL);
        fprintf(fp, "  biases = [");
        for (int i = 0; i < self->nnodes; i++) {
20020abc:	e0bff617 	ldw	r2,-40(fp)
20020ac0:	10800044 	addi	r2,r2,1
20020ac4:	e0bff615 	stw	r2,-40(fp)
20020ac8:	e0bffe17 	ldw	r2,-8(fp)
20020acc:	10800617 	ldw	r2,24(r2)
20020ad0:	e0fff617 	ldw	r3,-40(fp)
20020ad4:	18bfec16 	blt	r3,r2,20020a88 <_gp+0xfffe1528>
            fprintf(fp, " %.4f", self->biases[i]);
        }
        fprintf(fp, "]\n");
20020ad8:	e1ffff17 	ldw	r7,-4(fp)
20020adc:	01800084 	movi	r6,2
20020ae0:	01400044 	movi	r5,1
20020ae4:	010800f4 	movhi	r4,8195
20020ae8:	21144304 	addi	r4,r4,20748
20020aec:	00286800 	call	20028680 <fwrite>
        fprintf(fp, "  weights = [\n");
20020af0:	e1ffff17 	ldw	r7,-4(fp)
20020af4:	01800384 	movi	r6,14
20020af8:	01400044 	movi	r5,1
20020afc:	010800f4 	movhi	r4,8195
20020b00:	21144c04 	addi	r4,r4,20784
20020b04:	00286800 	call	20028680 <fwrite>
        {
            int k = 0;
20020b08:	e03ff715 	stw	zero,-36(fp)
            for (int i = 0; i < self->nnodes; i++) {
20020b0c:	e03ff815 	stw	zero,-32(fp)
20020b10:	00002706 	br	20020bb0 <Layer_dump+0x348>
                fprintf(fp, "    [");
20020b14:	e1ffff17 	ldw	r7,-4(fp)
20020b18:	01800144 	movi	r6,5
20020b1c:	01400044 	movi	r5,1
20020b20:	010800f4 	movhi	r4,8195
20020b24:	21143f04 	addi	r4,r4,20732
20020b28:	00286800 	call	20028680 <fwrite>
                for (int j = 0; j < lprev->nnodes; j++) {
20020b2c:	e03ff915 	stw	zero,-28(fp)
20020b30:	00001206 	br	20020b7c <Layer_dump+0x314>
                    fprintf(fp, " %.4f", self->weights[k++]);
20020b34:	e0bffe17 	ldw	r2,-8(fp)
20020b38:	10c00e17 	ldw	r3,56(r2)
20020b3c:	e0bff717 	ldw	r2,-36(fp)
20020b40:	11000044 	addi	r4,r2,1
20020b44:	e13ff715 	stw	r4,-36(fp)
20020b48:	100490fa 	slli	r2,r2,3
20020b4c:	1889883a 	add	r4,r3,r2
20020b50:	20800017 	ldw	r2,0(r4)
20020b54:	20c00117 	ldw	r3,4(r4)
20020b58:	100d883a 	mov	r6,r2
20020b5c:	180f883a 	mov	r7,r3
20020b60:	014800f4 	movhi	r5,8195
20020b64:	29544104 	addi	r5,r5,20740
20020b68:	e13fff17 	ldw	r4,-4(fp)
20020b6c:	00278980 	call	20027898 <fprintf>
        fprintf(fp, "  weights = [\n");
        {
            int k = 0;
            for (int i = 0; i < self->nnodes; i++) {
                fprintf(fp, "    [");
                for (int j = 0; j < lprev->nnodes; j++) {
20020b70:	e0bff917 	ldw	r2,-28(fp)
20020b74:	10800044 	addi	r2,r2,1
20020b78:	e0bff915 	stw	r2,-28(fp)
20020b7c:	e0bffd17 	ldw	r2,-12(fp)
20020b80:	10800617 	ldw	r2,24(r2)
20020b84:	e0fff917 	ldw	r3,-28(fp)
20020b88:	18bfea16 	blt	r3,r2,20020b34 <_gp+0xfffe15d4>
                    fprintf(fp, " %.4f", self->weights[k++]);
                }
                fprintf(fp, "]\n");
20020b8c:	e1ffff17 	ldw	r7,-4(fp)
20020b90:	01800084 	movi	r6,2
20020b94:	01400044 	movi	r5,1
20020b98:	010800f4 	movhi	r4,8195
20020b9c:	21144304 	addi	r4,r4,20748
20020ba0:	00286800 	call	20028680 <fwrite>
        }
        fprintf(fp, "]\n");
        fprintf(fp, "  weights = [\n");
        {
            int k = 0;
            for (int i = 0; i < self->nnodes; i++) {
20020ba4:	e0bff817 	ldw	r2,-32(fp)
20020ba8:	10800044 	addi	r2,r2,1
20020bac:	e0bff815 	stw	r2,-32(fp)
20020bb0:	e0bffe17 	ldw	r2,-8(fp)
20020bb4:	10800617 	ldw	r2,24(r2)
20020bb8:	e0fff817 	ldw	r3,-32(fp)
20020bbc:	18bfd516 	blt	r3,r2,20020b14 <_gp+0xfffe15b4>
                    fprintf(fp, " %.4f", self->weights[k++]);
                }
                fprintf(fp, "]\n");
            }
        }
        fprintf(fp, "  ]\n");
20020bc0:	e1ffff17 	ldw	r7,-4(fp)
20020bc4:	01800104 	movi	r6,4
20020bc8:	01400044 	movi	r5,1
20020bcc:	010800f4 	movhi	r4,8195
20020bd0:	21145004 	addi	r4,r4,20800
20020bd4:	00286800 	call	20028680 <fwrite>
        break;
20020bd8:	00005106 	br	20020d20 <Layer_dump+0x4b8>

    case LAYER_CONV:
        /* Convolutional layer. */
        assert (lprev != NULL);
20020bdc:	e0bffd17 	ldw	r2,-12(fp)
20020be0:	1000081e 	bne	r2,zero,20020c04 <Layer_dump+0x39c>
20020be4:	01c800f4 	movhi	r7,8195
20020be8:	39d44404 	addi	r7,r7,20752
20020bec:	018800f4 	movhi	r6,8195
20020bf0:	3194bf04 	addi	r6,r6,21244
20020bf4:	01403204 	movi	r5,200
20020bf8:	010800f4 	movhi	r4,8195
20020bfc:	2113f604 	addi	r4,r4,20440
20020c00:	0026e540 	call	20026e54 <__assert_func>
        fprintf(fp, "  stride=%d, kernsize=%d\n",
20020c04:	e0bffe17 	ldw	r2,-8(fp)
20020c08:	10c01317 	ldw	r3,76(r2)
20020c0c:	e0bffe17 	ldw	r2,-8(fp)
20020c10:	10801117 	ldw	r2,68(r2)
20020c14:	100f883a 	mov	r7,r2
20020c18:	180d883a 	mov	r6,r3
20020c1c:	014800f4 	movhi	r5,8195
20020c20:	29545204 	addi	r5,r5,20808
20020c24:	e13fff17 	ldw	r4,-4(fp)
20020c28:	00278980 	call	20027898 <fprintf>
                self->conv.stride, self->conv.kernsize);
        {
            int k = 0;
20020c2c:	e03ffa15 	stw	zero,-24(fp)
            for (int z = 0; z < self->depth; z++) {
20020c30:	e03ffb15 	stw	zero,-20(fp)
20020c34:	00003506 	br	20020d0c <Layer_dump+0x4a4>
                fprintf(fp, "  %d: bias=%.4f, weights = [", z, self->biases[z]);
20020c38:	e0bffe17 	ldw	r2,-8(fp)
20020c3c:	10c00b17 	ldw	r3,44(r2)
20020c40:	e0bffb17 	ldw	r2,-20(fp)
20020c44:	100490fa 	slli	r2,r2,3
20020c48:	1889883a 	add	r4,r3,r2
20020c4c:	20800017 	ldw	r2,0(r4)
20020c50:	20c00117 	ldw	r3,4(r4)
20020c54:	d8c00015 	stw	r3,0(sp)
20020c58:	100f883a 	mov	r7,r2
20020c5c:	e1bffb17 	ldw	r6,-20(fp)
20020c60:	014800f4 	movhi	r5,8195
20020c64:	29545904 	addi	r5,r5,20836
20020c68:	e13fff17 	ldw	r4,-4(fp)
20020c6c:	00278980 	call	20027898 <fprintf>
                for (int j = 0; j < lprev->depth * self->conv.kernsize * self->conv.kernsize; j++) {
20020c70:	e03ffc15 	stw	zero,-16(fp)
20020c74:	00001206 	br	20020cc0 <Layer_dump+0x458>
                    fprintf(fp, " %.4f", self->weights[k++]);
20020c78:	e0bffe17 	ldw	r2,-8(fp)
20020c7c:	10c00e17 	ldw	r3,56(r2)
20020c80:	e0bffa17 	ldw	r2,-24(fp)
20020c84:	11000044 	addi	r4,r2,1
20020c88:	e13ffa15 	stw	r4,-24(fp)
20020c8c:	100490fa 	slli	r2,r2,3
20020c90:	1889883a 	add	r4,r3,r2
20020c94:	20800017 	ldw	r2,0(r4)
20020c98:	20c00117 	ldw	r3,4(r4)
20020c9c:	100d883a 	mov	r6,r2
20020ca0:	180f883a 	mov	r7,r3
20020ca4:	014800f4 	movhi	r5,8195
20020ca8:	29544104 	addi	r5,r5,20740
20020cac:	e13fff17 	ldw	r4,-4(fp)
20020cb0:	00278980 	call	20027898 <fprintf>
                self->conv.stride, self->conv.kernsize);
        {
            int k = 0;
            for (int z = 0; z < self->depth; z++) {
                fprintf(fp, "  %d: bias=%.4f, weights = [", z, self->biases[z]);
                for (int j = 0; j < lprev->depth * self->conv.kernsize * self->conv.kernsize; j++) {
20020cb4:	e0bffc17 	ldw	r2,-16(fp)
20020cb8:	10800044 	addi	r2,r2,1
20020cbc:	e0bffc15 	stw	r2,-16(fp)
20020cc0:	e0bffd17 	ldw	r2,-12(fp)
20020cc4:	10c00317 	ldw	r3,12(r2)
20020cc8:	e0bffe17 	ldw	r2,-8(fp)
20020ccc:	10801117 	ldw	r2,68(r2)
20020cd0:	1887383a 	mul	r3,r3,r2
20020cd4:	e0bffe17 	ldw	r2,-8(fp)
20020cd8:	10801117 	ldw	r2,68(r2)
20020cdc:	1885383a 	mul	r2,r3,r2
20020ce0:	e0fffc17 	ldw	r3,-16(fp)
20020ce4:	18bfe416 	blt	r3,r2,20020c78 <_gp+0xfffe1718>
                    fprintf(fp, " %.4f", self->weights[k++]);
                }
                fprintf(fp, "]\n");
20020ce8:	e1ffff17 	ldw	r7,-4(fp)
20020cec:	01800084 	movi	r6,2
20020cf0:	01400044 	movi	r5,1
20020cf4:	010800f4 	movhi	r4,8195
20020cf8:	21144304 	addi	r4,r4,20748
20020cfc:	00286800 	call	20028680 <fwrite>
        assert (lprev != NULL);
        fprintf(fp, "  stride=%d, kernsize=%d\n",
                self->conv.stride, self->conv.kernsize);
        {
            int k = 0;
            for (int z = 0; z < self->depth; z++) {
20020d00:	e0bffb17 	ldw	r2,-20(fp)
20020d04:	10800044 	addi	r2,r2,1
20020d08:	e0bffb15 	stw	r2,-20(fp)
20020d0c:	e0bffe17 	ldw	r2,-8(fp)
20020d10:	10800317 	ldw	r2,12(r2)
20020d14:	e0fffb17 	ldw	r3,-20(fp)
20020d18:	18bfc716 	blt	r3,r2,20020c38 <_gp+0xfffe16d8>
                    fprintf(fp, " %.4f", self->weights[k++]);
                }
                fprintf(fp, "]\n");
            }
        }
        break;
20020d1c:	0001883a 	nop

    default:
        break;
    }
}
20020d20:	0001883a 	nop
20020d24:	e037883a 	mov	sp,fp
20020d28:	dfc00117 	ldw	ra,4(sp)
20020d2c:	df000017 	ldw	fp,0(sp)
20020d30:	dec00204 	addi	sp,sp,8
20020d34:	f800283a 	ret

20020d38 <Layer_feedForw_full>:

/* Layer_feedForw_full(self)
   Performs feed forward updates.
*/
static void Layer_feedForw_full(Layer* self)
{
20020d38:	deffe404 	addi	sp,sp,-112
20020d3c:	dfc01b15 	stw	ra,108(sp)
20020d40:	df001a15 	stw	fp,104(sp)
20020d44:	dc001915 	stw	r16,100(sp)
20020d48:	df001a04 	addi	fp,sp,104
20020d4c:	e13ffe15 	stw	r4,-8(fp)
    assert (self->ltype == LAYER_FULL);
20020d50:	e0bffe17 	ldw	r2,-8(fp)
20020d54:	10801017 	ldw	r2,64(r2)
20020d58:	10800060 	cmpeqi	r2,r2,1
20020d5c:	1000081e 	bne	r2,zero,20020d80 <Layer_feedForw_full+0x48>
20020d60:	01c800f4 	movhi	r7,8195
20020d64:	39d46104 	addi	r7,r7,20868
20020d68:	018800f4 	movhi	r6,8195
20020d6c:	3194c204 	addi	r6,r6,21256
20020d70:	01403844 	movi	r5,225
20020d74:	010800f4 	movhi	r4,8195
20020d78:	2113f604 	addi	r4,r4,20440
20020d7c:	0026e540 	call	20026e54 <__assert_func>
    assert (self->lprev != NULL);
20020d80:	e0bffe17 	ldw	r2,-8(fp)
20020d84:	10800117 	ldw	r2,4(r2)
20020d88:	1000081e 	bne	r2,zero,20020dac <Layer_feedForw_full+0x74>
20020d8c:	01c800f4 	movhi	r7,8195
20020d90:	39d46804 	addi	r7,r7,20896
20020d94:	018800f4 	movhi	r6,8195
20020d98:	3194c204 	addi	r6,r6,21256
20020d9c:	01403884 	movi	r5,226
20020da0:	010800f4 	movhi	r4,8195
20020da4:	2113f604 	addi	r4,r4,20440
20020da8:	0026e540 	call	20026e54 <__assert_func>
    Layer* lprev = self->lprev;
20020dac:	e0bffe17 	ldw	r2,-8(fp)
20020db0:	10800117 	ldw	r2,4(r2)
20020db4:	e0bff315 	stw	r2,-52(fp)

    int k = 0;
20020db8:	e03fe615 	stw	zero,-104(fp)
    for (int i = 0; i < self->nnodes; i++) {
20020dbc:	e03fe715 	stw	zero,-100(fp)
20020dc0:	00004006 	br	20020ec4 <Layer_feedForw_full+0x18c>
        /* Compute Y = (W * X + B) without activation function. */
        double x = self->biases[i];
20020dc4:	e0bffe17 	ldw	r2,-8(fp)
20020dc8:	10c00b17 	ldw	r3,44(r2)
20020dcc:	e0bfe717 	ldw	r2,-100(fp)
20020dd0:	100490fa 	slli	r2,r2,3
20020dd4:	1885883a 	add	r2,r3,r2
20020dd8:	10c00017 	ldw	r3,0(r2)
20020ddc:	e0ffe815 	stw	r3,-96(fp)
20020de0:	10800117 	ldw	r2,4(r2)
20020de4:	e0bfe915 	stw	r2,-92(fp)
        for (int j = 0; j < lprev->nnodes; j++) {
20020de8:	e03fea15 	stw	zero,-88(fp)
20020dec:	00002506 	br	20020e84 <Layer_feedForw_full+0x14c>
            x += (lprev->outputs[j] * self->weights[k++]);
20020df0:	e0bff317 	ldw	r2,-52(fp)
20020df4:	10c00717 	ldw	r3,28(r2)
20020df8:	e0bfea17 	ldw	r2,-88(fp)
20020dfc:	100490fa 	slli	r2,r2,3
20020e00:	1889883a 	add	r4,r3,r2
20020e04:	20800017 	ldw	r2,0(r4)
20020e08:	20c00117 	ldw	r3,4(r4)
20020e0c:	e13ffe17 	ldw	r4,-8(fp)
20020e10:	21400e17 	ldw	r5,56(r4)
20020e14:	e13fe617 	ldw	r4,-104(fp)
20020e18:	21800044 	addi	r6,r4,1
20020e1c:	e1bfe615 	stw	r6,-104(fp)
20020e20:	200890fa 	slli	r4,r4,3
20020e24:	290d883a 	add	r6,r5,r4
20020e28:	31000017 	ldw	r4,0(r6)
20020e2c:	31400117 	ldw	r5,4(r6)
20020e30:	200d883a 	mov	r6,r4
20020e34:	280f883a 	mov	r7,r5
20020e38:	1009883a 	mov	r4,r2
20020e3c:	180b883a 	mov	r5,r3
20020e40:	0025c800 	call	20025c80 <__muldf3>
20020e44:	1009883a 	mov	r4,r2
20020e48:	180b883a 	mov	r5,r3
20020e4c:	2005883a 	mov	r2,r4
20020e50:	2807883a 	mov	r3,r5
20020e54:	100d883a 	mov	r6,r2
20020e58:	180f883a 	mov	r7,r3
20020e5c:	e13fe817 	ldw	r4,-96(fp)
20020e60:	e17fe917 	ldw	r5,-92(fp)
20020e64:	002491c0 	call	2002491c <__adddf3>
20020e68:	1009883a 	mov	r4,r2
20020e6c:	180b883a 	mov	r5,r3
20020e70:	e13fe815 	stw	r4,-96(fp)
20020e74:	e17fe915 	stw	r5,-92(fp)

    int k = 0;
    for (int i = 0; i < self->nnodes; i++) {
        /* Compute Y = (W * X + B) without activation function. */
        double x = self->biases[i];
        for (int j = 0; j < lprev->nnodes; j++) {
20020e78:	e0bfea17 	ldw	r2,-88(fp)
20020e7c:	10800044 	addi	r2,r2,1
20020e80:	e0bfea15 	stw	r2,-88(fp)
20020e84:	e0bff317 	ldw	r2,-52(fp)
20020e88:	10800617 	ldw	r2,24(r2)
20020e8c:	e0ffea17 	ldw	r3,-88(fp)
20020e90:	18bfd716 	blt	r3,r2,20020df0 <_gp+0xfffe1890>
            x += (lprev->outputs[j] * self->weights[k++]);
        }
        self->outputs[i] = x;
20020e94:	e0bffe17 	ldw	r2,-8(fp)
20020e98:	10c00717 	ldw	r3,28(r2)
20020e9c:	e0bfe717 	ldw	r2,-100(fp)
20020ea0:	100490fa 	slli	r2,r2,3
20020ea4:	1885883a 	add	r2,r3,r2
20020ea8:	e0ffe817 	ldw	r3,-96(fp)
20020eac:	10c00015 	stw	r3,0(r2)
20020eb0:	e0ffe917 	ldw	r3,-92(fp)
20020eb4:	10c00115 	stw	r3,4(r2)
    assert (self->ltype == LAYER_FULL);
    assert (self->lprev != NULL);
    Layer* lprev = self->lprev;

    int k = 0;
    for (int i = 0; i < self->nnodes; i++) {
20020eb8:	e0bfe717 	ldw	r2,-100(fp)
20020ebc:	10800044 	addi	r2,r2,1
20020ec0:	e0bfe715 	stw	r2,-100(fp)
20020ec4:	e0bffe17 	ldw	r2,-8(fp)
20020ec8:	10800617 	ldw	r2,24(r2)
20020ecc:	e0ffe717 	ldw	r3,-100(fp)
20020ed0:	18bfbc16 	blt	r3,r2,20020dc4 <_gp+0xfffe1864>
            x += (lprev->outputs[j] * self->weights[k++]);
        }
        self->outputs[i] = x;
    }

    if (self->lnext == NULL) {
20020ed4:	e0bffe17 	ldw	r2,-8(fp)
20020ed8:	10800217 	ldw	r2,8(r2)
20020edc:	10007c1e 	bne	r2,zero,200210d0 <Layer_feedForw_full+0x398>
        /* Last layer - use Softmax. */
        double m = -1;
20020ee0:	e03feb15 	stw	zero,-84(fp)
20020ee4:	00affc34 	movhi	r2,49136
20020ee8:	e0bfec15 	stw	r2,-80(fp)
        for (int i = 0; i < self->nnodes; i++) {
20020eec:	e03fed15 	stw	zero,-76(fp)
20020ef0:	00001606 	br	20020f4c <Layer_feedForw_full+0x214>
            double x = self->outputs[i];
20020ef4:	e0bffe17 	ldw	r2,-8(fp)
20020ef8:	10c00717 	ldw	r3,28(r2)
20020efc:	e0bfed17 	ldw	r2,-76(fp)
20020f00:	100490fa 	slli	r2,r2,3
20020f04:	1885883a 	add	r2,r3,r2
20020f08:	10c00017 	ldw	r3,0(r2)
20020f0c:	e0fff415 	stw	r3,-48(fp)
20020f10:	10800117 	ldw	r2,4(r2)
20020f14:	e0bff515 	stw	r2,-44(fp)
            if (m < x) { m = x; }
20020f18:	e1bff417 	ldw	r6,-48(fp)
20020f1c:	e1fff517 	ldw	r7,-44(fp)
20020f20:	e13feb17 	ldw	r4,-84(fp)
20020f24:	e17fec17 	ldw	r5,-80(fp)
20020f28:	0025b8c0 	call	20025b8c <__ledf2>
20020f2c:	1000040e 	bge	r2,zero,20020f40 <Layer_feedForw_full+0x208>
20020f30:	e0bff417 	ldw	r2,-48(fp)
20020f34:	e0bfeb15 	stw	r2,-84(fp)
20020f38:	e0bff517 	ldw	r2,-44(fp)
20020f3c:	e0bfec15 	stw	r2,-80(fp)
    }

    if (self->lnext == NULL) {
        /* Last layer - use Softmax. */
        double m = -1;
        for (int i = 0; i < self->nnodes; i++) {
20020f40:	e0bfed17 	ldw	r2,-76(fp)
20020f44:	10800044 	addi	r2,r2,1
20020f48:	e0bfed15 	stw	r2,-76(fp)
20020f4c:	e0bffe17 	ldw	r2,-8(fp)
20020f50:	10800617 	ldw	r2,24(r2)
20020f54:	e0ffed17 	ldw	r3,-76(fp)
20020f58:	18bfe616 	blt	r3,r2,20020ef4 <_gp+0xfffe1994>
            double x = self->outputs[i];
            if (m < x) { m = x; }
        }
        double t = 0;
20020f5c:	e03fee15 	stw	zero,-72(fp)
20020f60:	e03fef15 	stw	zero,-68(fp)
        for (int i = 0; i < self->nnodes; i++) {
20020f64:	e03ff015 	stw	zero,-64(fp)
20020f68:	00002c06 	br	2002101c <Layer_feedForw_full+0x2e4>
            double x = self->outputs[i];
20020f6c:	e0bffe17 	ldw	r2,-8(fp)
20020f70:	10c00717 	ldw	r3,28(r2)
20020f74:	e0bff017 	ldw	r2,-64(fp)
20020f78:	100490fa 	slli	r2,r2,3
20020f7c:	1885883a 	add	r2,r3,r2
20020f80:	10c00017 	ldw	r3,0(r2)
20020f84:	e0fff615 	stw	r3,-40(fp)
20020f88:	10800117 	ldw	r2,4(r2)
20020f8c:	e0bff715 	stw	r2,-36(fp)
            double y = exp(x-m);
20020f90:	e1bfeb17 	ldw	r6,-84(fp)
20020f94:	e1ffec17 	ldw	r7,-80(fp)
20020f98:	e13ff617 	ldw	r4,-40(fp)
20020f9c:	e17ff717 	ldw	r5,-36(fp)
20020fa0:	00263980 	call	20026398 <__subdf3>
20020fa4:	1009883a 	mov	r4,r2
20020fa8:	180b883a 	mov	r5,r3
20020fac:	2005883a 	mov	r2,r4
20020fb0:	2807883a 	mov	r3,r5
20020fb4:	1009883a 	mov	r4,r2
20020fb8:	180b883a 	mov	r5,r3
20020fbc:	00239440 	call	20023944 <exp>
20020fc0:	e0bff815 	stw	r2,-32(fp)
20020fc4:	e0fff915 	stw	r3,-28(fp)
            self->outputs[i] = y;
20020fc8:	e0bffe17 	ldw	r2,-8(fp)
20020fcc:	10c00717 	ldw	r3,28(r2)
20020fd0:	e0bff017 	ldw	r2,-64(fp)
20020fd4:	100490fa 	slli	r2,r2,3
20020fd8:	1885883a 	add	r2,r3,r2
20020fdc:	e0fff817 	ldw	r3,-32(fp)
20020fe0:	10c00015 	stw	r3,0(r2)
20020fe4:	e0fff917 	ldw	r3,-28(fp)
20020fe8:	10c00115 	stw	r3,4(r2)
            t += y;
20020fec:	e1bff817 	ldw	r6,-32(fp)
20020ff0:	e1fff917 	ldw	r7,-28(fp)
20020ff4:	e13fee17 	ldw	r4,-72(fp)
20020ff8:	e17fef17 	ldw	r5,-68(fp)
20020ffc:	002491c0 	call	2002491c <__adddf3>
20021000:	1009883a 	mov	r4,r2
20021004:	180b883a 	mov	r5,r3
20021008:	e13fee15 	stw	r4,-72(fp)
2002100c:	e17fef15 	stw	r5,-68(fp)
        for (int i = 0; i < self->nnodes; i++) {
            double x = self->outputs[i];
            if (m < x) { m = x; }
        }
        double t = 0;
        for (int i = 0; i < self->nnodes; i++) {
20021010:	e0bff017 	ldw	r2,-64(fp)
20021014:	10800044 	addi	r2,r2,1
20021018:	e0bff015 	stw	r2,-64(fp)
2002101c:	e0bffe17 	ldw	r2,-8(fp)
20021020:	10800617 	ldw	r2,24(r2)
20021024:	e0fff017 	ldw	r3,-64(fp)
20021028:	18bfd016 	blt	r3,r2,20020f6c <_gp+0xfffe1a0c>
            double x = self->outputs[i];
            double y = exp(x-m);
            self->outputs[i] = y;
            t += y;
        }
        for (int i = 0; i < self->nnodes; i++) {
2002102c:	e03ff115 	stw	zero,-60(fp)
20021030:	00002206 	br	200210bc <Layer_feedForw_full+0x384>
            self->outputs[i] /= t;
20021034:	e0bffe17 	ldw	r2,-8(fp)
20021038:	10c00717 	ldw	r3,28(r2)
2002103c:	e0bff117 	ldw	r2,-60(fp)
20021040:	100490fa 	slli	r2,r2,3
20021044:	18a1883a 	add	r16,r3,r2
20021048:	e0bffe17 	ldw	r2,-8(fp)
2002104c:	10c00717 	ldw	r3,28(r2)
20021050:	e0bff117 	ldw	r2,-60(fp)
20021054:	100490fa 	slli	r2,r2,3
20021058:	1889883a 	add	r4,r3,r2
2002105c:	20800017 	ldw	r2,0(r4)
20021060:	20c00117 	ldw	r3,4(r4)
20021064:	e1bfee17 	ldw	r6,-72(fp)
20021068:	e1ffef17 	ldw	r7,-68(fp)
2002106c:	1009883a 	mov	r4,r2
20021070:	180b883a 	mov	r5,r3
20021074:	00251c80 	call	200251c8 <__divdf3>
20021078:	1009883a 	mov	r4,r2
2002107c:	180b883a 	mov	r5,r3
20021080:	2005883a 	mov	r2,r4
20021084:	2807883a 	mov	r3,r5
20021088:	80800015 	stw	r2,0(r16)
2002108c:	80c00115 	stw	r3,4(r16)
            /* This isn't right, but set the same value to all the gradients. */
            self->gradients[i] = 1;
20021090:	e0bffe17 	ldw	r2,-8(fp)
20021094:	10c00817 	ldw	r3,32(r2)
20021098:	e0bff117 	ldw	r2,-60(fp)
2002109c:	100490fa 	slli	r2,r2,3
200210a0:	1885883a 	add	r2,r3,r2
200210a4:	10000015 	stw	zero,0(r2)
200210a8:	00cffc34 	movhi	r3,16368
200210ac:	10c00115 	stw	r3,4(r2)
            double x = self->outputs[i];
            double y = exp(x-m);
            self->outputs[i] = y;
            t += y;
        }
        for (int i = 0; i < self->nnodes; i++) {
200210b0:	e0bff117 	ldw	r2,-60(fp)
200210b4:	10800044 	addi	r2,r2,1
200210b8:	e0bff115 	stw	r2,-60(fp)
200210bc:	e0bffe17 	ldw	r2,-8(fp)
200210c0:	10800617 	ldw	r2,24(r2)
200210c4:	e0fff117 	ldw	r3,-60(fp)
200210c8:	18bfda16 	blt	r3,r2,20021034 <_gp+0xfffe1ad4>
    for (int i = 0; i < self->nnodes; i++) {
        fprintf(stderr, " %.4f", self->gradients[i]);
    }
    fprintf(stderr, "]\n");
#endif
}
200210cc:	00002c06 	br	20021180 <Layer_feedForw_full+0x448>
            /* This isn't right, but set the same value to all the gradients. */
            self->gradients[i] = 1;
        }
    } else {
        /* Otherwise, use Tanh. */
        for (int i = 0; i < self->nnodes; i++) {
200210d0:	e03ff215 	stw	zero,-56(fp)
200210d4:	00002606 	br	20021170 <Layer_feedForw_full+0x438>
            double x = self->outputs[i];
200210d8:	e0bffe17 	ldw	r2,-8(fp)
200210dc:	10c00717 	ldw	r3,28(r2)
200210e0:	e0bff217 	ldw	r2,-56(fp)
200210e4:	100490fa 	slli	r2,r2,3
200210e8:	1885883a 	add	r2,r3,r2
200210ec:	10c00017 	ldw	r3,0(r2)
200210f0:	e0fffa15 	stw	r3,-24(fp)
200210f4:	10800117 	ldw	r2,4(r2)
200210f8:	e0bffb15 	stw	r2,-20(fp)
            double y = tanh(x);
200210fc:	e13ffa17 	ldw	r4,-24(fp)
20021100:	e17ffb17 	ldw	r5,-20(fp)
20021104:	00237900 	call	20023790 <tanh>
20021108:	e0bffc15 	stw	r2,-16(fp)
2002110c:	e0fffd15 	stw	r3,-12(fp)
            self->outputs[i] = y;
20021110:	e0bffe17 	ldw	r2,-8(fp)
20021114:	10c00717 	ldw	r3,28(r2)
20021118:	e0bff217 	ldw	r2,-56(fp)
2002111c:	100490fa 	slli	r2,r2,3
20021120:	1885883a 	add	r2,r3,r2
20021124:	e0fffc17 	ldw	r3,-16(fp)
20021128:	10c00015 	stw	r3,0(r2)
2002112c:	e0fffd17 	ldw	r3,-12(fp)
20021130:	10c00115 	stw	r3,4(r2)
            self->gradients[i] = tanh_g(y);
20021134:	e0bffe17 	ldw	r2,-8(fp)
20021138:	10c00817 	ldw	r3,32(r2)
2002113c:	e0bff217 	ldw	r2,-56(fp)
20021140:	100490fa 	slli	r2,r2,3
20021144:	18a1883a 	add	r16,r3,r2
20021148:	e13ffc17 	ldw	r4,-16(fp)
2002114c:	e17ffd17 	ldw	r5,-12(fp)
20021150:	00203ac0 	call	200203ac <tanh_g>
20021154:	1009883a 	mov	r4,r2
20021158:	180b883a 	mov	r5,r3
2002115c:	81000015 	stw	r4,0(r16)
20021160:	81400115 	stw	r5,4(r16)
            /* This isn't right, but set the same value to all the gradients. */
            self->gradients[i] = 1;
        }
    } else {
        /* Otherwise, use Tanh. */
        for (int i = 0; i < self->nnodes; i++) {
20021164:	e0bff217 	ldw	r2,-56(fp)
20021168:	10800044 	addi	r2,r2,1
2002116c:	e0bff215 	stw	r2,-56(fp)
20021170:	e0bffe17 	ldw	r2,-8(fp)
20021174:	10800617 	ldw	r2,24(r2)
20021178:	e0fff217 	ldw	r3,-56(fp)
2002117c:	18bfd616 	blt	r3,r2,200210d8 <_gp+0xfffe1b78>
    for (int i = 0; i < self->nnodes; i++) {
        fprintf(stderr, " %.4f", self->gradients[i]);
    }
    fprintf(stderr, "]\n");
#endif
}
20021180:	0001883a 	nop
20021184:	e6ffff04 	addi	sp,fp,-4
20021188:	dfc00217 	ldw	ra,8(sp)
2002118c:	df000117 	ldw	fp,4(sp)
20021190:	dc000017 	ldw	r16,0(sp)
20021194:	dec00304 	addi	sp,sp,12
20021198:	f800283a 	ret

2002119c <Layer_feedBack_full>:

static void Layer_feedBack_full(Layer* self)
{
2002119c:	defff304 	addi	sp,sp,-52
200211a0:	dfc00c15 	stw	ra,48(sp)
200211a4:	df000b15 	stw	fp,44(sp)
200211a8:	dc800a15 	stw	r18,40(sp)
200211ac:	dc400915 	stw	r17,36(sp)
200211b0:	dc000815 	stw	r16,32(sp)
200211b4:	df000b04 	addi	fp,sp,44
200211b8:	e13ffc15 	stw	r4,-16(fp)
    assert (self->ltype == LAYER_FULL);
200211bc:	e0bffc17 	ldw	r2,-16(fp)
200211c0:	10801017 	ldw	r2,64(r2)
200211c4:	10800060 	cmpeqi	r2,r2,1
200211c8:	1000081e 	bne	r2,zero,200211ec <Layer_feedBack_full+0x50>
200211cc:	01c800f4 	movhi	r7,8195
200211d0:	39d46104 	addi	r7,r7,20868
200211d4:	018800f4 	movhi	r6,8195
200211d8:	3194c704 	addi	r6,r6,21276
200211dc:	01404704 	movi	r5,284
200211e0:	010800f4 	movhi	r4,8195
200211e4:	2113f604 	addi	r4,r4,20440
200211e8:	0026e540 	call	20026e54 <__assert_func>
    assert (self->lprev != NULL);
200211ec:	e0bffc17 	ldw	r2,-16(fp)
200211f0:	10800117 	ldw	r2,4(r2)
200211f4:	1000081e 	bne	r2,zero,20021218 <Layer_feedBack_full+0x7c>
200211f8:	01c800f4 	movhi	r7,8195
200211fc:	39d46804 	addi	r7,r7,20896
20021200:	018800f4 	movhi	r6,8195
20021204:	3194c704 	addi	r6,r6,21276
20021208:	01404744 	movi	r5,285
2002120c:	010800f4 	movhi	r4,8195
20021210:	2113f604 	addi	r4,r4,20440
20021214:	0026e540 	call	20026e54 <__assert_func>
    Layer* lprev = self->lprev;
20021218:	e0bffc17 	ldw	r2,-16(fp)
2002121c:	10800117 	ldw	r2,4(r2)
20021220:	e0bff915 	stw	r2,-28(fp)

    /* Clear errors. */
    for (int j = 0; j < lprev->nnodes; j++) {
20021224:	e03ff515 	stw	zero,-44(fp)
20021228:	00000a06 	br	20021254 <Layer_feedBack_full+0xb8>
        lprev->errors[j] = 0;
2002122c:	e0bff917 	ldw	r2,-28(fp)
20021230:	10c00917 	ldw	r3,36(r2)
20021234:	e0bff517 	ldw	r2,-44(fp)
20021238:	100490fa 	slli	r2,r2,3
2002123c:	1885883a 	add	r2,r3,r2
20021240:	10000015 	stw	zero,0(r2)
20021244:	10000115 	stw	zero,4(r2)
    assert (self->ltype == LAYER_FULL);
    assert (self->lprev != NULL);
    Layer* lprev = self->lprev;

    /* Clear errors. */
    for (int j = 0; j < lprev->nnodes; j++) {
20021248:	e0bff517 	ldw	r2,-44(fp)
2002124c:	10800044 	addi	r2,r2,1
20021250:	e0bff515 	stw	r2,-44(fp)
20021254:	e0bff917 	ldw	r2,-28(fp)
20021258:	10800617 	ldw	r2,24(r2)
2002125c:	e0fff517 	ldw	r3,-44(fp)
20021260:	18bff216 	blt	r3,r2,2002122c <_gp+0xfffe1ccc>
        lprev->errors[j] = 0;
    }

    int k = 0;
20021264:	e03ff615 	stw	zero,-40(fp)
    for (int i = 0; i < self->nnodes; i++) {
20021268:	e03ff715 	stw	zero,-36(fp)
2002126c:	00008b06 	br	2002149c <Layer_feedBack_full+0x300>
        /* Computer the weight/bias updates. */
        double dnet = self->errors[i] * self->gradients[i];
20021270:	e0bffc17 	ldw	r2,-16(fp)
20021274:	10c00917 	ldw	r3,36(r2)
20021278:	e0bff717 	ldw	r2,-36(fp)
2002127c:	100490fa 	slli	r2,r2,3
20021280:	1889883a 	add	r4,r3,r2
20021284:	20800017 	ldw	r2,0(r4)
20021288:	20c00117 	ldw	r3,4(r4)
2002128c:	e13ffc17 	ldw	r4,-16(fp)
20021290:	21400817 	ldw	r5,32(r4)
20021294:	e13ff717 	ldw	r4,-36(fp)
20021298:	200890fa 	slli	r4,r4,3
2002129c:	290d883a 	add	r6,r5,r4
200212a0:	31000017 	ldw	r4,0(r6)
200212a4:	31400117 	ldw	r5,4(r6)
200212a8:	200d883a 	mov	r6,r4
200212ac:	280f883a 	mov	r7,r5
200212b0:	1009883a 	mov	r4,r2
200212b4:	180b883a 	mov	r5,r3
200212b8:	0025c800 	call	20025c80 <__muldf3>
200212bc:	1009883a 	mov	r4,r2
200212c0:	180b883a 	mov	r5,r3
200212c4:	e13ffa15 	stw	r4,-24(fp)
200212c8:	e17ffb15 	stw	r5,-20(fp)
        for (int j = 0; j < lprev->nnodes; j++) {
200212cc:	e03ff815 	stw	zero,-32(fp)
200212d0:	00005406 	br	20021424 <Layer_feedBack_full+0x288>
            /* Propagate the errors to the previous layer. */
            lprev->errors[j] += self->weights[k] * dnet;
200212d4:	e0bff917 	ldw	r2,-28(fp)
200212d8:	10c00917 	ldw	r3,36(r2)
200212dc:	e0bff817 	ldw	r2,-32(fp)
200212e0:	100490fa 	slli	r2,r2,3
200212e4:	18a5883a 	add	r18,r3,r2
200212e8:	e0bff917 	ldw	r2,-28(fp)
200212ec:	10c00917 	ldw	r3,36(r2)
200212f0:	e0bff817 	ldw	r2,-32(fp)
200212f4:	100490fa 	slli	r2,r2,3
200212f8:	1885883a 	add	r2,r3,r2
200212fc:	14000017 	ldw	r16,0(r2)
20021300:	14400117 	ldw	r17,4(r2)
20021304:	e0bffc17 	ldw	r2,-16(fp)
20021308:	10c00e17 	ldw	r3,56(r2)
2002130c:	e0bff617 	ldw	r2,-40(fp)
20021310:	100490fa 	slli	r2,r2,3
20021314:	1889883a 	add	r4,r3,r2
20021318:	20800017 	ldw	r2,0(r4)
2002131c:	20c00117 	ldw	r3,4(r4)
20021320:	e1bffa17 	ldw	r6,-24(fp)
20021324:	e1fffb17 	ldw	r7,-20(fp)
20021328:	1009883a 	mov	r4,r2
2002132c:	180b883a 	mov	r5,r3
20021330:	0025c800 	call	20025c80 <__muldf3>
20021334:	1009883a 	mov	r4,r2
20021338:	180b883a 	mov	r5,r3
2002133c:	2005883a 	mov	r2,r4
20021340:	2807883a 	mov	r3,r5
20021344:	100d883a 	mov	r6,r2
20021348:	180f883a 	mov	r7,r3
2002134c:	8009883a 	mov	r4,r16
20021350:	880b883a 	mov	r5,r17
20021354:	002491c0 	call	2002491c <__adddf3>
20021358:	1009883a 	mov	r4,r2
2002135c:	180b883a 	mov	r5,r3
20021360:	2005883a 	mov	r2,r4
20021364:	2807883a 	mov	r3,r5
20021368:	90800015 	stw	r2,0(r18)
2002136c:	90c00115 	stw	r3,4(r18)
            self->u_weights[k] += dnet * lprev->outputs[j];
20021370:	e0bffc17 	ldw	r2,-16(fp)
20021374:	10c00f17 	ldw	r3,60(r2)
20021378:	e0bff617 	ldw	r2,-40(fp)
2002137c:	100490fa 	slli	r2,r2,3
20021380:	18a5883a 	add	r18,r3,r2
20021384:	e0bffc17 	ldw	r2,-16(fp)
20021388:	10c00f17 	ldw	r3,60(r2)
2002138c:	e0bff617 	ldw	r2,-40(fp)
20021390:	100490fa 	slli	r2,r2,3
20021394:	1885883a 	add	r2,r3,r2
20021398:	14000017 	ldw	r16,0(r2)
2002139c:	14400117 	ldw	r17,4(r2)
200213a0:	e0bff917 	ldw	r2,-28(fp)
200213a4:	10c00717 	ldw	r3,28(r2)
200213a8:	e0bff817 	ldw	r2,-32(fp)
200213ac:	100490fa 	slli	r2,r2,3
200213b0:	1889883a 	add	r4,r3,r2
200213b4:	20800017 	ldw	r2,0(r4)
200213b8:	20c00117 	ldw	r3,4(r4)
200213bc:	e1bffa17 	ldw	r6,-24(fp)
200213c0:	e1fffb17 	ldw	r7,-20(fp)
200213c4:	1009883a 	mov	r4,r2
200213c8:	180b883a 	mov	r5,r3
200213cc:	0025c800 	call	20025c80 <__muldf3>
200213d0:	1009883a 	mov	r4,r2
200213d4:	180b883a 	mov	r5,r3
200213d8:	2005883a 	mov	r2,r4
200213dc:	2807883a 	mov	r3,r5
200213e0:	100d883a 	mov	r6,r2
200213e4:	180f883a 	mov	r7,r3
200213e8:	8009883a 	mov	r4,r16
200213ec:	880b883a 	mov	r5,r17
200213f0:	002491c0 	call	2002491c <__adddf3>
200213f4:	1009883a 	mov	r4,r2
200213f8:	180b883a 	mov	r5,r3
200213fc:	2005883a 	mov	r2,r4
20021400:	2807883a 	mov	r3,r5
20021404:	90800015 	stw	r2,0(r18)
20021408:	90c00115 	stw	r3,4(r18)
            k++;
2002140c:	e0bff617 	ldw	r2,-40(fp)
20021410:	10800044 	addi	r2,r2,1
20021414:	e0bff615 	stw	r2,-40(fp)

    int k = 0;
    for (int i = 0; i < self->nnodes; i++) {
        /* Computer the weight/bias updates. */
        double dnet = self->errors[i] * self->gradients[i];
        for (int j = 0; j < lprev->nnodes; j++) {
20021418:	e0bff817 	ldw	r2,-32(fp)
2002141c:	10800044 	addi	r2,r2,1
20021420:	e0bff815 	stw	r2,-32(fp)
20021424:	e0bff917 	ldw	r2,-28(fp)
20021428:	10800617 	ldw	r2,24(r2)
2002142c:	e0fff817 	ldw	r3,-32(fp)
20021430:	18bfa816 	blt	r3,r2,200212d4 <_gp+0xfffe1d74>
            /* Propagate the errors to the previous layer. */
            lprev->errors[j] += self->weights[k] * dnet;
            self->u_weights[k] += dnet * lprev->outputs[j];
            k++;
        }
        self->u_biases[i] += dnet;
20021434:	e0bffc17 	ldw	r2,-16(fp)
20021438:	10c00c17 	ldw	r3,48(r2)
2002143c:	e0bff717 	ldw	r2,-36(fp)
20021440:	100490fa 	slli	r2,r2,3
20021444:	18a1883a 	add	r16,r3,r2
20021448:	e0bffc17 	ldw	r2,-16(fp)
2002144c:	10c00c17 	ldw	r3,48(r2)
20021450:	e0bff717 	ldw	r2,-36(fp)
20021454:	100490fa 	slli	r2,r2,3
20021458:	1889883a 	add	r4,r3,r2
2002145c:	20800017 	ldw	r2,0(r4)
20021460:	20c00117 	ldw	r3,4(r4)
20021464:	e1bffa17 	ldw	r6,-24(fp)
20021468:	e1fffb17 	ldw	r7,-20(fp)
2002146c:	1009883a 	mov	r4,r2
20021470:	180b883a 	mov	r5,r3
20021474:	002491c0 	call	2002491c <__adddf3>
20021478:	1009883a 	mov	r4,r2
2002147c:	180b883a 	mov	r5,r3
20021480:	2005883a 	mov	r2,r4
20021484:	2807883a 	mov	r3,r5
20021488:	80800015 	stw	r2,0(r16)
2002148c:	80c00115 	stw	r3,4(r16)
    for (int j = 0; j < lprev->nnodes; j++) {
        lprev->errors[j] = 0;
    }

    int k = 0;
    for (int i = 0; i < self->nnodes; i++) {
20021490:	e0bff717 	ldw	r2,-36(fp)
20021494:	10800044 	addi	r2,r2,1
20021498:	e0bff715 	stw	r2,-36(fp)
2002149c:	e0bffc17 	ldw	r2,-16(fp)
200214a0:	10800617 	ldw	r2,24(r2)
200214a4:	e0fff717 	ldw	r3,-36(fp)
200214a8:	18bf7116 	blt	r3,r2,20021270 <_gp+0xfffe1d10>
            fprintf(stderr, " %.4f", dw);
        }
        fprintf(stderr, "]\n");
    }
#endif
}
200214ac:	0001883a 	nop
200214b0:	e6fffd04 	addi	sp,fp,-12
200214b4:	dfc00417 	ldw	ra,16(sp)
200214b8:	df000317 	ldw	fp,12(sp)
200214bc:	dc800217 	ldw	r18,8(sp)
200214c0:	dc400117 	ldw	r17,4(sp)
200214c4:	dc000017 	ldw	r16,0(sp)
200214c8:	dec00504 	addi	sp,sp,20
200214cc:	f800283a 	ret

200214d0 <Layer_feedForw_conv>:

/* Layer_feedForw_conv(self)
   Performs feed forward updates.
*/
static void Layer_feedForw_conv(Layer* self)
{
200214d0:	deffe904 	addi	sp,sp,-92
200214d4:	dfc01615 	stw	ra,88(sp)
200214d8:	df001515 	stw	fp,84(sp)
200214dc:	dc001415 	stw	r16,80(sp)
200214e0:	df001504 	addi	fp,sp,84
200214e4:	e13ffe15 	stw	r4,-8(fp)
    assert (self->ltype == LAYER_CONV);
200214e8:	e0bffe17 	ldw	r2,-8(fp)
200214ec:	10801017 	ldw	r2,64(r2)
200214f0:	108000a0 	cmpeqi	r2,r2,2
200214f4:	1000081e 	bne	r2,zero,20021518 <Layer_feedForw_conv+0x48>
200214f8:	01c800f4 	movhi	r7,8195
200214fc:	39d46d04 	addi	r7,r7,20916
20021500:	018800f4 	movhi	r6,8195
20021504:	3194cc04 	addi	r6,r6,21296
20021508:	01405144 	movi	r5,325
2002150c:	010800f4 	movhi	r4,8195
20021510:	2113f604 	addi	r4,r4,20440
20021514:	0026e540 	call	20026e54 <__assert_func>
    assert (self->lprev != NULL);
20021518:	e0bffe17 	ldw	r2,-8(fp)
2002151c:	10800117 	ldw	r2,4(r2)
20021520:	1000081e 	bne	r2,zero,20021544 <Layer_feedForw_conv+0x74>
20021524:	01c800f4 	movhi	r7,8195
20021528:	39d46804 	addi	r7,r7,20896
2002152c:	018800f4 	movhi	r6,8195
20021530:	3194cc04 	addi	r6,r6,21296
20021534:	01405184 	movi	r5,326
20021538:	010800f4 	movhi	r4,8195
2002153c:	2113f604 	addi	r4,r4,20440
20021540:	0026e540 	call	20026e54 <__assert_func>
    Layer* lprev = self->lprev;
20021544:	e0bffe17 	ldw	r2,-8(fp)
20021548:	10800117 	ldw	r2,4(r2)
2002154c:	e0bff415 	stw	r2,-48(fp)

    int kernsize = self->conv.kernsize;
20021550:	e0bffe17 	ldw	r2,-8(fp)
20021554:	10801117 	ldw	r2,68(r2)
20021558:	e0bff515 	stw	r2,-44(fp)
    int i = 0;
2002155c:	e03feb15 	stw	zero,-84(fp)
    for (int z1 = 0; z1 < self->depth; z1++) {
20021560:	e03fec15 	stw	zero,-80(fp)
20021564:	0000ba06 	br	20021850 <Layer_feedForw_conv+0x380>
        /* z1: dst matrix */
        /* qbase: kernel matrix base index */
        int qbase = z1 * lprev->depth * kernsize * kernsize;
20021568:	e0bff417 	ldw	r2,-48(fp)
2002156c:	10c00317 	ldw	r3,12(r2)
20021570:	e0bfec17 	ldw	r2,-80(fp)
20021574:	1887383a 	mul	r3,r3,r2
20021578:	e0bff517 	ldw	r2,-44(fp)
2002157c:	1887383a 	mul	r3,r3,r2
20021580:	e0bff517 	ldw	r2,-44(fp)
20021584:	1885383a 	mul	r2,r3,r2
20021588:	e0bff615 	stw	r2,-40(fp)
        for (int y1 = 0; y1 < self->height; y1++) {
2002158c:	e03fed15 	stw	zero,-76(fp)
20021590:	0000a806 	br	20021834 <Layer_feedForw_conv+0x364>
            int y0 = self->conv.stride * y1 - self->conv.padding;
20021594:	e0bffe17 	ldw	r2,-8(fp)
20021598:	10c01317 	ldw	r3,76(r2)
2002159c:	e0bfed17 	ldw	r2,-76(fp)
200215a0:	1887383a 	mul	r3,r3,r2
200215a4:	e0bffe17 	ldw	r2,-8(fp)
200215a8:	10801217 	ldw	r2,72(r2)
200215ac:	1885c83a 	sub	r2,r3,r2
200215b0:	e0bff715 	stw	r2,-36(fp)
            for (int x1 = 0; x1 < self->width; x1++) {
200215b4:	e03fee15 	stw	zero,-72(fp)
200215b8:	00009706 	br	20021818 <Layer_feedForw_conv+0x348>
                int x0 = self->conv.stride * x1 - self->conv.padding;
200215bc:	e0bffe17 	ldw	r2,-8(fp)
200215c0:	10c01317 	ldw	r3,76(r2)
200215c4:	e0bfee17 	ldw	r2,-72(fp)
200215c8:	1887383a 	mul	r3,r3,r2
200215cc:	e0bffe17 	ldw	r2,-8(fp)
200215d0:	10801217 	ldw	r2,72(r2)
200215d4:	1885c83a 	sub	r2,r3,r2
200215d8:	e0bff815 	stw	r2,-32(fp)
                /* Compute the kernel at (x1,y1) */
                /* (x0,y0): src pixel */
                double v = self->biases[z1];
200215dc:	e0bffe17 	ldw	r2,-8(fp)
200215e0:	10c00b17 	ldw	r3,44(r2)
200215e4:	e0bfec17 	ldw	r2,-80(fp)
200215e8:	100490fa 	slli	r2,r2,3
200215ec:	1885883a 	add	r2,r3,r2
200215f0:	10c00017 	ldw	r3,0(r2)
200215f4:	e0ffef15 	stw	r3,-68(fp)
200215f8:	10800117 	ldw	r2,4(r2)
200215fc:	e0bff015 	stw	r2,-64(fp)
                for (int z0 = 0; z0 < lprev->depth; z0++) {
20021600:	e03ff115 	stw	zero,-60(fp)
20021604:	00006006 	br	20021788 <Layer_feedForw_conv+0x2b8>
                    /* z0: src matrix */
                    /* pbase: src matrix base index */
                    int pbase = z0 * lprev->width * lprev->height;
20021608:	e0bff417 	ldw	r2,-48(fp)
2002160c:	10c00417 	ldw	r3,16(r2)
20021610:	e0bff117 	ldw	r2,-60(fp)
20021614:	1887383a 	mul	r3,r3,r2
20021618:	e0bff417 	ldw	r2,-48(fp)
2002161c:	10800517 	ldw	r2,20(r2)
20021620:	1885383a 	mul	r2,r3,r2
20021624:	e0bff915 	stw	r2,-28(fp)
                    for (int dy = 0; dy < kernsize; dy++) {
20021628:	e03ff215 	stw	zero,-56(fp)
2002162c:	00005006 	br	20021770 <Layer_feedForw_conv+0x2a0>
                        int y = y0+dy;
20021630:	e0fff717 	ldw	r3,-36(fp)
20021634:	e0bff217 	ldw	r2,-56(fp)
20021638:	1885883a 	add	r2,r3,r2
2002163c:	e0bffa15 	stw	r2,-24(fp)
                        if (0 <= y && y < lprev->height) {
20021640:	e0bffa17 	ldw	r2,-24(fp)
20021644:	10004716 	blt	r2,zero,20021764 <Layer_feedForw_conv+0x294>
20021648:	e0bff417 	ldw	r2,-48(fp)
2002164c:	10800517 	ldw	r2,20(r2)
20021650:	e0fffa17 	ldw	r3,-24(fp)
20021654:	1880430e 	bge	r3,r2,20021764 <Layer_feedForw_conv+0x294>
                            int p = pbase + y*lprev->width;
20021658:	e0bff417 	ldw	r2,-48(fp)
2002165c:	10c00417 	ldw	r3,16(r2)
20021660:	e0bffa17 	ldw	r2,-24(fp)
20021664:	1887383a 	mul	r3,r3,r2
20021668:	e0bff917 	ldw	r2,-28(fp)
2002166c:	1885883a 	add	r2,r3,r2
20021670:	e0bffb15 	stw	r2,-20(fp)
                            int q = qbase + dy*kernsize;
20021674:	e0fff217 	ldw	r3,-56(fp)
20021678:	e0bff517 	ldw	r2,-44(fp)
2002167c:	1887383a 	mul	r3,r3,r2
20021680:	e0bff617 	ldw	r2,-40(fp)
20021684:	1885883a 	add	r2,r3,r2
20021688:	e0bffc15 	stw	r2,-16(fp)
                            for (int dx = 0; dx < kernsize; dx++) {
2002168c:	e03ff315 	stw	zero,-52(fp)
20021690:	00003106 	br	20021758 <Layer_feedForw_conv+0x288>
                                int x = x0+dx;
20021694:	e0fff817 	ldw	r3,-32(fp)
20021698:	e0bff317 	ldw	r2,-52(fp)
2002169c:	1885883a 	add	r2,r3,r2
200216a0:	e0bffd15 	stw	r2,-12(fp)
                                if (0 <= x && x < lprev->width) {
200216a4:	e0bffd17 	ldw	r2,-12(fp)
200216a8:	10002816 	blt	r2,zero,2002174c <Layer_feedForw_conv+0x27c>
200216ac:	e0bff417 	ldw	r2,-48(fp)
200216b0:	10800417 	ldw	r2,16(r2)
200216b4:	e0fffd17 	ldw	r3,-12(fp)
200216b8:	1880240e 	bge	r3,r2,2002174c <Layer_feedForw_conv+0x27c>
                                    v += lprev->outputs[p+x] * self->weights[q+dx];
200216bc:	e0bff417 	ldw	r2,-48(fp)
200216c0:	10c00717 	ldw	r3,28(r2)
200216c4:	e13ffb17 	ldw	r4,-20(fp)
200216c8:	e0bffd17 	ldw	r2,-12(fp)
200216cc:	2085883a 	add	r2,r4,r2
200216d0:	100490fa 	slli	r2,r2,3
200216d4:	1889883a 	add	r4,r3,r2
200216d8:	20800017 	ldw	r2,0(r4)
200216dc:	20c00117 	ldw	r3,4(r4)
200216e0:	e13ffe17 	ldw	r4,-8(fp)
200216e4:	21400e17 	ldw	r5,56(r4)
200216e8:	e1bffc17 	ldw	r6,-16(fp)
200216ec:	e13ff317 	ldw	r4,-52(fp)
200216f0:	3109883a 	add	r4,r6,r4
200216f4:	200890fa 	slli	r4,r4,3
200216f8:	290d883a 	add	r6,r5,r4
200216fc:	31000017 	ldw	r4,0(r6)
20021700:	31400117 	ldw	r5,4(r6)
20021704:	200d883a 	mov	r6,r4
20021708:	280f883a 	mov	r7,r5
2002170c:	1009883a 	mov	r4,r2
20021710:	180b883a 	mov	r5,r3
20021714:	0025c800 	call	20025c80 <__muldf3>
20021718:	1009883a 	mov	r4,r2
2002171c:	180b883a 	mov	r5,r3
20021720:	2005883a 	mov	r2,r4
20021724:	2807883a 	mov	r3,r5
20021728:	100d883a 	mov	r6,r2
2002172c:	180f883a 	mov	r7,r3
20021730:	e13fef17 	ldw	r4,-68(fp)
20021734:	e17ff017 	ldw	r5,-64(fp)
20021738:	002491c0 	call	2002491c <__adddf3>
2002173c:	1009883a 	mov	r4,r2
20021740:	180b883a 	mov	r5,r3
20021744:	e13fef15 	stw	r4,-68(fp)
20021748:	e17ff015 	stw	r5,-64(fp)
                    for (int dy = 0; dy < kernsize; dy++) {
                        int y = y0+dy;
                        if (0 <= y && y < lprev->height) {
                            int p = pbase + y*lprev->width;
                            int q = qbase + dy*kernsize;
                            for (int dx = 0; dx < kernsize; dx++) {
2002174c:	e0bff317 	ldw	r2,-52(fp)
20021750:	10800044 	addi	r2,r2,1
20021754:	e0bff315 	stw	r2,-52(fp)
20021758:	e0fff317 	ldw	r3,-52(fp)
2002175c:	e0bff517 	ldw	r2,-44(fp)
20021760:	18bfcc16 	blt	r3,r2,20021694 <_gp+0xfffe2134>
                double v = self->biases[z1];
                for (int z0 = 0; z0 < lprev->depth; z0++) {
                    /* z0: src matrix */
                    /* pbase: src matrix base index */
                    int pbase = z0 * lprev->width * lprev->height;
                    for (int dy = 0; dy < kernsize; dy++) {
20021764:	e0bff217 	ldw	r2,-56(fp)
20021768:	10800044 	addi	r2,r2,1
2002176c:	e0bff215 	stw	r2,-56(fp)
20021770:	e0fff217 	ldw	r3,-56(fp)
20021774:	e0bff517 	ldw	r2,-44(fp)
20021778:	18bfad16 	blt	r3,r2,20021630 <_gp+0xfffe20d0>
            for (int x1 = 0; x1 < self->width; x1++) {
                int x0 = self->conv.stride * x1 - self->conv.padding;
                /* Compute the kernel at (x1,y1) */
                /* (x0,y0): src pixel */
                double v = self->biases[z1];
                for (int z0 = 0; z0 < lprev->depth; z0++) {
2002177c:	e0bff117 	ldw	r2,-60(fp)
20021780:	10800044 	addi	r2,r2,1
20021784:	e0bff115 	stw	r2,-60(fp)
20021788:	e0bff417 	ldw	r2,-48(fp)
2002178c:	10800317 	ldw	r2,12(r2)
20021790:	e0fff117 	ldw	r3,-60(fp)
20021794:	18bf9c16 	blt	r3,r2,20021608 <_gp+0xfffe20a8>
                            }
                        }
                    }
                }
                /* Apply the activation function. */
                v = relu(v);
20021798:	e13fef17 	ldw	r4,-68(fp)
2002179c:	e17ff017 	ldw	r5,-64(fp)
200217a0:	00204300 	call	20020430 <relu>
200217a4:	e0bfef15 	stw	r2,-68(fp)
200217a8:	e0fff015 	stw	r3,-64(fp)
                self->outputs[i] = v;
200217ac:	e0bffe17 	ldw	r2,-8(fp)
200217b0:	10c00717 	ldw	r3,28(r2)
200217b4:	e0bfeb17 	ldw	r2,-84(fp)
200217b8:	100490fa 	slli	r2,r2,3
200217bc:	1885883a 	add	r2,r3,r2
200217c0:	e0ffef17 	ldw	r3,-68(fp)
200217c4:	10c00015 	stw	r3,0(r2)
200217c8:	e0fff017 	ldw	r3,-64(fp)
200217cc:	10c00115 	stw	r3,4(r2)
                self->gradients[i] = relu_g(v);
200217d0:	e0bffe17 	ldw	r2,-8(fp)
200217d4:	10c00817 	ldw	r3,32(r2)
200217d8:	e0bfeb17 	ldw	r2,-84(fp)
200217dc:	100490fa 	slli	r2,r2,3
200217e0:	18a1883a 	add	r16,r3,r2
200217e4:	e13fef17 	ldw	r4,-68(fp)
200217e8:	e17ff017 	ldw	r5,-64(fp)
200217ec:	00204980 	call	20020498 <relu_g>
200217f0:	1009883a 	mov	r4,r2
200217f4:	180b883a 	mov	r5,r3
200217f8:	81000015 	stw	r4,0(r16)
200217fc:	81400115 	stw	r5,4(r16)
                //printf('i:',i);
                i++;
20021800:	e0bfeb17 	ldw	r2,-84(fp)
20021804:	10800044 	addi	r2,r2,1
20021808:	e0bfeb15 	stw	r2,-84(fp)
        /* z1: dst matrix */
        /* qbase: kernel matrix base index */
        int qbase = z1 * lprev->depth * kernsize * kernsize;
        for (int y1 = 0; y1 < self->height; y1++) {
            int y0 = self->conv.stride * y1 - self->conv.padding;
            for (int x1 = 0; x1 < self->width; x1++) {
2002180c:	e0bfee17 	ldw	r2,-72(fp)
20021810:	10800044 	addi	r2,r2,1
20021814:	e0bfee15 	stw	r2,-72(fp)
20021818:	e0bffe17 	ldw	r2,-8(fp)
2002181c:	10800417 	ldw	r2,16(r2)
20021820:	e0ffee17 	ldw	r3,-72(fp)
20021824:	18bf6516 	blt	r3,r2,200215bc <_gp+0xfffe205c>
    int i = 0;
    for (int z1 = 0; z1 < self->depth; z1++) {
        /* z1: dst matrix */
        /* qbase: kernel matrix base index */
        int qbase = z1 * lprev->depth * kernsize * kernsize;
        for (int y1 = 0; y1 < self->height; y1++) {
20021828:	e0bfed17 	ldw	r2,-76(fp)
2002182c:	10800044 	addi	r2,r2,1
20021830:	e0bfed15 	stw	r2,-76(fp)
20021834:	e0bffe17 	ldw	r2,-8(fp)
20021838:	10800517 	ldw	r2,20(r2)
2002183c:	e0ffed17 	ldw	r3,-76(fp)
20021840:	18bf5416 	blt	r3,r2,20021594 <_gp+0xfffe2034>
    assert (self->lprev != NULL);
    Layer* lprev = self->lprev;

    int kernsize = self->conv.kernsize;
    int i = 0;
    for (int z1 = 0; z1 < self->depth; z1++) {
20021844:	e0bfec17 	ldw	r2,-80(fp)
20021848:	10800044 	addi	r2,r2,1
2002184c:	e0bfec15 	stw	r2,-80(fp)
20021850:	e0bffe17 	ldw	r2,-8(fp)
20021854:	10800317 	ldw	r2,12(r2)
20021858:	e0ffec17 	ldw	r3,-80(fp)
2002185c:	18bf4216 	blt	r3,r2,20021568 <_gp+0xfffe2008>
                //printf('i:',i);
                i++;
            }
        }
    }
    alt_putstr("i: ...\n");
20021860:	010800f4 	movhi	r4,8195
20021864:	21147404 	addi	r4,r4,20944
20021868:	0032af80 	call	20032af8 <alt_putstr>
    printf("%i\n", i);
2002186c:	e17feb17 	ldw	r5,-84(fp)
20021870:	010800f4 	movhi	r4,8195
20021874:	21147604 	addi	r4,r4,20952
20021878:	00293a40 	call	200293a4 <printf>
    alt_putstr("self nodes: ...\n");
2002187c:	010800f4 	movhi	r4,8195
20021880:	21147704 	addi	r4,r4,20956
20021884:	0032af80 	call	20032af8 <alt_putstr>
    printf("%i\n",self->nnodes);
20021888:	e0bffe17 	ldw	r2,-8(fp)
2002188c:	10800617 	ldw	r2,24(r2)
20021890:	100b883a 	mov	r5,r2
20021894:	010800f4 	movhi	r4,8195
20021898:	21147604 	addi	r4,r4,20952
2002189c:	00293a40 	call	200293a4 <printf>
    assert (i == self->nnodes);
200218a0:	e0bffe17 	ldw	r2,-8(fp)
200218a4:	10c00617 	ldw	r3,24(r2)
200218a8:	e0bfeb17 	ldw	r2,-84(fp)
200218ac:	18800826 	beq	r3,r2,200218d0 <Layer_feedForw_conv+0x400>
200218b0:	01c800f4 	movhi	r7,8195
200218b4:	39d47c04 	addi	r7,r7,20976
200218b8:	018800f4 	movhi	r6,8195
200218bc:	3194cc04 	addi	r6,r6,21296
200218c0:	01405d44 	movi	r5,373
200218c4:	010800f4 	movhi	r4,8195
200218c8:	2113f604 	addi	r4,r4,20440
200218cc:	0026e540 	call	20026e54 <__assert_func>
    for (int i = 0; i < self->nnodes; i++) {
        fprintf(stderr, " %.4f", self->gradients[i]);
    }
    fprintf(stderr, "]\n");
#endif
}
200218d0:	0001883a 	nop
200218d4:	e6ffff04 	addi	sp,fp,-4
200218d8:	dfc00217 	ldw	ra,8(sp)
200218dc:	df000117 	ldw	fp,4(sp)
200218e0:	dc000017 	ldw	r16,0(sp)
200218e4:	dec00304 	addi	sp,sp,12
200218e8:	f800283a 	ret

200218ec <Layer_feedBack_conv>:

static void Layer_feedBack_conv(Layer* self)
{
200218ec:	deffe604 	addi	sp,sp,-104
200218f0:	dfc01915 	stw	ra,100(sp)
200218f4:	df001815 	stw	fp,96(sp)
200218f8:	dc801715 	stw	r18,92(sp)
200218fc:	dc401615 	stw	r17,88(sp)
20021900:	dc001515 	stw	r16,84(sp)
20021904:	df001804 	addi	fp,sp,96
20021908:	e13ffc15 	stw	r4,-16(fp)
    assert (self->ltype == LAYER_CONV);
2002190c:	e0bffc17 	ldw	r2,-16(fp)
20021910:	10801017 	ldw	r2,64(r2)
20021914:	108000a0 	cmpeqi	r2,r2,2
20021918:	1000081e 	bne	r2,zero,2002193c <Layer_feedBack_conv+0x50>
2002191c:	01c800f4 	movhi	r7,8195
20021920:	39d46d04 	addi	r7,r7,20916
20021924:	018800f4 	movhi	r6,8195
20021928:	3194d104 	addi	r6,r6,21316
2002192c:	014061c4 	movi	r5,391
20021930:	010800f4 	movhi	r4,8195
20021934:	2113f604 	addi	r4,r4,20440
20021938:	0026e540 	call	20026e54 <__assert_func>
    assert (self->lprev != NULL);
2002193c:	e0bffc17 	ldw	r2,-16(fp)
20021940:	10800117 	ldw	r2,4(r2)
20021944:	1000081e 	bne	r2,zero,20021968 <Layer_feedBack_conv+0x7c>
20021948:	01c800f4 	movhi	r7,8195
2002194c:	39d46804 	addi	r7,r7,20896
20021950:	018800f4 	movhi	r6,8195
20021954:	3194d104 	addi	r6,r6,21316
20021958:	01406204 	movi	r5,392
2002195c:	010800f4 	movhi	r4,8195
20021960:	2113f604 	addi	r4,r4,20440
20021964:	0026e540 	call	20026e54 <__assert_func>
    Layer* lprev = self->lprev;
20021968:	e0bffc17 	ldw	r2,-16(fp)
2002196c:	10800117 	ldw	r2,4(r2)
20021970:	e0bff015 	stw	r2,-64(fp)

    /* Clear errors. */
    for (int j = 0; j < lprev->nnodes; j++) {
20021974:	e03fe815 	stw	zero,-96(fp)
20021978:	00000a06 	br	200219a4 <Layer_feedBack_conv+0xb8>
        lprev->errors[j] = 0;
2002197c:	e0bff017 	ldw	r2,-64(fp)
20021980:	10c00917 	ldw	r3,36(r2)
20021984:	e0bfe817 	ldw	r2,-96(fp)
20021988:	100490fa 	slli	r2,r2,3
2002198c:	1885883a 	add	r2,r3,r2
20021990:	10000015 	stw	zero,0(r2)
20021994:	10000115 	stw	zero,4(r2)
    assert (self->ltype == LAYER_CONV);
    assert (self->lprev != NULL);
    Layer* lprev = self->lprev;

    /* Clear errors. */
    for (int j = 0; j < lprev->nnodes; j++) {
20021998:	e0bfe817 	ldw	r2,-96(fp)
2002199c:	10800044 	addi	r2,r2,1
200219a0:	e0bfe815 	stw	r2,-96(fp)
200219a4:	e0bff017 	ldw	r2,-64(fp)
200219a8:	10800617 	ldw	r2,24(r2)
200219ac:	e0ffe817 	ldw	r3,-96(fp)
200219b0:	18bff216 	blt	r3,r2,2002197c <_gp+0xfffe241c>
        lprev->errors[j] = 0;
    }

    int kernsize = self->conv.kernsize;
200219b4:	e0bffc17 	ldw	r2,-16(fp)
200219b8:	10801117 	ldw	r2,68(r2)
200219bc:	e0bff115 	stw	r2,-60(fp)
    int i = 0;
200219c0:	e03fe915 	stw	zero,-92(fp)
    for (int z1 = 0; z1 < self->depth; z1++) {
200219c4:	e03fea15 	stw	zero,-88(fp)
200219c8:	0000fb06 	br	20021db8 <Layer_feedBack_conv+0x4cc>
        /* z1: dst matrix */
        /* qbase: kernel matrix base index */
        int qbase = z1 * lprev->depth * kernsize * kernsize;
200219cc:	e0bff017 	ldw	r2,-64(fp)
200219d0:	10c00317 	ldw	r3,12(r2)
200219d4:	e0bfea17 	ldw	r2,-88(fp)
200219d8:	1887383a 	mul	r3,r3,r2
200219dc:	e0bff117 	ldw	r2,-60(fp)
200219e0:	1887383a 	mul	r3,r3,r2
200219e4:	e0bff117 	ldw	r2,-60(fp)
200219e8:	1885383a 	mul	r2,r3,r2
200219ec:	e0bff215 	stw	r2,-56(fp)
        for (int y1 = 0; y1 < self->height; y1++) {
200219f0:	e03feb15 	stw	zero,-84(fp)
200219f4:	0000e906 	br	20021d9c <Layer_feedBack_conv+0x4b0>
            int y0 = self->conv.stride * y1 - self->conv.padding;
200219f8:	e0bffc17 	ldw	r2,-16(fp)
200219fc:	10c01317 	ldw	r3,76(r2)
20021a00:	e0bfeb17 	ldw	r2,-84(fp)
20021a04:	1887383a 	mul	r3,r3,r2
20021a08:	e0bffc17 	ldw	r2,-16(fp)
20021a0c:	10801217 	ldw	r2,72(r2)
20021a10:	1885c83a 	sub	r2,r3,r2
20021a14:	e0bff315 	stw	r2,-52(fp)
            for (int x1 = 0; x1 < self->width; x1++) {
20021a18:	e03fec15 	stw	zero,-80(fp)
20021a1c:	0000d806 	br	20021d80 <Layer_feedBack_conv+0x494>
                int x0 = self->conv.stride * x1 - self->conv.padding;
20021a20:	e0bffc17 	ldw	r2,-16(fp)
20021a24:	10c01317 	ldw	r3,76(r2)
20021a28:	e0bfec17 	ldw	r2,-80(fp)
20021a2c:	1887383a 	mul	r3,r3,r2
20021a30:	e0bffc17 	ldw	r2,-16(fp)
20021a34:	10801217 	ldw	r2,72(r2)
20021a38:	1885c83a 	sub	r2,r3,r2
20021a3c:	e0bff415 	stw	r2,-48(fp)
                /* Compute the kernel at (x1,y1) */
                /* (x0,y0): src pixel */
                double dnet = self->errors[i] * self->gradients[i];
20021a40:	e0bffc17 	ldw	r2,-16(fp)
20021a44:	10c00917 	ldw	r3,36(r2)
20021a48:	e0bfe917 	ldw	r2,-92(fp)
20021a4c:	100490fa 	slli	r2,r2,3
20021a50:	1889883a 	add	r4,r3,r2
20021a54:	20800017 	ldw	r2,0(r4)
20021a58:	20c00117 	ldw	r3,4(r4)
20021a5c:	e13ffc17 	ldw	r4,-16(fp)
20021a60:	21400817 	ldw	r5,32(r4)
20021a64:	e13fe917 	ldw	r4,-92(fp)
20021a68:	200890fa 	slli	r4,r4,3
20021a6c:	290d883a 	add	r6,r5,r4
20021a70:	31000017 	ldw	r4,0(r6)
20021a74:	31400117 	ldw	r5,4(r6)
20021a78:	200d883a 	mov	r6,r4
20021a7c:	280f883a 	mov	r7,r5
20021a80:	1009883a 	mov	r4,r2
20021a84:	180b883a 	mov	r5,r3
20021a88:	0025c800 	call	20025c80 <__muldf3>
20021a8c:	1009883a 	mov	r4,r2
20021a90:	180b883a 	mov	r5,r3
20021a94:	e13ff515 	stw	r4,-44(fp)
20021a98:	e17ff615 	stw	r5,-40(fp)
                for (int z0 = 0; z0 < lprev->depth; z0++) {
20021a9c:	e03fed15 	stw	zero,-76(fp)
20021aa0:	00009606 	br	20021cfc <Layer_feedBack_conv+0x410>
                    /* z0: src matrix */
                    /* pbase: src matrix base index */
                    int pbase = z0 * lprev->width * lprev->height;
20021aa4:	e0bff017 	ldw	r2,-64(fp)
20021aa8:	10c00417 	ldw	r3,16(r2)
20021aac:	e0bfed17 	ldw	r2,-76(fp)
20021ab0:	1887383a 	mul	r3,r3,r2
20021ab4:	e0bff017 	ldw	r2,-64(fp)
20021ab8:	10800517 	ldw	r2,20(r2)
20021abc:	1885383a 	mul	r2,r3,r2
20021ac0:	e0bff715 	stw	r2,-36(fp)
                    for (int dy = 0; dy < kernsize; dy++) {
20021ac4:	e03fee15 	stw	zero,-72(fp)
20021ac8:	00008606 	br	20021ce4 <Layer_feedBack_conv+0x3f8>
                        int y = y0+dy;
20021acc:	e0fff317 	ldw	r3,-52(fp)
20021ad0:	e0bfee17 	ldw	r2,-72(fp)
20021ad4:	1885883a 	add	r2,r3,r2
20021ad8:	e0bff815 	stw	r2,-32(fp)
                        if (0 <= y && y < lprev->height) {
20021adc:	e0bff817 	ldw	r2,-32(fp)
20021ae0:	10007d16 	blt	r2,zero,20021cd8 <Layer_feedBack_conv+0x3ec>
20021ae4:	e0bff017 	ldw	r2,-64(fp)
20021ae8:	10800517 	ldw	r2,20(r2)
20021aec:	e0fff817 	ldw	r3,-32(fp)
20021af0:	1880790e 	bge	r3,r2,20021cd8 <Layer_feedBack_conv+0x3ec>
                            int p = pbase + y*lprev->width;
20021af4:	e0bff017 	ldw	r2,-64(fp)
20021af8:	10c00417 	ldw	r3,16(r2)
20021afc:	e0bff817 	ldw	r2,-32(fp)
20021b00:	1887383a 	mul	r3,r3,r2
20021b04:	e0bff717 	ldw	r2,-36(fp)
20021b08:	1885883a 	add	r2,r3,r2
20021b0c:	e0bff915 	stw	r2,-28(fp)
                            int q = qbase + dy*kernsize;
20021b10:	e0ffee17 	ldw	r3,-72(fp)
20021b14:	e0bff117 	ldw	r2,-60(fp)
20021b18:	1887383a 	mul	r3,r3,r2
20021b1c:	e0bff217 	ldw	r2,-56(fp)
20021b20:	1885883a 	add	r2,r3,r2
20021b24:	e0bffa15 	stw	r2,-24(fp)
                            for (int dx = 0; dx < kernsize; dx++) {
20021b28:	e03fef15 	stw	zero,-68(fp)
20021b2c:	00006706 	br	20021ccc <Layer_feedBack_conv+0x3e0>
                                int x = x0+dx;
20021b30:	e0fff417 	ldw	r3,-48(fp)
20021b34:	e0bfef17 	ldw	r2,-68(fp)
20021b38:	1885883a 	add	r2,r3,r2
20021b3c:	e0bffb15 	stw	r2,-20(fp)
                                if (0 <= x && x < lprev->width) {
20021b40:	e0bffb17 	ldw	r2,-20(fp)
20021b44:	10005e16 	blt	r2,zero,20021cc0 <Layer_feedBack_conv+0x3d4>
20021b48:	e0bff017 	ldw	r2,-64(fp)
20021b4c:	10800417 	ldw	r2,16(r2)
20021b50:	e0fffb17 	ldw	r3,-20(fp)
20021b54:	18805a0e 	bge	r3,r2,20021cc0 <Layer_feedBack_conv+0x3d4>
                                    lprev->errors[p+x] += self->weights[q+dx] * dnet;
20021b58:	e0bff017 	ldw	r2,-64(fp)
20021b5c:	10c00917 	ldw	r3,36(r2)
20021b60:	e13ff917 	ldw	r4,-28(fp)
20021b64:	e0bffb17 	ldw	r2,-20(fp)
20021b68:	2085883a 	add	r2,r4,r2
20021b6c:	100490fa 	slli	r2,r2,3
20021b70:	18a5883a 	add	r18,r3,r2
20021b74:	e0bff017 	ldw	r2,-64(fp)
20021b78:	10c00917 	ldw	r3,36(r2)
20021b7c:	e13ff917 	ldw	r4,-28(fp)
20021b80:	e0bffb17 	ldw	r2,-20(fp)
20021b84:	2085883a 	add	r2,r4,r2
20021b88:	100490fa 	slli	r2,r2,3
20021b8c:	1885883a 	add	r2,r3,r2
20021b90:	14000017 	ldw	r16,0(r2)
20021b94:	14400117 	ldw	r17,4(r2)
20021b98:	e0bffc17 	ldw	r2,-16(fp)
20021b9c:	10c00e17 	ldw	r3,56(r2)
20021ba0:	e13ffa17 	ldw	r4,-24(fp)
20021ba4:	e0bfef17 	ldw	r2,-68(fp)
20021ba8:	2085883a 	add	r2,r4,r2
20021bac:	100490fa 	slli	r2,r2,3
20021bb0:	1889883a 	add	r4,r3,r2
20021bb4:	20800017 	ldw	r2,0(r4)
20021bb8:	20c00117 	ldw	r3,4(r4)
20021bbc:	e1bff517 	ldw	r6,-44(fp)
20021bc0:	e1fff617 	ldw	r7,-40(fp)
20021bc4:	1009883a 	mov	r4,r2
20021bc8:	180b883a 	mov	r5,r3
20021bcc:	0025c800 	call	20025c80 <__muldf3>
20021bd0:	1009883a 	mov	r4,r2
20021bd4:	180b883a 	mov	r5,r3
20021bd8:	2005883a 	mov	r2,r4
20021bdc:	2807883a 	mov	r3,r5
20021be0:	100d883a 	mov	r6,r2
20021be4:	180f883a 	mov	r7,r3
20021be8:	8009883a 	mov	r4,r16
20021bec:	880b883a 	mov	r5,r17
20021bf0:	002491c0 	call	2002491c <__adddf3>
20021bf4:	1009883a 	mov	r4,r2
20021bf8:	180b883a 	mov	r5,r3
20021bfc:	2005883a 	mov	r2,r4
20021c00:	2807883a 	mov	r3,r5
20021c04:	90800015 	stw	r2,0(r18)
20021c08:	90c00115 	stw	r3,4(r18)
                                    self->u_weights[q+dx] += dnet * lprev->outputs[p+x];
20021c0c:	e0bffc17 	ldw	r2,-16(fp)
20021c10:	10c00f17 	ldw	r3,60(r2)
20021c14:	e13ffa17 	ldw	r4,-24(fp)
20021c18:	e0bfef17 	ldw	r2,-68(fp)
20021c1c:	2085883a 	add	r2,r4,r2
20021c20:	100490fa 	slli	r2,r2,3
20021c24:	18a5883a 	add	r18,r3,r2
20021c28:	e0bffc17 	ldw	r2,-16(fp)
20021c2c:	10c00f17 	ldw	r3,60(r2)
20021c30:	e13ffa17 	ldw	r4,-24(fp)
20021c34:	e0bfef17 	ldw	r2,-68(fp)
20021c38:	2085883a 	add	r2,r4,r2
20021c3c:	100490fa 	slli	r2,r2,3
20021c40:	1885883a 	add	r2,r3,r2
20021c44:	14000017 	ldw	r16,0(r2)
20021c48:	14400117 	ldw	r17,4(r2)
20021c4c:	e0bff017 	ldw	r2,-64(fp)
20021c50:	10c00717 	ldw	r3,28(r2)
20021c54:	e13ff917 	ldw	r4,-28(fp)
20021c58:	e0bffb17 	ldw	r2,-20(fp)
20021c5c:	2085883a 	add	r2,r4,r2
20021c60:	100490fa 	slli	r2,r2,3
20021c64:	1889883a 	add	r4,r3,r2
20021c68:	20800017 	ldw	r2,0(r4)
20021c6c:	20c00117 	ldw	r3,4(r4)
20021c70:	e1bff517 	ldw	r6,-44(fp)
20021c74:	e1fff617 	ldw	r7,-40(fp)
20021c78:	1009883a 	mov	r4,r2
20021c7c:	180b883a 	mov	r5,r3
20021c80:	0025c800 	call	20025c80 <__muldf3>
20021c84:	1009883a 	mov	r4,r2
20021c88:	180b883a 	mov	r5,r3
20021c8c:	2005883a 	mov	r2,r4
20021c90:	2807883a 	mov	r3,r5
20021c94:	100d883a 	mov	r6,r2
20021c98:	180f883a 	mov	r7,r3
20021c9c:	8009883a 	mov	r4,r16
20021ca0:	880b883a 	mov	r5,r17
20021ca4:	002491c0 	call	2002491c <__adddf3>
20021ca8:	1009883a 	mov	r4,r2
20021cac:	180b883a 	mov	r5,r3
20021cb0:	2005883a 	mov	r2,r4
20021cb4:	2807883a 	mov	r3,r5
20021cb8:	90800015 	stw	r2,0(r18)
20021cbc:	90c00115 	stw	r3,4(r18)
                    for (int dy = 0; dy < kernsize; dy++) {
                        int y = y0+dy;
                        if (0 <= y && y < lprev->height) {
                            int p = pbase + y*lprev->width;
                            int q = qbase + dy*kernsize;
                            for (int dx = 0; dx < kernsize; dx++) {
20021cc0:	e0bfef17 	ldw	r2,-68(fp)
20021cc4:	10800044 	addi	r2,r2,1
20021cc8:	e0bfef15 	stw	r2,-68(fp)
20021ccc:	e0ffef17 	ldw	r3,-68(fp)
20021cd0:	e0bff117 	ldw	r2,-60(fp)
20021cd4:	18bf9616 	blt	r3,r2,20021b30 <_gp+0xfffe25d0>
                double dnet = self->errors[i] * self->gradients[i];
                for (int z0 = 0; z0 < lprev->depth; z0++) {
                    /* z0: src matrix */
                    /* pbase: src matrix base index */
                    int pbase = z0 * lprev->width * lprev->height;
                    for (int dy = 0; dy < kernsize; dy++) {
20021cd8:	e0bfee17 	ldw	r2,-72(fp)
20021cdc:	10800044 	addi	r2,r2,1
20021ce0:	e0bfee15 	stw	r2,-72(fp)
20021ce4:	e0ffee17 	ldw	r3,-72(fp)
20021ce8:	e0bff117 	ldw	r2,-60(fp)
20021cec:	18bf7716 	blt	r3,r2,20021acc <_gp+0xfffe256c>
            for (int x1 = 0; x1 < self->width; x1++) {
                int x0 = self->conv.stride * x1 - self->conv.padding;
                /* Compute the kernel at (x1,y1) */
                /* (x0,y0): src pixel */
                double dnet = self->errors[i] * self->gradients[i];
                for (int z0 = 0; z0 < lprev->depth; z0++) {
20021cf0:	e0bfed17 	ldw	r2,-76(fp)
20021cf4:	10800044 	addi	r2,r2,1
20021cf8:	e0bfed15 	stw	r2,-76(fp)
20021cfc:	e0bff017 	ldw	r2,-64(fp)
20021d00:	10800317 	ldw	r2,12(r2)
20021d04:	e0ffed17 	ldw	r3,-76(fp)
20021d08:	18bf6616 	blt	r3,r2,20021aa4 <_gp+0xfffe2544>
                                }
                            }
                        }
                    }
                }
                self->u_biases[z1] += dnet;
20021d0c:	e0bffc17 	ldw	r2,-16(fp)
20021d10:	10c00c17 	ldw	r3,48(r2)
20021d14:	e0bfea17 	ldw	r2,-88(fp)
20021d18:	100490fa 	slli	r2,r2,3
20021d1c:	18a1883a 	add	r16,r3,r2
20021d20:	e0bffc17 	ldw	r2,-16(fp)
20021d24:	10c00c17 	ldw	r3,48(r2)
20021d28:	e0bfea17 	ldw	r2,-88(fp)
20021d2c:	100490fa 	slli	r2,r2,3
20021d30:	1889883a 	add	r4,r3,r2
20021d34:	20800017 	ldw	r2,0(r4)
20021d38:	20c00117 	ldw	r3,4(r4)
20021d3c:	e1bff517 	ldw	r6,-44(fp)
20021d40:	e1fff617 	ldw	r7,-40(fp)
20021d44:	1009883a 	mov	r4,r2
20021d48:	180b883a 	mov	r5,r3
20021d4c:	002491c0 	call	2002491c <__adddf3>
20021d50:	1009883a 	mov	r4,r2
20021d54:	180b883a 	mov	r5,r3
20021d58:	2005883a 	mov	r2,r4
20021d5c:	2807883a 	mov	r3,r5
20021d60:	80800015 	stw	r2,0(r16)
20021d64:	80c00115 	stw	r3,4(r16)
                i++;
20021d68:	e0bfe917 	ldw	r2,-92(fp)
20021d6c:	10800044 	addi	r2,r2,1
20021d70:	e0bfe915 	stw	r2,-92(fp)
        /* z1: dst matrix */
        /* qbase: kernel matrix base index */
        int qbase = z1 * lprev->depth * kernsize * kernsize;
        for (int y1 = 0; y1 < self->height; y1++) {
            int y0 = self->conv.stride * y1 - self->conv.padding;
            for (int x1 = 0; x1 < self->width; x1++) {
20021d74:	e0bfec17 	ldw	r2,-80(fp)
20021d78:	10800044 	addi	r2,r2,1
20021d7c:	e0bfec15 	stw	r2,-80(fp)
20021d80:	e0bffc17 	ldw	r2,-16(fp)
20021d84:	10800417 	ldw	r2,16(r2)
20021d88:	e0ffec17 	ldw	r3,-80(fp)
20021d8c:	18bf2416 	blt	r3,r2,20021a20 <_gp+0xfffe24c0>
    int i = 0;
    for (int z1 = 0; z1 < self->depth; z1++) {
        /* z1: dst matrix */
        /* qbase: kernel matrix base index */
        int qbase = z1 * lprev->depth * kernsize * kernsize;
        for (int y1 = 0; y1 < self->height; y1++) {
20021d90:	e0bfeb17 	ldw	r2,-84(fp)
20021d94:	10800044 	addi	r2,r2,1
20021d98:	e0bfeb15 	stw	r2,-84(fp)
20021d9c:	e0bffc17 	ldw	r2,-16(fp)
20021da0:	10800517 	ldw	r2,20(r2)
20021da4:	e0ffeb17 	ldw	r3,-84(fp)
20021da8:	18bf1316 	blt	r3,r2,200219f8 <_gp+0xfffe2498>
        lprev->errors[j] = 0;
    }

    int kernsize = self->conv.kernsize;
    int i = 0;
    for (int z1 = 0; z1 < self->depth; z1++) {
20021dac:	e0bfea17 	ldw	r2,-88(fp)
20021db0:	10800044 	addi	r2,r2,1
20021db4:	e0bfea15 	stw	r2,-88(fp)
20021db8:	e0bffc17 	ldw	r2,-16(fp)
20021dbc:	10800317 	ldw	r2,12(r2)
20021dc0:	e0ffea17 	ldw	r3,-88(fp)
20021dc4:	18bf0116 	blt	r3,r2,200219cc <_gp+0xfffe246c>
                self->u_biases[z1] += dnet;
                i++;
            }
        }
    }
    assert (i == self->nnodes);
20021dc8:	e0bffc17 	ldw	r2,-16(fp)
20021dcc:	10c00617 	ldw	r3,24(r2)
20021dd0:	e0bfe917 	ldw	r2,-92(fp)
20021dd4:	18800826 	beq	r3,r2,20021df8 <Layer_feedBack_conv+0x50c>
20021dd8:	01c800f4 	movhi	r7,8195
20021ddc:	39d47c04 	addi	r7,r7,20976
20021de0:	018800f4 	movhi	r6,8195
20021de4:	3194d104 	addi	r6,r6,21316
20021de8:	01406d44 	movi	r5,437
20021dec:	010800f4 	movhi	r4,8195
20021df0:	2113f604 	addi	r4,r4,20440
20021df4:	0026e540 	call	20026e54 <__assert_func>
            fprintf(stderr, " %.4f", dw);
        }
        fprintf(stderr, "]\n");
    }
#endif
}
20021df8:	0001883a 	nop
20021dfc:	e6fffd04 	addi	sp,fp,-12
20021e00:	dfc00417 	ldw	ra,16(sp)
20021e04:	df000317 	ldw	fp,12(sp)
20021e08:	dc800217 	ldw	r18,8(sp)
20021e0c:	dc400117 	ldw	r17,4(sp)
20021e10:	dc000017 	ldw	r16,0(sp)
20021e14:	dec00504 	addi	sp,sp,20
20021e18:	f800283a 	ret

20021e1c <Layer_setInputs>:

/* Layer_setInputs(self, values)
   Sets the input values.
*/
void Layer_setInputs(Layer* self, const double* values)
{
20021e1c:	defffa04 	addi	sp,sp,-24
20021e20:	dfc00515 	stw	ra,20(sp)
20021e24:	df000415 	stw	fp,16(sp)
20021e28:	df000404 	addi	fp,sp,16
20021e2c:	e13ffe15 	stw	r4,-8(fp)
20021e30:	e17fff15 	stw	r5,-4(fp)
    assert (self != NULL);
20021e34:	e0bffe17 	ldw	r2,-8(fp)
20021e38:	1000081e 	bne	r2,zero,20021e5c <Layer_setInputs+0x40>
20021e3c:	01c800f4 	movhi	r7,8195
20021e40:	39d42a04 	addi	r7,r7,20648
20021e44:	018800f4 	movhi	r6,8195
20021e48:	3194d604 	addi	r6,r6,21336
20021e4c:	01407284 	movi	r5,458
20021e50:	010800f4 	movhi	r4,8195
20021e54:	2113f604 	addi	r4,r4,20440
20021e58:	0026e540 	call	20026e54 <__assert_func>
    assert (self->ltype == LAYER_INPUT);
20021e5c:	e0bffe17 	ldw	r2,-8(fp)
20021e60:	10801017 	ldw	r2,64(r2)
20021e64:	10000826 	beq	r2,zero,20021e88 <Layer_setInputs+0x6c>
20021e68:	01c800f4 	movhi	r7,8195
20021e6c:	39d48104 	addi	r7,r7,20996
20021e70:	018800f4 	movhi	r6,8195
20021e74:	3194d604 	addi	r6,r6,21336
20021e78:	014072c4 	movi	r5,459
20021e7c:	010800f4 	movhi	r4,8195
20021e80:	2113f604 	addi	r4,r4,20440
20021e84:	0026e540 	call	20026e54 <__assert_func>
    assert (self->lprev == NULL);
20021e88:	e0bffe17 	ldw	r2,-8(fp)
20021e8c:	10800117 	ldw	r2,4(r2)
20021e90:	10000826 	beq	r2,zero,20021eb4 <Layer_setInputs+0x98>
20021e94:	01c800f4 	movhi	r7,8195
20021e98:	39d48804 	addi	r7,r7,21024
20021e9c:	018800f4 	movhi	r6,8195
20021ea0:	3194d604 	addi	r6,r6,21336
20021ea4:	01407304 	movi	r5,460
20021ea8:	010800f4 	movhi	r4,8195
20021eac:	2113f604 	addi	r4,r4,20440
20021eb0:	0026e540 	call	20026e54 <__assert_func>
    }
    fprintf(stderr, "]\n");
#endif

    /* Set the values as the outputs. */
    for (int i = 0; i < self->nnodes; i++) {
20021eb4:	e03ffc15 	stw	zero,-16(fp)
20021eb8:	00001006 	br	20021efc <Layer_setInputs+0xe0>
        self->outputs[i] = values[i];
20021ebc:	e0bffe17 	ldw	r2,-8(fp)
20021ec0:	10c00717 	ldw	r3,28(r2)
20021ec4:	e0bffc17 	ldw	r2,-16(fp)
20021ec8:	100490fa 	slli	r2,r2,3
20021ecc:	1889883a 	add	r4,r3,r2
20021ed0:	e0bffc17 	ldw	r2,-16(fp)
20021ed4:	100490fa 	slli	r2,r2,3
20021ed8:	e0ffff17 	ldw	r3,-4(fp)
20021edc:	188b883a 	add	r5,r3,r2
20021ee0:	28800017 	ldw	r2,0(r5)
20021ee4:	28c00117 	ldw	r3,4(r5)
20021ee8:	20800015 	stw	r2,0(r4)
20021eec:	20c00115 	stw	r3,4(r4)
    }
    fprintf(stderr, "]\n");
#endif

    /* Set the values as the outputs. */
    for (int i = 0; i < self->nnodes; i++) {
20021ef0:	e0bffc17 	ldw	r2,-16(fp)
20021ef4:	10800044 	addi	r2,r2,1
20021ef8:	e0bffc15 	stw	r2,-16(fp)
20021efc:	e0bffe17 	ldw	r2,-8(fp)
20021f00:	10800617 	ldw	r2,24(r2)
20021f04:	e0fffc17 	ldw	r3,-16(fp)
20021f08:	18bfec16 	blt	r3,r2,20021ebc <_gp+0xfffe295c>
        self->outputs[i] = values[i];
    }

    /* Start feed forwarding. */
    Layer* layer = self->lnext;
20021f0c:	e0bffe17 	ldw	r2,-8(fp)
20021f10:	10800217 	ldw	r2,8(r2)
20021f14:	e0bffd15 	stw	r2,-12(fp)
    while (layer != NULL) {
20021f18:	00001006 	br	20021f5c <Layer_setInputs+0x140>
        switch (layer->ltype) {
20021f1c:	e0bffd17 	ldw	r2,-12(fp)
20021f20:	10801017 	ldw	r2,64(r2)
20021f24:	10c00060 	cmpeqi	r3,r2,1
20021f28:	1800031e 	bne	r3,zero,20021f38 <Layer_setInputs+0x11c>
20021f2c:	108000a0 	cmpeqi	r2,r2,2
20021f30:	1000041e 	bne	r2,zero,20021f44 <Layer_setInputs+0x128>
            break;
        case LAYER_CONV:
            Layer_feedForw_conv(layer);
            break;
        default:
            break;
20021f34:	00000606 	br	20021f50 <Layer_setInputs+0x134>
    /* Start feed forwarding. */
    Layer* layer = self->lnext;
    while (layer != NULL) {
        switch (layer->ltype) {
        case LAYER_FULL:
            Layer_feedForw_full(layer);
20021f38:	e13ffd17 	ldw	r4,-12(fp)
20021f3c:	0020d380 	call	20020d38 <Layer_feedForw_full>
            break;
20021f40:	00000306 	br	20021f50 <Layer_setInputs+0x134>
        case LAYER_CONV:
            Layer_feedForw_conv(layer);
20021f44:	e13ffd17 	ldw	r4,-12(fp)
20021f48:	00214d00 	call	200214d0 <Layer_feedForw_conv>
            break;
20021f4c:	0001883a 	nop
        default:
            break;
        }
        layer = layer->lnext;
20021f50:	e0bffd17 	ldw	r2,-12(fp)
20021f54:	10800217 	ldw	r2,8(r2)
20021f58:	e0bffd15 	stw	r2,-12(fp)
        self->outputs[i] = values[i];
    }

    /* Start feed forwarding. */
    Layer* layer = self->lnext;
    while (layer != NULL) {
20021f5c:	e0bffd17 	ldw	r2,-12(fp)
20021f60:	103fee1e 	bne	r2,zero,20021f1c <_gp+0xfffe29bc>
        default:
            break;
        }
        layer = layer->lnext;
    }
}
20021f64:	0001883a 	nop
20021f68:	e037883a 	mov	sp,fp
20021f6c:	dfc00117 	ldw	ra,4(sp)
20021f70:	df000017 	ldw	fp,0(sp)
20021f74:	dec00204 	addi	sp,sp,8
20021f78:	f800283a 	ret

20021f7c <Layer_getOutputs>:

/* Layer_getOutputs(self, outputs)
   Gets the output values.
*/
void Layer_getOutputs(const Layer* self, double* outputs)
{
20021f7c:	defffb04 	addi	sp,sp,-20
20021f80:	dfc00415 	stw	ra,16(sp)
20021f84:	df000315 	stw	fp,12(sp)
20021f88:	df000304 	addi	fp,sp,12
20021f8c:	e13ffe15 	stw	r4,-8(fp)
20021f90:	e17fff15 	stw	r5,-4(fp)
    assert (self != NULL);
20021f94:	e0bffe17 	ldw	r2,-8(fp)
20021f98:	1000081e 	bne	r2,zero,20021fbc <Layer_getOutputs+0x40>
20021f9c:	01c800f4 	movhi	r7,8195
20021fa0:	39d42a04 	addi	r7,r7,20648
20021fa4:	018800f4 	movhi	r6,8195
20021fa8:	3194da04 	addi	r6,r6,21352
20021fac:	01407c44 	movi	r5,497
20021fb0:	010800f4 	movhi	r4,8195
20021fb4:	2113f604 	addi	r4,r4,20440
20021fb8:	0026e540 	call	20026e54 <__assert_func>
    for (int i = 0; i < self->nnodes; i++) {
20021fbc:	e03ffd15 	stw	zero,-12(fp)
20021fc0:	00001006 	br	20022004 <Layer_getOutputs+0x88>
        outputs[i] = self->outputs[i];
20021fc4:	e0bffd17 	ldw	r2,-12(fp)
20021fc8:	100490fa 	slli	r2,r2,3
20021fcc:	e0ffff17 	ldw	r3,-4(fp)
20021fd0:	1889883a 	add	r4,r3,r2
20021fd4:	e0bffe17 	ldw	r2,-8(fp)
20021fd8:	10c00717 	ldw	r3,28(r2)
20021fdc:	e0bffd17 	ldw	r2,-12(fp)
20021fe0:	100490fa 	slli	r2,r2,3
20021fe4:	188b883a 	add	r5,r3,r2
20021fe8:	28800017 	ldw	r2,0(r5)
20021fec:	28c00117 	ldw	r3,4(r5)
20021ff0:	20800015 	stw	r2,0(r4)
20021ff4:	20c00115 	stw	r3,4(r4)
   Gets the output values.
*/
void Layer_getOutputs(const Layer* self, double* outputs)
{
    assert (self != NULL);
    for (int i = 0; i < self->nnodes; i++) {
20021ff8:	e0bffd17 	ldw	r2,-12(fp)
20021ffc:	10800044 	addi	r2,r2,1
20022000:	e0bffd15 	stw	r2,-12(fp)
20022004:	e0bffe17 	ldw	r2,-8(fp)
20022008:	10800617 	ldw	r2,24(r2)
2002200c:	e0fffd17 	ldw	r3,-12(fp)
20022010:	18bfec16 	blt	r3,r2,20021fc4 <_gp+0xfffe2a64>
        outputs[i] = self->outputs[i];
    }
}
20022014:	0001883a 	nop
20022018:	e037883a 	mov	sp,fp
2002201c:	dfc00117 	ldw	ra,4(sp)
20022020:	df000017 	ldw	fp,0(sp)
20022024:	dec00204 	addi	sp,sp,8
20022028:	f800283a 	ret

2002202c <Layer_getErrorTotal>:

/* Layer_getErrorTotal(self)
   Gets the error total.
*/
double Layer_getErrorTotal(const Layer* self)
{
2002202c:	defff804 	addi	sp,sp,-32
20022030:	dfc00715 	stw	ra,28(sp)
20022034:	df000615 	stw	fp,24(sp)
20022038:	df000604 	addi	fp,sp,24
2002203c:	e13fff15 	stw	r4,-4(fp)
    assert (self != NULL);
20022040:	e0bfff17 	ldw	r2,-4(fp)
20022044:	1000081e 	bne	r2,zero,20022068 <Layer_getErrorTotal+0x3c>
20022048:	01c800f4 	movhi	r7,8195
2002204c:	39d42a04 	addi	r7,r7,20648
20022050:	018800f4 	movhi	r6,8195
20022054:	3194df04 	addi	r6,r6,21372
20022058:	01407f04 	movi	r5,508
2002205c:	010800f4 	movhi	r4,8195
20022060:	2113f604 	addi	r4,r4,20440
20022064:	0026e540 	call	20026e54 <__assert_func>
    double total = 0;
20022068:	e03ffa15 	stw	zero,-24(fp)
2002206c:	e03ffb15 	stw	zero,-20(fp)
    for (int i = 0; i < self->nnodes; i++) {
20022070:	e03ffc15 	stw	zero,-16(fp)
20022074:	00001e06 	br	200220f0 <Layer_getErrorTotal+0xc4>
        double e = self->errors[i];
20022078:	e0bfff17 	ldw	r2,-4(fp)
2002207c:	10c00917 	ldw	r3,36(r2)
20022080:	e0bffc17 	ldw	r2,-16(fp)
20022084:	100490fa 	slli	r2,r2,3
20022088:	1885883a 	add	r2,r3,r2
2002208c:	10c00017 	ldw	r3,0(r2)
20022090:	e0fffd15 	stw	r3,-12(fp)
20022094:	10800117 	ldw	r2,4(r2)
20022098:	e0bffe15 	stw	r2,-8(fp)
        total += e*e;
2002209c:	e1bffd17 	ldw	r6,-12(fp)
200220a0:	e1fffe17 	ldw	r7,-8(fp)
200220a4:	e13ffd17 	ldw	r4,-12(fp)
200220a8:	e17ffe17 	ldw	r5,-8(fp)
200220ac:	0025c800 	call	20025c80 <__muldf3>
200220b0:	1009883a 	mov	r4,r2
200220b4:	180b883a 	mov	r5,r3
200220b8:	2005883a 	mov	r2,r4
200220bc:	2807883a 	mov	r3,r5
200220c0:	100d883a 	mov	r6,r2
200220c4:	180f883a 	mov	r7,r3
200220c8:	e13ffa17 	ldw	r4,-24(fp)
200220cc:	e17ffb17 	ldw	r5,-20(fp)
200220d0:	002491c0 	call	2002491c <__adddf3>
200220d4:	1009883a 	mov	r4,r2
200220d8:	180b883a 	mov	r5,r3
200220dc:	e13ffa15 	stw	r4,-24(fp)
200220e0:	e17ffb15 	stw	r5,-20(fp)
*/
double Layer_getErrorTotal(const Layer* self)
{
    assert (self != NULL);
    double total = 0;
    for (int i = 0; i < self->nnodes; i++) {
200220e4:	e0bffc17 	ldw	r2,-16(fp)
200220e8:	10800044 	addi	r2,r2,1
200220ec:	e0bffc15 	stw	r2,-16(fp)
200220f0:	e0bfff17 	ldw	r2,-4(fp)
200220f4:	10800617 	ldw	r2,24(r2)
200220f8:	e0fffc17 	ldw	r3,-16(fp)
200220fc:	18bfde16 	blt	r3,r2,20022078 <_gp+0xfffe2b18>
        double e = self->errors[i];
        total += e*e;
    }
    return (total / self->nnodes);
20022100:	e0bfff17 	ldw	r2,-4(fp)
20022104:	10800617 	ldw	r2,24(r2)
20022108:	1009883a 	mov	r4,r2
2002210c:	0026d140 	call	20026d14 <__floatsidf>
20022110:	1009883a 	mov	r4,r2
20022114:	180b883a 	mov	r5,r3
20022118:	200d883a 	mov	r6,r4
2002211c:	280f883a 	mov	r7,r5
20022120:	e13ffa17 	ldw	r4,-24(fp)
20022124:	e17ffb17 	ldw	r5,-20(fp)
20022128:	00251c80 	call	200251c8 <__divdf3>
2002212c:	100f883a 	mov	r7,r2
20022130:	1811883a 	mov	r8,r3
20022134:	380b883a 	mov	r5,r7
20022138:	400d883a 	mov	r6,r8
2002213c:	2807883a 	mov	r3,r5
20022140:	3009883a 	mov	r4,r6
}
20022144:	1805883a 	mov	r2,r3
20022148:	2007883a 	mov	r3,r4
2002214c:	e037883a 	mov	sp,fp
20022150:	dfc00117 	ldw	ra,4(sp)
20022154:	df000017 	ldw	fp,0(sp)
20022158:	dec00204 	addi	sp,sp,8
2002215c:	f800283a 	ret

20022160 <Layer_learnOutputs>:

/* Layer_learnOutputs(self, values)
   Learns the output values.
*/
void Layer_learnOutputs(Layer* self, const double* values)
{
20022160:	defff904 	addi	sp,sp,-28
20022164:	dfc00615 	stw	ra,24(sp)
20022168:	df000515 	stw	fp,20(sp)
2002216c:	dc000415 	stw	r16,16(sp)
20022170:	df000504 	addi	fp,sp,20
20022174:	e13ffd15 	stw	r4,-12(fp)
20022178:	e17ffe15 	stw	r5,-8(fp)
    assert (self != NULL);
2002217c:	e0bffd17 	ldw	r2,-12(fp)
20022180:	1000081e 	bne	r2,zero,200221a4 <Layer_learnOutputs+0x44>
20022184:	01c800f4 	movhi	r7,8195
20022188:	39d42a04 	addi	r7,r7,20648
2002218c:	018800f4 	movhi	r6,8195
20022190:	3194e404 	addi	r6,r6,21392
20022194:	01408284 	movi	r5,522
20022198:	010800f4 	movhi	r4,8195
2002219c:	2113f604 	addi	r4,r4,20440
200221a0:	0026e540 	call	20026e54 <__assert_func>
    assert (self->ltype != LAYER_INPUT);
200221a4:	e0bffd17 	ldw	r2,-12(fp)
200221a8:	10801017 	ldw	r2,64(r2)
200221ac:	1000081e 	bne	r2,zero,200221d0 <Layer_learnOutputs+0x70>
200221b0:	01c800f4 	movhi	r7,8195
200221b4:	39d48d04 	addi	r7,r7,21044
200221b8:	018800f4 	movhi	r6,8195
200221bc:	3194e404 	addi	r6,r6,21392
200221c0:	014082c4 	movi	r5,523
200221c4:	010800f4 	movhi	r4,8195
200221c8:	2113f604 	addi	r4,r4,20440
200221cc:	0026e540 	call	20026e54 <__assert_func>
    assert (self->lprev != NULL);
200221d0:	e0bffd17 	ldw	r2,-12(fp)
200221d4:	10800117 	ldw	r2,4(r2)
200221d8:	1000081e 	bne	r2,zero,200221fc <Layer_learnOutputs+0x9c>
200221dc:	01c800f4 	movhi	r7,8195
200221e0:	39d46804 	addi	r7,r7,20896
200221e4:	018800f4 	movhi	r6,8195
200221e8:	3194e404 	addi	r6,r6,21392
200221ec:	01408304 	movi	r5,524
200221f0:	010800f4 	movhi	r4,8195
200221f4:	2113f604 	addi	r4,r4,20440
200221f8:	0026e540 	call	20026e54 <__assert_func>
    for (int i = 0; i < self->nnodes; i++) {
200221fc:	e03ffb15 	stw	zero,-20(fp)
20022200:	00002006 	br	20022284 <Layer_learnOutputs+0x124>
        self->errors[i] = (self->outputs[i] - values[i]);
20022204:	e0bffd17 	ldw	r2,-12(fp)
20022208:	10c00917 	ldw	r3,36(r2)
2002220c:	e0bffb17 	ldw	r2,-20(fp)
20022210:	100490fa 	slli	r2,r2,3
20022214:	18a1883a 	add	r16,r3,r2
20022218:	e0bffd17 	ldw	r2,-12(fp)
2002221c:	10c00717 	ldw	r3,28(r2)
20022220:	e0bffb17 	ldw	r2,-20(fp)
20022224:	100490fa 	slli	r2,r2,3
20022228:	1889883a 	add	r4,r3,r2
2002222c:	20800017 	ldw	r2,0(r4)
20022230:	20c00117 	ldw	r3,4(r4)
20022234:	e13ffb17 	ldw	r4,-20(fp)
20022238:	200890fa 	slli	r4,r4,3
2002223c:	e17ffe17 	ldw	r5,-8(fp)
20022240:	290d883a 	add	r6,r5,r4
20022244:	31000017 	ldw	r4,0(r6)
20022248:	31400117 	ldw	r5,4(r6)
2002224c:	200d883a 	mov	r6,r4
20022250:	280f883a 	mov	r7,r5
20022254:	1009883a 	mov	r4,r2
20022258:	180b883a 	mov	r5,r3
2002225c:	00263980 	call	20026398 <__subdf3>
20022260:	1009883a 	mov	r4,r2
20022264:	180b883a 	mov	r5,r3
20022268:	2005883a 	mov	r2,r4
2002226c:	2807883a 	mov	r3,r5
20022270:	80800015 	stw	r2,0(r16)
20022274:	80c00115 	stw	r3,4(r16)
void Layer_learnOutputs(Layer* self, const double* values)
{
    assert (self != NULL);
    assert (self->ltype != LAYER_INPUT);
    assert (self->lprev != NULL);
    for (int i = 0; i < self->nnodes; i++) {
20022278:	e0bffb17 	ldw	r2,-20(fp)
2002227c:	10800044 	addi	r2,r2,1
20022280:	e0bffb15 	stw	r2,-20(fp)
20022284:	e0bffd17 	ldw	r2,-12(fp)
20022288:	10800617 	ldw	r2,24(r2)
2002228c:	e0fffb17 	ldw	r3,-20(fp)
20022290:	18bfdc16 	blt	r3,r2,20022204 <_gp+0xfffe2ca4>
    }
    fprintf(stderr, "]\n");
#endif

    /* Start backpropagation. */
    Layer* layer = self;
20022294:	e0bffd17 	ldw	r2,-12(fp)
20022298:	e0bffc15 	stw	r2,-16(fp)
    while (layer != NULL) {
2002229c:	00001006 	br	200222e0 <Layer_learnOutputs+0x180>
        switch (layer->ltype) {
200222a0:	e0bffc17 	ldw	r2,-16(fp)
200222a4:	10801017 	ldw	r2,64(r2)
200222a8:	10c00060 	cmpeqi	r3,r2,1
200222ac:	1800031e 	bne	r3,zero,200222bc <Layer_learnOutputs+0x15c>
200222b0:	108000a0 	cmpeqi	r2,r2,2
200222b4:	1000041e 	bne	r2,zero,200222c8 <Layer_learnOutputs+0x168>
            break;
        case LAYER_CONV:
            Layer_feedBack_conv(layer);
            break;
        default:
            break;
200222b8:	00000606 	br	200222d4 <Layer_learnOutputs+0x174>
    /* Start backpropagation. */
    Layer* layer = self;
    while (layer != NULL) {
        switch (layer->ltype) {
        case LAYER_FULL:
            Layer_feedBack_full(layer);
200222bc:	e13ffc17 	ldw	r4,-16(fp)
200222c0:	002119c0 	call	2002119c <Layer_feedBack_full>
            break;
200222c4:	00000306 	br	200222d4 <Layer_learnOutputs+0x174>
        case LAYER_CONV:
            Layer_feedBack_conv(layer);
200222c8:	e13ffc17 	ldw	r4,-16(fp)
200222cc:	00218ec0 	call	200218ec <Layer_feedBack_conv>
            break;
200222d0:	0001883a 	nop
        default:
            break;
        }
        layer = layer->lprev;
200222d4:	e0bffc17 	ldw	r2,-16(fp)
200222d8:	10800117 	ldw	r2,4(r2)
200222dc:	e0bffc15 	stw	r2,-16(fp)
    fprintf(stderr, "]\n");
#endif

    /* Start backpropagation. */
    Layer* layer = self;
    while (layer != NULL) {
200222e0:	e0bffc17 	ldw	r2,-16(fp)
200222e4:	103fee1e 	bne	r2,zero,200222a0 <_gp+0xfffe2d40>
        default:
            break;
        }
        layer = layer->lprev;
    }
}
200222e8:	0001883a 	nop
200222ec:	e6ffff04 	addi	sp,fp,-4
200222f0:	dfc00217 	ldw	ra,8(sp)
200222f4:	df000117 	ldw	fp,4(sp)
200222f8:	dc000017 	ldw	r16,0(sp)
200222fc:	dec00304 	addi	sp,sp,12
20022300:	f800283a 	ret

20022304 <Layer_update>:

/* Layer_update(self, rate)
   Updates the weights.
*/
void Layer_update(Layer* self, double rate)
{
20022304:	defff604 	addi	sp,sp,-40
20022308:	dfc00915 	stw	ra,36(sp)
2002230c:	df000815 	stw	fp,32(sp)
20022310:	dc800715 	stw	r18,28(sp)
20022314:	dc400615 	stw	r17,24(sp)
20022318:	dc000515 	stw	r16,20(sp)
2002231c:	df000804 	addi	fp,sp,32
20022320:	e13ffa15 	stw	r4,-24(fp)
20022324:	e17ffb15 	stw	r5,-20(fp)
20022328:	e1bffc15 	stw	r6,-16(fp)
    for (int i = 0; i < self->nbiases; i++) {
2002232c:	e03ff815 	stw	zero,-32(fp)
20022330:	00003106 	br	200223f8 <Layer_update+0xf4>
        self->biases[i] -= rate * self->u_biases[i];
20022334:	e0bffa17 	ldw	r2,-24(fp)
20022338:	10c00b17 	ldw	r3,44(r2)
2002233c:	e0bff817 	ldw	r2,-32(fp)
20022340:	100490fa 	slli	r2,r2,3
20022344:	18a5883a 	add	r18,r3,r2
20022348:	e0bffa17 	ldw	r2,-24(fp)
2002234c:	10c00b17 	ldw	r3,44(r2)
20022350:	e0bff817 	ldw	r2,-32(fp)
20022354:	100490fa 	slli	r2,r2,3
20022358:	1885883a 	add	r2,r3,r2
2002235c:	14000017 	ldw	r16,0(r2)
20022360:	14400117 	ldw	r17,4(r2)
20022364:	e0bffa17 	ldw	r2,-24(fp)
20022368:	10c00c17 	ldw	r3,48(r2)
2002236c:	e0bff817 	ldw	r2,-32(fp)
20022370:	100490fa 	slli	r2,r2,3
20022374:	1889883a 	add	r4,r3,r2
20022378:	20800017 	ldw	r2,0(r4)
2002237c:	20c00117 	ldw	r3,4(r4)
20022380:	e1bffb17 	ldw	r6,-20(fp)
20022384:	e1fffc17 	ldw	r7,-16(fp)
20022388:	1009883a 	mov	r4,r2
2002238c:	180b883a 	mov	r5,r3
20022390:	0025c800 	call	20025c80 <__muldf3>
20022394:	1009883a 	mov	r4,r2
20022398:	180b883a 	mov	r5,r3
2002239c:	2005883a 	mov	r2,r4
200223a0:	2807883a 	mov	r3,r5
200223a4:	100d883a 	mov	r6,r2
200223a8:	180f883a 	mov	r7,r3
200223ac:	8009883a 	mov	r4,r16
200223b0:	880b883a 	mov	r5,r17
200223b4:	00263980 	call	20026398 <__subdf3>
200223b8:	1009883a 	mov	r4,r2
200223bc:	180b883a 	mov	r5,r3
200223c0:	2005883a 	mov	r2,r4
200223c4:	2807883a 	mov	r3,r5
200223c8:	90800015 	stw	r2,0(r18)
200223cc:	90c00115 	stw	r3,4(r18)
        self->u_biases[i] = 0;
200223d0:	e0bffa17 	ldw	r2,-24(fp)
200223d4:	10c00c17 	ldw	r3,48(r2)
200223d8:	e0bff817 	ldw	r2,-32(fp)
200223dc:	100490fa 	slli	r2,r2,3
200223e0:	1885883a 	add	r2,r3,r2
200223e4:	10000015 	stw	zero,0(r2)
200223e8:	10000115 	stw	zero,4(r2)
/* Layer_update(self, rate)
   Updates the weights.
*/
void Layer_update(Layer* self, double rate)
{
    for (int i = 0; i < self->nbiases; i++) {
200223ec:	e0bff817 	ldw	r2,-32(fp)
200223f0:	10800044 	addi	r2,r2,1
200223f4:	e0bff815 	stw	r2,-32(fp)
200223f8:	e0bffa17 	ldw	r2,-24(fp)
200223fc:	10800a17 	ldw	r2,40(r2)
20022400:	e0fff817 	ldw	r3,-32(fp)
20022404:	18bfcb16 	blt	r3,r2,20022334 <_gp+0xfffe2dd4>
        self->biases[i] -= rate * self->u_biases[i];
        self->u_biases[i] = 0;
    }
    for (int i = 0; i < self->nweights; i++) {
20022408:	e03ff915 	stw	zero,-28(fp)
2002240c:	00003106 	br	200224d4 <Layer_update+0x1d0>
        self->weights[i] -= rate * self->u_weights[i];
20022410:	e0bffa17 	ldw	r2,-24(fp)
20022414:	10c00e17 	ldw	r3,56(r2)
20022418:	e0bff917 	ldw	r2,-28(fp)
2002241c:	100490fa 	slli	r2,r2,3
20022420:	18a5883a 	add	r18,r3,r2
20022424:	e0bffa17 	ldw	r2,-24(fp)
20022428:	10c00e17 	ldw	r3,56(r2)
2002242c:	e0bff917 	ldw	r2,-28(fp)
20022430:	100490fa 	slli	r2,r2,3
20022434:	1885883a 	add	r2,r3,r2
20022438:	14000017 	ldw	r16,0(r2)
2002243c:	14400117 	ldw	r17,4(r2)
20022440:	e0bffa17 	ldw	r2,-24(fp)
20022444:	10c00f17 	ldw	r3,60(r2)
20022448:	e0bff917 	ldw	r2,-28(fp)
2002244c:	100490fa 	slli	r2,r2,3
20022450:	1889883a 	add	r4,r3,r2
20022454:	20800017 	ldw	r2,0(r4)
20022458:	20c00117 	ldw	r3,4(r4)
2002245c:	e1bffb17 	ldw	r6,-20(fp)
20022460:	e1fffc17 	ldw	r7,-16(fp)
20022464:	1009883a 	mov	r4,r2
20022468:	180b883a 	mov	r5,r3
2002246c:	0025c800 	call	20025c80 <__muldf3>
20022470:	1009883a 	mov	r4,r2
20022474:	180b883a 	mov	r5,r3
20022478:	2005883a 	mov	r2,r4
2002247c:	2807883a 	mov	r3,r5
20022480:	100d883a 	mov	r6,r2
20022484:	180f883a 	mov	r7,r3
20022488:	8009883a 	mov	r4,r16
2002248c:	880b883a 	mov	r5,r17
20022490:	00263980 	call	20026398 <__subdf3>
20022494:	1009883a 	mov	r4,r2
20022498:	180b883a 	mov	r5,r3
2002249c:	2005883a 	mov	r2,r4
200224a0:	2807883a 	mov	r3,r5
200224a4:	90800015 	stw	r2,0(r18)
200224a8:	90c00115 	stw	r3,4(r18)
        self->u_weights[i] = 0;
200224ac:	e0bffa17 	ldw	r2,-24(fp)
200224b0:	10c00f17 	ldw	r3,60(r2)
200224b4:	e0bff917 	ldw	r2,-28(fp)
200224b8:	100490fa 	slli	r2,r2,3
200224bc:	1885883a 	add	r2,r3,r2
200224c0:	10000015 	stw	zero,0(r2)
200224c4:	10000115 	stw	zero,4(r2)
{
    for (int i = 0; i < self->nbiases; i++) {
        self->biases[i] -= rate * self->u_biases[i];
        self->u_biases[i] = 0;
    }
    for (int i = 0; i < self->nweights; i++) {
200224c8:	e0bff917 	ldw	r2,-28(fp)
200224cc:	10800044 	addi	r2,r2,1
200224d0:	e0bff915 	stw	r2,-28(fp)
200224d4:	e0bffa17 	ldw	r2,-24(fp)
200224d8:	10800d17 	ldw	r2,52(r2)
200224dc:	e0fff917 	ldw	r3,-28(fp)
200224e0:	18bfcb16 	blt	r3,r2,20022410 <_gp+0xfffe2eb0>
        self->weights[i] -= rate * self->u_weights[i];
        self->u_weights[i] = 0;
    }
    if (self->lprev != NULL) {
200224e4:	e0bffa17 	ldw	r2,-24(fp)
200224e8:	10800117 	ldw	r2,4(r2)
200224ec:	10000626 	beq	r2,zero,20022508 <Layer_update+0x204>
        Layer_update(self->lprev, rate);
200224f0:	e0bffa17 	ldw	r2,-24(fp)
200224f4:	10800117 	ldw	r2,4(r2)
200224f8:	e17ffb17 	ldw	r5,-20(fp)
200224fc:	e1bffc17 	ldw	r6,-16(fp)
20022500:	1009883a 	mov	r4,r2
20022504:	00223040 	call	20022304 <Layer_update>
    }
}
20022508:	0001883a 	nop
2002250c:	e6fffd04 	addi	sp,fp,-12
20022510:	dfc00417 	ldw	ra,16(sp)
20022514:	df000317 	ldw	fp,12(sp)
20022518:	dc800217 	ldw	r18,8(sp)
2002251c:	dc400117 	ldw	r17,4(sp)
20022520:	dc000017 	ldw	r16,0(sp)
20022524:	dec00504 	addi	sp,sp,20
20022528:	f800283a 	ret

2002252c <Layer_create_input>:
Layer* Layer_create_input(int depth, int width, int height)
{
2002252c:	defff804 	addi	sp,sp,-32
20022530:	dfc00715 	stw	ra,28(sp)
20022534:	df000615 	stw	fp,24(sp)
20022538:	df000604 	addi	fp,sp,24
2002253c:	e13ffd15 	stw	r4,-12(fp)
20022540:	e17ffe15 	stw	r5,-8(fp)
20022544:	e1bfff15 	stw	r6,-4(fp)
    return Layer_create(
20022548:	d8000215 	stw	zero,8(sp)
2002254c:	d8000115 	stw	zero,4(sp)
20022550:	e0bfff17 	ldw	r2,-4(fp)
20022554:	d8800015 	stw	r2,0(sp)
20022558:	e1fffe17 	ldw	r7,-8(fp)
2002255c:	e1bffd17 	ldw	r6,-12(fp)
20022560:	000b883a 	mov	r5,zero
20022564:	0009883a 	mov	r4,zero
20022568:	00205000 	call	20020500 <Layer_create>
        NULL, LAYER_INPUT, depth, width, height, 0, 0);
}
2002256c:	e037883a 	mov	sp,fp
20022570:	dfc00117 	ldw	ra,4(sp)
20022574:	df000017 	ldw	fp,0(sp)
20022578:	dec00204 	addi	sp,sp,8
2002257c:	f800283a 	ret

20022580 <Layer_create_full>:


Layer* Layer_create_full(Layer* lprev, int nnodes, double std)
{
20022580:	defff404 	addi	sp,sp,-48
20022584:	dfc00b15 	stw	ra,44(sp)
20022588:	df000a15 	stw	fp,40(sp)
2002258c:	dc000915 	stw	r16,36(sp)
20022590:	df000a04 	addi	fp,sp,40
20022594:	e13ffb15 	stw	r4,-20(fp)
20022598:	e17ffc15 	stw	r5,-16(fp)
2002259c:	e1bffd15 	stw	r6,-12(fp)
200225a0:	e1fffe15 	stw	r7,-8(fp)
    assert (lprev != NULL);
200225a4:	e0bffb17 	ldw	r2,-20(fp)
200225a8:	1000081e 	bne	r2,zero,200225cc <Layer_create_full+0x4c>
200225ac:	01c800f4 	movhi	r7,8195
200225b0:	39d44404 	addi	r7,r7,20752
200225b4:	018800f4 	movhi	r6,8195
200225b8:	3194e904 	addi	r6,r6,21412
200225bc:	01409104 	movi	r5,580
200225c0:	010800f4 	movhi	r4,8195
200225c4:	2113f604 	addi	r4,r4,20440
200225c8:	0026e540 	call	20026e54 <__assert_func>
    Layer* self = Layer_create(
        lprev, LAYER_FULL, nnodes, 1, 1,
        nnodes, nnodes * lprev->nnodes);
200225cc:	e0bffb17 	ldw	r2,-20(fp)
200225d0:	10c00617 	ldw	r3,24(r2)


Layer* Layer_create_full(Layer* lprev, int nnodes, double std)
{
    assert (lprev != NULL);
    Layer* self = Layer_create(
200225d4:	e0bffc17 	ldw	r2,-16(fp)
200225d8:	1885383a 	mul	r2,r3,r2
200225dc:	d8800215 	stw	r2,8(sp)
200225e0:	e0bffc17 	ldw	r2,-16(fp)
200225e4:	d8800115 	stw	r2,4(sp)
200225e8:	00800044 	movi	r2,1
200225ec:	d8800015 	stw	r2,0(sp)
200225f0:	01c00044 	movi	r7,1
200225f4:	e1bffc17 	ldw	r6,-16(fp)
200225f8:	01400044 	movi	r5,1
200225fc:	e13ffb17 	ldw	r4,-20(fp)
20022600:	00205000 	call	20020500 <Layer_create>
20022604:	e0bffa15 	stw	r2,-24(fp)
        lprev, LAYER_FULL, nnodes, 1, 1,
        nnodes, nnodes * lprev->nnodes);
    assert (self != NULL);
20022608:	e0bffa17 	ldw	r2,-24(fp)
2002260c:	1000081e 	bne	r2,zero,20022630 <Layer_create_full+0xb0>
20022610:	01c800f4 	movhi	r7,8195
20022614:	39d42a04 	addi	r7,r7,20648
20022618:	018800f4 	movhi	r6,8195
2002261c:	3194e904 	addi	r6,r6,21412
20022620:	01409204 	movi	r5,584
20022624:	010800f4 	movhi	r4,8195
20022628:	2113f604 	addi	r4,r4,20440
2002262c:	0026e540 	call	20026e54 <__assert_func>
    //alt_putstr("line 581\n");

    for (int i = 0; i < self->nweights; i++) {
20022630:	e03ff915 	stw	zero,-28(fp)
20022634:	00001606 	br	20022690 <Layer_create_full+0x110>
        self->weights[i] = std * nrnd();
20022638:	e0bffa17 	ldw	r2,-24(fp)
2002263c:	10c00e17 	ldw	r3,56(r2)
20022640:	e0bff917 	ldw	r2,-28(fp)
20022644:	100490fa 	slli	r2,r2,3
20022648:	18a1883a 	add	r16,r3,r2
2002264c:	002027c0 	call	2002027c <nrnd>
20022650:	1011883a 	mov	r8,r2
20022654:	1813883a 	mov	r9,r3
20022658:	e1bffd17 	ldw	r6,-12(fp)
2002265c:	e1fffe17 	ldw	r7,-8(fp)
20022660:	4009883a 	mov	r4,r8
20022664:	480b883a 	mov	r5,r9
20022668:	0025c800 	call	20025c80 <__muldf3>
2002266c:	1009883a 	mov	r4,r2
20022670:	180b883a 	mov	r5,r3
20022674:	2005883a 	mov	r2,r4
20022678:	2807883a 	mov	r3,r5
2002267c:	80800015 	stw	r2,0(r16)
20022680:	80c00115 	stw	r3,4(r16)
        lprev, LAYER_FULL, nnodes, 1, 1,
        nnodes, nnodes * lprev->nnodes);
    assert (self != NULL);
    //alt_putstr("line 581\n");

    for (int i = 0; i < self->nweights; i++) {
20022684:	e0bff917 	ldw	r2,-28(fp)
20022688:	10800044 	addi	r2,r2,1
2002268c:	e0bff915 	stw	r2,-28(fp)
20022690:	e0bffa17 	ldw	r2,-24(fp)
20022694:	10800d17 	ldw	r2,52(r2)
20022698:	e0fff917 	ldw	r3,-28(fp)
2002269c:	18bfe616 	blt	r3,r2,20022638 <_gp+0xfffe30d8>
        self->weights[i] = std * nrnd();
    }
    return self;
200226a0:	e0bffa17 	ldw	r2,-24(fp)
}
200226a4:	e6ffff04 	addi	sp,fp,-4
200226a8:	dfc00217 	ldw	ra,8(sp)
200226ac:	df000117 	ldw	fp,4(sp)
200226b0:	dc000017 	ldw	r16,0(sp)
200226b4:	dec00304 	addi	sp,sp,12
200226b8:	f800283a 	ret

200226bc <Layer_create_conv>:
   Creates a convolutional Layer.
*/
Layer* Layer_create_conv(
    Layer* lprev, int depth, int width, int height,
    int kernsize, int padding, int stride, double std)
{
200226bc:	defff404 	addi	sp,sp,-48
200226c0:	dfc00b15 	stw	ra,44(sp)
200226c4:	df000a15 	stw	fp,40(sp)
200226c8:	dc000915 	stw	r16,36(sp)
200226cc:	df000a04 	addi	fp,sp,40
200226d0:	e13ffb15 	stw	r4,-20(fp)
200226d4:	e17ffc15 	stw	r5,-16(fp)
200226d8:	e1bffd15 	stw	r6,-12(fp)
200226dc:	e1fffe15 	stw	r7,-8(fp)
    assert (lprev != NULL);
200226e0:	e0bffb17 	ldw	r2,-20(fp)
200226e4:	1000081e 	bne	r2,zero,20022708 <Layer_create_conv+0x4c>
200226e8:	01c800f4 	movhi	r7,8195
200226ec:	39d44404 	addi	r7,r7,20752
200226f0:	018800f4 	movhi	r6,8195
200226f4:	3194ee04 	addi	r6,r6,21432
200226f8:	01409604 	movi	r5,600
200226fc:	010800f4 	movhi	r4,8195
20022700:	2113f604 	addi	r4,r4,20440
20022704:	0026e540 	call	20026e54 <__assert_func>
    assert ((kernsize % 2) == 1);
20022708:	e0c00217 	ldw	r3,8(fp)
2002270c:	00a00034 	movhi	r2,32768
20022710:	10800044 	addi	r2,r2,1
20022714:	1884703a 	and	r2,r3,r2
20022718:	1000040e 	bge	r2,zero,2002272c <Layer_create_conv+0x70>
2002271c:	10bfffc4 	addi	r2,r2,-1
20022720:	00ffff84 	movi	r3,-2
20022724:	10c4b03a 	or	r2,r2,r3
20022728:	10800044 	addi	r2,r2,1
2002272c:	10800060 	cmpeqi	r2,r2,1
20022730:	1000081e 	bne	r2,zero,20022754 <Layer_create_conv+0x98>
20022734:	01c800f4 	movhi	r7,8195
20022738:	39d49404 	addi	r7,r7,21072
2002273c:	018800f4 	movhi	r6,8195
20022740:	3194ee04 	addi	r6,r6,21432
20022744:	01409644 	movi	r5,601
20022748:	010800f4 	movhi	r4,8195
2002274c:	2113f604 	addi	r4,r4,20440
20022750:	0026e540 	call	20026e54 <__assert_func>
    assert ((width-1) * stride + kernsize <= lprev->width + padding*2);
20022754:	e0bffd17 	ldw	r2,-12(fp)
20022758:	10ffffc4 	addi	r3,r2,-1
2002275c:	e0800417 	ldw	r2,16(fp)
20022760:	1887383a 	mul	r3,r3,r2
20022764:	e0800217 	ldw	r2,8(fp)
20022768:	1887883a 	add	r3,r3,r2
2002276c:	e0bffb17 	ldw	r2,-20(fp)
20022770:	11000417 	ldw	r4,16(r2)
20022774:	e0800317 	ldw	r2,12(fp)
20022778:	1085883a 	add	r2,r2,r2
2002277c:	2085883a 	add	r2,r4,r2
20022780:	10c0080e 	bge	r2,r3,200227a4 <Layer_create_conv+0xe8>
20022784:	01c800f4 	movhi	r7,8195
20022788:	39d49904 	addi	r7,r7,21092
2002278c:	018800f4 	movhi	r6,8195
20022790:	3194ee04 	addi	r6,r6,21432
20022794:	01409684 	movi	r5,602
20022798:	010800f4 	movhi	r4,8195
2002279c:	2113f604 	addi	r4,r4,20440
200227a0:	0026e540 	call	20026e54 <__assert_func>
    assert ((height-1) * stride + kernsize <= lprev->height + padding*2);
200227a4:	e0bffe17 	ldw	r2,-8(fp)
200227a8:	10ffffc4 	addi	r3,r2,-1
200227ac:	e0800417 	ldw	r2,16(fp)
200227b0:	1887383a 	mul	r3,r3,r2
200227b4:	e0800217 	ldw	r2,8(fp)
200227b8:	1887883a 	add	r3,r3,r2
200227bc:	e0bffb17 	ldw	r2,-20(fp)
200227c0:	11000517 	ldw	r4,20(r2)
200227c4:	e0800317 	ldw	r2,12(fp)
200227c8:	1085883a 	add	r2,r2,r2
200227cc:	2085883a 	add	r2,r4,r2
200227d0:	10c0080e 	bge	r2,r3,200227f4 <Layer_create_conv+0x138>
200227d4:	01c800f4 	movhi	r7,8195
200227d8:	39d4a804 	addi	r7,r7,21152
200227dc:	018800f4 	movhi	r6,8195
200227e0:	3194ee04 	addi	r6,r6,21432
200227e4:	014096c4 	movi	r5,603
200227e8:	010800f4 	movhi	r4,8195
200227ec:	2113f604 	addi	r4,r4,20440
200227f0:	0026e540 	call	20026e54 <__assert_func>

    Layer* self = Layer_create(
        lprev, LAYER_CONV, depth, width, height,
        depth, depth * lprev->depth * kernsize * kernsize);
200227f4:	e0bffb17 	ldw	r2,-20(fp)
200227f8:	10c00317 	ldw	r3,12(r2)
200227fc:	e0bffc17 	ldw	r2,-16(fp)
20022800:	1887383a 	mul	r3,r3,r2
20022804:	e0800217 	ldw	r2,8(fp)
20022808:	1887383a 	mul	r3,r3,r2
    assert (lprev != NULL);
    assert ((kernsize % 2) == 1);
    assert ((width-1) * stride + kernsize <= lprev->width + padding*2);
    assert ((height-1) * stride + kernsize <= lprev->height + padding*2);

    Layer* self = Layer_create(
2002280c:	e0800217 	ldw	r2,8(fp)
20022810:	1885383a 	mul	r2,r3,r2
20022814:	d8800215 	stw	r2,8(sp)
20022818:	e0bffc17 	ldw	r2,-16(fp)
2002281c:	d8800115 	stw	r2,4(sp)
20022820:	e0bffe17 	ldw	r2,-8(fp)
20022824:	d8800015 	stw	r2,0(sp)
20022828:	e1fffd17 	ldw	r7,-12(fp)
2002282c:	e1bffc17 	ldw	r6,-16(fp)
20022830:	01400084 	movi	r5,2
20022834:	e13ffb17 	ldw	r4,-20(fp)
20022838:	00205000 	call	20020500 <Layer_create>
2002283c:	e0bffa15 	stw	r2,-24(fp)
        lprev, LAYER_CONV, depth, width, height,
        depth, depth * lprev->depth * kernsize * kernsize);
    assert (self != NULL);
20022840:	e0bffa17 	ldw	r2,-24(fp)
20022844:	1000081e 	bne	r2,zero,20022868 <Layer_create_conv+0x1ac>
20022848:	01c800f4 	movhi	r7,8195
2002284c:	39d42a04 	addi	r7,r7,20648
20022850:	018800f4 	movhi	r6,8195
20022854:	3194ee04 	addi	r6,r6,21432
20022858:	01409804 	movi	r5,608
2002285c:	010800f4 	movhi	r4,8195
20022860:	2113f604 	addi	r4,r4,20440
20022864:	0026e540 	call	20026e54 <__assert_func>


    self->conv.kernsize = kernsize;
20022868:	e0bffa17 	ldw	r2,-24(fp)
2002286c:	e0c00217 	ldw	r3,8(fp)
20022870:	10c01115 	stw	r3,68(r2)
    self->conv.padding = padding;
20022874:	e0bffa17 	ldw	r2,-24(fp)
20022878:	e0c00317 	ldw	r3,12(fp)
2002287c:	10c01215 	stw	r3,72(r2)
    self->conv.stride = stride;
20022880:	e0bffa17 	ldw	r2,-24(fp)
20022884:	e0c00417 	ldw	r3,16(fp)
20022888:	10c01315 	stw	r3,76(r2)

    for (int i = 0; i < self->nweights; i++) {
2002288c:	e03ff915 	stw	zero,-28(fp)
20022890:	00001606 	br	200228ec <Layer_create_conv+0x230>
        self->weights[i] = std * nrnd();
20022894:	e0bffa17 	ldw	r2,-24(fp)
20022898:	10c00e17 	ldw	r3,56(r2)
2002289c:	e0bff917 	ldw	r2,-28(fp)
200228a0:	100490fa 	slli	r2,r2,3
200228a4:	18a1883a 	add	r16,r3,r2
200228a8:	002027c0 	call	2002027c <nrnd>
200228ac:	1011883a 	mov	r8,r2
200228b0:	1813883a 	mov	r9,r3
200228b4:	e1800517 	ldw	r6,20(fp)
200228b8:	e1c00617 	ldw	r7,24(fp)
200228bc:	4009883a 	mov	r4,r8
200228c0:	480b883a 	mov	r5,r9
200228c4:	0025c800 	call	20025c80 <__muldf3>
200228c8:	1009883a 	mov	r4,r2
200228cc:	180b883a 	mov	r5,r3
200228d0:	2005883a 	mov	r2,r4
200228d4:	2807883a 	mov	r3,r5
200228d8:	80800015 	stw	r2,0(r16)
200228dc:	80c00115 	stw	r3,4(r16)

    self->conv.kernsize = kernsize;
    self->conv.padding = padding;
    self->conv.stride = stride;

    for (int i = 0; i < self->nweights; i++) {
200228e0:	e0bff917 	ldw	r2,-28(fp)
200228e4:	10800044 	addi	r2,r2,1
200228e8:	e0bff915 	stw	r2,-28(fp)
200228ec:	e0bffa17 	ldw	r2,-24(fp)
200228f0:	10800d17 	ldw	r2,52(r2)
200228f4:	e0fff917 	ldw	r3,-28(fp)
200228f8:	18bfe616 	blt	r3,r2,20022894 <_gp+0xfffe3334>
    }

#if DEBUG_LAYER
    Layer_dump(self, stderr);
#endif
    return self;
200228fc:	e0bffa17 	ldw	r2,-24(fp)
}
20022900:	e6ffff04 	addi	sp,fp,-4
20022904:	dfc00217 	ldw	ra,8(sp)
20022908:	df000117 	ldw	fp,4(sp)
2002290c:	dc000017 	ldw	r16,0(sp)
20022910:	dec00304 	addi	sp,sp,12
20022914:	f800283a 	ret

20022918 <__uint32_identity>:
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
20022918:	defffe04 	addi	sp,sp,-8
2002291c:	df000115 	stw	fp,4(sp)
20022920:	df000104 	addi	fp,sp,4
20022924:	e13fff15 	stw	r4,-4(fp)
  return __x;
20022928:	e0bfff17 	ldw	r2,-4(fp)
}
2002292c:	e037883a 	mov	sp,fp
20022930:	df000017 	ldw	fp,0(sp)
20022934:	dec00104 	addi	sp,sp,4
20022938:	f800283a 	ret

2002293c <IdxFile_read>:

/* IdxFile_read(fp)
   Reads all the data from given fp.
*/
IdxFile* IdxFile_read(FILE* fp)
{
2002293c:	defff704 	addi	sp,sp,-36
20022940:	dfc00815 	stw	ra,32(sp)
20022944:	df000715 	stw	fp,28(sp)
20022948:	df000704 	addi	fp,sp,28
2002294c:	e13fff15 	stw	r4,-4(fp)
        uint16_t magic;
        uint8_t type;
        uint8_t ndims;
        /* big endian */
    } header;
    if (fread(&header, sizeof(header), 1, fp) != 1) return NULL;
20022950:	e0bffe04 	addi	r2,fp,-8
20022954:	e1ffff17 	ldw	r7,-4(fp)
20022958:	01800044 	movi	r6,1
2002295c:	01400104 	movi	r5,4
20022960:	1009883a 	mov	r4,r2
20022964:	0027ae80 	call	20027ae8 <fread>
20022968:	10800060 	cmpeqi	r2,r2,1
2002296c:	1000021e 	bne	r2,zero,20022978 <IdxFile_read+0x3c>
20022970:	0005883a 	mov	r2,zero
20022974:	00009106 	br	20022bbc <IdxFile_read+0x280>
    alt_putstr("bla1...\n");
20022978:	010800f4 	movhi	r4,8195
2002297c:	2114f304 	addi	r4,r4,21452
20022980:	0032af80 	call	20032af8 <alt_putstr>
#if DEBUG_IDXFILE
    fprintf(stderr, "IdxFile_read: magic=%x, type=%x, ndims=%u\n",
20022984:	d0a00217 	ldw	r2,-32760(gp)
20022988:	10c00317 	ldw	r3,12(r2)
            header.magic, header.type, header.ndims);
2002298c:	e0bffe0b 	ldhu	r2,-8(fp)
        /* big endian */
    } header;
    if (fread(&header, sizeof(header), 1, fp) != 1) return NULL;
    alt_putstr("bla1...\n");
#if DEBUG_IDXFILE
    fprintf(stderr, "IdxFile_read: magic=%x, type=%x, ndims=%u\n",
20022990:	113fffcc 	andi	r4,r2,65535
            header.magic, header.type, header.ndims);
20022994:	e0bffe83 	ldbu	r2,-6(fp)
        /* big endian */
    } header;
    if (fread(&header, sizeof(header), 1, fp) != 1) return NULL;
    alt_putstr("bla1...\n");
#if DEBUG_IDXFILE
    fprintf(stderr, "IdxFile_read: magic=%x, type=%x, ndims=%u\n",
20022998:	11403fcc 	andi	r5,r2,255
            header.magic, header.type, header.ndims);
2002299c:	e0bffec3 	ldbu	r2,-5(fp)
        /* big endian */
    } header;
    if (fread(&header, sizeof(header), 1, fp) != 1) return NULL;
    alt_putstr("bla1...\n");
#if DEBUG_IDXFILE
    fprintf(stderr, "IdxFile_read: magic=%x, type=%x, ndims=%u\n",
200229a0:	10803fcc 	andi	r2,r2,255
200229a4:	d8800015 	stw	r2,0(sp)
200229a8:	280f883a 	mov	r7,r5
200229ac:	200d883a 	mov	r6,r4
200229b0:	014800f4 	movhi	r5,8195
200229b4:	2954f604 	addi	r5,r5,21464
200229b8:	1809883a 	mov	r4,r3
200229bc:	00278980 	call	20027898 <fprintf>
            header.magic, header.type, header.ndims);
#endif
    //if (header.magic != 0) return NULL;
    alt_putstr("bla...\n");
200229c0:	010800f4 	movhi	r4,8195
200229c4:	21150104 	addi	r4,r4,21508
200229c8:	0032af80 	call	20032af8 <alt_putstr>
    if (header.type != 0x08) return NULL;
200229cc:	e0bffe83 	ldbu	r2,-6(fp)
200229d0:	10803fcc 	andi	r2,r2,255
200229d4:	10800220 	cmpeqi	r2,r2,8
200229d8:	1000021e 	bne	r2,zero,200229e4 <IdxFile_read+0xa8>
200229dc:	0005883a 	mov	r2,zero
200229e0:	00007606 	br	20022bbc <IdxFile_read+0x280>
    alt_putstr("bla...\n");
200229e4:	010800f4 	movhi	r4,8195
200229e8:	21150104 	addi	r4,r4,21508
200229ec:	0032af80 	call	20032af8 <alt_putstr>
    if (header.ndims < 1) return NULL;
200229f0:	e0bffec3 	ldbu	r2,-5(fp)
200229f4:	10803fcc 	andi	r2,r2,255
200229f8:	1000021e 	bne	r2,zero,20022a04 <IdxFile_read+0xc8>
200229fc:	0005883a 	mov	r2,zero
20022a00:	00006e06 	br	20022bbc <IdxFile_read+0x280>

    /* Read the dimensions. */
    alt_putstr("bla4...\n");
20022a04:	010800f4 	movhi	r4,8195
20022a08:	21150304 	addi	r4,r4,21516
20022a0c:	0032af80 	call	20032af8 <alt_putstr>
    IdxFile* self = (IdxFile*)calloc(1, sizeof(IdxFile));
20022a10:	01400304 	movi	r5,12
20022a14:	01000044 	movi	r4,1
20022a18:	0026ed00 	call	20026ed0 <calloc>
20022a1c:	e0bffc15 	stw	r2,-16(fp)
    if (self == NULL) return NULL;
20022a20:	e0bffc17 	ldw	r2,-16(fp)
20022a24:	1000021e 	bne	r2,zero,20022a30 <IdxFile_read+0xf4>
20022a28:	0005883a 	mov	r2,zero
20022a2c:	00006306 	br	20022bbc <IdxFile_read+0x280>
    self->ndims = header.ndims;
20022a30:	e0bffec3 	ldbu	r2,-5(fp)
20022a34:	10c03fcc 	andi	r3,r2,255
20022a38:	e0bffc17 	ldw	r2,-16(fp)
20022a3c:	10c00015 	stw	r3,0(r2)
    self->dims = (uint32_t*)calloc(self->ndims, sizeof(uint32_t));
20022a40:	e0bffc17 	ldw	r2,-16(fp)
20022a44:	10800017 	ldw	r2,0(r2)
20022a48:	01400104 	movi	r5,4
20022a4c:	1009883a 	mov	r4,r2
20022a50:	0026ed00 	call	20026ed0 <calloc>
20022a54:	1007883a 	mov	r3,r2
20022a58:	e0bffc17 	ldw	r2,-16(fp)
20022a5c:	10c00115 	stw	r3,4(r2)
    if (self->dims == NULL) return NULL;
20022a60:	e0bffc17 	ldw	r2,-16(fp)
20022a64:	10800117 	ldw	r2,4(r2)
20022a68:	1000021e 	bne	r2,zero,20022a74 <IdxFile_read+0x138>
20022a6c:	0005883a 	mov	r2,zero
20022a70:	00005206 	br	20022bbc <IdxFile_read+0x280>
    alt_putstr("bla...\n");
20022a74:	010800f4 	movhi	r4,8195
20022a78:	21150104 	addi	r4,r4,21508
20022a7c:	0032af80 	call	20032af8 <alt_putstr>

    if (fread(self->dims, sizeof(uint32_t), self->ndims, fp) == self->ndims) {
20022a80:	e0bffc17 	ldw	r2,-16(fp)
20022a84:	10c00117 	ldw	r3,4(r2)
20022a88:	e0bffc17 	ldw	r2,-16(fp)
20022a8c:	10800017 	ldw	r2,0(r2)
20022a90:	e1ffff17 	ldw	r7,-4(fp)
20022a94:	100d883a 	mov	r6,r2
20022a98:	01400104 	movi	r5,4
20022a9c:	1809883a 	mov	r4,r3
20022aa0:	0027ae80 	call	20027ae8 <fread>
20022aa4:	1007883a 	mov	r3,r2
20022aa8:	e0bffc17 	ldw	r2,-16(fp)
20022aac:	10800017 	ldw	r2,0(r2)
20022ab0:	1880411e 	bne	r3,r2,20022bb8 <IdxFile_read+0x27c>
        uint32_t nbytes = sizeof(uint8_t);
20022ab4:	00800044 	movi	r2,1
20022ab8:	e0bffa15 	stw	r2,-24(fp)
        for (int i = 0; i < self->ndims; i++) {
20022abc:	e03ffb15 	stw	zero,-20(fp)
20022ac0:	00002406 	br	20022b54 <IdxFile_read+0x218>
            /* Fix the byte order. */
            uint32_t size = be32toh(self->dims[i]);
20022ac4:	e0bffc17 	ldw	r2,-16(fp)
20022ac8:	10c00117 	ldw	r3,4(r2)
20022acc:	e0bffb17 	ldw	r2,-20(fp)
20022ad0:	1085883a 	add	r2,r2,r2
20022ad4:	1085883a 	add	r2,r2,r2
20022ad8:	1885883a 	add	r2,r3,r2
20022adc:	10800017 	ldw	r2,0(r2)
20022ae0:	1009883a 	mov	r4,r2
20022ae4:	00229180 	call	20022918 <__uint32_identity>
20022ae8:	e0bffd15 	stw	r2,-12(fp)
    alt_putstr("bla...\n");
20022aec:	010800f4 	movhi	r4,8195
20022af0:	21150104 	addi	r4,r4,21508
20022af4:	0032af80 	call	20032af8 <alt_putstr>
#if DEBUG_IDXFILE
            fprintf(stderr, "IdxFile_read: size[%d]=%u\n", i, size);
20022af8:	d0a00217 	ldw	r2,-32760(gp)
20022afc:	10800317 	ldw	r2,12(r2)
20022b00:	e1fffd17 	ldw	r7,-12(fp)
20022b04:	e1bffb17 	ldw	r6,-20(fp)
20022b08:	014800f4 	movhi	r5,8195
20022b0c:	29550604 	addi	r5,r5,21528
20022b10:	1009883a 	mov	r4,r2
20022b14:	00278980 	call	20027898 <fprintf>
#endif
            nbytes *= size;
20022b18:	e0fffa17 	ldw	r3,-24(fp)
20022b1c:	e0bffd17 	ldw	r2,-12(fp)
20022b20:	1885383a 	mul	r2,r3,r2
20022b24:	e0bffa15 	stw	r2,-24(fp)
            self->dims[i] = size;
20022b28:	e0bffc17 	ldw	r2,-16(fp)
20022b2c:	10c00117 	ldw	r3,4(r2)
20022b30:	e0bffb17 	ldw	r2,-20(fp)
20022b34:	1085883a 	add	r2,r2,r2
20022b38:	1085883a 	add	r2,r2,r2
20022b3c:	1885883a 	add	r2,r3,r2
20022b40:	e0fffd17 	ldw	r3,-12(fp)
20022b44:	10c00015 	stw	r3,0(r2)
    if (self->dims == NULL) return NULL;
    alt_putstr("bla...\n");

    if (fread(self->dims, sizeof(uint32_t), self->ndims, fp) == self->ndims) {
        uint32_t nbytes = sizeof(uint8_t);
        for (int i = 0; i < self->ndims; i++) {
20022b48:	e0bffb17 	ldw	r2,-20(fp)
20022b4c:	10800044 	addi	r2,r2,1
20022b50:	e0bffb15 	stw	r2,-20(fp)
20022b54:	e0bffc17 	ldw	r2,-16(fp)
20022b58:	10800017 	ldw	r2,0(r2)
20022b5c:	e0fffb17 	ldw	r3,-20(fp)
20022b60:	18bfd816 	blt	r3,r2,20022ac4 <_gp+0xfffe3564>
#endif
            nbytes *= size;
            self->dims[i] = size;
        }
        /* Read the data. */
        self->data = (uint8_t*) malloc(nbytes);
20022b64:	e13ffa17 	ldw	r4,-24(fp)
20022b68:	00288700 	call	20028870 <malloc>
20022b6c:	1007883a 	mov	r3,r2
20022b70:	e0bffc17 	ldw	r2,-16(fp)
20022b74:	10c00215 	stw	r3,8(r2)
        if (self->data != NULL) {
20022b78:	e0bffc17 	ldw	r2,-16(fp)
20022b7c:	10800217 	ldw	r2,8(r2)
20022b80:	10000d26 	beq	r2,zero,20022bb8 <IdxFile_read+0x27c>
            fread(self->data, sizeof(uint8_t), nbytes, fp);
20022b84:	e0bffc17 	ldw	r2,-16(fp)
20022b88:	10800217 	ldw	r2,8(r2)
20022b8c:	e1ffff17 	ldw	r7,-4(fp)
20022b90:	e1bffa17 	ldw	r6,-24(fp)
20022b94:	01400044 	movi	r5,1
20022b98:	1009883a 	mov	r4,r2
20022b9c:	0027ae80 	call	20027ae8 <fread>
#if DEBUG_IDXFILE
            fprintf(stderr, "IdxFile_read: read: %lu bytes\n");
20022ba0:	d0a00217 	ldw	r2,-32760(gp)
20022ba4:	10800317 	ldw	r2,12(r2)
20022ba8:	014800f4 	movhi	r5,8195
20022bac:	29550d04 	addi	r5,r5,21556
20022bb0:	1009883a 	mov	r4,r2
20022bb4:	00278980 	call	20027898 <fprintf>
#endif
        }
    }

    return self;
20022bb8:	e0bffc17 	ldw	r2,-16(fp)
}
20022bbc:	e037883a 	mov	sp,fp
20022bc0:	dfc00117 	ldw	ra,4(sp)
20022bc4:	df000017 	ldw	fp,0(sp)
20022bc8:	dec00204 	addi	sp,sp,8
20022bcc:	f800283a 	ret

20022bd0 <IdxFile_destroy>:




void IdxFile_destroy(IdxFile* self)
{
20022bd0:	defffd04 	addi	sp,sp,-12
20022bd4:	dfc00215 	stw	ra,8(sp)
20022bd8:	df000115 	stw	fp,4(sp)
20022bdc:	df000104 	addi	fp,sp,4
20022be0:	e13fff15 	stw	r4,-4(fp)
    assert (self != NULL);
20022be4:	e0bfff17 	ldw	r2,-4(fp)
20022be8:	1000081e 	bne	r2,zero,20022c0c <IdxFile_destroy+0x3c>
20022bec:	01c800f4 	movhi	r7,8195
20022bf0:	39d51504 	addi	r7,r7,21588
20022bf4:	018800f4 	movhi	r6,8195
20022bf8:	3195b704 	addi	r6,r6,22236
20022bfc:	01401944 	movi	r5,101
20022c00:	010800f4 	movhi	r4,8195
20022c04:	21151904 	addi	r4,r4,21604
20022c08:	0026e540 	call	20026e54 <__assert_func>
    if (self->dims != NULL) {
20022c0c:	e0bfff17 	ldw	r2,-4(fp)
20022c10:	10800117 	ldw	r2,4(r2)
20022c14:	10000626 	beq	r2,zero,20022c30 <IdxFile_destroy+0x60>
        free(self->dims);
20022c18:	e0bfff17 	ldw	r2,-4(fp)
20022c1c:	10800117 	ldw	r2,4(r2)
20022c20:	1009883a 	mov	r4,r2
20022c24:	00288840 	call	20028884 <free>
        self->dims = NULL;
20022c28:	e0bfff17 	ldw	r2,-4(fp)
20022c2c:	10000115 	stw	zero,4(r2)
    }
    if (self->data != NULL) {
20022c30:	e0bfff17 	ldw	r2,-4(fp)
20022c34:	10800217 	ldw	r2,8(r2)
20022c38:	10000626 	beq	r2,zero,20022c54 <IdxFile_destroy+0x84>
        free(self->data);
20022c3c:	e0bfff17 	ldw	r2,-4(fp)
20022c40:	10800217 	ldw	r2,8(r2)
20022c44:	1009883a 	mov	r4,r2
20022c48:	00288840 	call	20028884 <free>
        self->data = NULL;
20022c4c:	e0bfff17 	ldw	r2,-4(fp)
20022c50:	10000215 	stw	zero,8(r2)
    }
    free(self);
20022c54:	e13fff17 	ldw	r4,-4(fp)
20022c58:	00288840 	call	20028884 <free>
}
20022c5c:	0001883a 	nop
20022c60:	e037883a 	mov	sp,fp
20022c64:	dfc00117 	ldw	ra,4(sp)
20022c68:	df000017 	ldw	fp,0(sp)
20022c6c:	dec00204 	addi	sp,sp,8
20022c70:	f800283a 	ret

20022c74 <IdxFile_get1>:

/* IdxFile_get1(self, i)
   Get the i-th record of the Idx1 file. (uint8_t)
 */
uint8_t IdxFile_get1(IdxFile* self, int i)
{
20022c74:	defffc04 	addi	sp,sp,-16
20022c78:	dfc00315 	stw	ra,12(sp)
20022c7c:	df000215 	stw	fp,8(sp)
20022c80:	df000204 	addi	fp,sp,8
20022c84:	e13ffe15 	stw	r4,-8(fp)
20022c88:	e17fff15 	stw	r5,-4(fp)
    assert (self != NULL);
20022c8c:	e0bffe17 	ldw	r2,-8(fp)
20022c90:	1000081e 	bne	r2,zero,20022cb4 <IdxFile_get1+0x40>
20022c94:	01c800f4 	movhi	r7,8195
20022c98:	39d51504 	addi	r7,r7,21588
20022c9c:	018800f4 	movhi	r6,8195
20022ca0:	3195bb04 	addi	r6,r6,22252
20022ca4:	01401d84 	movi	r5,118
20022ca8:	010800f4 	movhi	r4,8195
20022cac:	21151904 	addi	r4,r4,21604
20022cb0:	0026e540 	call	20026e54 <__assert_func>
    assert (self->ndims == 1);
20022cb4:	e0bffe17 	ldw	r2,-8(fp)
20022cb8:	10800017 	ldw	r2,0(r2)
20022cbc:	10800060 	cmpeqi	r2,r2,1
20022cc0:	1000081e 	bne	r2,zero,20022ce4 <IdxFile_get1+0x70>
20022cc4:	01c800f4 	movhi	r7,8195
20022cc8:	39d51b04 	addi	r7,r7,21612
20022ccc:	018800f4 	movhi	r6,8195
20022cd0:	3195bb04 	addi	r6,r6,22252
20022cd4:	01401dc4 	movi	r5,119
20022cd8:	010800f4 	movhi	r4,8195
20022cdc:	21151904 	addi	r4,r4,21604
20022ce0:	0026e540 	call	20026e54 <__assert_func>
    assert (i < self->dims[0]);
20022ce4:	e0bffe17 	ldw	r2,-8(fp)
20022ce8:	10800117 	ldw	r2,4(r2)
20022cec:	10800017 	ldw	r2,0(r2)
20022cf0:	e0ffff17 	ldw	r3,-4(fp)
20022cf4:	18800836 	bltu	r3,r2,20022d18 <IdxFile_get1+0xa4>
20022cf8:	01c800f4 	movhi	r7,8195
20022cfc:	39d52004 	addi	r7,r7,21632
20022d00:	018800f4 	movhi	r6,8195
20022d04:	3195bb04 	addi	r6,r6,22252
20022d08:	01401e04 	movi	r5,120
20022d0c:	010800f4 	movhi	r4,8195
20022d10:	21151904 	addi	r4,r4,21604
20022d14:	0026e540 	call	20026e54 <__assert_func>
    return self->data[i];
20022d18:	e0bffe17 	ldw	r2,-8(fp)
20022d1c:	10c00217 	ldw	r3,8(r2)
20022d20:	e0bfff17 	ldw	r2,-4(fp)
20022d24:	1885883a 	add	r2,r3,r2
20022d28:	10800003 	ldbu	r2,0(r2)
}
20022d2c:	e037883a 	mov	sp,fp
20022d30:	dfc00117 	ldw	ra,4(sp)
20022d34:	df000017 	ldw	fp,0(sp)
20022d38:	dec00204 	addi	sp,sp,8
20022d3c:	f800283a 	ret

20022d40 <IdxFile_get3>:

/* IdxFile_get3(self, i, out)
   Get the i-th record of the Idx3 file. (matrix of uint8_t)
 */
void IdxFile_get3(IdxFile* self, int i, uint8_t* out)
{
20022d40:	defffa04 	addi	sp,sp,-24
20022d44:	dfc00515 	stw	ra,20(sp)
20022d48:	df000415 	stw	fp,16(sp)
20022d4c:	df000404 	addi	fp,sp,16
20022d50:	e13ffd15 	stw	r4,-12(fp)
20022d54:	e17ffe15 	stw	r5,-8(fp)
20022d58:	e1bfff15 	stw	r6,-4(fp)
    assert (self != NULL);
20022d5c:	e0bffd17 	ldw	r2,-12(fp)
20022d60:	1000081e 	bne	r2,zero,20022d84 <IdxFile_get3+0x44>
20022d64:	01c800f4 	movhi	r7,8195
20022d68:	39d51504 	addi	r7,r7,21588
20022d6c:	018800f4 	movhi	r6,8195
20022d70:	3195bf04 	addi	r6,r6,22268
20022d74:	01402044 	movi	r5,129
20022d78:	010800f4 	movhi	r4,8195
20022d7c:	21151904 	addi	r4,r4,21604
20022d80:	0026e540 	call	20026e54 <__assert_func>
    assert (self->ndims == 3);
20022d84:	e0bffd17 	ldw	r2,-12(fp)
20022d88:	10800017 	ldw	r2,0(r2)
20022d8c:	108000e0 	cmpeqi	r2,r2,3
20022d90:	1000081e 	bne	r2,zero,20022db4 <IdxFile_get3+0x74>
20022d94:	01c800f4 	movhi	r7,8195
20022d98:	39d52504 	addi	r7,r7,21652
20022d9c:	018800f4 	movhi	r6,8195
20022da0:	3195bf04 	addi	r6,r6,22268
20022da4:	01402084 	movi	r5,130
20022da8:	010800f4 	movhi	r4,8195
20022dac:	21151904 	addi	r4,r4,21604
20022db0:	0026e540 	call	20026e54 <__assert_func>
    assert (i < self->dims[0]);
20022db4:	e0bffd17 	ldw	r2,-12(fp)
20022db8:	10800117 	ldw	r2,4(r2)
20022dbc:	10800017 	ldw	r2,0(r2)
20022dc0:	e0fffe17 	ldw	r3,-8(fp)
20022dc4:	18800836 	bltu	r3,r2,20022de8 <IdxFile_get3+0xa8>
20022dc8:	01c800f4 	movhi	r7,8195
20022dcc:	39d52004 	addi	r7,r7,21632
20022dd0:	018800f4 	movhi	r6,8195
20022dd4:	3195bf04 	addi	r6,r6,22268
20022dd8:	014020c4 	movi	r5,131
20022ddc:	010800f4 	movhi	r4,8195
20022de0:	21151904 	addi	r4,r4,21604
20022de4:	0026e540 	call	20026e54 <__assert_func>
    size_t n = self->dims[1] * self->dims[2];
20022de8:	e0bffd17 	ldw	r2,-12(fp)
20022dec:	10800117 	ldw	r2,4(r2)
20022df0:	10800104 	addi	r2,r2,4
20022df4:	10c00017 	ldw	r3,0(r2)
20022df8:	e0bffd17 	ldw	r2,-12(fp)
20022dfc:	10800117 	ldw	r2,4(r2)
20022e00:	10800204 	addi	r2,r2,8
20022e04:	10800017 	ldw	r2,0(r2)
20022e08:	1885383a 	mul	r2,r3,r2
20022e0c:	e0bffc15 	stw	r2,-16(fp)
    memcpy(out, &self->data[i*n], n);
20022e10:	e0bffd17 	ldw	r2,-12(fp)
20022e14:	10c00217 	ldw	r3,8(r2)
20022e18:	e13ffe17 	ldw	r4,-8(fp)
20022e1c:	e0bffc17 	ldw	r2,-16(fp)
20022e20:	2085383a 	mul	r2,r4,r2
20022e24:	1885883a 	add	r2,r3,r2
20022e28:	e1bffc17 	ldw	r6,-16(fp)
20022e2c:	100b883a 	mov	r5,r2
20022e30:	e13fff17 	ldw	r4,-4(fp)
20022e34:	00290a40 	call	200290a4 <memcpy>
}
20022e38:	0001883a 	nop
20022e3c:	e037883a 	mov	sp,fp
20022e40:	dfc00117 	ldw	ra,4(sp)
20022e44:	df000017 	ldw	fp,0(sp)
20022e48:	dec00204 	addi	sp,sp,8
20022e4c:	f800283a 	ret

20022e50 <my_mnist>:


/* main */
int my_mnist(char *train_images, char *train_labels, char *test_images, char *test_labels)
{
20022e50:	def8db04 	addi	sp,sp,-7316
20022e54:	dfc72415 	stw	ra,7312(sp)
20022e58:	df072315 	stw	fp,7308(sp)
20022e5c:	dc072215 	stw	r16,7304(sp)
20022e60:	df072304 	addi	fp,sp,7308
20022e64:	e13ffb15 	stw	r4,-20(fp)
20022e68:	e17ffc15 	stw	r5,-16(fp)
20022e6c:	e1bffd15 	stw	r6,-12(fp)
20022e70:	e1fffe15 	stw	r7,-8(fp)

    //if (argc < 4) return 100;
    //while (1);

    /* Use a fixed random seed for debugging. */
    srand(0);
20022e74:	0009883a 	mov	r4,zero
20022e78:	00293e00 	call	200293e0 <srand>
    /* Initialize layers. */
    /* Input layer - 1x28x28. */
    alt_putstr("creating layer! ...\n");
20022e7c:	010800f4 	movhi	r4,8195
20022e80:	21152a04 	addi	r4,r4,21672
20022e84:	0032af80 	call	20032af8 <alt_putstr>
    Layer* linput = Layer_create_input(1, 28, 28);
20022e88:	01800704 	movi	r6,28
20022e8c:	01400704 	movi	r5,28
20022e90:	01000044 	movi	r4,1
20022e94:	002252c0 	call	2002252c <Layer_create_input>
20022e98:	e0b8ec15 	stw	r2,-7248(fp)
    alt_putstr("layer created! ...\n");
20022e9c:	010800f4 	movhi	r4,8195
20022ea0:	21153004 	addi	r4,r4,21696
20022ea4:	0032af80 	call	20032af8 <alt_putstr>
    assert (linput != NULL);
20022ea8:	e0b8ec17 	ldw	r2,-7248(fp)
20022eac:	1000081e 	bne	r2,zero,20022ed0 <my_mnist+0x80>
20022eb0:	01c800f4 	movhi	r7,8195
20022eb4:	39d53504 	addi	r7,r7,21716
20022eb8:	018800f4 	movhi	r6,8195
20022ebc:	3195c304 	addi	r6,r6,22284
20022ec0:	014025c4 	movi	r5,151
20022ec4:	010800f4 	movhi	r4,8195
20022ec8:	21151904 	addi	r4,r4,21604
20022ecc:	0026e540 	call	20026e54 <__assert_func>
    alt_putstr("layer created is not null! ...\n");
20022ed0:	010800f4 	movhi	r4,8195
20022ed4:	21153904 	addi	r4,r4,21732
20022ed8:	0032af80 	call	20032af8 <alt_putstr>
    Layer* lconv1 = Layer_create_conv(linput, 16, 14, 14, 3, 1, 2, 0.1);
20022edc:	00a666b4 	movhi	r2,39322
20022ee0:	10a66684 	addi	r2,r2,-26214
20022ee4:	d8800315 	stw	r2,12(sp)
20022ee8:	008feeb4 	movhi	r2,16314
20022eec:	10a66644 	addi	r2,r2,-26215
20022ef0:	d8800415 	stw	r2,16(sp)
20022ef4:	00800084 	movi	r2,2
20022ef8:	d8800215 	stw	r2,8(sp)
20022efc:	00800044 	movi	r2,1
20022f00:	d8800115 	stw	r2,4(sp)
20022f04:	008000c4 	movi	r2,3
20022f08:	d8800015 	stw	r2,0(sp)
20022f0c:	01c00384 	movi	r7,14
20022f10:	01800384 	movi	r6,14
20022f14:	01400404 	movi	r5,16
20022f18:	e138ec17 	ldw	r4,-7248(fp)
20022f1c:	00226bc0 	call	200226bc <Layer_create_conv>
20022f20:	e0b8ed15 	stw	r2,-7244(fp)
    alt_putstr("creating layer conv ...\n");
20022f24:	010800f4 	movhi	r4,8195
20022f28:	21154104 	addi	r4,r4,21764
20022f2c:	0032af80 	call	20032af8 <alt_putstr>
    Layer* lconv2 = Layer_create_conv(lconv1, 32, 7, 7, 3, 1, 2, 0.1);
20022f30:	00a666b4 	movhi	r2,39322
20022f34:	10a66684 	addi	r2,r2,-26214
20022f38:	d8800315 	stw	r2,12(sp)
20022f3c:	008feeb4 	movhi	r2,16314
20022f40:	10a66644 	addi	r2,r2,-26215
20022f44:	d8800415 	stw	r2,16(sp)
20022f48:	00800084 	movi	r2,2
20022f4c:	d8800215 	stw	r2,8(sp)
20022f50:	00800044 	movi	r2,1
20022f54:	d8800115 	stw	r2,4(sp)
20022f58:	008000c4 	movi	r2,3
20022f5c:	d8800015 	stw	r2,0(sp)
20022f60:	01c001c4 	movi	r7,7
20022f64:	018001c4 	movi	r6,7
20022f68:	01400804 	movi	r5,32
20022f6c:	e138ed17 	ldw	r4,-7244(fp)
20022f70:	00226bc0 	call	200226bc <Layer_create_conv>
20022f74:	e0b8ee15 	stw	r2,-7240(fp)
    assert (lconv2 != NULL);
20022f78:	e0b8ee17 	ldw	r2,-7240(fp)
20022f7c:	1000081e 	bne	r2,zero,20022fa0 <my_mnist+0x150>
20022f80:	01c800f4 	movhi	r7,8195
20022f84:	39d54804 	addi	r7,r7,21792
20022f88:	018800f4 	movhi	r6,8195
20022f8c:	3195c304 	addi	r6,r6,22284
20022f90:	01402704 	movi	r5,156
20022f94:	010800f4 	movhi	r4,8195
20022f98:	21151904 	addi	r4,r4,21604
20022f9c:	0026e540 	call	20026e54 <__assert_func>
    alt_putstr("layer conv created! ...\n");
20022fa0:	010800f4 	movhi	r4,8195
20022fa4:	21154c04 	addi	r4,r4,21808
20022fa8:	0032af80 	call	20032af8 <alt_putstr>
    //Layer* lfull1 = Layer_create_full(lconv2, 200, 0.1);
    Layer* lfull1 = Layer_create_full(lconv2, 50, 0.1);
20022fac:	01a666b4 	movhi	r6,39322
20022fb0:	31a66684 	addi	r6,r6,-26214
20022fb4:	01cfeeb4 	movhi	r7,16314
20022fb8:	39e66644 	addi	r7,r7,-26215
20022fbc:	01400c84 	movi	r5,50
20022fc0:	e138ee17 	ldw	r4,-7240(fp)
20022fc4:	00225800 	call	20022580 <Layer_create_full>
20022fc8:	e0b8ef15 	stw	r2,-7236(fp)
    assert (lfull1 != NULL);
20022fcc:	e0b8ef17 	ldw	r2,-7236(fp)
20022fd0:	1000081e 	bne	r2,zero,20022ff4 <my_mnist+0x1a4>
20022fd4:	01c800f4 	movhi	r7,8195
20022fd8:	39d55304 	addi	r7,r7,21836
20022fdc:	018800f4 	movhi	r6,8195
20022fe0:	3195c304 	addi	r6,r6,22284
20022fe4:	01402804 	movi	r5,160
20022fe8:	010800f4 	movhi	r4,8195
20022fec:	21151904 	addi	r4,r4,21604
20022ff0:	0026e540 	call	20026e54 <__assert_func>
    alt_putstr("layer full...\n");
20022ff4:	010800f4 	movhi	r4,8195
20022ff8:	21155704 	addi	r4,r4,21852
20022ffc:	0032af80 	call	20032af8 <alt_putstr>
    Layer* lfull2 = Layer_create_full(lfull1, 50, 0.1);
20023000:	01a666b4 	movhi	r6,39322
20023004:	31a66684 	addi	r6,r6,-26214
20023008:	01cfeeb4 	movhi	r7,16314
2002300c:	39e66644 	addi	r7,r7,-26215
20023010:	01400c84 	movi	r5,50
20023014:	e138ef17 	ldw	r4,-7236(fp)
20023018:	00225800 	call	20022580 <Layer_create_full>
2002301c:	e0b8f015 	stw	r2,-7232(fp)
    alt_putstr("layer full...\n");
20023020:	010800f4 	movhi	r4,8195
20023024:	21155704 	addi	r4,r4,21852
20023028:	0032af80 	call	20032af8 <alt_putstr>
    Layer* loutput = Layer_create_full(lfull2, 10, 0.1);
2002302c:	01a666b4 	movhi	r6,39322
20023030:	31a66684 	addi	r6,r6,-26214
20023034:	01cfeeb4 	movhi	r7,16314
20023038:	39e66644 	addi	r7,r7,-26215
2002303c:	01400284 	movi	r5,10
20023040:	e138f017 	ldw	r4,-7232(fp)
20023044:	00225800 	call	20022580 <Layer_create_full>
20023048:	e0b8f115 	stw	r2,-7228(fp)
    alt_putstr("layer full!...\n");
2002304c:	010800f4 	movhi	r4,8195
20023050:	21155b04 	addi	r4,r4,21868
20023054:	0032af80 	call	20032af8 <alt_putstr>


    IdxFile* images_train = NULL;
20023058:	e038f215 	stw	zero,-7224(fp)
    {
        FILE* fp = fopen(train_images, "rb");
2002305c:	014800f4 	movhi	r5,8195
20023060:	29555f04 	addi	r5,r5,21884
20023064:	e13ffb17 	ldw	r4,-20(fp)
20023068:	00278580 	call	20027858 <fopen>
2002306c:	e0b8f315 	stw	r2,-7220(fp)
        alt_putstr("Training...\n");
20023070:	010800f4 	movhi	r4,8195
20023074:	21156004 	addi	r4,r4,21888
20023078:	0032af80 	call	20032af8 <alt_putstr>
        if (fp == NULL) {
2002307c:	e0b8f317 	ldw	r2,-7220(fp)
20023080:	1000071e 	bne	r2,zero,200230a0 <my_mnist+0x250>
        	alt_putstr(train_images);
20023084:	e13ffb17 	ldw	r4,-20(fp)
20023088:	0032af80 	call	20032af8 <alt_putstr>
        	alt_putstr("Hello...\n");
2002308c:	010800f4 	movhi	r4,8195
20023090:	21156404 	addi	r4,r4,21904
20023094:	0032af80 	call	20032af8 <alt_putstr>
        	return 111;
20023098:	00801bc4 	movi	r2,111
2002309c:	00019b06 	br	2002370c <my_mnist+0x8bc>
        }
        alt_putstr("Training...\n");
200230a0:	010800f4 	movhi	r4,8195
200230a4:	21156004 	addi	r4,r4,21888
200230a8:	0032af80 	call	20032af8 <alt_putstr>
        images_train = IdxFile_read(fp);
200230ac:	e138f317 	ldw	r4,-7220(fp)
200230b0:	002293c0 	call	2002293c <IdxFile_read>
200230b4:	e0b8f215 	stw	r2,-7224(fp)
        if (images_train == NULL) return 111;
200230b8:	e0b8f217 	ldw	r2,-7224(fp)
200230bc:	1000021e 	bne	r2,zero,200230c8 <my_mnist+0x278>
200230c0:	00801bc4 	movi	r2,111
200230c4:	00019106 	br	2002370c <my_mnist+0x8bc>
        fclose(fp);
200230c8:	e138f317 	ldw	r4,-7220(fp)
200230cc:	00270ac0 	call	200270ac <fclose>
    }
    alt_putstr("Read images_train...\n");
200230d0:	010800f4 	movhi	r4,8195
200230d4:	21156704 	addi	r4,r4,21916
200230d8:	0032af80 	call	20032af8 <alt_putstr>
    IdxFile* labels_train = NULL;
200230dc:	e038f415 	stw	zero,-7216(fp)
    {
        FILE* fp = fopen(train_labels, "rb");
200230e0:	014800f4 	movhi	r5,8195
200230e4:	29555f04 	addi	r5,r5,21884
200230e8:	e13ffc17 	ldw	r4,-16(fp)
200230ec:	00278580 	call	20027858 <fopen>
200230f0:	e0b8f515 	stw	r2,-7212(fp)
        if (fp == NULL) return 111;
200230f4:	e0b8f517 	ldw	r2,-7212(fp)
200230f8:	1000021e 	bne	r2,zero,20023104 <my_mnist+0x2b4>
200230fc:	00801bc4 	movi	r2,111
20023100:	00018206 	br	2002370c <my_mnist+0x8bc>
        labels_train = IdxFile_read(fp);
20023104:	e138f517 	ldw	r4,-7212(fp)
20023108:	002293c0 	call	2002293c <IdxFile_read>
2002310c:	e0b8f415 	stw	r2,-7216(fp)
        if (labels_train == NULL) return 111;
20023110:	e0b8f417 	ldw	r2,-7216(fp)
20023114:	1000021e 	bne	r2,zero,20023120 <my_mnist+0x2d0>
20023118:	00801bc4 	movi	r2,111
2002311c:	00017b06 	br	2002370c <my_mnist+0x8bc>
        fclose(fp);
20023120:	e138f517 	ldw	r4,-7212(fp)
20023124:	00270ac0 	call	200270ac <fclose>
    }
    alt_putstr("Read labels_train...\n");
20023128:	010800f4 	movhi	r4,8195
2002312c:	21156d04 	addi	r4,r4,21940
20023130:	0032af80 	call	20032af8 <alt_putstr>

    //fprintf(stderr, "training...\n");
    double rate = 0.1;
20023134:	00a666b4 	movhi	r2,39322
20023138:	10a66684 	addi	r2,r2,-26214
2002313c:	e0b8f615 	stw	r2,-7208(fp)
20023140:	008feeb4 	movhi	r2,16314
20023144:	10a66644 	addi	r2,r2,-26215
20023148:	e0b8f715 	stw	r2,-7204(fp)
    double etotal = 0;
2002314c:	e038e215 	stw	zero,-7288(fp)
20023150:	e038e315 	stw	zero,-7284(fp)
    int nepoch = 10;
20023154:	00800284 	movi	r2,10
20023158:	e0b8f815 	stw	r2,-7200(fp)
    int batch_size = 32;
2002315c:	00800804 	movi	r2,32
20023160:	e0b8f915 	stw	r2,-7196(fp)
    int train_size = images_train->dims[0];
20023164:	e0b8f217 	ldw	r2,-7224(fp)
20023168:	10800117 	ldw	r2,4(r2)
2002316c:	10800017 	ldw	r2,0(r2)
20023170:	e0b8fa15 	stw	r2,-7192(fp)
    for (int i = 0; i < nepoch * train_size; i++) {
20023174:	e038e415 	stw	zero,-7280(fp)
20023178:	00009406 	br	200233cc <my_mnist+0x57c>

        uint8_t img[28*28];
        double x[28*28];
        double y[10];
        int index = rand() % train_size;
2002317c:	00293f80 	call	200293f8 <rand>
20023180:	e178fa17 	ldw	r5,-7192(fp)
20023184:	1009883a 	mov	r4,r2
20023188:	00247ec0 	call	200247ec <__modsi3>
2002318c:	e0b8fb15 	stw	r2,-7188(fp)
        IdxFile_get3(images_train, index, img);
20023190:	e0bf2304 	addi	r2,fp,-884
20023194:	100d883a 	mov	r6,r2
20023198:	e178fb17 	ldw	r5,-7188(fp)
2002319c:	e138f217 	ldw	r4,-7224(fp)
200231a0:	0022d400 	call	20022d40 <IdxFile_get3>
        for (int j = 0; j < 28*28; j++) {
200231a4:	e038e515 	stw	zero,-7276(fp)
200231a8:	00001d06 	br	20023220 <my_mnist+0x3d0>
            x[j] = img[j]/255.0;
200231ac:	e0ff2304 	addi	r3,fp,-884
200231b0:	e0b8e517 	ldw	r2,-7276(fp)
200231b4:	1885883a 	add	r2,r3,r2
200231b8:	10800003 	ldbu	r2,0(r2)
200231bc:	10803fcc 	andi	r2,r2,255
200231c0:	1009883a 	mov	r4,r2
200231c4:	0026d140 	call	20026d14 <__floatsidf>
200231c8:	1011883a 	mov	r8,r2
200231cc:	1813883a 	mov	r9,r3
200231d0:	000d883a 	mov	r6,zero
200231d4:	01d01c34 	movhi	r7,16496
200231d8:	39f80004 	addi	r7,r7,-8192
200231dc:	4009883a 	mov	r4,r8
200231e0:	480b883a 	mov	r5,r9
200231e4:	00251c80 	call	200251c8 <__divdf3>
200231e8:	1009883a 	mov	r4,r2
200231ec:	180b883a 	mov	r5,r3
200231f0:	2005883a 	mov	r2,r4
200231f4:	2807883a 	mov	r3,r5
200231f8:	e138e517 	ldw	r4,-7276(fp)
200231fc:	200890fa 	slli	r4,r4,3
20023200:	e178e204 	addi	r5,fp,-7288
20023204:	2909883a 	add	r4,r5,r4
20023208:	21002104 	addi	r4,r4,132
2002320c:	20800015 	stw	r2,0(r4)
20023210:	20c00115 	stw	r3,4(r4)
        uint8_t img[28*28];
        double x[28*28];
        double y[10];
        int index = rand() % train_size;
        IdxFile_get3(images_train, index, img);
        for (int j = 0; j < 28*28; j++) {
20023214:	e0b8e517 	ldw	r2,-7276(fp)
20023218:	10800044 	addi	r2,r2,1
2002321c:	e0b8e515 	stw	r2,-7276(fp)
20023220:	e0b8e517 	ldw	r2,-7276(fp)
20023224:	1080c410 	cmplti	r2,r2,784
20023228:	103fe01e 	bne	r2,zero,200231ac <_gp+0xfffe3c4c>
            x[j] = img[j]/255.0;
        }
        Layer_setInputs(linput, x);
2002322c:	e0b90304 	addi	r2,fp,-7156
20023230:	100b883a 	mov	r5,r2
20023234:	e138ec17 	ldw	r4,-7248(fp)
20023238:	0021e1c0 	call	20021e1c <Layer_setInputs>
        Layer_getOutputs(loutput, y);
2002323c:	e0bfe704 	addi	r2,fp,-100
20023240:	100b883a 	mov	r5,r2
20023244:	e138f117 	ldw	r4,-7228(fp)
20023248:	0021f7c0 	call	20021f7c <Layer_getOutputs>
        int label = IdxFile_get1(labels_train, index);
2002324c:	e178fb17 	ldw	r5,-7188(fp)
20023250:	e138f417 	ldw	r4,-7216(fp)
20023254:	0022c740 	call	20022c74 <IdxFile_get1>
20023258:	10803fcc 	andi	r2,r2,255
2002325c:	e0b8fc15 	stw	r2,-7184(fp)
        for (int j = 0; j < 10; j++) {
            fprintf(stderr, " %.3f", y[j]);
        }
        fprintf(stderr, "]\n");
#endif
        for (int j = 0; j < 10; j++) {
20023260:	e038e615 	stw	zero,-7272(fp)
20023264:	00001206 	br	200232b0 <my_mnist+0x460>
            y[j] = (j == label)? 1 : 0;
20023268:	e0f8e617 	ldw	r3,-7272(fp)
2002326c:	e0b8fc17 	ldw	r2,-7184(fp)
20023270:	1880031e 	bne	r3,r2,20023280 <my_mnist+0x430>
20023274:	0005883a 	mov	r2,zero
20023278:	00cffc34 	movhi	r3,16368
2002327c:	00000206 	br	20023288 <my_mnist+0x438>
20023280:	0005883a 	mov	r2,zero
20023284:	0007883a 	mov	r3,zero
20023288:	e138e617 	ldw	r4,-7272(fp)
2002328c:	200890fa 	slli	r4,r4,3
20023290:	e178e204 	addi	r5,fp,-7288
20023294:	2909883a 	add	r4,r5,r4
20023298:	21070504 	addi	r4,r4,7188
2002329c:	20800015 	stw	r2,0(r4)
200232a0:	20c00115 	stw	r3,4(r4)
        for (int j = 0; j < 10; j++) {
            fprintf(stderr, " %.3f", y[j]);
        }
        fprintf(stderr, "]\n");
#endif
        for (int j = 0; j < 10; j++) {
200232a4:	e0b8e617 	ldw	r2,-7272(fp)
200232a8:	10800044 	addi	r2,r2,1
200232ac:	e0b8e615 	stw	r2,-7272(fp)
200232b0:	e0b8e617 	ldw	r2,-7272(fp)
200232b4:	10800290 	cmplti	r2,r2,10
200232b8:	103feb1e 	bne	r2,zero,20023268 <_gp+0xfffe3d08>
            y[j] = (j == label)? 1 : 0;
        }
        Layer_learnOutputs(loutput, y);
200232bc:	e0bfe704 	addi	r2,fp,-100
200232c0:	100b883a 	mov	r5,r2
200232c4:	e138f117 	ldw	r4,-7228(fp)
200232c8:	00221600 	call	20022160 <Layer_learnOutputs>
        etotal += Layer_getErrorTotal(loutput);
200232cc:	e138f117 	ldw	r4,-7228(fp)
200232d0:	002202c0 	call	2002202c <Layer_getErrorTotal>
200232d4:	1009883a 	mov	r4,r2
200232d8:	180b883a 	mov	r5,r3
200232dc:	200d883a 	mov	r6,r4
200232e0:	280f883a 	mov	r7,r5
200232e4:	e138e217 	ldw	r4,-7288(fp)
200232e8:	e178e317 	ldw	r5,-7284(fp)
200232ec:	002491c0 	call	2002491c <__adddf3>
200232f0:	1009883a 	mov	r4,r2
200232f4:	180b883a 	mov	r5,r3
200232f8:	e138e215 	stw	r4,-7288(fp)
200232fc:	e178e315 	stw	r5,-7284(fp)
        if ((i % batch_size) == 0) {
20023300:	e0b8e417 	ldw	r2,-7280(fp)
20023304:	e178f917 	ldw	r5,-7196(fp)
20023308:	1009883a 	mov	r4,r2
2002330c:	00247ec0 	call	200247ec <__modsi3>
20023310:	1000111e 	bne	r2,zero,20023358 <my_mnist+0x508>
            Layer_update(loutput, rate/batch_size);
20023314:	e138f917 	ldw	r4,-7196(fp)
20023318:	0026d140 	call	20026d14 <__floatsidf>
2002331c:	1009883a 	mov	r4,r2
20023320:	180b883a 	mov	r5,r3
20023324:	200d883a 	mov	r6,r4
20023328:	280f883a 	mov	r7,r5
2002332c:	e138f617 	ldw	r4,-7208(fp)
20023330:	e178f717 	ldw	r5,-7204(fp)
20023334:	00251c80 	call	200251c8 <__divdf3>
20023338:	1009883a 	mov	r4,r2
2002333c:	180b883a 	mov	r5,r3
20023340:	2005883a 	mov	r2,r4
20023344:	2807883a 	mov	r3,r5
20023348:	100b883a 	mov	r5,r2
2002334c:	180d883a 	mov	r6,r3
20023350:	e138f117 	ldw	r4,-7228(fp)
20023354:	00223040 	call	20022304 <Layer_update>
        }
        if ((i % 1000) == 0) {
20023358:	e0b8e417 	ldw	r2,-7280(fp)
2002335c:	0140fa04 	movi	r5,1000
20023360:	1009883a 	mov	r4,r2
20023364:	00247ec0 	call	200247ec <__modsi3>
20023368:	1000151e 	bne	r2,zero,200233c0 <my_mnist+0x570>
            fprintf(stderr, "i=%d, error=%.4f\n", i, etotal/1000);
2002336c:	d0a00217 	ldw	r2,-32760(gp)
20023370:	14000317 	ldw	r16,12(r2)
20023374:	000d883a 	mov	r6,zero
20023378:	01d023f4 	movhi	r7,16527
2002337c:	39d00004 	addi	r7,r7,16384
20023380:	e138e217 	ldw	r4,-7288(fp)
20023384:	e178e317 	ldw	r5,-7284(fp)
20023388:	00251c80 	call	200251c8 <__divdf3>
2002338c:	1009883a 	mov	r4,r2
20023390:	180b883a 	mov	r5,r3
20023394:	2005883a 	mov	r2,r4
20023398:	2807883a 	mov	r3,r5
2002339c:	d8c00015 	stw	r3,0(sp)
200233a0:	100f883a 	mov	r7,r2
200233a4:	e1b8e417 	ldw	r6,-7280(fp)
200233a8:	014800f4 	movhi	r5,8195
200233ac:	29557304 	addi	r5,r5,21964
200233b0:	8009883a 	mov	r4,r16
200233b4:	00278980 	call	20027898 <fprintf>
            etotal = 0;
200233b8:	e038e215 	stw	zero,-7288(fp)
200233bc:	e038e315 	stw	zero,-7284(fp)
    double rate = 0.1;
    double etotal = 0;
    int nepoch = 10;
    int batch_size = 32;
    int train_size = images_train->dims[0];
    for (int i = 0; i < nepoch * train_size; i++) {
200233c0:	e0b8e417 	ldw	r2,-7280(fp)
200233c4:	10800044 	addi	r2,r2,1
200233c8:	e0b8e415 	stw	r2,-7280(fp)
200233cc:	e0f8f817 	ldw	r3,-7200(fp)
200233d0:	e0b8fa17 	ldw	r2,-7192(fp)
200233d4:	1885383a 	mul	r2,r3,r2
200233d8:	e0f8e417 	ldw	r3,-7280(fp)
200233dc:	18bf6716 	blt	r3,r2,2002317c <_gp+0xfffe3c1c>
            fprintf(stderr, "i=%d, error=%.4f\n", i, etotal/1000);
            etotal = 0;
        }
    }

    IdxFile_destroy(images_train);
200233e0:	e138f217 	ldw	r4,-7224(fp)
200233e4:	0022bd00 	call	20022bd0 <IdxFile_destroy>
    IdxFile_destroy(labels_train);
200233e8:	e138f417 	ldw	r4,-7216(fp)
200233ec:	0022bd00 	call	20022bd0 <IdxFile_destroy>
    //Layer_dump(lconv2, stdout);
    //Layer_dump(lfull1, stdout);
    //Layer_dump(lfull2, stdout);
    //Layer_dump(loutput, stdout);

    alt_putstr("test...\n");
200233f0:	010800f4 	movhi	r4,8195
200233f4:	21157804 	addi	r4,r4,21984
200233f8:	0032af80 	call	20032af8 <alt_putstr>
    IdxFile* images_test = NULL;
200233fc:	e038fd15 	stw	zero,-7180(fp)
    {
        FILE* fp = fopen(test_images, "rb");
20023400:	014800f4 	movhi	r5,8195
20023404:	29555f04 	addi	r5,r5,21884
20023408:	e13ffd17 	ldw	r4,-12(fp)
2002340c:	00278580 	call	20027858 <fopen>
20023410:	e0b8fe15 	stw	r2,-7176(fp)
        if (fp == NULL) return 111;
20023414:	e0b8fe17 	ldw	r2,-7176(fp)
20023418:	1000021e 	bne	r2,zero,20023424 <my_mnist+0x5d4>
2002341c:	00801bc4 	movi	r2,111
20023420:	0000ba06 	br	2002370c <my_mnist+0x8bc>
        images_test = IdxFile_read(fp);
20023424:	e138fe17 	ldw	r4,-7176(fp)
20023428:	002293c0 	call	2002293c <IdxFile_read>
2002342c:	e0b8fd15 	stw	r2,-7180(fp)
        if (images_test == NULL) return 111;
20023430:	e0b8fd17 	ldw	r2,-7180(fp)
20023434:	1000021e 	bne	r2,zero,20023440 <my_mnist+0x5f0>
20023438:	00801bc4 	movi	r2,111
2002343c:	0000b306 	br	2002370c <my_mnist+0x8bc>
        fclose(fp);
20023440:	e138fe17 	ldw	r4,-7176(fp)
20023444:	00270ac0 	call	200270ac <fclose>
    }
    alt_putstr("test...\n");
20023448:	010800f4 	movhi	r4,8195
2002344c:	21157804 	addi	r4,r4,21984
20023450:	0032af80 	call	20032af8 <alt_putstr>
    IdxFile* labels_test = NULL;
20023454:	e038ff15 	stw	zero,-7172(fp)
    {
        FILE* fp = fopen(test_labels, "rb");
20023458:	014800f4 	movhi	r5,8195
2002345c:	29555f04 	addi	r5,r5,21884
20023460:	e13ffe17 	ldw	r4,-8(fp)
20023464:	00278580 	call	20027858 <fopen>
20023468:	e0b90015 	stw	r2,-7168(fp)
        if (fp == NULL) return 111;
2002346c:	e0b90017 	ldw	r2,-7168(fp)
20023470:	1000021e 	bne	r2,zero,2002347c <my_mnist+0x62c>
20023474:	00801bc4 	movi	r2,111
20023478:	0000a406 	br	2002370c <my_mnist+0x8bc>
        labels_test = IdxFile_read(fp);
2002347c:	e1390017 	ldw	r4,-7168(fp)
20023480:	002293c0 	call	2002293c <IdxFile_read>
20023484:	e0b8ff15 	stw	r2,-7172(fp)
        if (labels_test == NULL) return 111;
20023488:	e0b8ff17 	ldw	r2,-7172(fp)
2002348c:	1000021e 	bne	r2,zero,20023498 <my_mnist+0x648>
20023490:	00801bc4 	movi	r2,111
20023494:	00009d06 	br	2002370c <my_mnist+0x8bc>
        fclose(fp);
20023498:	e1390017 	ldw	r4,-7168(fp)
2002349c:	00270ac0 	call	200270ac <fclose>
    }

    alt_putstr("test !!! ...\n");
200234a0:	010800f4 	movhi	r4,8195
200234a4:	21157b04 	addi	r4,r4,21996
200234a8:	0032af80 	call	20032af8 <alt_putstr>
    fprintf(stderr, "testing...\n");
200234ac:	d0a00217 	ldw	r2,-32760(gp)
200234b0:	10800317 	ldw	r2,12(r2)
200234b4:	100f883a 	mov	r7,r2
200234b8:	018002c4 	movi	r6,11
200234bc:	01400044 	movi	r5,1
200234c0:	010800f4 	movhi	r4,8195
200234c4:	21157f04 	addi	r4,r4,22012
200234c8:	00286800 	call	20028680 <fwrite>
    int ntests = images_test->dims[0];
200234cc:	e0b8fd17 	ldw	r2,-7180(fp)
200234d0:	10800117 	ldw	r2,4(r2)
200234d4:	10800017 	ldw	r2,0(r2)
200234d8:	e0b90115 	stw	r2,-7164(fp)
    int ncorrect = 0;
200234dc:	e038e715 	stw	zero,-7268(fp)
    for (int i = 0; i < ntests; i++) {
200234e0:	e038e815 	stw	zero,-7264(fp)
200234e4:	00006b06 	br	20023694 <my_mnist+0x844>
        uint8_t img[28*28];
        double x[28*28];
        double y[10];
        IdxFile_get3(images_test, i, img);
200234e8:	e0bf2304 	addi	r2,fp,-884
200234ec:	100d883a 	mov	r6,r2
200234f0:	e178e817 	ldw	r5,-7264(fp)
200234f4:	e138fd17 	ldw	r4,-7180(fp)
200234f8:	0022d400 	call	20022d40 <IdxFile_get3>
        for (int j = 0; j < 28*28; j++) {
200234fc:	e038e915 	stw	zero,-7260(fp)
20023500:	00001d06 	br	20023578 <my_mnist+0x728>
            x[j] = img[j]/255.0;
20023504:	e0ff2304 	addi	r3,fp,-884
20023508:	e0b8e917 	ldw	r2,-7260(fp)
2002350c:	1885883a 	add	r2,r3,r2
20023510:	10800003 	ldbu	r2,0(r2)
20023514:	10803fcc 	andi	r2,r2,255
20023518:	1009883a 	mov	r4,r2
2002351c:	0026d140 	call	20026d14 <__floatsidf>
20023520:	1011883a 	mov	r8,r2
20023524:	1813883a 	mov	r9,r3
20023528:	000d883a 	mov	r6,zero
2002352c:	01d01c34 	movhi	r7,16496
20023530:	39f80004 	addi	r7,r7,-8192
20023534:	4009883a 	mov	r4,r8
20023538:	480b883a 	mov	r5,r9
2002353c:	00251c80 	call	200251c8 <__divdf3>
20023540:	1009883a 	mov	r4,r2
20023544:	180b883a 	mov	r5,r3
20023548:	2005883a 	mov	r2,r4
2002354c:	2807883a 	mov	r3,r5
20023550:	e138e917 	ldw	r4,-7260(fp)
20023554:	200890fa 	slli	r4,r4,3
20023558:	e178e204 	addi	r5,fp,-7288
2002355c:	2909883a 	add	r4,r5,r4
20023560:	21002104 	addi	r4,r4,132
20023564:	20800015 	stw	r2,0(r4)
20023568:	20c00115 	stw	r3,4(r4)
    for (int i = 0; i < ntests; i++) {
        uint8_t img[28*28];
        double x[28*28];
        double y[10];
        IdxFile_get3(images_test, i, img);
        for (int j = 0; j < 28*28; j++) {
2002356c:	e0b8e917 	ldw	r2,-7260(fp)
20023570:	10800044 	addi	r2,r2,1
20023574:	e0b8e915 	stw	r2,-7260(fp)
20023578:	e0b8e917 	ldw	r2,-7260(fp)
2002357c:	1080c410 	cmplti	r2,r2,784
20023580:	103fe01e 	bne	r2,zero,20023504 <_gp+0xfffe3fa4>
            x[j] = img[j]/255.0;
        }
        Layer_setInputs(linput, x);
20023584:	e0b90304 	addi	r2,fp,-7156
20023588:	100b883a 	mov	r5,r2
2002358c:	e138ec17 	ldw	r4,-7248(fp)
20023590:	0021e1c0 	call	20021e1c <Layer_setInputs>
        Layer_getOutputs(loutput, y);
20023594:	e0bfe704 	addi	r2,fp,-100
20023598:	100b883a 	mov	r5,r2
2002359c:	e138f117 	ldw	r4,-7228(fp)
200235a0:	0021f7c0 	call	20021f7c <Layer_getOutputs>
        int label = IdxFile_get1(labels_test, i);
200235a4:	e178e817 	ldw	r5,-7264(fp)
200235a8:	e138ff17 	ldw	r4,-7172(fp)
200235ac:	0022c740 	call	20022c74 <IdxFile_get1>
200235b0:	10803fcc 	andi	r2,r2,255
200235b4:	e0b90215 	stw	r2,-7160(fp)
        /* Pick the most probable label. */
        int mj = -1;
200235b8:	00bfffc4 	movi	r2,-1
200235bc:	e0b8ea15 	stw	r2,-7256(fp)
        for (int j = 0; j < 10; j++) {
200235c0:	e038eb15 	stw	zero,-7252(fp)
200235c4:	00001b06 	br	20023634 <my_mnist+0x7e4>
            if (mj < 0 || y[mj] < y[j]) {
200235c8:	e0b8ea17 	ldw	r2,-7256(fp)
200235cc:	10001416 	blt	r2,zero,20023620 <my_mnist+0x7d0>
200235d0:	e0b8ea17 	ldw	r2,-7256(fp)
200235d4:	100490fa 	slli	r2,r2,3
200235d8:	e0f8e204 	addi	r3,fp,-7288
200235dc:	1885883a 	add	r2,r3,r2
200235e0:	11070504 	addi	r4,r2,7188
200235e4:	20800017 	ldw	r2,0(r4)
200235e8:	20c00117 	ldw	r3,4(r4)
200235ec:	e138eb17 	ldw	r4,-7252(fp)
200235f0:	200890fa 	slli	r4,r4,3
200235f4:	e178e204 	addi	r5,fp,-7288
200235f8:	2909883a 	add	r4,r5,r4
200235fc:	21870504 	addi	r6,r4,7188
20023600:	31000017 	ldw	r4,0(r6)
20023604:	31400117 	ldw	r5,4(r6)
20023608:	200d883a 	mov	r6,r4
2002360c:	280f883a 	mov	r7,r5
20023610:	1009883a 	mov	r4,r2
20023614:	180b883a 	mov	r5,r3
20023618:	0025b8c0 	call	20025b8c <__ledf2>
2002361c:	1000020e 	bge	r2,zero,20023628 <my_mnist+0x7d8>
                mj = j;
20023620:	e0b8eb17 	ldw	r2,-7252(fp)
20023624:	e0b8ea15 	stw	r2,-7256(fp)
        Layer_setInputs(linput, x);
        Layer_getOutputs(loutput, y);
        int label = IdxFile_get1(labels_test, i);
        /* Pick the most probable label. */
        int mj = -1;
        for (int j = 0; j < 10; j++) {
20023628:	e0b8eb17 	ldw	r2,-7252(fp)
2002362c:	10800044 	addi	r2,r2,1
20023630:	e0b8eb15 	stw	r2,-7252(fp)
20023634:	e0b8eb17 	ldw	r2,-7252(fp)
20023638:	10800290 	cmplti	r2,r2,10
2002363c:	103fe21e 	bne	r2,zero,200235c8 <_gp+0xfffe4068>
            if (mj < 0 || y[mj] < y[j]) {
                mj = j;
            }
        }
        if (mj == label) {
20023640:	e0f8ea17 	ldw	r3,-7256(fp)
20023644:	e0b90217 	ldw	r2,-7160(fp)
20023648:	1880031e 	bne	r3,r2,20023658 <my_mnist+0x808>
            ncorrect++;
2002364c:	e0b8e717 	ldw	r2,-7268(fp)
20023650:	10800044 	addi	r2,r2,1
20023654:	e0b8e715 	stw	r2,-7268(fp)
        }
        if ((i % 1000) == 0) {
20023658:	e0b8e817 	ldw	r2,-7264(fp)
2002365c:	0140fa04 	movi	r5,1000
20023660:	1009883a 	mov	r4,r2
20023664:	00247ec0 	call	200247ec <__modsi3>
20023668:	1000071e 	bne	r2,zero,20023688 <my_mnist+0x838>
            fprintf(stderr, "i=%d\n", i);
2002366c:	d0a00217 	ldw	r2,-32760(gp)
20023670:	10800317 	ldw	r2,12(r2)
20023674:	e1b8e817 	ldw	r6,-7264(fp)
20023678:	014800f4 	movhi	r5,8195
2002367c:	29558204 	addi	r5,r5,22024
20023680:	1009883a 	mov	r4,r2
20023684:	00278980 	call	20027898 <fprintf>

    alt_putstr("test !!! ...\n");
    fprintf(stderr, "testing...\n");
    int ntests = images_test->dims[0];
    int ncorrect = 0;
    for (int i = 0; i < ntests; i++) {
20023688:	e0b8e817 	ldw	r2,-7264(fp)
2002368c:	10800044 	addi	r2,r2,1
20023690:	e0b8e815 	stw	r2,-7264(fp)
20023694:	e0f8e817 	ldw	r3,-7264(fp)
20023698:	e0b90117 	ldw	r2,-7164(fp)
2002369c:	18bf9216 	blt	r3,r2,200234e8 <_gp+0xfffe3f88>
        if ((i % 1000) == 0) {
            fprintf(stderr, "i=%d\n", i);
        }
    }

    alt_putstr("test bla !!! ...\n");
200236a0:	010800f4 	movhi	r4,8195
200236a4:	21158404 	addi	r4,r4,22032
200236a8:	0032af80 	call	20032af8 <alt_putstr>

    fprintf(stderr, "ntests=%d, ncorrect=%d\n", ntests, ncorrect);
200236ac:	d0a00217 	ldw	r2,-32760(gp)
200236b0:	10800317 	ldw	r2,12(r2)
200236b4:	e1f8e717 	ldw	r7,-7268(fp)
200236b8:	e1b90117 	ldw	r6,-7164(fp)
200236bc:	014800f4 	movhi	r5,8195
200236c0:	29558904 	addi	r5,r5,22052
200236c4:	1009883a 	mov	r4,r2
200236c8:	00278980 	call	20027898 <fprintf>

    IdxFile_destroy(images_test);
200236cc:	e138fd17 	ldw	r4,-7180(fp)
200236d0:	0022bd00 	call	20022bd0 <IdxFile_destroy>
    IdxFile_destroy(labels_test);
200236d4:	e138ff17 	ldw	r4,-7172(fp)
200236d8:	0022bd00 	call	20022bd0 <IdxFile_destroy>

    Layer_destroy(linput);
200236dc:	e138ec17 	ldw	r4,-7248(fp)
200236e0:	002079c0 	call	2002079c <Layer_destroy>
    Layer_destroy(lconv1);
200236e4:	e138ed17 	ldw	r4,-7244(fp)
200236e8:	002079c0 	call	2002079c <Layer_destroy>
    Layer_destroy(lconv2);
200236ec:	e138ee17 	ldw	r4,-7240(fp)
200236f0:	002079c0 	call	2002079c <Layer_destroy>
    Layer_destroy(lfull1);
200236f4:	e138ef17 	ldw	r4,-7236(fp)
200236f8:	002079c0 	call	2002079c <Layer_destroy>
    Layer_destroy(lfull2);
200236fc:	e138f017 	ldw	r4,-7232(fp)
20023700:	002079c0 	call	2002079c <Layer_destroy>
    Layer_destroy(loutput);
20023704:	e138f117 	ldw	r4,-7228(fp)
20023708:	002079c0 	call	2002079c <Layer_destroy>
}
2002370c:	e6ffff04 	addi	sp,fp,-4
20023710:	dfc00217 	ldw	ra,8(sp)
20023714:	df000117 	ldw	fp,4(sp)
20023718:	dc000017 	ldw	r16,0(sp)
2002371c:	dec00304 	addi	sp,sp,12
20023720:	f800283a 	ret

20023724 <main>:

int main(){
20023724:	defffa04 	addi	sp,sp,-24
20023728:	dfc00515 	stw	ra,20(sp)
2002372c:	df000415 	stw	fp,16(sp)
20023730:	df000404 	addi	fp,sp,16
    const char *test_images_path = "/mnt/host/data/t10k-images-idx3-ubyte";
20023734:	008800f4 	movhi	r2,8195
20023738:	10958f04 	addi	r2,r2,22076
2002373c:	e0bffc15 	stw	r2,-16(fp)
    const char *test_labels_path = "/mnt/host/data/t10k-labels-idx1-ubyte";
20023740:	008800f4 	movhi	r2,8195
20023744:	10959904 	addi	r2,r2,22116
20023748:	e0bffd15 	stw	r2,-12(fp)
    const char *train_images_path = "/mnt/host/data/train-images-idx3-ubyte";
2002374c:	008800f4 	movhi	r2,8195
20023750:	1095a304 	addi	r2,r2,22156
20023754:	e0bffe15 	stw	r2,-8(fp)
    const char *train_labels_path = "/mnt/host/data/train-labels-idx1-ubyte";
20023758:	008800f4 	movhi	r2,8195
2002375c:	1095ad04 	addi	r2,r2,22196
20023760:	e0bfff15 	stw	r2,-4(fp)

    my_mnist(train_images_path, train_labels_path, test_images_path, test_labels_path);
20023764:	e1fffd17 	ldw	r7,-12(fp)
20023768:	e1bffc17 	ldw	r6,-16(fp)
2002376c:	e17fff17 	ldw	r5,-4(fp)
20023770:	e13ffe17 	ldw	r4,-8(fp)
20023774:	0022e500 	call	20022e50 <my_mnist>

    //while(1);
    return 0;
20023778:	0005883a 	mov	r2,zero
}
2002377c:	e037883a 	mov	sp,fp
20023780:	dfc00117 	ldw	ra,4(sp)
20023784:	df000017 	ldw	fp,0(sp)
20023788:	dec00204 	addi	sp,sp,8
2002378c:	f800283a 	ret

20023790 <tanh>:
20023790:	00a00034 	movhi	r2,32768
20023794:	defffc04 	addi	sp,sp,-16
20023798:	10bfffc4 	addi	r2,r2,-1
2002379c:	00dffc34 	movhi	r3,32752
200237a0:	dc400115 	stw	r17,4(sp)
200237a4:	dc000015 	stw	r16,0(sp)
200237a8:	dfc00315 	stw	ra,12(sp)
200237ac:	dc800215 	stw	r18,8(sp)
200237b0:	2884703a 	and	r2,r5,r2
200237b4:	18ffffc4 	addi	r3,r3,-1
200237b8:	2821883a 	mov	r16,r5
200237bc:	2023883a 	mov	r17,r4
200237c0:	1880110e 	bge	r3,r2,20023808 <tanh+0x78>
200237c4:	200d883a 	mov	r6,r4
200237c8:	280f883a 	mov	r7,r5
200237cc:	0009883a 	mov	r4,zero
200237d0:	014ffc34 	movhi	r5,16368
200237d4:	80003416 	blt	r16,zero,200238a8 <tanh+0x118>
200237d8:	00251c80 	call	200251c8 <__divdf3>
200237dc:	000d883a 	mov	r6,zero
200237e0:	01cffc34 	movhi	r7,16368
200237e4:	1009883a 	mov	r4,r2
200237e8:	180b883a 	mov	r5,r3
200237ec:	002491c0 	call	2002491c <__adddf3>
200237f0:	dfc00317 	ldw	ra,12(sp)
200237f4:	dc800217 	ldw	r18,8(sp)
200237f8:	dc400117 	ldw	r17,4(sp)
200237fc:	dc000017 	ldw	r16,0(sp)
20023800:	dec00404 	addi	sp,sp,16
20023804:	f800283a 	ret
20023808:	00d00db4 	movhi	r3,16438
2002380c:	18ffffc4 	addi	r3,r3,-1
20023810:	18802116 	blt	r3,r2,20023898 <tanh+0x108>
20023814:	00cf2034 	movhi	r3,15488
20023818:	18ffffc4 	addi	r3,r3,-1
2002381c:	1880290e 	bge	r3,r2,200238c4 <tanh+0x134>
20023820:	00cffc34 	movhi	r3,16368
20023824:	18ffffc4 	addi	r3,r3,-1
20023828:	18802f0e 	bge	r3,r2,200238e8 <tanh+0x158>
2002382c:	00247300 	call	20024730 <fabs>
20023830:	100d883a 	mov	r6,r2
20023834:	180f883a 	mov	r7,r3
20023838:	1009883a 	mov	r4,r2
2002383c:	180b883a 	mov	r5,r3
20023840:	002491c0 	call	2002491c <__adddf3>
20023844:	1009883a 	mov	r4,r2
20023848:	180b883a 	mov	r5,r3
2002384c:	0023fbc0 	call	20023fbc <expm1>
20023850:	1009883a 	mov	r4,r2
20023854:	180b883a 	mov	r5,r3
20023858:	000d883a 	mov	r6,zero
2002385c:	01d00034 	movhi	r7,16384
20023860:	002491c0 	call	2002491c <__adddf3>
20023864:	100d883a 	mov	r6,r2
20023868:	180f883a 	mov	r7,r3
2002386c:	0009883a 	mov	r4,zero
20023870:	01500034 	movhi	r5,16384
20023874:	00251c80 	call	200251c8 <__divdf3>
20023878:	100d883a 	mov	r6,r2
2002387c:	180f883a 	mov	r7,r3
20023880:	0009883a 	mov	r4,zero
20023884:	014ffc34 	movhi	r5,16368
20023888:	00263980 	call	20026398 <__subdf3>
2002388c:	803fd80e 	bge	r16,zero,200237f0 <_gp+0xfffe4290>
20023890:	18e0003c 	xorhi	r3,r3,32768
20023894:	003fd606 	br	200237f0 <_gp+0xfffe4290>
20023898:	0005883a 	mov	r2,zero
2002389c:	00cffc34 	movhi	r3,16368
200238a0:	803fd30e 	bge	r16,zero,200237f0 <_gp+0xfffe4290>
200238a4:	003ffa06 	br	20023890 <_gp+0xfffe4330>
200238a8:	00251c80 	call	200251c8 <__divdf3>
200238ac:	000d883a 	mov	r6,zero
200238b0:	01cffc34 	movhi	r7,16368
200238b4:	1009883a 	mov	r4,r2
200238b8:	180b883a 	mov	r5,r3
200238bc:	00263980 	call	20026398 <__subdf3>
200238c0:	003fcb06 	br	200237f0 <_gp+0xfffe4290>
200238c4:	000d883a 	mov	r6,zero
200238c8:	01cffc34 	movhi	r7,16368
200238cc:	002491c0 	call	2002491c <__adddf3>
200238d0:	880d883a 	mov	r6,r17
200238d4:	800f883a 	mov	r7,r16
200238d8:	1009883a 	mov	r4,r2
200238dc:	180b883a 	mov	r5,r3
200238e0:	0025c800 	call	20025c80 <__muldf3>
200238e4:	003fc206 	br	200237f0 <_gp+0xfffe4290>
200238e8:	00247300 	call	20024730 <fabs>
200238ec:	000d883a 	mov	r6,zero
200238f0:	01f00034 	movhi	r7,49152
200238f4:	1009883a 	mov	r4,r2
200238f8:	180b883a 	mov	r5,r3
200238fc:	0025c800 	call	20025c80 <__muldf3>
20023900:	1009883a 	mov	r4,r2
20023904:	180b883a 	mov	r5,r3
20023908:	0023fbc0 	call	20023fbc <expm1>
2002390c:	000d883a 	mov	r6,zero
20023910:	01d00034 	movhi	r7,16384
20023914:	1009883a 	mov	r4,r2
20023918:	180b883a 	mov	r5,r3
2002391c:	1023883a 	mov	r17,r2
20023920:	1ca0003c 	xorhi	r18,r3,32768
20023924:	002491c0 	call	2002491c <__adddf3>
20023928:	100d883a 	mov	r6,r2
2002392c:	180f883a 	mov	r7,r3
20023930:	8809883a 	mov	r4,r17
20023934:	900b883a 	mov	r5,r18
20023938:	00251c80 	call	200251c8 <__divdf3>
2002393c:	803fac0e 	bge	r16,zero,200237f0 <_gp+0xfffe4290>
20023940:	003fd306 	br	20023890 <_gp+0xfffe4330>

20023944 <exp>:
20023944:	defff104 	addi	sp,sp,-60
20023948:	dd000d15 	stw	r20,52(sp)
2002394c:	050800f4 	movhi	r20,8195
20023950:	dcc00c15 	stw	r19,48(sp)
20023954:	dc800b15 	stw	r18,44(sp)
20023958:	dc400a15 	stw	r17,40(sp)
2002395c:	dc000915 	stw	r16,36(sp)
20023960:	dfc00e15 	stw	ra,56(sp)
20023964:	a51d5804 	addi	r20,r20,30048
20023968:	2027883a 	mov	r19,r4
2002396c:	2825883a 	mov	r18,r5
20023970:	0023ad40 	call	20023ad4 <__ieee754_exp>
20023974:	1821883a 	mov	r16,r3
20023978:	a0c00017 	ldw	r3,0(r20)
2002397c:	1023883a 	mov	r17,r2
20023980:	00bfffc4 	movi	r2,-1
20023984:	18802e26 	beq	r3,r2,20023a40 <exp+0xfc>
20023988:	9809883a 	mov	r4,r19
2002398c:	900b883a 	mov	r5,r18
20023990:	00247440 	call	20024744 <finite>
20023994:	10002a26 	beq	r2,zero,20023a40 <exp+0xfc>
20023998:	01bfbeb4 	movhi	r6,65274
2002399c:	01d021b4 	movhi	r7,16518
200239a0:	318e7bc4 	addi	r6,r6,14831
200239a4:	39cb9084 	addi	r7,r7,11842
200239a8:	9809883a 	mov	r4,r19
200239ac:	900b883a 	mov	r5,r18
200239b0:	0025ab00 	call	20025ab0 <__gedf2>
200239b4:	00802c16 	blt	zero,r2,20023a68 <exp+0x124>
200239b8:	01b54b74 	movhi	r6,54573
200239bc:	01f021f4 	movhi	r7,49287
200239c0:	318c1444 	addi	r6,r6,12369
200239c4:	39d24404 	addi	r7,r7,18704
200239c8:	9809883a 	mov	r4,r19
200239cc:	900b883a 	mov	r5,r18
200239d0:	0025b8c0 	call	20025b8c <__ledf2>
200239d4:	10001a0e 	bge	r2,zero,20023a40 <exp+0xfc>
200239d8:	00800104 	movi	r2,4
200239dc:	d8800015 	stw	r2,0(sp)
200239e0:	a0c00017 	ldw	r3,0(r20)
200239e4:	008800f4 	movhi	r2,8195
200239e8:	1095c604 	addi	r2,r2,22296
200239ec:	d8800115 	stw	r2,4(sp)
200239f0:	d8000815 	stw	zero,32(sp)
200239f4:	dcc00415 	stw	r19,16(sp)
200239f8:	dc800515 	stw	r18,20(sp)
200239fc:	dcc00215 	stw	r19,8(sp)
20023a00:	dc800315 	stw	r18,12(sp)
20023a04:	d8000615 	stw	zero,24(sp)
20023a08:	d8000715 	stw	zero,28(sp)
20023a0c:	00800084 	movi	r2,2
20023a10:	18802c26 	beq	r3,r2,20023ac4 <exp+0x180>
20023a14:	d809883a 	mov	r4,sp
20023a18:	00247600 	call	20024760 <matherr>
20023a1c:	10002926 	beq	r2,zero,20023ac4 <exp+0x180>
20023a20:	d8800817 	ldw	r2,32(sp)
20023a24:	10000326 	beq	r2,zero,20023a34 <exp+0xf0>
20023a28:	0026fac0 	call	20026fac <__errno>
20023a2c:	d8c00817 	ldw	r3,32(sp)
20023a30:	10c00015 	stw	r3,0(r2)
20023a34:	d8800617 	ldw	r2,24(sp)
20023a38:	d8c00717 	ldw	r3,28(sp)
20023a3c:	00000206 	br	20023a48 <exp+0x104>
20023a40:	8805883a 	mov	r2,r17
20023a44:	8007883a 	mov	r3,r16
20023a48:	dfc00e17 	ldw	ra,56(sp)
20023a4c:	dd000d17 	ldw	r20,52(sp)
20023a50:	dcc00c17 	ldw	r19,48(sp)
20023a54:	dc800b17 	ldw	r18,44(sp)
20023a58:	dc400a17 	ldw	r17,40(sp)
20023a5c:	dc000917 	ldw	r16,36(sp)
20023a60:	dec00f04 	addi	sp,sp,60
20023a64:	f800283a 	ret
20023a68:	00c000c4 	movi	r3,3
20023a6c:	d8c00015 	stw	r3,0(sp)
20023a70:	a0800017 	ldw	r2,0(r20)
20023a74:	00c800f4 	movhi	r3,8195
20023a78:	18d5c604 	addi	r3,r3,22296
20023a7c:	d8c00115 	stw	r3,4(sp)
20023a80:	d8000815 	stw	zero,32(sp)
20023a84:	dcc00415 	stw	r19,16(sp)
20023a88:	dc800515 	stw	r18,20(sp)
20023a8c:	dcc00215 	stw	r19,8(sp)
20023a90:	dc800315 	stw	r18,12(sp)
20023a94:	1000061e 	bne	r2,zero,20023ab0 <exp+0x16c>
20023a98:	00b80034 	movhi	r2,57344
20023a9c:	d8800615 	stw	r2,24(sp)
20023aa0:	0091fc34 	movhi	r2,18416
20023aa4:	10bfffc4 	addi	r2,r2,-1
20023aa8:	d8800715 	stw	r2,28(sp)
20023aac:	003fd906 	br	20023a14 <_gp+0xfffe44b4>
20023ab0:	00dffc34 	movhi	r3,32752
20023ab4:	d8c00715 	stw	r3,28(sp)
20023ab8:	d8000615 	stw	zero,24(sp)
20023abc:	00c00084 	movi	r3,2
20023ac0:	10ffd41e 	bne	r2,r3,20023a14 <_gp+0xfffe44b4>
20023ac4:	0026fac0 	call	20026fac <__errno>
20023ac8:	00c00884 	movi	r3,34
20023acc:	10c00015 	stw	r3,0(r2)
20023ad0:	003fd306 	br	20023a20 <_gp+0xfffe44c0>

20023ad4 <__ieee754_exp>:
20023ad4:	00e00034 	movhi	r3,32768
20023ad8:	defff604 	addi	sp,sp,-40
20023adc:	18ffffc4 	addi	r3,r3,-1
20023ae0:	009021b4 	movhi	r2,16518
20023ae4:	ddc00715 	stw	r23,28(sp)
20023ae8:	dc400115 	stw	r17,4(sp)
20023aec:	dc000015 	stw	r16,0(sp)
20023af0:	dfc00915 	stw	ra,36(sp)
20023af4:	df000815 	stw	fp,32(sp)
20023af8:	dd800615 	stw	r22,24(sp)
20023afc:	dd400515 	stw	r21,20(sp)
20023b00:	dd000415 	stw	r20,16(sp)
20023b04:	dcc00315 	stw	r19,12(sp)
20023b08:	dc800215 	stw	r18,8(sp)
20023b0c:	28c6703a 	and	r3,r5,r3
20023b10:	108b9044 	addi	r2,r2,11841
20023b14:	2821883a 	mov	r16,r5
20023b18:	2023883a 	mov	r17,r4
20023b1c:	282ed7fa 	srli	r23,r5,31
20023b20:	10c00c2e 	bgeu	r2,r3,20023b54 <__ieee754_exp+0x80>
20023b24:	009ffc34 	movhi	r2,32752
20023b28:	10bfffc4 	addi	r2,r2,-1
20023b2c:	10c08b2e 	bgeu	r2,r3,20023d5c <__ieee754_exp+0x288>
20023b30:	00800434 	movhi	r2,16
20023b34:	10bfffc4 	addi	r2,r2,-1
20023b38:	2884703a 	and	r2,r5,r2
20023b3c:	1104b03a 	or	r2,r2,r4
20023b40:	1000fb1e 	bne	r2,zero,20023f30 <__ieee754_exp+0x45c>
20023b44:	b8011a1e 	bne	r23,zero,20023fb0 <__ieee754_exp+0x4dc>
20023b48:	2005883a 	mov	r2,r4
20023b4c:	2807883a 	mov	r3,r5
20023b50:	00007606 	br	20023d2c <__ieee754_exp+0x258>
20023b54:	008ff5b4 	movhi	r2,16342
20023b58:	108b9084 	addi	r2,r2,11842
20023b5c:	10c0c336 	bltu	r2,r3,20023e6c <__ieee754_exp+0x398>
20023b60:	008f8c34 	movhi	r2,15920
20023b64:	10bfffc4 	addi	r2,r2,-1
20023b68:	10c0d52e 	bgeu	r2,r3,20023ec0 <__ieee754_exp+0x3ec>
20023b6c:	0025883a 	mov	r18,zero
20023b70:	880d883a 	mov	r6,r17
20023b74:	800f883a 	mov	r7,r16
20023b78:	8809883a 	mov	r4,r17
20023b7c:	800b883a 	mov	r5,r16
20023b80:	0025c800 	call	20025c80 <__muldf3>
20023b84:	019caff4 	movhi	r6,29375
20023b88:	01cf99b4 	movhi	r7,15974
20023b8c:	31a93404 	addi	r6,r6,-23344
20023b90:	39cdda44 	addi	r7,r7,14185
20023b94:	1009883a 	mov	r4,r2
20023b98:	180b883a 	mov	r5,r3
20023b9c:	1039883a 	mov	fp,r2
20023ba0:	182f883a 	mov	r23,r3
20023ba4:	0025c800 	call	20025c80 <__muldf3>
20023ba8:	01b174b4 	movhi	r6,50642
20023bac:	01cfaf34 	movhi	r7,16060
20023bb0:	319afc44 	addi	r6,r6,27633
20023bb4:	39ef5044 	addi	r7,r7,-17087
20023bb8:	1009883a 	mov	r4,r2
20023bbc:	180b883a 	mov	r5,r3
20023bc0:	00263980 	call	20026398 <__subdf3>
20023bc4:	e00d883a 	mov	r6,fp
20023bc8:	b80f883a 	mov	r7,r23
20023bcc:	1009883a 	mov	r4,r2
20023bd0:	180b883a 	mov	r5,r3
20023bd4:	0025c800 	call	20025c80 <__muldf3>
20023bd8:	01abc9b4 	movhi	r6,44838
20023bdc:	01cfc474 	movhi	r7,16145
20023be0:	31b78b04 	addi	r6,r6,-8660
20023be4:	39d59a84 	addi	r7,r7,22122
20023be8:	1009883a 	mov	r4,r2
20023bec:	180b883a 	mov	r5,r3
20023bf0:	002491c0 	call	2002491c <__adddf3>
20023bf4:	e00d883a 	mov	r6,fp
20023bf8:	b80f883a 	mov	r7,r23
20023bfc:	1009883a 	mov	r4,r2
20023c00:	180b883a 	mov	r5,r3
20023c04:	0025c800 	call	20025c80 <__muldf3>
20023c08:	0185aff4 	movhi	r6,5823
20023c0c:	01cfd9f4 	movhi	r7,16231
20023c10:	31af64c4 	addi	r6,r6,-17005
20023c14:	39f05b04 	addi	r7,r7,-16020
20023c18:	1009883a 	mov	r4,r2
20023c1c:	180b883a 	mov	r5,r3
20023c20:	00263980 	call	20026398 <__subdf3>
20023c24:	e00d883a 	mov	r6,fp
20023c28:	b80f883a 	mov	r7,r23
20023c2c:	1009883a 	mov	r4,r2
20023c30:	180b883a 	mov	r5,r3
20023c34:	0025c800 	call	20025c80 <__muldf3>
20023c38:	01955574 	movhi	r6,21845
20023c3c:	01cff174 	movhi	r7,16325
20023c40:	31954f84 	addi	r6,r6,21822
20023c44:	39d55544 	addi	r7,r7,21845
20023c48:	1009883a 	mov	r4,r2
20023c4c:	180b883a 	mov	r5,r3
20023c50:	002491c0 	call	2002491c <__adddf3>
20023c54:	e00d883a 	mov	r6,fp
20023c58:	b80f883a 	mov	r7,r23
20023c5c:	1009883a 	mov	r4,r2
20023c60:	180b883a 	mov	r5,r3
20023c64:	0025c800 	call	20025c80 <__muldf3>
20023c68:	100d883a 	mov	r6,r2
20023c6c:	180f883a 	mov	r7,r3
20023c70:	8809883a 	mov	r4,r17
20023c74:	800b883a 	mov	r5,r16
20023c78:	00263980 	call	20026398 <__subdf3>
20023c7c:	1039883a 	mov	fp,r2
20023c80:	182f883a 	mov	r23,r3
20023c84:	9000ae26 	beq	r18,zero,20023f40 <__ieee754_exp+0x46c>
20023c88:	8809883a 	mov	r4,r17
20023c8c:	800b883a 	mov	r5,r16
20023c90:	100d883a 	mov	r6,r2
20023c94:	180f883a 	mov	r7,r3
20023c98:	0025c800 	call	20025c80 <__muldf3>
20023c9c:	e00d883a 	mov	r6,fp
20023ca0:	b80f883a 	mov	r7,r23
20023ca4:	0009883a 	mov	r4,zero
20023ca8:	01500034 	movhi	r5,16384
20023cac:	1023883a 	mov	r17,r2
20023cb0:	1821883a 	mov	r16,r3
20023cb4:	00263980 	call	20026398 <__subdf3>
20023cb8:	100d883a 	mov	r6,r2
20023cbc:	180f883a 	mov	r7,r3
20023cc0:	8809883a 	mov	r4,r17
20023cc4:	800b883a 	mov	r5,r16
20023cc8:	00251c80 	call	200251c8 <__divdf3>
20023ccc:	100d883a 	mov	r6,r2
20023cd0:	180f883a 	mov	r7,r3
20023cd4:	b009883a 	mov	r4,r22
20023cd8:	a80b883a 	mov	r5,r21
20023cdc:	00263980 	call	20026398 <__subdf3>
20023ce0:	a00d883a 	mov	r6,r20
20023ce4:	980f883a 	mov	r7,r19
20023ce8:	1009883a 	mov	r4,r2
20023cec:	180b883a 	mov	r5,r3
20023cf0:	00263980 	call	20026398 <__subdf3>
20023cf4:	0009883a 	mov	r4,zero
20023cf8:	100d883a 	mov	r6,r2
20023cfc:	180f883a 	mov	r7,r3
20023d00:	014ffc34 	movhi	r5,16368
20023d04:	00263980 	call	20026398 <__subdf3>
20023d08:	013f00c4 	movi	r4,-1021
20023d0c:	91007d0e 	bge	r18,r4,20023f04 <__ieee754_exp+0x430>
20023d10:	9140fa04 	addi	r5,r18,1000
20023d14:	280a953a 	slli	r5,r5,20
20023d18:	000d883a 	mov	r6,zero
20023d1c:	01c05c34 	movhi	r7,368
20023d20:	1009883a 	mov	r4,r2
20023d24:	28cb883a 	add	r5,r5,r3
20023d28:	0025c800 	call	20025c80 <__muldf3>
20023d2c:	dfc00917 	ldw	ra,36(sp)
20023d30:	df000817 	ldw	fp,32(sp)
20023d34:	ddc00717 	ldw	r23,28(sp)
20023d38:	dd800617 	ldw	r22,24(sp)
20023d3c:	dd400517 	ldw	r21,20(sp)
20023d40:	dd000417 	ldw	r20,16(sp)
20023d44:	dcc00317 	ldw	r19,12(sp)
20023d48:	dc800217 	ldw	r18,8(sp)
20023d4c:	dc400117 	ldw	r17,4(sp)
20023d50:	dc000017 	ldw	r16,0(sp)
20023d54:	dec00a04 	addi	sp,sp,40
20023d58:	f800283a 	ret
20023d5c:	01bfbeb4 	movhi	r6,65274
20023d60:	01d021b4 	movhi	r7,16518
20023d64:	318e7bc4 	addi	r6,r6,14831
20023d68:	39cb9084 	addi	r7,r7,11842
20023d6c:	0025ab00 	call	20025ab0 <__gedf2>
20023d70:	00806716 	blt	zero,r2,20023f10 <__ieee754_exp+0x43c>
20023d74:	01b54b74 	movhi	r6,54573
20023d78:	01f021f4 	movhi	r7,49287
20023d7c:	318c1444 	addi	r6,r6,12369
20023d80:	39d24404 	addi	r7,r7,18704
20023d84:	8809883a 	mov	r4,r17
20023d88:	800b883a 	mov	r5,r16
20023d8c:	0025b8c0 	call	20025b8c <__ledf2>
20023d90:	10008716 	blt	r2,zero,20023fb0 <__ieee754_exp+0x4dc>
20023d94:	b82490fa 	slli	r18,r23,3
20023d98:	01994b34 	movhi	r6,25900
20023d9c:	01cffdf4 	movhi	r7,16375
20023da0:	05c800f4 	movhi	r23,8195
20023da4:	31a0bf84 	addi	r6,r6,-32002
20023da8:	39c551c4 	addi	r7,r7,5447
20023dac:	8809883a 	mov	r4,r17
20023db0:	800b883a 	mov	r5,r16
20023db4:	bdd5cf04 	addi	r23,r23,22332
20023db8:	0025c800 	call	20025c80 <__muldf3>
20023dbc:	bca5883a 	add	r18,r23,r18
20023dc0:	91800017 	ldw	r6,0(r18)
20023dc4:	91c00117 	ldw	r7,4(r18)
20023dc8:	1009883a 	mov	r4,r2
20023dcc:	180b883a 	mov	r5,r3
20023dd0:	002491c0 	call	2002491c <__adddf3>
20023dd4:	180b883a 	mov	r5,r3
20023dd8:	1009883a 	mov	r4,r2
20023ddc:	0026c940 	call	20026c94 <__fixdfsi>
20023de0:	1009883a 	mov	r4,r2
20023de4:	1025883a 	mov	r18,r2
20023de8:	0026d140 	call	20026d14 <__floatsidf>
20023dec:	01cff9b4 	movhi	r7,16358
20023df0:	39cb9084 	addi	r7,r7,11842
20023df4:	01bfb834 	movhi	r6,65248
20023df8:	1009883a 	mov	r4,r2
20023dfc:	180b883a 	mov	r5,r3
20023e00:	102d883a 	mov	r22,r2
20023e04:	182b883a 	mov	r21,r3
20023e08:	0025c800 	call	20025c80 <__muldf3>
20023e0c:	100d883a 	mov	r6,r2
20023e10:	180f883a 	mov	r7,r3
20023e14:	8809883a 	mov	r4,r17
20023e18:	800b883a 	mov	r5,r16
20023e1c:	00263980 	call	20026398 <__subdf3>
20023e20:	018d5e74 	movhi	r6,13689
20023e24:	01cf7ab4 	movhi	r7,15850
20023e28:	b009883a 	mov	r4,r22
20023e2c:	a80b883a 	mov	r5,r21
20023e30:	318f1d84 	addi	r6,r6,15478
20023e34:	39ce7bc4 	addi	r7,r7,14831
20023e38:	1029883a 	mov	r20,r2
20023e3c:	1827883a 	mov	r19,r3
20023e40:	0025c800 	call	20025c80 <__muldf3>
20023e44:	102d883a 	mov	r22,r2
20023e48:	182b883a 	mov	r21,r3
20023e4c:	b00d883a 	mov	r6,r22
20023e50:	a80f883a 	mov	r7,r21
20023e54:	a009883a 	mov	r4,r20
20023e58:	980b883a 	mov	r5,r19
20023e5c:	00263980 	call	20026398 <__subdf3>
20023e60:	1023883a 	mov	r17,r2
20023e64:	1821883a 	mov	r16,r3
20023e68:	003f4106 	br	20023b70 <_gp+0xfffe4610>
20023e6c:	008ffc74 	movhi	r2,16369
20023e70:	10a8ac44 	addi	r2,r2,-23887
20023e74:	10ffc736 	bltu	r2,r3,20023d94 <_gp+0xfffe4834>
20023e78:	b82290fa 	slli	r17,r23,3
20023e7c:	008800f4 	movhi	r2,8195
20023e80:	1095cb04 	addi	r2,r2,22316
20023e84:	1445883a 	add	r2,r2,r17
20023e88:	11800017 	ldw	r6,0(r2)
20023e8c:	11c00117 	ldw	r7,4(r2)
20023e90:	04800044 	movi	r18,1
20023e94:	95e5c83a 	sub	r18,r18,r23
20023e98:	00263980 	call	20026398 <__subdf3>
20023e9c:	1029883a 	mov	r20,r2
20023ea0:	008800f4 	movhi	r2,8195
20023ea4:	1095c704 	addi	r2,r2,22300
20023ea8:	1463883a 	add	r17,r2,r17
20023eac:	1827883a 	mov	r19,r3
20023eb0:	8d800017 	ldw	r22,0(r17)
20023eb4:	8d400117 	ldw	r21,4(r17)
20023eb8:	95e5c83a 	sub	r18,r18,r23
20023ebc:	003fe306 	br	20023e4c <_gp+0xfffe48ec>
20023ec0:	01a20034 	movhi	r6,34816
20023ec4:	01df8e34 	movhi	r7,32312
20023ec8:	319d6704 	addi	r6,r6,30108
20023ecc:	39f90f04 	addi	r7,r7,-7108
20023ed0:	002491c0 	call	2002491c <__adddf3>
20023ed4:	000d883a 	mov	r6,zero
20023ed8:	01cffc34 	movhi	r7,16368
20023edc:	1009883a 	mov	r4,r2
20023ee0:	180b883a 	mov	r5,r3
20023ee4:	0025ab00 	call	20025ab0 <__gedf2>
20023ee8:	00bf200e 	bge	zero,r2,20023b6c <_gp+0xfffe460c>
20023eec:	000d883a 	mov	r6,zero
20023ef0:	01cffc34 	movhi	r7,16368
20023ef4:	8809883a 	mov	r4,r17
20023ef8:	800b883a 	mov	r5,r16
20023efc:	002491c0 	call	2002491c <__adddf3>
20023f00:	003f8a06 	br	20023d2c <_gp+0xfffe47cc>
20023f04:	9020953a 	slli	r16,r18,20
20023f08:	80c7883a 	add	r3,r16,r3
20023f0c:	003f8706 	br	20023d2c <_gp+0xfffe47cc>
20023f10:	01a20034 	movhi	r6,34816
20023f14:	01df8e34 	movhi	r7,32312
20023f18:	319d6704 	addi	r6,r6,30108
20023f1c:	39f90f04 	addi	r7,r7,-7108
20023f20:	3009883a 	mov	r4,r6
20023f24:	380b883a 	mov	r5,r7
20023f28:	0025c800 	call	20025c80 <__muldf3>
20023f2c:	003f7f06 	br	20023d2c <_gp+0xfffe47cc>
20023f30:	200d883a 	mov	r6,r4
20023f34:	280f883a 	mov	r7,r5
20023f38:	002491c0 	call	2002491c <__adddf3>
20023f3c:	003f7b06 	br	20023d2c <_gp+0xfffe47cc>
20023f40:	8809883a 	mov	r4,r17
20023f44:	800b883a 	mov	r5,r16
20023f48:	100d883a 	mov	r6,r2
20023f4c:	180f883a 	mov	r7,r3
20023f50:	0025c800 	call	20025c80 <__muldf3>
20023f54:	e009883a 	mov	r4,fp
20023f58:	b80b883a 	mov	r5,r23
20023f5c:	000d883a 	mov	r6,zero
20023f60:	01d00034 	movhi	r7,16384
20023f64:	1027883a 	mov	r19,r2
20023f68:	1825883a 	mov	r18,r3
20023f6c:	00263980 	call	20026398 <__subdf3>
20023f70:	9809883a 	mov	r4,r19
20023f74:	900b883a 	mov	r5,r18
20023f78:	100d883a 	mov	r6,r2
20023f7c:	180f883a 	mov	r7,r3
20023f80:	00251c80 	call	200251c8 <__divdf3>
20023f84:	880d883a 	mov	r6,r17
20023f88:	800f883a 	mov	r7,r16
20023f8c:	1009883a 	mov	r4,r2
20023f90:	180b883a 	mov	r5,r3
20023f94:	00263980 	call	20026398 <__subdf3>
20023f98:	100d883a 	mov	r6,r2
20023f9c:	180f883a 	mov	r7,r3
20023fa0:	0009883a 	mov	r4,zero
20023fa4:	014ffc34 	movhi	r5,16368
20023fa8:	00263980 	call	20026398 <__subdf3>
20023fac:	003f5f06 	br	20023d2c <_gp+0xfffe47cc>
20023fb0:	0005883a 	mov	r2,zero
20023fb4:	0007883a 	mov	r3,zero
20023fb8:	003f5c06 	br	20023d2c <_gp+0xfffe47cc>

20023fbc <expm1>:
20023fbc:	00a00034 	movhi	r2,32768
20023fc0:	defff404 	addi	sp,sp,-48
20023fc4:	10bfffc4 	addi	r2,r2,-1
20023fc8:	00d010f4 	movhi	r3,16451
20023fcc:	dc800415 	stw	r18,16(sp)
20023fd0:	dc400315 	stw	r17,12(sp)
20023fd4:	dc000215 	stw	r16,8(sp)
20023fd8:	dfc00b15 	stw	ra,44(sp)
20023fdc:	df000a15 	stw	fp,40(sp)
20023fe0:	ddc00915 	stw	r23,36(sp)
20023fe4:	dd800815 	stw	r22,32(sp)
20023fe8:	dd400715 	stw	r21,28(sp)
20023fec:	dd000615 	stw	r20,24(sp)
20023ff0:	dcc00515 	stw	r19,20(sp)
20023ff4:	2884703a 	and	r2,r5,r2
20023ff8:	18da1e44 	addi	r3,r3,26745
20023ffc:	2821883a 	mov	r16,r5
20024000:	2023883a 	mov	r17,r4
20024004:	2ca0002c 	andhi	r18,r5,32768
20024008:	18804f2e 	bgeu	r3,r2,20024148 <expm1+0x18c>
2002400c:	00d021b4 	movhi	r3,16518
20024010:	18cb9044 	addi	r3,r3,11841
20024014:	1880fa36 	bltu	r3,r2,20024400 <expm1+0x444>
20024018:	90017b26 	beq	r18,zero,20024608 <expm1+0x64c>
2002401c:	01b0be74 	movhi	r6,49913
20024020:	01c06974 	movhi	r7,421
20024024:	31bcd644 	addi	r6,r6,-3239
20024028:	39db87c4 	addi	r7,r7,28191
2002402c:	8809883a 	mov	r4,r17
20024030:	800b883a 	mov	r5,r16
20024034:	002491c0 	call	2002491c <__adddf3>
20024038:	000d883a 	mov	r6,zero
2002403c:	000f883a 	mov	r7,zero
20024040:	1009883a 	mov	r4,r2
20024044:	180b883a 	mov	r5,r3
20024048:	0025b8c0 	call	20025b8c <__ledf2>
2002404c:	10014216 	blt	r2,zero,20024558 <expm1+0x59c>
20024050:	01994b34 	movhi	r6,25900
20024054:	01cffdf4 	movhi	r7,16375
20024058:	31a0bf84 	addi	r6,r6,-32002
2002405c:	39c551c4 	addi	r7,r7,5447
20024060:	8809883a 	mov	r4,r17
20024064:	800b883a 	mov	r5,r16
20024068:	0025c800 	call	20025c80 <__muldf3>
2002406c:	100d883a 	mov	r6,r2
20024070:	180f883a 	mov	r7,r3
20024074:	016ff834 	movhi	r5,49120
20024078:	0009883a 	mov	r4,zero
2002407c:	002491c0 	call	2002491c <__adddf3>
20024080:	180b883a 	mov	r5,r3
20024084:	1009883a 	mov	r4,r2
20024088:	0026c940 	call	20026c94 <__fixdfsi>
2002408c:	1009883a 	mov	r4,r2
20024090:	1029883a 	mov	r20,r2
20024094:	0026d140 	call	20026d14 <__floatsidf>
20024098:	01cff9b4 	movhi	r7,16358
2002409c:	39cb9084 	addi	r7,r7,11842
200240a0:	01bfb834 	movhi	r6,65248
200240a4:	1009883a 	mov	r4,r2
200240a8:	180b883a 	mov	r5,r3
200240ac:	1027883a 	mov	r19,r2
200240b0:	1825883a 	mov	r18,r3
200240b4:	0025c800 	call	20025c80 <__muldf3>
200240b8:	100d883a 	mov	r6,r2
200240bc:	180f883a 	mov	r7,r3
200240c0:	8809883a 	mov	r4,r17
200240c4:	800b883a 	mov	r5,r16
200240c8:	00263980 	call	20026398 <__subdf3>
200240cc:	018d5e74 	movhi	r6,13689
200240d0:	01cf7ab4 	movhi	r7,15850
200240d4:	9809883a 	mov	r4,r19
200240d8:	900b883a 	mov	r5,r18
200240dc:	318f1d84 	addi	r6,r6,15478
200240e0:	39ce7bc4 	addi	r7,r7,14831
200240e4:	102d883a 	mov	r22,r2
200240e8:	182b883a 	mov	r21,r3
200240ec:	0025c800 	call	20025c80 <__muldf3>
200240f0:	1027883a 	mov	r19,r2
200240f4:	1825883a 	mov	r18,r3
200240f8:	980d883a 	mov	r6,r19
200240fc:	900f883a 	mov	r7,r18
20024100:	b009883a 	mov	r4,r22
20024104:	a80b883a 	mov	r5,r21
20024108:	00263980 	call	20026398 <__subdf3>
2002410c:	100d883a 	mov	r6,r2
20024110:	180f883a 	mov	r7,r3
20024114:	b009883a 	mov	r4,r22
20024118:	a80b883a 	mov	r5,r21
2002411c:	1023883a 	mov	r17,r2
20024120:	1821883a 	mov	r16,r3
20024124:	00263980 	call	20026398 <__subdf3>
20024128:	980d883a 	mov	r6,r19
2002412c:	900f883a 	mov	r7,r18
20024130:	1009883a 	mov	r4,r2
20024134:	180b883a 	mov	r5,r3
20024138:	00263980 	call	20026398 <__subdf3>
2002413c:	d8800015 	stw	r2,0(sp)
20024140:	d8c00115 	stw	r3,4(sp)
20024144:	00000706 	br	20024164 <expm1+0x1a8>
20024148:	00cff5b4 	movhi	r3,16342
2002414c:	18cb9084 	addi	r3,r3,11842
20024150:	1880e036 	bltu	r3,r2,200244d4 <expm1+0x518>
20024154:	00cf2434 	movhi	r3,15504
20024158:	18ffffc4 	addi	r3,r3,-1
2002415c:	18810a2e 	bgeu	r3,r2,20024588 <expm1+0x5cc>
20024160:	0029883a 	mov	r20,zero
20024164:	000d883a 	mov	r6,zero
20024168:	01cff834 	movhi	r7,16352
2002416c:	8809883a 	mov	r4,r17
20024170:	800b883a 	mov	r5,r16
20024174:	0025c800 	call	20025c80 <__muldf3>
20024178:	100d883a 	mov	r6,r2
2002417c:	180f883a 	mov	r7,r3
20024180:	8809883a 	mov	r4,r17
20024184:	800b883a 	mov	r5,r16
20024188:	1039883a 	mov	fp,r2
2002418c:	182f883a 	mov	r23,r3
20024190:	0025c800 	call	20025c80 <__muldf3>
20024194:	019b82b4 	movhi	r6,28170
20024198:	01efa2f4 	movhi	r7,48779
2002419c:	31b0cb44 	addi	r6,r6,-15571
200241a0:	39ff6dc4 	addi	r7,r7,-585
200241a4:	1009883a 	mov	r4,r2
200241a8:	180b883a 	mov	r5,r3
200241ac:	1027883a 	mov	r19,r2
200241b0:	1825883a 	mov	r18,r3
200241b4:	0025c800 	call	20025c80 <__muldf3>
200241b8:	01a1b9b4 	movhi	r6,34534
200241bc:	01cfb474 	movhi	r7,16081
200241c0:	31948e44 	addi	r6,r6,21049
200241c4:	39f3f284 	addi	r7,r7,-12342
200241c8:	1009883a 	mov	r4,r2
200241cc:	180b883a 	mov	r5,r3
200241d0:	002491c0 	call	2002491c <__adddf3>
200241d4:	980d883a 	mov	r6,r19
200241d8:	900f883a 	mov	r7,r18
200241dc:	1009883a 	mov	r4,r2
200241e0:	180b883a 	mov	r5,r3
200241e4:	0025c800 	call	20025c80 <__muldf3>
200241e8:	01a7aaf4 	movhi	r6,40619
200241ec:	01cfc574 	movhi	r7,16149
200241f0:	31b6edc4 	addi	r6,r6,-9289
200241f4:	39f38644 	addi	r7,r7,-12775
200241f8:	1009883a 	mov	r4,r2
200241fc:	180b883a 	mov	r5,r3
20024200:	00263980 	call	20026398 <__subdf3>
20024204:	980d883a 	mov	r6,r19
20024208:	900f883a 	mov	r7,r18
2002420c:	1009883a 	mov	r4,r2
20024210:	180b883a 	mov	r5,r3
20024214:	0025c800 	call	20025c80 <__muldf3>
20024218:	01867fb4 	movhi	r6,6654
2002421c:	01cfd6b4 	movhi	r7,16218
20024220:	31956144 	addi	r6,r6,21893
20024224:	39c06804 	addi	r7,r7,416
20024228:	1009883a 	mov	r4,r2
2002422c:	180b883a 	mov	r5,r3
20024230:	002491c0 	call	2002491c <__adddf3>
20024234:	980d883a 	mov	r6,r19
20024238:	900f883a 	mov	r7,r18
2002423c:	1009883a 	mov	r4,r2
20024240:	180b883a 	mov	r5,r3
20024244:	0025c800 	call	20025c80 <__muldf3>
20024248:	01844474 	movhi	r6,4369
2002424c:	01cfe874 	movhi	r7,16289
20024250:	31843d04 	addi	r6,r6,4340
20024254:	39c44444 	addi	r7,r7,4369
20024258:	1009883a 	mov	r4,r2
2002425c:	180b883a 	mov	r5,r3
20024260:	00263980 	call	20026398 <__subdf3>
20024264:	980d883a 	mov	r6,r19
20024268:	900f883a 	mov	r7,r18
2002426c:	1009883a 	mov	r4,r2
20024270:	180b883a 	mov	r5,r3
20024274:	0025c800 	call	20025c80 <__muldf3>
20024278:	000d883a 	mov	r6,zero
2002427c:	01cffc34 	movhi	r7,16368
20024280:	1009883a 	mov	r4,r2
20024284:	180b883a 	mov	r5,r3
20024288:	002491c0 	call	2002491c <__adddf3>
2002428c:	e009883a 	mov	r4,fp
20024290:	b80b883a 	mov	r5,r23
20024294:	100d883a 	mov	r6,r2
20024298:	180f883a 	mov	r7,r3
2002429c:	102d883a 	mov	r22,r2
200242a0:	182b883a 	mov	r21,r3
200242a4:	0025c800 	call	20025c80 <__muldf3>
200242a8:	100d883a 	mov	r6,r2
200242ac:	180f883a 	mov	r7,r3
200242b0:	0009883a 	mov	r4,zero
200242b4:	01500234 	movhi	r5,16392
200242b8:	00263980 	call	20026398 <__subdf3>
200242bc:	b009883a 	mov	r4,r22
200242c0:	a80b883a 	mov	r5,r21
200242c4:	100d883a 	mov	r6,r2
200242c8:	180f883a 	mov	r7,r3
200242cc:	1039883a 	mov	fp,r2
200242d0:	182f883a 	mov	r23,r3
200242d4:	00263980 	call	20026398 <__subdf3>
200242d8:	e00d883a 	mov	r6,fp
200242dc:	b80f883a 	mov	r7,r23
200242e0:	8809883a 	mov	r4,r17
200242e4:	800b883a 	mov	r5,r16
200242e8:	102d883a 	mov	r22,r2
200242ec:	182b883a 	mov	r21,r3
200242f0:	0025c800 	call	20025c80 <__muldf3>
200242f4:	100d883a 	mov	r6,r2
200242f8:	180f883a 	mov	r7,r3
200242fc:	0009883a 	mov	r4,zero
20024300:	01500634 	movhi	r5,16408
20024304:	00263980 	call	20026398 <__subdf3>
20024308:	100d883a 	mov	r6,r2
2002430c:	180f883a 	mov	r7,r3
20024310:	b009883a 	mov	r4,r22
20024314:	a80b883a 	mov	r5,r21
20024318:	00251c80 	call	200251c8 <__divdf3>
2002431c:	980d883a 	mov	r6,r19
20024320:	900f883a 	mov	r7,r18
20024324:	1009883a 	mov	r4,r2
20024328:	180b883a 	mov	r5,r3
2002432c:	0025c800 	call	20025c80 <__muldf3>
20024330:	a0003f26 	beq	r20,zero,20024430 <expm1+0x474>
20024334:	d9800017 	ldw	r6,0(sp)
20024338:	d9c00117 	ldw	r7,4(sp)
2002433c:	1009883a 	mov	r4,r2
20024340:	180b883a 	mov	r5,r3
20024344:	00263980 	call	20026398 <__subdf3>
20024348:	880d883a 	mov	r6,r17
2002434c:	800f883a 	mov	r7,r16
20024350:	1009883a 	mov	r4,r2
20024354:	180b883a 	mov	r5,r3
20024358:	0025c800 	call	20025c80 <__muldf3>
2002435c:	d9800017 	ldw	r6,0(sp)
20024360:	d9c00117 	ldw	r7,4(sp)
20024364:	1009883a 	mov	r4,r2
20024368:	180b883a 	mov	r5,r3
2002436c:	00263980 	call	20026398 <__subdf3>
20024370:	980d883a 	mov	r6,r19
20024374:	900f883a 	mov	r7,r18
20024378:	1009883a 	mov	r4,r2
2002437c:	180b883a 	mov	r5,r3
20024380:	00263980 	call	20026398 <__subdf3>
20024384:	1027883a 	mov	r19,r2
20024388:	00bfffc4 	movi	r2,-1
2002438c:	1825883a 	mov	r18,r3
20024390:	a080a826 	beq	r20,r2,20024634 <expm1+0x678>
20024394:	00800044 	movi	r2,1
20024398:	a0808526 	beq	r20,r2,200245b0 <expm1+0x5f4>
2002439c:	a0800044 	addi	r2,r20,1
200243a0:	00c00e44 	movi	r3,57
200243a4:	18805b36 	bltu	r3,r2,20024514 <expm1+0x558>
200243a8:	008004c4 	movi	r2,19
200243ac:	1500b10e 	bge	r2,r20,20024674 <expm1+0x6b8>
200243b0:	01c0ffc4 	movi	r7,1023
200243b4:	3d0fc83a 	sub	r7,r7,r20
200243b8:	380e953a 	slli	r7,r7,20
200243bc:	000d883a 	mov	r6,zero
200243c0:	9809883a 	mov	r4,r19
200243c4:	900b883a 	mov	r5,r18
200243c8:	002491c0 	call	2002491c <__adddf3>
200243cc:	800b883a 	mov	r5,r16
200243d0:	100d883a 	mov	r6,r2
200243d4:	180f883a 	mov	r7,r3
200243d8:	8809883a 	mov	r4,r17
200243dc:	00263980 	call	20026398 <__subdf3>
200243e0:	a020953a 	slli	r16,r20,20
200243e4:	000d883a 	mov	r6,zero
200243e8:	01cffc34 	movhi	r7,16368
200243ec:	1009883a 	mov	r4,r2
200243f0:	180b883a 	mov	r5,r3
200243f4:	002491c0 	call	2002491c <__adddf3>
200243f8:	80c7883a 	add	r3,r16,r3
200243fc:	00001b06 	br	2002446c <expm1+0x4b0>
20024400:	00dffc34 	movhi	r3,32752
20024404:	18ffffc4 	addi	r3,r3,-1
20024408:	1880242e 	bgeu	r3,r2,2002449c <expm1+0x4e0>
2002440c:	00800434 	movhi	r2,16
20024410:	10bfffc4 	addi	r2,r2,-1
20024414:	2884703a 	and	r2,r5,r2
20024418:	1104b03a 	or	r2,r2,r4
2002441c:	1000c01e 	bne	r2,zero,20024720 <expm1+0x764>
20024420:	90004d1e 	bne	r18,zero,20024558 <expm1+0x59c>
20024424:	2005883a 	mov	r2,r4
20024428:	2807883a 	mov	r3,r5
2002442c:	00000f06 	br	2002446c <expm1+0x4b0>
20024430:	100d883a 	mov	r6,r2
20024434:	180f883a 	mov	r7,r3
20024438:	8809883a 	mov	r4,r17
2002443c:	800b883a 	mov	r5,r16
20024440:	0025c800 	call	20025c80 <__muldf3>
20024444:	980d883a 	mov	r6,r19
20024448:	900f883a 	mov	r7,r18
2002444c:	1009883a 	mov	r4,r2
20024450:	180b883a 	mov	r5,r3
20024454:	00263980 	call	20026398 <__subdf3>
20024458:	100d883a 	mov	r6,r2
2002445c:	180f883a 	mov	r7,r3
20024460:	8809883a 	mov	r4,r17
20024464:	800b883a 	mov	r5,r16
20024468:	00263980 	call	20026398 <__subdf3>
2002446c:	dfc00b17 	ldw	ra,44(sp)
20024470:	df000a17 	ldw	fp,40(sp)
20024474:	ddc00917 	ldw	r23,36(sp)
20024478:	dd800817 	ldw	r22,32(sp)
2002447c:	dd400717 	ldw	r21,28(sp)
20024480:	dd000617 	ldw	r20,24(sp)
20024484:	dcc00517 	ldw	r19,20(sp)
20024488:	dc800417 	ldw	r18,16(sp)
2002448c:	dc400317 	ldw	r17,12(sp)
20024490:	dc000217 	ldw	r16,8(sp)
20024494:	dec00c04 	addi	sp,sp,48
20024498:	f800283a 	ret
2002449c:	01bfbeb4 	movhi	r6,65274
200244a0:	01d021b4 	movhi	r7,16518
200244a4:	318e7bc4 	addi	r6,r6,14831
200244a8:	39cb9084 	addi	r7,r7,11842
200244ac:	0025ab00 	call	20025ab0 <__gedf2>
200244b0:	00bed90e 	bge	zero,r2,20024018 <_gp+0xfffe4ab8>
200244b4:	01a20034 	movhi	r6,34816
200244b8:	01df8e34 	movhi	r7,32312
200244bc:	319d6704 	addi	r6,r6,30108
200244c0:	39f90f04 	addi	r7,r7,-7108
200244c4:	3009883a 	mov	r4,r6
200244c8:	380b883a 	mov	r5,r7
200244cc:	0025c800 	call	20025c80 <__muldf3>
200244d0:	003fe606 	br	2002446c <_gp+0xfffe4f0c>
200244d4:	00cffc74 	movhi	r3,16369
200244d8:	18e8ac44 	addi	r3,r3,-23887
200244dc:	18807636 	bltu	r3,r2,200246b8 <expm1+0x6fc>
200244e0:	01cff9b4 	movhi	r7,16358
200244e4:	39cb9084 	addi	r7,r7,11842
200244e8:	01bfb834 	movhi	r6,65248
200244ec:	90001d26 	beq	r18,zero,20024564 <expm1+0x5a8>
200244f0:	002491c0 	call	2002491c <__adddf3>
200244f4:	04cd5e74 	movhi	r19,13689
200244f8:	04af7ab4 	movhi	r18,48618
200244fc:	053fffc4 	movi	r20,-1
20024500:	102d883a 	mov	r22,r2
20024504:	182b883a 	mov	r21,r3
20024508:	9ccf1d84 	addi	r19,r19,15478
2002450c:	948e7bc4 	addi	r18,r18,14831
20024510:	003ef906 	br	200240f8 <_gp+0xfffe4b98>
20024514:	9809883a 	mov	r4,r19
20024518:	900b883a 	mov	r5,r18
2002451c:	880d883a 	mov	r6,r17
20024520:	800f883a 	mov	r7,r16
20024524:	00263980 	call	20026398 <__subdf3>
20024528:	100d883a 	mov	r6,r2
2002452c:	180f883a 	mov	r7,r3
20024530:	0009883a 	mov	r4,zero
20024534:	014ffc34 	movhi	r5,16368
20024538:	00263980 	call	20026398 <__subdf3>
2002453c:	a00a953a 	slli	r5,r20,20
20024540:	000d883a 	mov	r6,zero
20024544:	01cffc34 	movhi	r7,16368
20024548:	1009883a 	mov	r4,r2
2002454c:	28cb883a 	add	r5,r5,r3
20024550:	00263980 	call	20026398 <__subdf3>
20024554:	003fc506 	br	2002446c <_gp+0xfffe4f0c>
20024558:	0005883a 	mov	r2,zero
2002455c:	00effc34 	movhi	r3,49136
20024560:	003fc206 	br	2002446c <_gp+0xfffe4f0c>
20024564:	00263980 	call	20026398 <__subdf3>
20024568:	04cd5e74 	movhi	r19,13689
2002456c:	048f7ab4 	movhi	r18,15850
20024570:	05000044 	movi	r20,1
20024574:	102d883a 	mov	r22,r2
20024578:	182b883a 	mov	r21,r3
2002457c:	9ccf1d84 	addi	r19,r19,15478
20024580:	948e7bc4 	addi	r18,r18,14831
20024584:	003edc06 	br	200240f8 <_gp+0xfffe4b98>
20024588:	01a20034 	movhi	r6,34816
2002458c:	01df8e34 	movhi	r7,32312
20024590:	319d6704 	addi	r6,r6,30108
20024594:	39f90f04 	addi	r7,r7,-7108
20024598:	002491c0 	call	2002491c <__adddf3>
2002459c:	100d883a 	mov	r6,r2
200245a0:	180f883a 	mov	r7,r3
200245a4:	1009883a 	mov	r4,r2
200245a8:	180b883a 	mov	r5,r3
200245ac:	003fa906 	br	20024454 <_gp+0xfffe4ef4>
200245b0:	000d883a 	mov	r6,zero
200245b4:	01eff434 	movhi	r7,49104
200245b8:	8809883a 	mov	r4,r17
200245bc:	800b883a 	mov	r5,r16
200245c0:	0025b8c0 	call	20025b8c <__ledf2>
200245c4:	1000460e 	bge	r2,zero,200246e0 <expm1+0x724>
200245c8:	8809883a 	mov	r4,r17
200245cc:	800b883a 	mov	r5,r16
200245d0:	000d883a 	mov	r6,zero
200245d4:	01cff834 	movhi	r7,16352
200245d8:	002491c0 	call	2002491c <__adddf3>
200245dc:	9809883a 	mov	r4,r19
200245e0:	900b883a 	mov	r5,r18
200245e4:	100d883a 	mov	r6,r2
200245e8:	180f883a 	mov	r7,r3
200245ec:	00263980 	call	20026398 <__subdf3>
200245f0:	000d883a 	mov	r6,zero
200245f4:	01f00034 	movhi	r7,49152
200245f8:	1009883a 	mov	r4,r2
200245fc:	180b883a 	mov	r5,r3
20024600:	0025c800 	call	20025c80 <__muldf3>
20024604:	003f9906 	br	2002446c <_gp+0xfffe4f0c>
20024608:	01994b34 	movhi	r6,25900
2002460c:	01cffdf4 	movhi	r7,16375
20024610:	31a0bf84 	addi	r6,r6,-32002
20024614:	39c551c4 	addi	r7,r7,5447
20024618:	800b883a 	mov	r5,r16
2002461c:	8809883a 	mov	r4,r17
20024620:	0025c800 	call	20025c80 <__muldf3>
20024624:	100d883a 	mov	r6,r2
20024628:	180f883a 	mov	r7,r3
2002462c:	014ff834 	movhi	r5,16352
20024630:	003e9106 	br	20024078 <_gp+0xfffe4b18>
20024634:	980d883a 	mov	r6,r19
20024638:	8809883a 	mov	r4,r17
2002463c:	800b883a 	mov	r5,r16
20024640:	180f883a 	mov	r7,r3
20024644:	00263980 	call	20026398 <__subdf3>
20024648:	000d883a 	mov	r6,zero
2002464c:	01cff834 	movhi	r7,16352
20024650:	1009883a 	mov	r4,r2
20024654:	180b883a 	mov	r5,r3
20024658:	0025c800 	call	20025c80 <__muldf3>
2002465c:	000d883a 	mov	r6,zero
20024660:	01cff834 	movhi	r7,16352
20024664:	1009883a 	mov	r4,r2
20024668:	180b883a 	mov	r5,r3
2002466c:	00263980 	call	20026398 <__subdf3>
20024670:	003f7e06 	br	2002446c <_gp+0xfffe4f0c>
20024674:	00c00834 	movhi	r3,32
20024678:	1d07d83a 	sra	r3,r3,r20
2002467c:	800f883a 	mov	r7,r16
20024680:	9809883a 	mov	r4,r19
20024684:	900b883a 	mov	r5,r18
20024688:	880d883a 	mov	r6,r17
2002468c:	008ffc34 	movhi	r2,16368
20024690:	10e1c83a 	sub	r16,r2,r3
20024694:	00263980 	call	20026398 <__subdf3>
20024698:	800b883a 	mov	r5,r16
2002469c:	a020953a 	slli	r16,r20,20
200246a0:	100d883a 	mov	r6,r2
200246a4:	180f883a 	mov	r7,r3
200246a8:	0009883a 	mov	r4,zero
200246ac:	00263980 	call	20026398 <__subdf3>
200246b0:	80c7883a 	add	r3,r16,r3
200246b4:	003f6d06 	br	2002446c <_gp+0xfffe4f0c>
200246b8:	01994b34 	movhi	r6,25900
200246bc:	01cffdf4 	movhi	r7,16375
200246c0:	31a0bf84 	addi	r6,r6,-32002
200246c4:	39c551c4 	addi	r7,r7,5447
200246c8:	0025c800 	call	20025c80 <__muldf3>
200246cc:	100d883a 	mov	r6,r2
200246d0:	180f883a 	mov	r7,r3
200246d4:	903e671e 	bne	r18,zero,20024074 <_gp+0xfffe4b14>
200246d8:	014ff834 	movhi	r5,16352
200246dc:	003e6606 	br	20024078 <_gp+0xfffe4b18>
200246e0:	980d883a 	mov	r6,r19
200246e4:	900f883a 	mov	r7,r18
200246e8:	8809883a 	mov	r4,r17
200246ec:	800b883a 	mov	r5,r16
200246f0:	00263980 	call	20026398 <__subdf3>
200246f4:	100d883a 	mov	r6,r2
200246f8:	180f883a 	mov	r7,r3
200246fc:	1009883a 	mov	r4,r2
20024700:	180b883a 	mov	r5,r3
20024704:	002491c0 	call	2002491c <__adddf3>
20024708:	000d883a 	mov	r6,zero
2002470c:	01cffc34 	movhi	r7,16368
20024710:	1009883a 	mov	r4,r2
20024714:	180b883a 	mov	r5,r3
20024718:	002491c0 	call	2002491c <__adddf3>
2002471c:	003f5306 	br	2002446c <_gp+0xfffe4f0c>
20024720:	200d883a 	mov	r6,r4
20024724:	280f883a 	mov	r7,r5
20024728:	002491c0 	call	2002491c <__adddf3>
2002472c:	003f4f06 	br	2002446c <_gp+0xfffe4f0c>

20024730 <fabs>:
20024730:	00e00034 	movhi	r3,32768
20024734:	18ffffc4 	addi	r3,r3,-1
20024738:	2005883a 	mov	r2,r4
2002473c:	28c6703a 	and	r3,r5,r3
20024740:	f800283a 	ret

20024744 <finite>:
20024744:	00a00034 	movhi	r2,32768
20024748:	10bfffc4 	addi	r2,r2,-1
2002474c:	288a703a 	and	r5,r5,r2
20024750:	00e00434 	movhi	r3,32784
20024754:	28c5883a 	add	r2,r5,r3
20024758:	1004d7fa 	srli	r2,r2,31
2002475c:	f800283a 	ret

20024760 <matherr>:
20024760:	0005883a 	mov	r2,zero
20024764:	f800283a 	ret

20024768 <__divsi3>:
20024768:	20001b16 	blt	r4,zero,200247d8 <__divsi3+0x70>
2002476c:	000f883a 	mov	r7,zero
20024770:	28001616 	blt	r5,zero,200247cc <__divsi3+0x64>
20024774:	200d883a 	mov	r6,r4
20024778:	29001a2e 	bgeu	r5,r4,200247e4 <__divsi3+0x7c>
2002477c:	00800804 	movi	r2,32
20024780:	00c00044 	movi	r3,1
20024784:	00000106 	br	2002478c <__divsi3+0x24>
20024788:	10000d26 	beq	r2,zero,200247c0 <__divsi3+0x58>
2002478c:	294b883a 	add	r5,r5,r5
20024790:	10bfffc4 	addi	r2,r2,-1
20024794:	18c7883a 	add	r3,r3,r3
20024798:	293ffb36 	bltu	r5,r4,20024788 <_gp+0xfffe5228>
2002479c:	0005883a 	mov	r2,zero
200247a0:	18000726 	beq	r3,zero,200247c0 <__divsi3+0x58>
200247a4:	0005883a 	mov	r2,zero
200247a8:	31400236 	bltu	r6,r5,200247b4 <__divsi3+0x4c>
200247ac:	314dc83a 	sub	r6,r6,r5
200247b0:	10c4b03a 	or	r2,r2,r3
200247b4:	1806d07a 	srli	r3,r3,1
200247b8:	280ad07a 	srli	r5,r5,1
200247bc:	183ffa1e 	bne	r3,zero,200247a8 <_gp+0xfffe5248>
200247c0:	38000126 	beq	r7,zero,200247c8 <__divsi3+0x60>
200247c4:	0085c83a 	sub	r2,zero,r2
200247c8:	f800283a 	ret
200247cc:	014bc83a 	sub	r5,zero,r5
200247d0:	39c0005c 	xori	r7,r7,1
200247d4:	003fe706 	br	20024774 <_gp+0xfffe5214>
200247d8:	0109c83a 	sub	r4,zero,r4
200247dc:	01c00044 	movi	r7,1
200247e0:	003fe306 	br	20024770 <_gp+0xfffe5210>
200247e4:	00c00044 	movi	r3,1
200247e8:	003fee06 	br	200247a4 <_gp+0xfffe5244>

200247ec <__modsi3>:
200247ec:	20001716 	blt	r4,zero,2002484c <__modsi3+0x60>
200247f0:	000f883a 	mov	r7,zero
200247f4:	2005883a 	mov	r2,r4
200247f8:	28001216 	blt	r5,zero,20024844 <__modsi3+0x58>
200247fc:	2900162e 	bgeu	r5,r4,20024858 <__modsi3+0x6c>
20024800:	01800804 	movi	r6,32
20024804:	00c00044 	movi	r3,1
20024808:	00000106 	br	20024810 <__modsi3+0x24>
2002480c:	30000a26 	beq	r6,zero,20024838 <__modsi3+0x4c>
20024810:	294b883a 	add	r5,r5,r5
20024814:	31bfffc4 	addi	r6,r6,-1
20024818:	18c7883a 	add	r3,r3,r3
2002481c:	293ffb36 	bltu	r5,r4,2002480c <_gp+0xfffe52ac>
20024820:	18000526 	beq	r3,zero,20024838 <__modsi3+0x4c>
20024824:	1806d07a 	srli	r3,r3,1
20024828:	11400136 	bltu	r2,r5,20024830 <__modsi3+0x44>
2002482c:	1145c83a 	sub	r2,r2,r5
20024830:	280ad07a 	srli	r5,r5,1
20024834:	183ffb1e 	bne	r3,zero,20024824 <_gp+0xfffe52c4>
20024838:	38000126 	beq	r7,zero,20024840 <__modsi3+0x54>
2002483c:	0085c83a 	sub	r2,zero,r2
20024840:	f800283a 	ret
20024844:	014bc83a 	sub	r5,zero,r5
20024848:	003fec06 	br	200247fc <_gp+0xfffe529c>
2002484c:	0109c83a 	sub	r4,zero,r4
20024850:	01c00044 	movi	r7,1
20024854:	003fe706 	br	200247f4 <_gp+0xfffe5294>
20024858:	00c00044 	movi	r3,1
2002485c:	003ff106 	br	20024824 <_gp+0xfffe52c4>

20024860 <__udivsi3>:
20024860:	200d883a 	mov	r6,r4
20024864:	2900152e 	bgeu	r5,r4,200248bc <__udivsi3+0x5c>
20024868:	28001416 	blt	r5,zero,200248bc <__udivsi3+0x5c>
2002486c:	00800804 	movi	r2,32
20024870:	00c00044 	movi	r3,1
20024874:	00000206 	br	20024880 <__udivsi3+0x20>
20024878:	10000e26 	beq	r2,zero,200248b4 <__udivsi3+0x54>
2002487c:	28000516 	blt	r5,zero,20024894 <__udivsi3+0x34>
20024880:	294b883a 	add	r5,r5,r5
20024884:	10bfffc4 	addi	r2,r2,-1
20024888:	18c7883a 	add	r3,r3,r3
2002488c:	293ffa36 	bltu	r5,r4,20024878 <_gp+0xfffe5318>
20024890:	18000826 	beq	r3,zero,200248b4 <__udivsi3+0x54>
20024894:	0005883a 	mov	r2,zero
20024898:	31400236 	bltu	r6,r5,200248a4 <__udivsi3+0x44>
2002489c:	314dc83a 	sub	r6,r6,r5
200248a0:	10c4b03a 	or	r2,r2,r3
200248a4:	1806d07a 	srli	r3,r3,1
200248a8:	280ad07a 	srli	r5,r5,1
200248ac:	183ffa1e 	bne	r3,zero,20024898 <_gp+0xfffe5338>
200248b0:	f800283a 	ret
200248b4:	0005883a 	mov	r2,zero
200248b8:	f800283a 	ret
200248bc:	00c00044 	movi	r3,1
200248c0:	003ff406 	br	20024894 <_gp+0xfffe5334>

200248c4 <__umodsi3>:
200248c4:	2005883a 	mov	r2,r4
200248c8:	2900122e 	bgeu	r5,r4,20024914 <__umodsi3+0x50>
200248cc:	28001116 	blt	r5,zero,20024914 <__umodsi3+0x50>
200248d0:	01800804 	movi	r6,32
200248d4:	00c00044 	movi	r3,1
200248d8:	00000206 	br	200248e4 <__umodsi3+0x20>
200248dc:	30000c26 	beq	r6,zero,20024910 <__umodsi3+0x4c>
200248e0:	28000516 	blt	r5,zero,200248f8 <__umodsi3+0x34>
200248e4:	294b883a 	add	r5,r5,r5
200248e8:	31bfffc4 	addi	r6,r6,-1
200248ec:	18c7883a 	add	r3,r3,r3
200248f0:	293ffa36 	bltu	r5,r4,200248dc <_gp+0xfffe537c>
200248f4:	18000626 	beq	r3,zero,20024910 <__umodsi3+0x4c>
200248f8:	1806d07a 	srli	r3,r3,1
200248fc:	11400136 	bltu	r2,r5,20024904 <__umodsi3+0x40>
20024900:	1145c83a 	sub	r2,r2,r5
20024904:	280ad07a 	srli	r5,r5,1
20024908:	183ffb1e 	bne	r3,zero,200248f8 <_gp+0xfffe5398>
2002490c:	f800283a 	ret
20024910:	f800283a 	ret
20024914:	00c00044 	movi	r3,1
20024918:	003ff706 	br	200248f8 <_gp+0xfffe5398>

2002491c <__adddf3>:
2002491c:	02c00434 	movhi	r11,16
20024920:	5affffc4 	addi	r11,r11,-1
20024924:	2806d7fa 	srli	r3,r5,31
20024928:	2ad4703a 	and	r10,r5,r11
2002492c:	3ad2703a 	and	r9,r7,r11
20024930:	3804d53a 	srli	r2,r7,20
20024934:	3018d77a 	srli	r12,r6,29
20024938:	280ad53a 	srli	r5,r5,20
2002493c:	501490fa 	slli	r10,r10,3
20024940:	2010d77a 	srli	r8,r4,29
20024944:	481290fa 	slli	r9,r9,3
20024948:	380ed7fa 	srli	r7,r7,31
2002494c:	defffb04 	addi	sp,sp,-20
20024950:	dc800215 	stw	r18,8(sp)
20024954:	dc400115 	stw	r17,4(sp)
20024958:	dc000015 	stw	r16,0(sp)
2002495c:	dfc00415 	stw	ra,16(sp)
20024960:	dcc00315 	stw	r19,12(sp)
20024964:	1c803fcc 	andi	r18,r3,255
20024968:	2c01ffcc 	andi	r16,r5,2047
2002496c:	5210b03a 	or	r8,r10,r8
20024970:	202290fa 	slli	r17,r4,3
20024974:	1081ffcc 	andi	r2,r2,2047
20024978:	4b12b03a 	or	r9,r9,r12
2002497c:	300c90fa 	slli	r6,r6,3
20024980:	91c07526 	beq	r18,r7,20024b58 <__adddf3+0x23c>
20024984:	8087c83a 	sub	r3,r16,r2
20024988:	00c0ab0e 	bge	zero,r3,20024c38 <__adddf3+0x31c>
2002498c:	10002a1e 	bne	r2,zero,20024a38 <__adddf3+0x11c>
20024990:	4984b03a 	or	r2,r9,r6
20024994:	1000961e 	bne	r2,zero,20024bf0 <__adddf3+0x2d4>
20024998:	888001cc 	andi	r2,r17,7
2002499c:	10000726 	beq	r2,zero,200249bc <__adddf3+0xa0>
200249a0:	888003cc 	andi	r2,r17,15
200249a4:	00c00104 	movi	r3,4
200249a8:	10c00426 	beq	r2,r3,200249bc <__adddf3+0xa0>
200249ac:	88c7883a 	add	r3,r17,r3
200249b0:	1c63803a 	cmpltu	r17,r3,r17
200249b4:	4451883a 	add	r8,r8,r17
200249b8:	1823883a 	mov	r17,r3
200249bc:	4080202c 	andhi	r2,r8,128
200249c0:	10005926 	beq	r2,zero,20024b28 <__adddf3+0x20c>
200249c4:	84000044 	addi	r16,r16,1
200249c8:	0081ffc4 	movi	r2,2047
200249cc:	8080ba26 	beq	r16,r2,20024cb8 <__adddf3+0x39c>
200249d0:	00bfe034 	movhi	r2,65408
200249d4:	10bfffc4 	addi	r2,r2,-1
200249d8:	4090703a 	and	r8,r8,r2
200249dc:	4004977a 	slli	r2,r8,29
200249e0:	4010927a 	slli	r8,r8,9
200249e4:	8822d0fa 	srli	r17,r17,3
200249e8:	8401ffcc 	andi	r16,r16,2047
200249ec:	4010d33a 	srli	r8,r8,12
200249f0:	9007883a 	mov	r3,r18
200249f4:	1444b03a 	or	r2,r2,r17
200249f8:	8401ffcc 	andi	r16,r16,2047
200249fc:	8020953a 	slli	r16,r16,20
20024a00:	18c03fcc 	andi	r3,r3,255
20024a04:	01000434 	movhi	r4,16
20024a08:	213fffc4 	addi	r4,r4,-1
20024a0c:	180697fa 	slli	r3,r3,31
20024a10:	4110703a 	and	r8,r8,r4
20024a14:	4410b03a 	or	r8,r8,r16
20024a18:	40c6b03a 	or	r3,r8,r3
20024a1c:	dfc00417 	ldw	ra,16(sp)
20024a20:	dcc00317 	ldw	r19,12(sp)
20024a24:	dc800217 	ldw	r18,8(sp)
20024a28:	dc400117 	ldw	r17,4(sp)
20024a2c:	dc000017 	ldw	r16,0(sp)
20024a30:	dec00504 	addi	sp,sp,20
20024a34:	f800283a 	ret
20024a38:	0081ffc4 	movi	r2,2047
20024a3c:	80bfd626 	beq	r16,r2,20024998 <_gp+0xfffe5438>
20024a40:	4a402034 	orhi	r9,r9,128
20024a44:	00800e04 	movi	r2,56
20024a48:	10c09f16 	blt	r2,r3,20024cc8 <__adddf3+0x3ac>
20024a4c:	008007c4 	movi	r2,31
20024a50:	10c0c216 	blt	r2,r3,20024d5c <__adddf3+0x440>
20024a54:	00800804 	movi	r2,32
20024a58:	10c5c83a 	sub	r2,r2,r3
20024a5c:	488a983a 	sll	r5,r9,r2
20024a60:	30c8d83a 	srl	r4,r6,r3
20024a64:	3084983a 	sll	r2,r6,r2
20024a68:	48c6d83a 	srl	r3,r9,r3
20024a6c:	290cb03a 	or	r6,r5,r4
20024a70:	1004c03a 	cmpne	r2,r2,zero
20024a74:	308cb03a 	or	r6,r6,r2
20024a78:	898dc83a 	sub	r6,r17,r6
20024a7c:	89a3803a 	cmpltu	r17,r17,r6
20024a80:	40d1c83a 	sub	r8,r8,r3
20024a84:	4451c83a 	sub	r8,r8,r17
20024a88:	3023883a 	mov	r17,r6
20024a8c:	4080202c 	andhi	r2,r8,128
20024a90:	10002326 	beq	r2,zero,20024b20 <__adddf3+0x204>
20024a94:	04c02034 	movhi	r19,128
20024a98:	9cffffc4 	addi	r19,r19,-1
20024a9c:	44e6703a 	and	r19,r8,r19
20024aa0:	98007626 	beq	r19,zero,20024c7c <__adddf3+0x360>
20024aa4:	9809883a 	mov	r4,r19
20024aa8:	0026df00 	call	20026df0 <__clzsi2>
20024aac:	10fffe04 	addi	r3,r2,-8
20024ab0:	010007c4 	movi	r4,31
20024ab4:	20c07716 	blt	r4,r3,20024c94 <__adddf3+0x378>
20024ab8:	00800804 	movi	r2,32
20024abc:	10c5c83a 	sub	r2,r2,r3
20024ac0:	8884d83a 	srl	r2,r17,r2
20024ac4:	98d0983a 	sll	r8,r19,r3
20024ac8:	88e2983a 	sll	r17,r17,r3
20024acc:	1204b03a 	or	r2,r2,r8
20024ad0:	1c007416 	blt	r3,r16,20024ca4 <__adddf3+0x388>
20024ad4:	1c21c83a 	sub	r16,r3,r16
20024ad8:	82000044 	addi	r8,r16,1
20024adc:	00c007c4 	movi	r3,31
20024ae0:	1a009116 	blt	r3,r8,20024d28 <__adddf3+0x40c>
20024ae4:	00c00804 	movi	r3,32
20024ae8:	1a07c83a 	sub	r3,r3,r8
20024aec:	8a08d83a 	srl	r4,r17,r8
20024af0:	88e2983a 	sll	r17,r17,r3
20024af4:	10c6983a 	sll	r3,r2,r3
20024af8:	1210d83a 	srl	r8,r2,r8
20024afc:	8804c03a 	cmpne	r2,r17,zero
20024b00:	1906b03a 	or	r3,r3,r4
20024b04:	18a2b03a 	or	r17,r3,r2
20024b08:	0021883a 	mov	r16,zero
20024b0c:	003fa206 	br	20024998 <_gp+0xfffe5438>
20024b10:	1890b03a 	or	r8,r3,r2
20024b14:	40017d26 	beq	r8,zero,2002510c <__adddf3+0x7f0>
20024b18:	1011883a 	mov	r8,r2
20024b1c:	1823883a 	mov	r17,r3
20024b20:	888001cc 	andi	r2,r17,7
20024b24:	103f9e1e 	bne	r2,zero,200249a0 <_gp+0xfffe5440>
20024b28:	4004977a 	slli	r2,r8,29
20024b2c:	8822d0fa 	srli	r17,r17,3
20024b30:	4010d0fa 	srli	r8,r8,3
20024b34:	9007883a 	mov	r3,r18
20024b38:	1444b03a 	or	r2,r2,r17
20024b3c:	0101ffc4 	movi	r4,2047
20024b40:	81002426 	beq	r16,r4,20024bd4 <__adddf3+0x2b8>
20024b44:	8120703a 	and	r16,r16,r4
20024b48:	01000434 	movhi	r4,16
20024b4c:	213fffc4 	addi	r4,r4,-1
20024b50:	4110703a 	and	r8,r8,r4
20024b54:	003fa806 	br	200249f8 <_gp+0xfffe5498>
20024b58:	8089c83a 	sub	r4,r16,r2
20024b5c:	01005e0e 	bge	zero,r4,20024cd8 <__adddf3+0x3bc>
20024b60:	10002b26 	beq	r2,zero,20024c10 <__adddf3+0x2f4>
20024b64:	0081ffc4 	movi	r2,2047
20024b68:	80bf8b26 	beq	r16,r2,20024998 <_gp+0xfffe5438>
20024b6c:	4a402034 	orhi	r9,r9,128
20024b70:	00800e04 	movi	r2,56
20024b74:	1100a40e 	bge	r2,r4,20024e08 <__adddf3+0x4ec>
20024b78:	498cb03a 	or	r6,r9,r6
20024b7c:	300ac03a 	cmpne	r5,r6,zero
20024b80:	0013883a 	mov	r9,zero
20024b84:	2c4b883a 	add	r5,r5,r17
20024b88:	2c63803a 	cmpltu	r17,r5,r17
20024b8c:	4a11883a 	add	r8,r9,r8
20024b90:	8a11883a 	add	r8,r17,r8
20024b94:	2823883a 	mov	r17,r5
20024b98:	4080202c 	andhi	r2,r8,128
20024b9c:	103fe026 	beq	r2,zero,20024b20 <_gp+0xfffe55c0>
20024ba0:	84000044 	addi	r16,r16,1
20024ba4:	0081ffc4 	movi	r2,2047
20024ba8:	8080d226 	beq	r16,r2,20024ef4 <__adddf3+0x5d8>
20024bac:	00bfe034 	movhi	r2,65408
20024bb0:	10bfffc4 	addi	r2,r2,-1
20024bb4:	4090703a 	and	r8,r8,r2
20024bb8:	880ad07a 	srli	r5,r17,1
20024bbc:	400897fa 	slli	r4,r8,31
20024bc0:	88c0004c 	andi	r3,r17,1
20024bc4:	28e2b03a 	or	r17,r5,r3
20024bc8:	4010d07a 	srli	r8,r8,1
20024bcc:	2462b03a 	or	r17,r4,r17
20024bd0:	003f7106 	br	20024998 <_gp+0xfffe5438>
20024bd4:	4088b03a 	or	r4,r8,r2
20024bd8:	20014526 	beq	r4,zero,200250f0 <__adddf3+0x7d4>
20024bdc:	01000434 	movhi	r4,16
20024be0:	42000234 	orhi	r8,r8,8
20024be4:	213fffc4 	addi	r4,r4,-1
20024be8:	4110703a 	and	r8,r8,r4
20024bec:	003f8206 	br	200249f8 <_gp+0xfffe5498>
20024bf0:	18ffffc4 	addi	r3,r3,-1
20024bf4:	1800491e 	bne	r3,zero,20024d1c <__adddf3+0x400>
20024bf8:	898bc83a 	sub	r5,r17,r6
20024bfc:	8963803a 	cmpltu	r17,r17,r5
20024c00:	4251c83a 	sub	r8,r8,r9
20024c04:	4451c83a 	sub	r8,r8,r17
20024c08:	2823883a 	mov	r17,r5
20024c0c:	003f9f06 	br	20024a8c <_gp+0xfffe552c>
20024c10:	4984b03a 	or	r2,r9,r6
20024c14:	103f6026 	beq	r2,zero,20024998 <_gp+0xfffe5438>
20024c18:	213fffc4 	addi	r4,r4,-1
20024c1c:	2000931e 	bne	r4,zero,20024e6c <__adddf3+0x550>
20024c20:	898d883a 	add	r6,r17,r6
20024c24:	3463803a 	cmpltu	r17,r6,r17
20024c28:	4251883a 	add	r8,r8,r9
20024c2c:	8a11883a 	add	r8,r17,r8
20024c30:	3023883a 	mov	r17,r6
20024c34:	003fd806 	br	20024b98 <_gp+0xfffe5638>
20024c38:	1800541e 	bne	r3,zero,20024d8c <__adddf3+0x470>
20024c3c:	80800044 	addi	r2,r16,1
20024c40:	1081ffcc 	andi	r2,r2,2047
20024c44:	00c00044 	movi	r3,1
20024c48:	1880a00e 	bge	r3,r2,20024ecc <__adddf3+0x5b0>
20024c4c:	8989c83a 	sub	r4,r17,r6
20024c50:	8905803a 	cmpltu	r2,r17,r4
20024c54:	4267c83a 	sub	r19,r8,r9
20024c58:	98a7c83a 	sub	r19,r19,r2
20024c5c:	9880202c 	andhi	r2,r19,128
20024c60:	10006326 	beq	r2,zero,20024df0 <__adddf3+0x4d4>
20024c64:	3463c83a 	sub	r17,r6,r17
20024c68:	4a07c83a 	sub	r3,r9,r8
20024c6c:	344d803a 	cmpltu	r6,r6,r17
20024c70:	19a7c83a 	sub	r19,r3,r6
20024c74:	3825883a 	mov	r18,r7
20024c78:	983f8a1e 	bne	r19,zero,20024aa4 <_gp+0xfffe5544>
20024c7c:	8809883a 	mov	r4,r17
20024c80:	0026df00 	call	20026df0 <__clzsi2>
20024c84:	10800804 	addi	r2,r2,32
20024c88:	10fffe04 	addi	r3,r2,-8
20024c8c:	010007c4 	movi	r4,31
20024c90:	20ff890e 	bge	r4,r3,20024ab8 <_gp+0xfffe5558>
20024c94:	10bff604 	addi	r2,r2,-40
20024c98:	8884983a 	sll	r2,r17,r2
20024c9c:	0023883a 	mov	r17,zero
20024ca0:	1c3f8c0e 	bge	r3,r16,20024ad4 <_gp+0xfffe5574>
20024ca4:	023fe034 	movhi	r8,65408
20024ca8:	423fffc4 	addi	r8,r8,-1
20024cac:	80e1c83a 	sub	r16,r16,r3
20024cb0:	1210703a 	and	r8,r2,r8
20024cb4:	003f3806 	br	20024998 <_gp+0xfffe5438>
20024cb8:	9007883a 	mov	r3,r18
20024cbc:	0011883a 	mov	r8,zero
20024cc0:	0005883a 	mov	r2,zero
20024cc4:	003f4c06 	br	200249f8 <_gp+0xfffe5498>
20024cc8:	498cb03a 	or	r6,r9,r6
20024ccc:	300cc03a 	cmpne	r6,r6,zero
20024cd0:	0007883a 	mov	r3,zero
20024cd4:	003f6806 	br	20024a78 <_gp+0xfffe5518>
20024cd8:	20009c1e 	bne	r4,zero,20024f4c <__adddf3+0x630>
20024cdc:	80800044 	addi	r2,r16,1
20024ce0:	1141ffcc 	andi	r5,r2,2047
20024ce4:	01000044 	movi	r4,1
20024ce8:	2140670e 	bge	r4,r5,20024e88 <__adddf3+0x56c>
20024cec:	0101ffc4 	movi	r4,2047
20024cf0:	11007f26 	beq	r2,r4,20024ef0 <__adddf3+0x5d4>
20024cf4:	898d883a 	add	r6,r17,r6
20024cf8:	4247883a 	add	r3,r8,r9
20024cfc:	3451803a 	cmpltu	r8,r6,r17
20024d00:	40d1883a 	add	r8,r8,r3
20024d04:	402297fa 	slli	r17,r8,31
20024d08:	300cd07a 	srli	r6,r6,1
20024d0c:	4010d07a 	srli	r8,r8,1
20024d10:	1021883a 	mov	r16,r2
20024d14:	89a2b03a 	or	r17,r17,r6
20024d18:	003f1f06 	br	20024998 <_gp+0xfffe5438>
20024d1c:	0081ffc4 	movi	r2,2047
20024d20:	80bf481e 	bne	r16,r2,20024a44 <_gp+0xfffe54e4>
20024d24:	003f1c06 	br	20024998 <_gp+0xfffe5438>
20024d28:	843ff844 	addi	r16,r16,-31
20024d2c:	01000804 	movi	r4,32
20024d30:	1406d83a 	srl	r3,r2,r16
20024d34:	41005026 	beq	r8,r4,20024e78 <__adddf3+0x55c>
20024d38:	01001004 	movi	r4,64
20024d3c:	2211c83a 	sub	r8,r4,r8
20024d40:	1204983a 	sll	r2,r2,r8
20024d44:	88a2b03a 	or	r17,r17,r2
20024d48:	8822c03a 	cmpne	r17,r17,zero
20024d4c:	1c62b03a 	or	r17,r3,r17
20024d50:	0011883a 	mov	r8,zero
20024d54:	0021883a 	mov	r16,zero
20024d58:	003f7106 	br	20024b20 <_gp+0xfffe55c0>
20024d5c:	193ff804 	addi	r4,r3,-32
20024d60:	00800804 	movi	r2,32
20024d64:	4908d83a 	srl	r4,r9,r4
20024d68:	18804526 	beq	r3,r2,20024e80 <__adddf3+0x564>
20024d6c:	00801004 	movi	r2,64
20024d70:	10c5c83a 	sub	r2,r2,r3
20024d74:	4886983a 	sll	r3,r9,r2
20024d78:	198cb03a 	or	r6,r3,r6
20024d7c:	300cc03a 	cmpne	r6,r6,zero
20024d80:	218cb03a 	or	r6,r4,r6
20024d84:	0007883a 	mov	r3,zero
20024d88:	003f3b06 	br	20024a78 <_gp+0xfffe5518>
20024d8c:	80002a26 	beq	r16,zero,20024e38 <__adddf3+0x51c>
20024d90:	0101ffc4 	movi	r4,2047
20024d94:	11006826 	beq	r2,r4,20024f38 <__adddf3+0x61c>
20024d98:	00c7c83a 	sub	r3,zero,r3
20024d9c:	42002034 	orhi	r8,r8,128
20024da0:	01000e04 	movi	r4,56
20024da4:	20c07c16 	blt	r4,r3,20024f98 <__adddf3+0x67c>
20024da8:	010007c4 	movi	r4,31
20024dac:	20c0da16 	blt	r4,r3,20025118 <__adddf3+0x7fc>
20024db0:	01000804 	movi	r4,32
20024db4:	20c9c83a 	sub	r4,r4,r3
20024db8:	4114983a 	sll	r10,r8,r4
20024dbc:	88cad83a 	srl	r5,r17,r3
20024dc0:	8908983a 	sll	r4,r17,r4
20024dc4:	40c6d83a 	srl	r3,r8,r3
20024dc8:	5162b03a 	or	r17,r10,r5
20024dcc:	2008c03a 	cmpne	r4,r4,zero
20024dd0:	8922b03a 	or	r17,r17,r4
20024dd4:	3463c83a 	sub	r17,r6,r17
20024dd8:	48c7c83a 	sub	r3,r9,r3
20024ddc:	344d803a 	cmpltu	r6,r6,r17
20024de0:	1991c83a 	sub	r8,r3,r6
20024de4:	1021883a 	mov	r16,r2
20024de8:	3825883a 	mov	r18,r7
20024dec:	003f2706 	br	20024a8c <_gp+0xfffe552c>
20024df0:	24d0b03a 	or	r8,r4,r19
20024df4:	40001b1e 	bne	r8,zero,20024e64 <__adddf3+0x548>
20024df8:	0005883a 	mov	r2,zero
20024dfc:	0007883a 	mov	r3,zero
20024e00:	0021883a 	mov	r16,zero
20024e04:	003f4d06 	br	20024b3c <_gp+0xfffe55dc>
20024e08:	008007c4 	movi	r2,31
20024e0c:	11003c16 	blt	r2,r4,20024f00 <__adddf3+0x5e4>
20024e10:	00800804 	movi	r2,32
20024e14:	1105c83a 	sub	r2,r2,r4
20024e18:	488e983a 	sll	r7,r9,r2
20024e1c:	310ad83a 	srl	r5,r6,r4
20024e20:	3084983a 	sll	r2,r6,r2
20024e24:	4912d83a 	srl	r9,r9,r4
20024e28:	394ab03a 	or	r5,r7,r5
20024e2c:	1004c03a 	cmpne	r2,r2,zero
20024e30:	288ab03a 	or	r5,r5,r2
20024e34:	003f5306 	br	20024b84 <_gp+0xfffe5624>
20024e38:	4448b03a 	or	r4,r8,r17
20024e3c:	20003e26 	beq	r4,zero,20024f38 <__adddf3+0x61c>
20024e40:	00c6303a 	nor	r3,zero,r3
20024e44:	18003a1e 	bne	r3,zero,20024f30 <__adddf3+0x614>
20024e48:	3463c83a 	sub	r17,r6,r17
20024e4c:	4a07c83a 	sub	r3,r9,r8
20024e50:	344d803a 	cmpltu	r6,r6,r17
20024e54:	1991c83a 	sub	r8,r3,r6
20024e58:	1021883a 	mov	r16,r2
20024e5c:	3825883a 	mov	r18,r7
20024e60:	003f0a06 	br	20024a8c <_gp+0xfffe552c>
20024e64:	2023883a 	mov	r17,r4
20024e68:	003f0d06 	br	20024aa0 <_gp+0xfffe5540>
20024e6c:	0081ffc4 	movi	r2,2047
20024e70:	80bf3f1e 	bne	r16,r2,20024b70 <_gp+0xfffe5610>
20024e74:	003ec806 	br	20024998 <_gp+0xfffe5438>
20024e78:	0005883a 	mov	r2,zero
20024e7c:	003fb106 	br	20024d44 <_gp+0xfffe57e4>
20024e80:	0007883a 	mov	r3,zero
20024e84:	003fbc06 	br	20024d78 <_gp+0xfffe5818>
20024e88:	4444b03a 	or	r2,r8,r17
20024e8c:	8000871e 	bne	r16,zero,200250ac <__adddf3+0x790>
20024e90:	1000ba26 	beq	r2,zero,2002517c <__adddf3+0x860>
20024e94:	4984b03a 	or	r2,r9,r6
20024e98:	103ebf26 	beq	r2,zero,20024998 <_gp+0xfffe5438>
20024e9c:	8985883a 	add	r2,r17,r6
20024ea0:	4247883a 	add	r3,r8,r9
20024ea4:	1451803a 	cmpltu	r8,r2,r17
20024ea8:	40d1883a 	add	r8,r8,r3
20024eac:	40c0202c 	andhi	r3,r8,128
20024eb0:	1023883a 	mov	r17,r2
20024eb4:	183f1a26 	beq	r3,zero,20024b20 <_gp+0xfffe55c0>
20024eb8:	00bfe034 	movhi	r2,65408
20024ebc:	10bfffc4 	addi	r2,r2,-1
20024ec0:	2021883a 	mov	r16,r4
20024ec4:	4090703a 	and	r8,r8,r2
20024ec8:	003eb306 	br	20024998 <_gp+0xfffe5438>
20024ecc:	4444b03a 	or	r2,r8,r17
20024ed0:	8000291e 	bne	r16,zero,20024f78 <__adddf3+0x65c>
20024ed4:	10004b1e 	bne	r2,zero,20025004 <__adddf3+0x6e8>
20024ed8:	4990b03a 	or	r8,r9,r6
20024edc:	40008b26 	beq	r8,zero,2002510c <__adddf3+0x7f0>
20024ee0:	4811883a 	mov	r8,r9
20024ee4:	3023883a 	mov	r17,r6
20024ee8:	3825883a 	mov	r18,r7
20024eec:	003eaa06 	br	20024998 <_gp+0xfffe5438>
20024ef0:	1021883a 	mov	r16,r2
20024ef4:	0011883a 	mov	r8,zero
20024ef8:	0005883a 	mov	r2,zero
20024efc:	003f0f06 	br	20024b3c <_gp+0xfffe55dc>
20024f00:	217ff804 	addi	r5,r4,-32
20024f04:	00800804 	movi	r2,32
20024f08:	494ad83a 	srl	r5,r9,r5
20024f0c:	20807d26 	beq	r4,r2,20025104 <__adddf3+0x7e8>
20024f10:	00801004 	movi	r2,64
20024f14:	1109c83a 	sub	r4,r2,r4
20024f18:	4912983a 	sll	r9,r9,r4
20024f1c:	498cb03a 	or	r6,r9,r6
20024f20:	300cc03a 	cmpne	r6,r6,zero
20024f24:	298ab03a 	or	r5,r5,r6
20024f28:	0013883a 	mov	r9,zero
20024f2c:	003f1506 	br	20024b84 <_gp+0xfffe5624>
20024f30:	0101ffc4 	movi	r4,2047
20024f34:	113f9a1e 	bne	r2,r4,20024da0 <_gp+0xfffe5840>
20024f38:	4811883a 	mov	r8,r9
20024f3c:	3023883a 	mov	r17,r6
20024f40:	1021883a 	mov	r16,r2
20024f44:	3825883a 	mov	r18,r7
20024f48:	003e9306 	br	20024998 <_gp+0xfffe5438>
20024f4c:	8000161e 	bne	r16,zero,20024fa8 <__adddf3+0x68c>
20024f50:	444ab03a 	or	r5,r8,r17
20024f54:	28005126 	beq	r5,zero,2002509c <__adddf3+0x780>
20024f58:	0108303a 	nor	r4,zero,r4
20024f5c:	20004d1e 	bne	r4,zero,20025094 <__adddf3+0x778>
20024f60:	89a3883a 	add	r17,r17,r6
20024f64:	4253883a 	add	r9,r8,r9
20024f68:	898d803a 	cmpltu	r6,r17,r6
20024f6c:	3251883a 	add	r8,r6,r9
20024f70:	1021883a 	mov	r16,r2
20024f74:	003f0806 	br	20024b98 <_gp+0xfffe5638>
20024f78:	1000301e 	bne	r2,zero,2002503c <__adddf3+0x720>
20024f7c:	4984b03a 	or	r2,r9,r6
20024f80:	10007126 	beq	r2,zero,20025148 <__adddf3+0x82c>
20024f84:	4811883a 	mov	r8,r9
20024f88:	3023883a 	mov	r17,r6
20024f8c:	3825883a 	mov	r18,r7
20024f90:	0401ffc4 	movi	r16,2047
20024f94:	003e8006 	br	20024998 <_gp+0xfffe5438>
20024f98:	4462b03a 	or	r17,r8,r17
20024f9c:	8822c03a 	cmpne	r17,r17,zero
20024fa0:	0007883a 	mov	r3,zero
20024fa4:	003f8b06 	br	20024dd4 <_gp+0xfffe5874>
20024fa8:	0141ffc4 	movi	r5,2047
20024fac:	11403b26 	beq	r2,r5,2002509c <__adddf3+0x780>
20024fb0:	0109c83a 	sub	r4,zero,r4
20024fb4:	42002034 	orhi	r8,r8,128
20024fb8:	01400e04 	movi	r5,56
20024fbc:	29006716 	blt	r5,r4,2002515c <__adddf3+0x840>
20024fc0:	014007c4 	movi	r5,31
20024fc4:	29007016 	blt	r5,r4,20025188 <__adddf3+0x86c>
20024fc8:	01400804 	movi	r5,32
20024fcc:	290bc83a 	sub	r5,r5,r4
20024fd0:	4154983a 	sll	r10,r8,r5
20024fd4:	890ed83a 	srl	r7,r17,r4
20024fd8:	894a983a 	sll	r5,r17,r5
20024fdc:	4108d83a 	srl	r4,r8,r4
20024fe0:	51e2b03a 	or	r17,r10,r7
20024fe4:	280ac03a 	cmpne	r5,r5,zero
20024fe8:	8962b03a 	or	r17,r17,r5
20024fec:	89a3883a 	add	r17,r17,r6
20024ff0:	2253883a 	add	r9,r4,r9
20024ff4:	898d803a 	cmpltu	r6,r17,r6
20024ff8:	3251883a 	add	r8,r6,r9
20024ffc:	1021883a 	mov	r16,r2
20025000:	003ee506 	br	20024b98 <_gp+0xfffe5638>
20025004:	4984b03a 	or	r2,r9,r6
20025008:	103e6326 	beq	r2,zero,20024998 <_gp+0xfffe5438>
2002500c:	8987c83a 	sub	r3,r17,r6
20025010:	88c9803a 	cmpltu	r4,r17,r3
20025014:	4245c83a 	sub	r2,r8,r9
20025018:	1105c83a 	sub	r2,r2,r4
2002501c:	1100202c 	andhi	r4,r2,128
20025020:	203ebb26 	beq	r4,zero,20024b10 <_gp+0xfffe55b0>
20025024:	3463c83a 	sub	r17,r6,r17
20025028:	4a07c83a 	sub	r3,r9,r8
2002502c:	344d803a 	cmpltu	r6,r6,r17
20025030:	1991c83a 	sub	r8,r3,r6
20025034:	3825883a 	mov	r18,r7
20025038:	003e5706 	br	20024998 <_gp+0xfffe5438>
2002503c:	4984b03a 	or	r2,r9,r6
20025040:	10002e26 	beq	r2,zero,200250fc <__adddf3+0x7e0>
20025044:	4004d0fa 	srli	r2,r8,3
20025048:	8822d0fa 	srli	r17,r17,3
2002504c:	4010977a 	slli	r8,r8,29
20025050:	10c0022c 	andhi	r3,r2,8
20025054:	4462b03a 	or	r17,r8,r17
20025058:	18000826 	beq	r3,zero,2002507c <__adddf3+0x760>
2002505c:	4808d0fa 	srli	r4,r9,3
20025060:	20c0022c 	andhi	r3,r4,8
20025064:	1800051e 	bne	r3,zero,2002507c <__adddf3+0x760>
20025068:	300cd0fa 	srli	r6,r6,3
2002506c:	4806977a 	slli	r3,r9,29
20025070:	2005883a 	mov	r2,r4
20025074:	3825883a 	mov	r18,r7
20025078:	19a2b03a 	or	r17,r3,r6
2002507c:	8810d77a 	srli	r8,r17,29
20025080:	100490fa 	slli	r2,r2,3
20025084:	882290fa 	slli	r17,r17,3
20025088:	0401ffc4 	movi	r16,2047
2002508c:	4090b03a 	or	r8,r8,r2
20025090:	003e4106 	br	20024998 <_gp+0xfffe5438>
20025094:	0141ffc4 	movi	r5,2047
20025098:	117fc71e 	bne	r2,r5,20024fb8 <_gp+0xfffe5a58>
2002509c:	4811883a 	mov	r8,r9
200250a0:	3023883a 	mov	r17,r6
200250a4:	1021883a 	mov	r16,r2
200250a8:	003e3b06 	br	20024998 <_gp+0xfffe5438>
200250ac:	10002f26 	beq	r2,zero,2002516c <__adddf3+0x850>
200250b0:	4984b03a 	or	r2,r9,r6
200250b4:	10001126 	beq	r2,zero,200250fc <__adddf3+0x7e0>
200250b8:	4004d0fa 	srli	r2,r8,3
200250bc:	8822d0fa 	srli	r17,r17,3
200250c0:	4010977a 	slli	r8,r8,29
200250c4:	10c0022c 	andhi	r3,r2,8
200250c8:	4462b03a 	or	r17,r8,r17
200250cc:	183feb26 	beq	r3,zero,2002507c <_gp+0xfffe5b1c>
200250d0:	4808d0fa 	srli	r4,r9,3
200250d4:	20c0022c 	andhi	r3,r4,8
200250d8:	183fe81e 	bne	r3,zero,2002507c <_gp+0xfffe5b1c>
200250dc:	300cd0fa 	srli	r6,r6,3
200250e0:	4806977a 	slli	r3,r9,29
200250e4:	2005883a 	mov	r2,r4
200250e8:	19a2b03a 	or	r17,r3,r6
200250ec:	003fe306 	br	2002507c <_gp+0xfffe5b1c>
200250f0:	0011883a 	mov	r8,zero
200250f4:	0005883a 	mov	r2,zero
200250f8:	003e3f06 	br	200249f8 <_gp+0xfffe5498>
200250fc:	0401ffc4 	movi	r16,2047
20025100:	003e2506 	br	20024998 <_gp+0xfffe5438>
20025104:	0013883a 	mov	r9,zero
20025108:	003f8406 	br	20024f1c <_gp+0xfffe59bc>
2002510c:	0005883a 	mov	r2,zero
20025110:	0007883a 	mov	r3,zero
20025114:	003e8906 	br	20024b3c <_gp+0xfffe55dc>
20025118:	197ff804 	addi	r5,r3,-32
2002511c:	01000804 	movi	r4,32
20025120:	414ad83a 	srl	r5,r8,r5
20025124:	19002426 	beq	r3,r4,200251b8 <__adddf3+0x89c>
20025128:	01001004 	movi	r4,64
2002512c:	20c7c83a 	sub	r3,r4,r3
20025130:	40c6983a 	sll	r3,r8,r3
20025134:	1c46b03a 	or	r3,r3,r17
20025138:	1806c03a 	cmpne	r3,r3,zero
2002513c:	28e2b03a 	or	r17,r5,r3
20025140:	0007883a 	mov	r3,zero
20025144:	003f2306 	br	20024dd4 <_gp+0xfffe5874>
20025148:	0007883a 	mov	r3,zero
2002514c:	5811883a 	mov	r8,r11
20025150:	00bfffc4 	movi	r2,-1
20025154:	0401ffc4 	movi	r16,2047
20025158:	003e7806 	br	20024b3c <_gp+0xfffe55dc>
2002515c:	4462b03a 	or	r17,r8,r17
20025160:	8822c03a 	cmpne	r17,r17,zero
20025164:	0009883a 	mov	r4,zero
20025168:	003fa006 	br	20024fec <_gp+0xfffe5a8c>
2002516c:	4811883a 	mov	r8,r9
20025170:	3023883a 	mov	r17,r6
20025174:	0401ffc4 	movi	r16,2047
20025178:	003e0706 	br	20024998 <_gp+0xfffe5438>
2002517c:	4811883a 	mov	r8,r9
20025180:	3023883a 	mov	r17,r6
20025184:	003e0406 	br	20024998 <_gp+0xfffe5438>
20025188:	21fff804 	addi	r7,r4,-32
2002518c:	01400804 	movi	r5,32
20025190:	41ced83a 	srl	r7,r8,r7
20025194:	21400a26 	beq	r4,r5,200251c0 <__adddf3+0x8a4>
20025198:	01401004 	movi	r5,64
2002519c:	2909c83a 	sub	r4,r5,r4
200251a0:	4108983a 	sll	r4,r8,r4
200251a4:	2448b03a 	or	r4,r4,r17
200251a8:	2008c03a 	cmpne	r4,r4,zero
200251ac:	3922b03a 	or	r17,r7,r4
200251b0:	0009883a 	mov	r4,zero
200251b4:	003f8d06 	br	20024fec <_gp+0xfffe5a8c>
200251b8:	0007883a 	mov	r3,zero
200251bc:	003fdd06 	br	20025134 <_gp+0xfffe5bd4>
200251c0:	0009883a 	mov	r4,zero
200251c4:	003ff706 	br	200251a4 <_gp+0xfffe5c44>

200251c8 <__divdf3>:
200251c8:	defff204 	addi	sp,sp,-56
200251cc:	dd400915 	stw	r21,36(sp)
200251d0:	282ad53a 	srli	r21,r5,20
200251d4:	dd000815 	stw	r20,32(sp)
200251d8:	2828d7fa 	srli	r20,r5,31
200251dc:	dc000415 	stw	r16,16(sp)
200251e0:	04000434 	movhi	r16,16
200251e4:	df000c15 	stw	fp,48(sp)
200251e8:	843fffc4 	addi	r16,r16,-1
200251ec:	dfc00d15 	stw	ra,52(sp)
200251f0:	ddc00b15 	stw	r23,44(sp)
200251f4:	dd800a15 	stw	r22,40(sp)
200251f8:	dcc00715 	stw	r19,28(sp)
200251fc:	dc800615 	stw	r18,24(sp)
20025200:	dc400515 	stw	r17,20(sp)
20025204:	ad41ffcc 	andi	r21,r21,2047
20025208:	2c20703a 	and	r16,r5,r16
2002520c:	a7003fcc 	andi	fp,r20,255
20025210:	a8006126 	beq	r21,zero,20025398 <__divdf3+0x1d0>
20025214:	0081ffc4 	movi	r2,2047
20025218:	2025883a 	mov	r18,r4
2002521c:	a8803726 	beq	r21,r2,200252fc <__divdf3+0x134>
20025220:	80800434 	orhi	r2,r16,16
20025224:	100490fa 	slli	r2,r2,3
20025228:	2020d77a 	srli	r16,r4,29
2002522c:	202490fa 	slli	r18,r4,3
20025230:	ad7f0044 	addi	r21,r21,-1023
20025234:	80a0b03a 	or	r16,r16,r2
20025238:	0027883a 	mov	r19,zero
2002523c:	0013883a 	mov	r9,zero
20025240:	3804d53a 	srli	r2,r7,20
20025244:	382cd7fa 	srli	r22,r7,31
20025248:	04400434 	movhi	r17,16
2002524c:	8c7fffc4 	addi	r17,r17,-1
20025250:	1081ffcc 	andi	r2,r2,2047
20025254:	3011883a 	mov	r8,r6
20025258:	3c62703a 	and	r17,r7,r17
2002525c:	b5c03fcc 	andi	r23,r22,255
20025260:	10006c26 	beq	r2,zero,20025414 <__divdf3+0x24c>
20025264:	00c1ffc4 	movi	r3,2047
20025268:	10c06426 	beq	r2,r3,200253fc <__divdf3+0x234>
2002526c:	88c00434 	orhi	r3,r17,16
20025270:	180690fa 	slli	r3,r3,3
20025274:	3022d77a 	srli	r17,r6,29
20025278:	301090fa 	slli	r8,r6,3
2002527c:	10bf0044 	addi	r2,r2,-1023
20025280:	88e2b03a 	or	r17,r17,r3
20025284:	000f883a 	mov	r7,zero
20025288:	a58cf03a 	xor	r6,r20,r22
2002528c:	3cc8b03a 	or	r4,r7,r19
20025290:	a8abc83a 	sub	r21,r21,r2
20025294:	008003c4 	movi	r2,15
20025298:	3007883a 	mov	r3,r6
2002529c:	34c03fcc 	andi	r19,r6,255
200252a0:	11009036 	bltu	r2,r4,200254e4 <__divdf3+0x31c>
200252a4:	200890ba 	slli	r4,r4,2
200252a8:	008800b4 	movhi	r2,8194
200252ac:	1094af04 	addi	r2,r2,21180
200252b0:	2089883a 	add	r4,r4,r2
200252b4:	20800017 	ldw	r2,0(r4)
200252b8:	1000683a 	jmp	r2
200252bc:	200254e4 	muli	zero,r4,2387
200252c0:	20025334 	orhi	zero,r4,2380
200252c4:	200254d4 	ori	zero,r4,2387
200252c8:	20025328 	cmpgeui	zero,r4,2380
200252cc:	200254d4 	ori	zero,r4,2387
200252d0:	200254a8 	cmpgeui	zero,r4,2386
200252d4:	200254d4 	ori	zero,r4,2387
200252d8:	20025328 	cmpgeui	zero,r4,2380
200252dc:	20025334 	orhi	zero,r4,2380
200252e0:	20025334 	orhi	zero,r4,2380
200252e4:	200254a8 	cmpgeui	zero,r4,2386
200252e8:	20025328 	cmpgeui	zero,r4,2380
200252ec:	20025318 	cmpnei	zero,r4,2380
200252f0:	20025318 	cmpnei	zero,r4,2380
200252f4:	20025318 	cmpnei	zero,r4,2380
200252f8:	200257c8 	cmpgei	zero,r4,2399
200252fc:	2404b03a 	or	r2,r4,r16
20025300:	1000661e 	bne	r2,zero,2002549c <__divdf3+0x2d4>
20025304:	04c00204 	movi	r19,8
20025308:	0021883a 	mov	r16,zero
2002530c:	0025883a 	mov	r18,zero
20025310:	02400084 	movi	r9,2
20025314:	003fca06 	br	20025240 <_gp+0xfffe5ce0>
20025318:	8023883a 	mov	r17,r16
2002531c:	9011883a 	mov	r8,r18
20025320:	e02f883a 	mov	r23,fp
20025324:	480f883a 	mov	r7,r9
20025328:	00800084 	movi	r2,2
2002532c:	3881311e 	bne	r7,r2,200257f4 <__divdf3+0x62c>
20025330:	b827883a 	mov	r19,r23
20025334:	98c0004c 	andi	r3,r19,1
20025338:	0081ffc4 	movi	r2,2047
2002533c:	000b883a 	mov	r5,zero
20025340:	0025883a 	mov	r18,zero
20025344:	1004953a 	slli	r2,r2,20
20025348:	18c03fcc 	andi	r3,r3,255
2002534c:	04400434 	movhi	r17,16
20025350:	8c7fffc4 	addi	r17,r17,-1
20025354:	180697fa 	slli	r3,r3,31
20025358:	2c4a703a 	and	r5,r5,r17
2002535c:	288ab03a 	or	r5,r5,r2
20025360:	28c6b03a 	or	r3,r5,r3
20025364:	9005883a 	mov	r2,r18
20025368:	dfc00d17 	ldw	ra,52(sp)
2002536c:	df000c17 	ldw	fp,48(sp)
20025370:	ddc00b17 	ldw	r23,44(sp)
20025374:	dd800a17 	ldw	r22,40(sp)
20025378:	dd400917 	ldw	r21,36(sp)
2002537c:	dd000817 	ldw	r20,32(sp)
20025380:	dcc00717 	ldw	r19,28(sp)
20025384:	dc800617 	ldw	r18,24(sp)
20025388:	dc400517 	ldw	r17,20(sp)
2002538c:	dc000417 	ldw	r16,16(sp)
20025390:	dec00e04 	addi	sp,sp,56
20025394:	f800283a 	ret
20025398:	2404b03a 	or	r2,r4,r16
2002539c:	2027883a 	mov	r19,r4
200253a0:	10003926 	beq	r2,zero,20025488 <__divdf3+0x2c0>
200253a4:	80012e26 	beq	r16,zero,20025860 <__divdf3+0x698>
200253a8:	8009883a 	mov	r4,r16
200253ac:	d9800315 	stw	r6,12(sp)
200253b0:	d9c00215 	stw	r7,8(sp)
200253b4:	0026df00 	call	20026df0 <__clzsi2>
200253b8:	d9800317 	ldw	r6,12(sp)
200253bc:	d9c00217 	ldw	r7,8(sp)
200253c0:	113ffd44 	addi	r4,r2,-11
200253c4:	00c00704 	movi	r3,28
200253c8:	19012116 	blt	r3,r4,20025850 <__divdf3+0x688>
200253cc:	00c00744 	movi	r3,29
200253d0:	147ffe04 	addi	r17,r2,-8
200253d4:	1907c83a 	sub	r3,r3,r4
200253d8:	8460983a 	sll	r16,r16,r17
200253dc:	98c6d83a 	srl	r3,r19,r3
200253e0:	9c64983a 	sll	r18,r19,r17
200253e4:	1c20b03a 	or	r16,r3,r16
200253e8:	1080fcc4 	addi	r2,r2,1011
200253ec:	00abc83a 	sub	r21,zero,r2
200253f0:	0027883a 	mov	r19,zero
200253f4:	0013883a 	mov	r9,zero
200253f8:	003f9106 	br	20025240 <_gp+0xfffe5ce0>
200253fc:	3446b03a 	or	r3,r6,r17
20025400:	18001f1e 	bne	r3,zero,20025480 <__divdf3+0x2b8>
20025404:	0023883a 	mov	r17,zero
20025408:	0011883a 	mov	r8,zero
2002540c:	01c00084 	movi	r7,2
20025410:	003f9d06 	br	20025288 <_gp+0xfffe5d28>
20025414:	3446b03a 	or	r3,r6,r17
20025418:	18001526 	beq	r3,zero,20025470 <__divdf3+0x2a8>
2002541c:	88011b26 	beq	r17,zero,2002588c <__divdf3+0x6c4>
20025420:	8809883a 	mov	r4,r17
20025424:	d9800315 	stw	r6,12(sp)
20025428:	da400115 	stw	r9,4(sp)
2002542c:	0026df00 	call	20026df0 <__clzsi2>
20025430:	d9800317 	ldw	r6,12(sp)
20025434:	da400117 	ldw	r9,4(sp)
20025438:	113ffd44 	addi	r4,r2,-11
2002543c:	00c00704 	movi	r3,28
20025440:	19010e16 	blt	r3,r4,2002587c <__divdf3+0x6b4>
20025444:	00c00744 	movi	r3,29
20025448:	123ffe04 	addi	r8,r2,-8
2002544c:	1907c83a 	sub	r3,r3,r4
20025450:	8a22983a 	sll	r17,r17,r8
20025454:	30c6d83a 	srl	r3,r6,r3
20025458:	3210983a 	sll	r8,r6,r8
2002545c:	1c62b03a 	or	r17,r3,r17
20025460:	1080fcc4 	addi	r2,r2,1011
20025464:	0085c83a 	sub	r2,zero,r2
20025468:	000f883a 	mov	r7,zero
2002546c:	003f8606 	br	20025288 <_gp+0xfffe5d28>
20025470:	0023883a 	mov	r17,zero
20025474:	0011883a 	mov	r8,zero
20025478:	01c00044 	movi	r7,1
2002547c:	003f8206 	br	20025288 <_gp+0xfffe5d28>
20025480:	01c000c4 	movi	r7,3
20025484:	003f8006 	br	20025288 <_gp+0xfffe5d28>
20025488:	04c00104 	movi	r19,4
2002548c:	0021883a 	mov	r16,zero
20025490:	0025883a 	mov	r18,zero
20025494:	02400044 	movi	r9,1
20025498:	003f6906 	br	20025240 <_gp+0xfffe5ce0>
2002549c:	04c00304 	movi	r19,12
200254a0:	024000c4 	movi	r9,3
200254a4:	003f6606 	br	20025240 <_gp+0xfffe5ce0>
200254a8:	01400434 	movhi	r5,16
200254ac:	0007883a 	mov	r3,zero
200254b0:	297fffc4 	addi	r5,r5,-1
200254b4:	04bfffc4 	movi	r18,-1
200254b8:	0081ffc4 	movi	r2,2047
200254bc:	003fa106 	br	20025344 <_gp+0xfffe5de4>
200254c0:	00c00044 	movi	r3,1
200254c4:	1887c83a 	sub	r3,r3,r2
200254c8:	01000e04 	movi	r4,56
200254cc:	20c1210e 	bge	r4,r3,20025954 <__divdf3+0x78c>
200254d0:	98c0004c 	andi	r3,r19,1
200254d4:	0005883a 	mov	r2,zero
200254d8:	000b883a 	mov	r5,zero
200254dc:	0025883a 	mov	r18,zero
200254e0:	003f9806 	br	20025344 <_gp+0xfffe5de4>
200254e4:	8c00fd36 	bltu	r17,r16,200258dc <__divdf3+0x714>
200254e8:	8440fb26 	beq	r16,r17,200258d8 <__divdf3+0x710>
200254ec:	8007883a 	mov	r3,r16
200254f0:	ad7fffc4 	addi	r21,r21,-1
200254f4:	0021883a 	mov	r16,zero
200254f8:	4004d63a 	srli	r2,r8,24
200254fc:	8822923a 	slli	r17,r17,8
20025500:	1809883a 	mov	r4,r3
20025504:	402c923a 	slli	r22,r8,8
20025508:	88b8b03a 	or	fp,r17,r2
2002550c:	e028d43a 	srli	r20,fp,16
20025510:	d8c00015 	stw	r3,0(sp)
20025514:	e5ffffcc 	andi	r23,fp,65535
20025518:	a00b883a 	mov	r5,r20
2002551c:	00248600 	call	20024860 <__udivsi3>
20025520:	d8c00017 	ldw	r3,0(sp)
20025524:	a00b883a 	mov	r5,r20
20025528:	d8800315 	stw	r2,12(sp)
2002552c:	1809883a 	mov	r4,r3
20025530:	00248c40 	call	200248c4 <__umodsi3>
20025534:	d9800317 	ldw	r6,12(sp)
20025538:	1006943a 	slli	r3,r2,16
2002553c:	9004d43a 	srli	r2,r18,16
20025540:	b9a3383a 	mul	r17,r23,r6
20025544:	10c4b03a 	or	r2,r2,r3
20025548:	1440062e 	bgeu	r2,r17,20025564 <__divdf3+0x39c>
2002554c:	1705883a 	add	r2,r2,fp
20025550:	30ffffc4 	addi	r3,r6,-1
20025554:	1700ee36 	bltu	r2,fp,20025910 <__divdf3+0x748>
20025558:	1440ed2e 	bgeu	r2,r17,20025910 <__divdf3+0x748>
2002555c:	31bfff84 	addi	r6,r6,-2
20025560:	1705883a 	add	r2,r2,fp
20025564:	1463c83a 	sub	r17,r2,r17
20025568:	a00b883a 	mov	r5,r20
2002556c:	8809883a 	mov	r4,r17
20025570:	d9800315 	stw	r6,12(sp)
20025574:	00248600 	call	20024860 <__udivsi3>
20025578:	a00b883a 	mov	r5,r20
2002557c:	8809883a 	mov	r4,r17
20025580:	d8800215 	stw	r2,8(sp)
20025584:	00248c40 	call	200248c4 <__umodsi3>
20025588:	d9c00217 	ldw	r7,8(sp)
2002558c:	1004943a 	slli	r2,r2,16
20025590:	94bfffcc 	andi	r18,r18,65535
20025594:	b9d1383a 	mul	r8,r23,r7
20025598:	90a4b03a 	or	r18,r18,r2
2002559c:	d9800317 	ldw	r6,12(sp)
200255a0:	9200062e 	bgeu	r18,r8,200255bc <__divdf3+0x3f4>
200255a4:	9725883a 	add	r18,r18,fp
200255a8:	38bfffc4 	addi	r2,r7,-1
200255ac:	9700d636 	bltu	r18,fp,20025908 <__divdf3+0x740>
200255b0:	9200d52e 	bgeu	r18,r8,20025908 <__divdf3+0x740>
200255b4:	39ffff84 	addi	r7,r7,-2
200255b8:	9725883a 	add	r18,r18,fp
200255bc:	3004943a 	slli	r2,r6,16
200255c0:	b012d43a 	srli	r9,r22,16
200255c4:	b1bfffcc 	andi	r6,r22,65535
200255c8:	11e2b03a 	or	r17,r2,r7
200255cc:	8806d43a 	srli	r3,r17,16
200255d0:	893fffcc 	andi	r4,r17,65535
200255d4:	218b383a 	mul	r5,r4,r6
200255d8:	30c5383a 	mul	r2,r6,r3
200255dc:	2249383a 	mul	r4,r4,r9
200255e0:	280ed43a 	srli	r7,r5,16
200255e4:	9225c83a 	sub	r18,r18,r8
200255e8:	2089883a 	add	r4,r4,r2
200255ec:	3909883a 	add	r4,r7,r4
200255f0:	1a47383a 	mul	r3,r3,r9
200255f4:	2080022e 	bgeu	r4,r2,20025600 <__divdf3+0x438>
200255f8:	00800074 	movhi	r2,1
200255fc:	1887883a 	add	r3,r3,r2
20025600:	2004d43a 	srli	r2,r4,16
20025604:	2008943a 	slli	r4,r4,16
20025608:	297fffcc 	andi	r5,r5,65535
2002560c:	10c7883a 	add	r3,r2,r3
20025610:	2149883a 	add	r4,r4,r5
20025614:	90c0a536 	bltu	r18,r3,200258ac <__divdf3+0x6e4>
20025618:	90c0bf26 	beq	r18,r3,20025918 <__divdf3+0x750>
2002561c:	90c7c83a 	sub	r3,r18,r3
20025620:	810fc83a 	sub	r7,r16,r4
20025624:	81e5803a 	cmpltu	r18,r16,r7
20025628:	1ca5c83a 	sub	r18,r3,r18
2002562c:	e480c126 	beq	fp,r18,20025934 <__divdf3+0x76c>
20025630:	a00b883a 	mov	r5,r20
20025634:	9009883a 	mov	r4,r18
20025638:	d9800315 	stw	r6,12(sp)
2002563c:	d9c00215 	stw	r7,8(sp)
20025640:	da400115 	stw	r9,4(sp)
20025644:	00248600 	call	20024860 <__udivsi3>
20025648:	a00b883a 	mov	r5,r20
2002564c:	9009883a 	mov	r4,r18
20025650:	d8800015 	stw	r2,0(sp)
20025654:	00248c40 	call	200248c4 <__umodsi3>
20025658:	d9c00217 	ldw	r7,8(sp)
2002565c:	da000017 	ldw	r8,0(sp)
20025660:	1006943a 	slli	r3,r2,16
20025664:	3804d43a 	srli	r2,r7,16
20025668:	ba21383a 	mul	r16,r23,r8
2002566c:	d9800317 	ldw	r6,12(sp)
20025670:	10c4b03a 	or	r2,r2,r3
20025674:	da400117 	ldw	r9,4(sp)
20025678:	1400062e 	bgeu	r2,r16,20025694 <__divdf3+0x4cc>
2002567c:	1705883a 	add	r2,r2,fp
20025680:	40ffffc4 	addi	r3,r8,-1
20025684:	1700ad36 	bltu	r2,fp,2002593c <__divdf3+0x774>
20025688:	1400ac2e 	bgeu	r2,r16,2002593c <__divdf3+0x774>
2002568c:	423fff84 	addi	r8,r8,-2
20025690:	1705883a 	add	r2,r2,fp
20025694:	1421c83a 	sub	r16,r2,r16
20025698:	a00b883a 	mov	r5,r20
2002569c:	8009883a 	mov	r4,r16
200256a0:	d9800315 	stw	r6,12(sp)
200256a4:	d9c00215 	stw	r7,8(sp)
200256a8:	da000015 	stw	r8,0(sp)
200256ac:	da400115 	stw	r9,4(sp)
200256b0:	00248600 	call	20024860 <__udivsi3>
200256b4:	8009883a 	mov	r4,r16
200256b8:	a00b883a 	mov	r5,r20
200256bc:	1025883a 	mov	r18,r2
200256c0:	00248c40 	call	200248c4 <__umodsi3>
200256c4:	d9c00217 	ldw	r7,8(sp)
200256c8:	1004943a 	slli	r2,r2,16
200256cc:	bcaf383a 	mul	r23,r23,r18
200256d0:	393fffcc 	andi	r4,r7,65535
200256d4:	2088b03a 	or	r4,r4,r2
200256d8:	d9800317 	ldw	r6,12(sp)
200256dc:	da000017 	ldw	r8,0(sp)
200256e0:	da400117 	ldw	r9,4(sp)
200256e4:	25c0062e 	bgeu	r4,r23,20025700 <__divdf3+0x538>
200256e8:	2709883a 	add	r4,r4,fp
200256ec:	90bfffc4 	addi	r2,r18,-1
200256f0:	27009436 	bltu	r4,fp,20025944 <__divdf3+0x77c>
200256f4:	25c0932e 	bgeu	r4,r23,20025944 <__divdf3+0x77c>
200256f8:	94bfff84 	addi	r18,r18,-2
200256fc:	2709883a 	add	r4,r4,fp
20025700:	4004943a 	slli	r2,r8,16
20025704:	25efc83a 	sub	r23,r4,r23
20025708:	1490b03a 	or	r8,r2,r18
2002570c:	4008d43a 	srli	r4,r8,16
20025710:	40ffffcc 	andi	r3,r8,65535
20025714:	30c5383a 	mul	r2,r6,r3
20025718:	1a47383a 	mul	r3,r3,r9
2002571c:	310d383a 	mul	r6,r6,r4
20025720:	100ad43a 	srli	r5,r2,16
20025724:	4913383a 	mul	r9,r9,r4
20025728:	1987883a 	add	r3,r3,r6
2002572c:	28c7883a 	add	r3,r5,r3
20025730:	1980022e 	bgeu	r3,r6,2002573c <__divdf3+0x574>
20025734:	01000074 	movhi	r4,1
20025738:	4913883a 	add	r9,r9,r4
2002573c:	1808d43a 	srli	r4,r3,16
20025740:	1806943a 	slli	r3,r3,16
20025744:	10bfffcc 	andi	r2,r2,65535
20025748:	2253883a 	add	r9,r4,r9
2002574c:	1887883a 	add	r3,r3,r2
20025750:	ba403836 	bltu	r23,r9,20025834 <__divdf3+0x66c>
20025754:	ba403626 	beq	r23,r9,20025830 <__divdf3+0x668>
20025758:	42000054 	ori	r8,r8,1
2002575c:	a880ffc4 	addi	r2,r21,1023
20025760:	00bf570e 	bge	zero,r2,200254c0 <_gp+0xfffe5f60>
20025764:	40c001cc 	andi	r3,r8,7
20025768:	18000726 	beq	r3,zero,20025788 <__divdf3+0x5c0>
2002576c:	40c003cc 	andi	r3,r8,15
20025770:	01000104 	movi	r4,4
20025774:	19000426 	beq	r3,r4,20025788 <__divdf3+0x5c0>
20025778:	4107883a 	add	r3,r8,r4
2002577c:	1a11803a 	cmpltu	r8,r3,r8
20025780:	8a23883a 	add	r17,r17,r8
20025784:	1811883a 	mov	r8,r3
20025788:	88c0402c 	andhi	r3,r17,256
2002578c:	18000426 	beq	r3,zero,200257a0 <__divdf3+0x5d8>
20025790:	00ffc034 	movhi	r3,65280
20025794:	18ffffc4 	addi	r3,r3,-1
20025798:	a8810004 	addi	r2,r21,1024
2002579c:	88e2703a 	and	r17,r17,r3
200257a0:	00c1ff84 	movi	r3,2046
200257a4:	18bee316 	blt	r3,r2,20025334 <_gp+0xfffe5dd4>
200257a8:	8824977a 	slli	r18,r17,29
200257ac:	4010d0fa 	srli	r8,r8,3
200257b0:	8822927a 	slli	r17,r17,9
200257b4:	1081ffcc 	andi	r2,r2,2047
200257b8:	9224b03a 	or	r18,r18,r8
200257bc:	880ad33a 	srli	r5,r17,12
200257c0:	98c0004c 	andi	r3,r19,1
200257c4:	003edf06 	br	20025344 <_gp+0xfffe5de4>
200257c8:	8080022c 	andhi	r2,r16,8
200257cc:	10001226 	beq	r2,zero,20025818 <__divdf3+0x650>
200257d0:	8880022c 	andhi	r2,r17,8
200257d4:	1000101e 	bne	r2,zero,20025818 <__divdf3+0x650>
200257d8:	00800434 	movhi	r2,16
200257dc:	89400234 	orhi	r5,r17,8
200257e0:	10bfffc4 	addi	r2,r2,-1
200257e4:	b007883a 	mov	r3,r22
200257e8:	288a703a 	and	r5,r5,r2
200257ec:	4025883a 	mov	r18,r8
200257f0:	003f3106 	br	200254b8 <_gp+0xfffe5f58>
200257f4:	008000c4 	movi	r2,3
200257f8:	3880a626 	beq	r7,r2,20025a94 <__divdf3+0x8cc>
200257fc:	00800044 	movi	r2,1
20025800:	3880521e 	bne	r7,r2,2002594c <__divdf3+0x784>
20025804:	b807883a 	mov	r3,r23
20025808:	0005883a 	mov	r2,zero
2002580c:	000b883a 	mov	r5,zero
20025810:	0025883a 	mov	r18,zero
20025814:	003ecb06 	br	20025344 <_gp+0xfffe5de4>
20025818:	00800434 	movhi	r2,16
2002581c:	81400234 	orhi	r5,r16,8
20025820:	10bfffc4 	addi	r2,r2,-1
20025824:	a007883a 	mov	r3,r20
20025828:	288a703a 	and	r5,r5,r2
2002582c:	003f2206 	br	200254b8 <_gp+0xfffe5f58>
20025830:	183fca26 	beq	r3,zero,2002575c <_gp+0xfffe61fc>
20025834:	e5ef883a 	add	r23,fp,r23
20025838:	40bfffc4 	addi	r2,r8,-1
2002583c:	bf00392e 	bgeu	r23,fp,20025924 <__divdf3+0x75c>
20025840:	1011883a 	mov	r8,r2
20025844:	ba7fc41e 	bne	r23,r9,20025758 <_gp+0xfffe61f8>
20025848:	b0ffc31e 	bne	r22,r3,20025758 <_gp+0xfffe61f8>
2002584c:	003fc306 	br	2002575c <_gp+0xfffe61fc>
20025850:	143ff604 	addi	r16,r2,-40
20025854:	9c20983a 	sll	r16,r19,r16
20025858:	0025883a 	mov	r18,zero
2002585c:	003ee206 	br	200253e8 <_gp+0xfffe5e88>
20025860:	d9800315 	stw	r6,12(sp)
20025864:	d9c00215 	stw	r7,8(sp)
20025868:	0026df00 	call	20026df0 <__clzsi2>
2002586c:	10800804 	addi	r2,r2,32
20025870:	d9c00217 	ldw	r7,8(sp)
20025874:	d9800317 	ldw	r6,12(sp)
20025878:	003ed106 	br	200253c0 <_gp+0xfffe5e60>
2002587c:	147ff604 	addi	r17,r2,-40
20025880:	3462983a 	sll	r17,r6,r17
20025884:	0011883a 	mov	r8,zero
20025888:	003ef506 	br	20025460 <_gp+0xfffe5f00>
2002588c:	3009883a 	mov	r4,r6
20025890:	d9800315 	stw	r6,12(sp)
20025894:	da400115 	stw	r9,4(sp)
20025898:	0026df00 	call	20026df0 <__clzsi2>
2002589c:	10800804 	addi	r2,r2,32
200258a0:	da400117 	ldw	r9,4(sp)
200258a4:	d9800317 	ldw	r6,12(sp)
200258a8:	003ee306 	br	20025438 <_gp+0xfffe5ed8>
200258ac:	85a1883a 	add	r16,r16,r22
200258b0:	8585803a 	cmpltu	r2,r16,r22
200258b4:	1705883a 	add	r2,r2,fp
200258b8:	14a5883a 	add	r18,r2,r18
200258bc:	88bfffc4 	addi	r2,r17,-1
200258c0:	e4800c2e 	bgeu	fp,r18,200258f4 <__divdf3+0x72c>
200258c4:	90c03e36 	bltu	r18,r3,200259c0 <__divdf3+0x7f8>
200258c8:	1c806926 	beq	r3,r18,20025a70 <__divdf3+0x8a8>
200258cc:	90c7c83a 	sub	r3,r18,r3
200258d0:	1023883a 	mov	r17,r2
200258d4:	003f5206 	br	20025620 <_gp+0xfffe60c0>
200258d8:	923f0436 	bltu	r18,r8,200254ec <_gp+0xfffe5f8c>
200258dc:	800897fa 	slli	r4,r16,31
200258e0:	9004d07a 	srli	r2,r18,1
200258e4:	8006d07a 	srli	r3,r16,1
200258e8:	902097fa 	slli	r16,r18,31
200258ec:	20a4b03a 	or	r18,r4,r2
200258f0:	003f0106 	br	200254f8 <_gp+0xfffe5f98>
200258f4:	e4bff51e 	bne	fp,r18,200258cc <_gp+0xfffe636c>
200258f8:	85bff22e 	bgeu	r16,r22,200258c4 <_gp+0xfffe6364>
200258fc:	e0c7c83a 	sub	r3,fp,r3
20025900:	1023883a 	mov	r17,r2
20025904:	003f4606 	br	20025620 <_gp+0xfffe60c0>
20025908:	100f883a 	mov	r7,r2
2002590c:	003f2b06 	br	200255bc <_gp+0xfffe605c>
20025910:	180d883a 	mov	r6,r3
20025914:	003f1306 	br	20025564 <_gp+0xfffe6004>
20025918:	813fe436 	bltu	r16,r4,200258ac <_gp+0xfffe634c>
2002591c:	0007883a 	mov	r3,zero
20025920:	003f3f06 	br	20025620 <_gp+0xfffe60c0>
20025924:	ba402c36 	bltu	r23,r9,200259d8 <__divdf3+0x810>
20025928:	4dc05426 	beq	r9,r23,20025a7c <__divdf3+0x8b4>
2002592c:	1011883a 	mov	r8,r2
20025930:	003f8906 	br	20025758 <_gp+0xfffe61f8>
20025934:	023fffc4 	movi	r8,-1
20025938:	003f8806 	br	2002575c <_gp+0xfffe61fc>
2002593c:	1811883a 	mov	r8,r3
20025940:	003f5406 	br	20025694 <_gp+0xfffe6134>
20025944:	1025883a 	mov	r18,r2
20025948:	003f6d06 	br	20025700 <_gp+0xfffe61a0>
2002594c:	b827883a 	mov	r19,r23
20025950:	003f8206 	br	2002575c <_gp+0xfffe61fc>
20025954:	010007c4 	movi	r4,31
20025958:	20c02616 	blt	r4,r3,200259f4 <__divdf3+0x82c>
2002595c:	00800804 	movi	r2,32
20025960:	10c5c83a 	sub	r2,r2,r3
20025964:	888a983a 	sll	r5,r17,r2
20025968:	40c8d83a 	srl	r4,r8,r3
2002596c:	4084983a 	sll	r2,r8,r2
20025970:	88e2d83a 	srl	r17,r17,r3
20025974:	2906b03a 	or	r3,r5,r4
20025978:	1004c03a 	cmpne	r2,r2,zero
2002597c:	1886b03a 	or	r3,r3,r2
20025980:	188001cc 	andi	r2,r3,7
20025984:	10000726 	beq	r2,zero,200259a4 <__divdf3+0x7dc>
20025988:	188003cc 	andi	r2,r3,15
2002598c:	01000104 	movi	r4,4
20025990:	11000426 	beq	r2,r4,200259a4 <__divdf3+0x7dc>
20025994:	1805883a 	mov	r2,r3
20025998:	10c00104 	addi	r3,r2,4
2002599c:	1885803a 	cmpltu	r2,r3,r2
200259a0:	88a3883a 	add	r17,r17,r2
200259a4:	8880202c 	andhi	r2,r17,128
200259a8:	10002726 	beq	r2,zero,20025a48 <__divdf3+0x880>
200259ac:	98c0004c 	andi	r3,r19,1
200259b0:	00800044 	movi	r2,1
200259b4:	000b883a 	mov	r5,zero
200259b8:	0025883a 	mov	r18,zero
200259bc:	003e6106 	br	20025344 <_gp+0xfffe5de4>
200259c0:	85a1883a 	add	r16,r16,r22
200259c4:	8585803a 	cmpltu	r2,r16,r22
200259c8:	1705883a 	add	r2,r2,fp
200259cc:	14a5883a 	add	r18,r2,r18
200259d0:	8c7fff84 	addi	r17,r17,-2
200259d4:	003f1106 	br	2002561c <_gp+0xfffe60bc>
200259d8:	b589883a 	add	r4,r22,r22
200259dc:	25ad803a 	cmpltu	r22,r4,r22
200259e0:	b739883a 	add	fp,r22,fp
200259e4:	40bfff84 	addi	r2,r8,-2
200259e8:	bf2f883a 	add	r23,r23,fp
200259ec:	202d883a 	mov	r22,r4
200259f0:	003f9306 	br	20025840 <_gp+0xfffe62e0>
200259f4:	013ff844 	movi	r4,-31
200259f8:	2085c83a 	sub	r2,r4,r2
200259fc:	8888d83a 	srl	r4,r17,r2
20025a00:	00800804 	movi	r2,32
20025a04:	18802126 	beq	r3,r2,20025a8c <__divdf3+0x8c4>
20025a08:	00801004 	movi	r2,64
20025a0c:	10c5c83a 	sub	r2,r2,r3
20025a10:	8884983a 	sll	r2,r17,r2
20025a14:	1204b03a 	or	r2,r2,r8
20025a18:	1004c03a 	cmpne	r2,r2,zero
20025a1c:	2084b03a 	or	r2,r4,r2
20025a20:	144001cc 	andi	r17,r2,7
20025a24:	88000d1e 	bne	r17,zero,20025a5c <__divdf3+0x894>
20025a28:	000b883a 	mov	r5,zero
20025a2c:	1024d0fa 	srli	r18,r2,3
20025a30:	98c0004c 	andi	r3,r19,1
20025a34:	0005883a 	mov	r2,zero
20025a38:	9464b03a 	or	r18,r18,r17
20025a3c:	003e4106 	br	20025344 <_gp+0xfffe5de4>
20025a40:	1007883a 	mov	r3,r2
20025a44:	0023883a 	mov	r17,zero
20025a48:	880a927a 	slli	r5,r17,9
20025a4c:	1805883a 	mov	r2,r3
20025a50:	8822977a 	slli	r17,r17,29
20025a54:	280ad33a 	srli	r5,r5,12
20025a58:	003ff406 	br	20025a2c <_gp+0xfffe64cc>
20025a5c:	10c003cc 	andi	r3,r2,15
20025a60:	01000104 	movi	r4,4
20025a64:	193ff626 	beq	r3,r4,20025a40 <_gp+0xfffe64e0>
20025a68:	0023883a 	mov	r17,zero
20025a6c:	003fca06 	br	20025998 <_gp+0xfffe6438>
20025a70:	813fd336 	bltu	r16,r4,200259c0 <_gp+0xfffe6460>
20025a74:	1023883a 	mov	r17,r2
20025a78:	003fa806 	br	2002591c <_gp+0xfffe63bc>
20025a7c:	b0ffd636 	bltu	r22,r3,200259d8 <_gp+0xfffe6478>
20025a80:	1011883a 	mov	r8,r2
20025a84:	b0ff341e 	bne	r22,r3,20025758 <_gp+0xfffe61f8>
20025a88:	003f3406 	br	2002575c <_gp+0xfffe61fc>
20025a8c:	0005883a 	mov	r2,zero
20025a90:	003fe006 	br	20025a14 <_gp+0xfffe64b4>
20025a94:	00800434 	movhi	r2,16
20025a98:	89400234 	orhi	r5,r17,8
20025a9c:	10bfffc4 	addi	r2,r2,-1
20025aa0:	b807883a 	mov	r3,r23
20025aa4:	288a703a 	and	r5,r5,r2
20025aa8:	4025883a 	mov	r18,r8
20025aac:	003e8206 	br	200254b8 <_gp+0xfffe5f58>

20025ab0 <__gedf2>:
20025ab0:	2804d53a 	srli	r2,r5,20
20025ab4:	3806d53a 	srli	r3,r7,20
20025ab8:	02000434 	movhi	r8,16
20025abc:	423fffc4 	addi	r8,r8,-1
20025ac0:	1081ffcc 	andi	r2,r2,2047
20025ac4:	0241ffc4 	movi	r9,2047
20025ac8:	2a14703a 	and	r10,r5,r8
20025acc:	18c1ffcc 	andi	r3,r3,2047
20025ad0:	3a10703a 	and	r8,r7,r8
20025ad4:	280ad7fa 	srli	r5,r5,31
20025ad8:	380ed7fa 	srli	r7,r7,31
20025adc:	12401d26 	beq	r2,r9,20025b54 <__gedf2+0xa4>
20025ae0:	0241ffc4 	movi	r9,2047
20025ae4:	1a401226 	beq	r3,r9,20025b30 <__gedf2+0x80>
20025ae8:	1000081e 	bne	r2,zero,20025b0c <__gedf2+0x5c>
20025aec:	2296b03a 	or	r11,r4,r10
20025af0:	5813003a 	cmpeq	r9,r11,zero
20025af4:	1800091e 	bne	r3,zero,20025b1c <__gedf2+0x6c>
20025af8:	3218b03a 	or	r12,r6,r8
20025afc:	6000071e 	bne	r12,zero,20025b1c <__gedf2+0x6c>
20025b00:	0005883a 	mov	r2,zero
20025b04:	5800101e 	bne	r11,zero,20025b48 <__gedf2+0x98>
20025b08:	f800283a 	ret
20025b0c:	18000c1e 	bne	r3,zero,20025b40 <__gedf2+0x90>
20025b10:	3212b03a 	or	r9,r6,r8
20025b14:	48000c26 	beq	r9,zero,20025b48 <__gedf2+0x98>
20025b18:	0013883a 	mov	r9,zero
20025b1c:	39c03fcc 	andi	r7,r7,255
20025b20:	48000826 	beq	r9,zero,20025b44 <__gedf2+0x94>
20025b24:	38000926 	beq	r7,zero,20025b4c <__gedf2+0x9c>
20025b28:	00800044 	movi	r2,1
20025b2c:	f800283a 	ret
20025b30:	3212b03a 	or	r9,r6,r8
20025b34:	483fec26 	beq	r9,zero,20025ae8 <_gp+0xfffe6588>
20025b38:	00bfff84 	movi	r2,-2
20025b3c:	f800283a 	ret
20025b40:	39c03fcc 	andi	r7,r7,255
20025b44:	29c00626 	beq	r5,r7,20025b60 <__gedf2+0xb0>
20025b48:	283ff726 	beq	r5,zero,20025b28 <_gp+0xfffe65c8>
20025b4c:	00bfffc4 	movi	r2,-1
20025b50:	f800283a 	ret
20025b54:	2292b03a 	or	r9,r4,r10
20025b58:	483fe126 	beq	r9,zero,20025ae0 <_gp+0xfffe6580>
20025b5c:	003ff606 	br	20025b38 <_gp+0xfffe65d8>
20025b60:	18bff916 	blt	r3,r2,20025b48 <_gp+0xfffe65e8>
20025b64:	10c00316 	blt	r2,r3,20025b74 <__gedf2+0xc4>
20025b68:	42bff736 	bltu	r8,r10,20025b48 <_gp+0xfffe65e8>
20025b6c:	52000326 	beq	r10,r8,20025b7c <__gedf2+0xcc>
20025b70:	5200042e 	bgeu	r10,r8,20025b84 <__gedf2+0xd4>
20025b74:	283fec1e 	bne	r5,zero,20025b28 <_gp+0xfffe65c8>
20025b78:	003ff406 	br	20025b4c <_gp+0xfffe65ec>
20025b7c:	313ff236 	bltu	r6,r4,20025b48 <_gp+0xfffe65e8>
20025b80:	21bffc36 	bltu	r4,r6,20025b74 <_gp+0xfffe6614>
20025b84:	0005883a 	mov	r2,zero
20025b88:	f800283a 	ret

20025b8c <__ledf2>:
20025b8c:	2804d53a 	srli	r2,r5,20
20025b90:	3810d53a 	srli	r8,r7,20
20025b94:	00c00434 	movhi	r3,16
20025b98:	18ffffc4 	addi	r3,r3,-1
20025b9c:	1081ffcc 	andi	r2,r2,2047
20025ba0:	0241ffc4 	movi	r9,2047
20025ba4:	28d4703a 	and	r10,r5,r3
20025ba8:	4201ffcc 	andi	r8,r8,2047
20025bac:	38c6703a 	and	r3,r7,r3
20025bb0:	280ad7fa 	srli	r5,r5,31
20025bb4:	380ed7fa 	srli	r7,r7,31
20025bb8:	12401f26 	beq	r2,r9,20025c38 <__ledf2+0xac>
20025bbc:	0241ffc4 	movi	r9,2047
20025bc0:	42401426 	beq	r8,r9,20025c14 <__ledf2+0x88>
20025bc4:	1000091e 	bne	r2,zero,20025bec <__ledf2+0x60>
20025bc8:	2296b03a 	or	r11,r4,r10
20025bcc:	5813003a 	cmpeq	r9,r11,zero
20025bd0:	29403fcc 	andi	r5,r5,255
20025bd4:	40000a1e 	bne	r8,zero,20025c00 <__ledf2+0x74>
20025bd8:	30d8b03a 	or	r12,r6,r3
20025bdc:	6000081e 	bne	r12,zero,20025c00 <__ledf2+0x74>
20025be0:	0005883a 	mov	r2,zero
20025be4:	5800111e 	bne	r11,zero,20025c2c <__ledf2+0xa0>
20025be8:	f800283a 	ret
20025bec:	29403fcc 	andi	r5,r5,255
20025bf0:	40000c1e 	bne	r8,zero,20025c24 <__ledf2+0x98>
20025bf4:	30d2b03a 	or	r9,r6,r3
20025bf8:	48000c26 	beq	r9,zero,20025c2c <__ledf2+0xa0>
20025bfc:	0013883a 	mov	r9,zero
20025c00:	39c03fcc 	andi	r7,r7,255
20025c04:	48000826 	beq	r9,zero,20025c28 <__ledf2+0x9c>
20025c08:	38001126 	beq	r7,zero,20025c50 <__ledf2+0xc4>
20025c0c:	00800044 	movi	r2,1
20025c10:	f800283a 	ret
20025c14:	30d2b03a 	or	r9,r6,r3
20025c18:	483fea26 	beq	r9,zero,20025bc4 <_gp+0xfffe6664>
20025c1c:	00800084 	movi	r2,2
20025c20:	f800283a 	ret
20025c24:	39c03fcc 	andi	r7,r7,255
20025c28:	39400726 	beq	r7,r5,20025c48 <__ledf2+0xbc>
20025c2c:	2800081e 	bne	r5,zero,20025c50 <__ledf2+0xc4>
20025c30:	00800044 	movi	r2,1
20025c34:	f800283a 	ret
20025c38:	2292b03a 	or	r9,r4,r10
20025c3c:	483fdf26 	beq	r9,zero,20025bbc <_gp+0xfffe665c>
20025c40:	00800084 	movi	r2,2
20025c44:	f800283a 	ret
20025c48:	4080030e 	bge	r8,r2,20025c58 <__ledf2+0xcc>
20025c4c:	383fef26 	beq	r7,zero,20025c0c <_gp+0xfffe66ac>
20025c50:	00bfffc4 	movi	r2,-1
20025c54:	f800283a 	ret
20025c58:	123feb16 	blt	r2,r8,20025c08 <_gp+0xfffe66a8>
20025c5c:	1abff336 	bltu	r3,r10,20025c2c <_gp+0xfffe66cc>
20025c60:	50c00326 	beq	r10,r3,20025c70 <__ledf2+0xe4>
20025c64:	50c0042e 	bgeu	r10,r3,20025c78 <__ledf2+0xec>
20025c68:	283fe81e 	bne	r5,zero,20025c0c <_gp+0xfffe66ac>
20025c6c:	003ff806 	br	20025c50 <_gp+0xfffe66f0>
20025c70:	313fee36 	bltu	r6,r4,20025c2c <_gp+0xfffe66cc>
20025c74:	21bffc36 	bltu	r4,r6,20025c68 <_gp+0xfffe6708>
20025c78:	0005883a 	mov	r2,zero
20025c7c:	f800283a 	ret

20025c80 <__muldf3>:
20025c80:	defff304 	addi	sp,sp,-52
20025c84:	2804d53a 	srli	r2,r5,20
20025c88:	dd800915 	stw	r22,36(sp)
20025c8c:	282cd7fa 	srli	r22,r5,31
20025c90:	dc000315 	stw	r16,12(sp)
20025c94:	04000434 	movhi	r16,16
20025c98:	dd400815 	stw	r21,32(sp)
20025c9c:	dc800515 	stw	r18,20(sp)
20025ca0:	843fffc4 	addi	r16,r16,-1
20025ca4:	dfc00c15 	stw	ra,48(sp)
20025ca8:	df000b15 	stw	fp,44(sp)
20025cac:	ddc00a15 	stw	r23,40(sp)
20025cb0:	dd000715 	stw	r20,28(sp)
20025cb4:	dcc00615 	stw	r19,24(sp)
20025cb8:	dc400415 	stw	r17,16(sp)
20025cbc:	1481ffcc 	andi	r18,r2,2047
20025cc0:	2c20703a 	and	r16,r5,r16
20025cc4:	b02b883a 	mov	r21,r22
20025cc8:	b2403fcc 	andi	r9,r22,255
20025ccc:	90006026 	beq	r18,zero,20025e50 <__muldf3+0x1d0>
20025cd0:	0081ffc4 	movi	r2,2047
20025cd4:	2029883a 	mov	r20,r4
20025cd8:	90803626 	beq	r18,r2,20025db4 <__muldf3+0x134>
20025cdc:	80800434 	orhi	r2,r16,16
20025ce0:	100490fa 	slli	r2,r2,3
20025ce4:	2020d77a 	srli	r16,r4,29
20025ce8:	202890fa 	slli	r20,r4,3
20025cec:	94bf0044 	addi	r18,r18,-1023
20025cf0:	80a0b03a 	or	r16,r16,r2
20025cf4:	0027883a 	mov	r19,zero
20025cf8:	0039883a 	mov	fp,zero
20025cfc:	3804d53a 	srli	r2,r7,20
20025d00:	382ed7fa 	srli	r23,r7,31
20025d04:	04400434 	movhi	r17,16
20025d08:	8c7fffc4 	addi	r17,r17,-1
20025d0c:	1081ffcc 	andi	r2,r2,2047
20025d10:	3011883a 	mov	r8,r6
20025d14:	3c62703a 	and	r17,r7,r17
20025d18:	ba803fcc 	andi	r10,r23,255
20025d1c:	10006d26 	beq	r2,zero,20025ed4 <__muldf3+0x254>
20025d20:	00c1ffc4 	movi	r3,2047
20025d24:	10c06526 	beq	r2,r3,20025ebc <__muldf3+0x23c>
20025d28:	88c00434 	orhi	r3,r17,16
20025d2c:	180690fa 	slli	r3,r3,3
20025d30:	3022d77a 	srli	r17,r6,29
20025d34:	301090fa 	slli	r8,r6,3
20025d38:	10bf0044 	addi	r2,r2,-1023
20025d3c:	88e2b03a 	or	r17,r17,r3
20025d40:	000b883a 	mov	r5,zero
20025d44:	9085883a 	add	r2,r18,r2
20025d48:	2cc8b03a 	or	r4,r5,r19
20025d4c:	00c003c4 	movi	r3,15
20025d50:	bdacf03a 	xor	r22,r23,r22
20025d54:	12c00044 	addi	r11,r2,1
20025d58:	19009936 	bltu	r3,r4,20025fc0 <__muldf3+0x340>
20025d5c:	200890ba 	slli	r4,r4,2
20025d60:	00c800b4 	movhi	r3,8194
20025d64:	18d75d04 	addi	r3,r3,23924
20025d68:	20c9883a 	add	r4,r4,r3
20025d6c:	20c00017 	ldw	r3,0(r4)
20025d70:	1800683a 	jmp	r3
20025d74:	20025fc0 	call	220025fc <_gp+0x1fc309c>
20025d78:	20025dd4 	ori	zero,r4,2423
20025d7c:	20025dd4 	ori	zero,r4,2423
20025d80:	20025dd0 	cmplti	zero,r4,2423
20025d84:	20025f9c 	xori	zero,r4,2430
20025d88:	20025f9c 	xori	zero,r4,2430
20025d8c:	20025f84 	addi	zero,r4,2430
20025d90:	20025dd0 	cmplti	zero,r4,2423
20025d94:	20025f9c 	xori	zero,r4,2430
20025d98:	20025f84 	addi	zero,r4,2430
20025d9c:	20025f9c 	xori	zero,r4,2430
20025da0:	20025dd0 	cmplti	zero,r4,2423
20025da4:	20025fac 	andhi	zero,r4,2430
20025da8:	20025fac 	andhi	zero,r4,2430
20025dac:	20025fac 	andhi	zero,r4,2430
20025db0:	200261c8 	cmpgei	zero,r4,2439
20025db4:	2404b03a 	or	r2,r4,r16
20025db8:	10006f1e 	bne	r2,zero,20025f78 <__muldf3+0x2f8>
20025dbc:	04c00204 	movi	r19,8
20025dc0:	0021883a 	mov	r16,zero
20025dc4:	0029883a 	mov	r20,zero
20025dc8:	07000084 	movi	fp,2
20025dcc:	003fcb06 	br	20025cfc <_gp+0xfffe679c>
20025dd0:	502d883a 	mov	r22,r10
20025dd4:	00800084 	movi	r2,2
20025dd8:	28805726 	beq	r5,r2,20025f38 <__muldf3+0x2b8>
20025ddc:	008000c4 	movi	r2,3
20025de0:	28816626 	beq	r5,r2,2002637c <__muldf3+0x6fc>
20025de4:	00800044 	movi	r2,1
20025de8:	2881411e 	bne	r5,r2,200262f0 <__muldf3+0x670>
20025dec:	b02b883a 	mov	r21,r22
20025df0:	0005883a 	mov	r2,zero
20025df4:	000b883a 	mov	r5,zero
20025df8:	0029883a 	mov	r20,zero
20025dfc:	1004953a 	slli	r2,r2,20
20025e00:	a8c03fcc 	andi	r3,r21,255
20025e04:	04400434 	movhi	r17,16
20025e08:	8c7fffc4 	addi	r17,r17,-1
20025e0c:	180697fa 	slli	r3,r3,31
20025e10:	2c4a703a 	and	r5,r5,r17
20025e14:	288ab03a 	or	r5,r5,r2
20025e18:	28c6b03a 	or	r3,r5,r3
20025e1c:	a005883a 	mov	r2,r20
20025e20:	dfc00c17 	ldw	ra,48(sp)
20025e24:	df000b17 	ldw	fp,44(sp)
20025e28:	ddc00a17 	ldw	r23,40(sp)
20025e2c:	dd800917 	ldw	r22,36(sp)
20025e30:	dd400817 	ldw	r21,32(sp)
20025e34:	dd000717 	ldw	r20,28(sp)
20025e38:	dcc00617 	ldw	r19,24(sp)
20025e3c:	dc800517 	ldw	r18,20(sp)
20025e40:	dc400417 	ldw	r17,16(sp)
20025e44:	dc000317 	ldw	r16,12(sp)
20025e48:	dec00d04 	addi	sp,sp,52
20025e4c:	f800283a 	ret
20025e50:	2404b03a 	or	r2,r4,r16
20025e54:	2027883a 	mov	r19,r4
20025e58:	10004226 	beq	r2,zero,20025f64 <__muldf3+0x2e4>
20025e5c:	8000fc26 	beq	r16,zero,20026250 <__muldf3+0x5d0>
20025e60:	8009883a 	mov	r4,r16
20025e64:	d9800215 	stw	r6,8(sp)
20025e68:	d9c00015 	stw	r7,0(sp)
20025e6c:	da400115 	stw	r9,4(sp)
20025e70:	0026df00 	call	20026df0 <__clzsi2>
20025e74:	d9800217 	ldw	r6,8(sp)
20025e78:	d9c00017 	ldw	r7,0(sp)
20025e7c:	da400117 	ldw	r9,4(sp)
20025e80:	113ffd44 	addi	r4,r2,-11
20025e84:	00c00704 	movi	r3,28
20025e88:	1900ed16 	blt	r3,r4,20026240 <__muldf3+0x5c0>
20025e8c:	00c00744 	movi	r3,29
20025e90:	147ffe04 	addi	r17,r2,-8
20025e94:	1907c83a 	sub	r3,r3,r4
20025e98:	8460983a 	sll	r16,r16,r17
20025e9c:	98c6d83a 	srl	r3,r19,r3
20025ea0:	9c68983a 	sll	r20,r19,r17
20025ea4:	1c20b03a 	or	r16,r3,r16
20025ea8:	1080fcc4 	addi	r2,r2,1011
20025eac:	00a5c83a 	sub	r18,zero,r2
20025eb0:	0027883a 	mov	r19,zero
20025eb4:	0039883a 	mov	fp,zero
20025eb8:	003f9006 	br	20025cfc <_gp+0xfffe679c>
20025ebc:	3446b03a 	or	r3,r6,r17
20025ec0:	1800261e 	bne	r3,zero,20025f5c <__muldf3+0x2dc>
20025ec4:	0023883a 	mov	r17,zero
20025ec8:	0011883a 	mov	r8,zero
20025ecc:	01400084 	movi	r5,2
20025ed0:	003f9c06 	br	20025d44 <_gp+0xfffe67e4>
20025ed4:	3446b03a 	or	r3,r6,r17
20025ed8:	18001c26 	beq	r3,zero,20025f4c <__muldf3+0x2cc>
20025edc:	8800ce26 	beq	r17,zero,20026218 <__muldf3+0x598>
20025ee0:	8809883a 	mov	r4,r17
20025ee4:	d9800215 	stw	r6,8(sp)
20025ee8:	da400115 	stw	r9,4(sp)
20025eec:	da800015 	stw	r10,0(sp)
20025ef0:	0026df00 	call	20026df0 <__clzsi2>
20025ef4:	d9800217 	ldw	r6,8(sp)
20025ef8:	da400117 	ldw	r9,4(sp)
20025efc:	da800017 	ldw	r10,0(sp)
20025f00:	113ffd44 	addi	r4,r2,-11
20025f04:	00c00704 	movi	r3,28
20025f08:	1900bf16 	blt	r3,r4,20026208 <__muldf3+0x588>
20025f0c:	00c00744 	movi	r3,29
20025f10:	123ffe04 	addi	r8,r2,-8
20025f14:	1907c83a 	sub	r3,r3,r4
20025f18:	8a22983a 	sll	r17,r17,r8
20025f1c:	30c6d83a 	srl	r3,r6,r3
20025f20:	3210983a 	sll	r8,r6,r8
20025f24:	1c62b03a 	or	r17,r3,r17
20025f28:	1080fcc4 	addi	r2,r2,1011
20025f2c:	0085c83a 	sub	r2,zero,r2
20025f30:	000b883a 	mov	r5,zero
20025f34:	003f8306 	br	20025d44 <_gp+0xfffe67e4>
20025f38:	b02b883a 	mov	r21,r22
20025f3c:	0081ffc4 	movi	r2,2047
20025f40:	000b883a 	mov	r5,zero
20025f44:	0029883a 	mov	r20,zero
20025f48:	003fac06 	br	20025dfc <_gp+0xfffe689c>
20025f4c:	0023883a 	mov	r17,zero
20025f50:	0011883a 	mov	r8,zero
20025f54:	01400044 	movi	r5,1
20025f58:	003f7a06 	br	20025d44 <_gp+0xfffe67e4>
20025f5c:	014000c4 	movi	r5,3
20025f60:	003f7806 	br	20025d44 <_gp+0xfffe67e4>
20025f64:	04c00104 	movi	r19,4
20025f68:	0021883a 	mov	r16,zero
20025f6c:	0029883a 	mov	r20,zero
20025f70:	07000044 	movi	fp,1
20025f74:	003f6106 	br	20025cfc <_gp+0xfffe679c>
20025f78:	04c00304 	movi	r19,12
20025f7c:	070000c4 	movi	fp,3
20025f80:	003f5e06 	br	20025cfc <_gp+0xfffe679c>
20025f84:	01400434 	movhi	r5,16
20025f88:	002b883a 	mov	r21,zero
20025f8c:	297fffc4 	addi	r5,r5,-1
20025f90:	053fffc4 	movi	r20,-1
20025f94:	0081ffc4 	movi	r2,2047
20025f98:	003f9806 	br	20025dfc <_gp+0xfffe689c>
20025f9c:	8023883a 	mov	r17,r16
20025fa0:	a011883a 	mov	r8,r20
20025fa4:	e00b883a 	mov	r5,fp
20025fa8:	003f8a06 	br	20025dd4 <_gp+0xfffe6874>
20025fac:	8023883a 	mov	r17,r16
20025fb0:	a011883a 	mov	r8,r20
20025fb4:	482d883a 	mov	r22,r9
20025fb8:	e00b883a 	mov	r5,fp
20025fbc:	003f8506 	br	20025dd4 <_gp+0xfffe6874>
20025fc0:	a00ad43a 	srli	r5,r20,16
20025fc4:	401ad43a 	srli	r13,r8,16
20025fc8:	a53fffcc 	andi	r20,r20,65535
20025fcc:	423fffcc 	andi	r8,r8,65535
20025fd0:	4519383a 	mul	r12,r8,r20
20025fd4:	4147383a 	mul	r3,r8,r5
20025fd8:	6d09383a 	mul	r4,r13,r20
20025fdc:	600cd43a 	srli	r6,r12,16
20025fe0:	2b5d383a 	mul	r14,r5,r13
20025fe4:	20c9883a 	add	r4,r4,r3
20025fe8:	310d883a 	add	r6,r6,r4
20025fec:	30c0022e 	bgeu	r6,r3,20025ff8 <__muldf3+0x378>
20025ff0:	00c00074 	movhi	r3,1
20025ff4:	70dd883a 	add	r14,r14,r3
20025ff8:	8826d43a 	srli	r19,r17,16
20025ffc:	8bffffcc 	andi	r15,r17,65535
20026000:	7d23383a 	mul	r17,r15,r20
20026004:	7949383a 	mul	r4,r15,r5
20026008:	9d29383a 	mul	r20,r19,r20
2002600c:	8814d43a 	srli	r10,r17,16
20026010:	3012943a 	slli	r9,r6,16
20026014:	a129883a 	add	r20,r20,r4
20026018:	633fffcc 	andi	r12,r12,65535
2002601c:	5515883a 	add	r10,r10,r20
20026020:	3006d43a 	srli	r3,r6,16
20026024:	4b13883a 	add	r9,r9,r12
20026028:	2ccb383a 	mul	r5,r5,r19
2002602c:	5100022e 	bgeu	r10,r4,20026038 <__muldf3+0x3b8>
20026030:	01000074 	movhi	r4,1
20026034:	290b883a 	add	r5,r5,r4
20026038:	802ad43a 	srli	r21,r16,16
2002603c:	843fffcc 	andi	r16,r16,65535
20026040:	440d383a 	mul	r6,r8,r16
20026044:	4565383a 	mul	r18,r8,r21
20026048:	8349383a 	mul	r4,r16,r13
2002604c:	500e943a 	slli	r7,r10,16
20026050:	3010d43a 	srli	r8,r6,16
20026054:	5028d43a 	srli	r20,r10,16
20026058:	2489883a 	add	r4,r4,r18
2002605c:	8abfffcc 	andi	r10,r17,65535
20026060:	3a95883a 	add	r10,r7,r10
20026064:	4119883a 	add	r12,r8,r4
20026068:	a169883a 	add	r20,r20,r5
2002606c:	1a87883a 	add	r3,r3,r10
20026070:	6d5b383a 	mul	r13,r13,r21
20026074:	6480022e 	bgeu	r12,r18,20026080 <__muldf3+0x400>
20026078:	01000074 	movhi	r4,1
2002607c:	691b883a 	add	r13,r13,r4
20026080:	7c25383a 	mul	r18,r15,r16
20026084:	7d4b383a 	mul	r5,r15,r21
20026088:	84cf383a 	mul	r7,r16,r19
2002608c:	901ed43a 	srli	r15,r18,16
20026090:	6008d43a 	srli	r4,r12,16
20026094:	6010943a 	slli	r8,r12,16
20026098:	394f883a 	add	r7,r7,r5
2002609c:	333fffcc 	andi	r12,r6,65535
200260a0:	79df883a 	add	r15,r15,r7
200260a4:	235b883a 	add	r13,r4,r13
200260a8:	9d63383a 	mul	r17,r19,r21
200260ac:	4309883a 	add	r4,r8,r12
200260b0:	7940022e 	bgeu	r15,r5,200260bc <__muldf3+0x43c>
200260b4:	01400074 	movhi	r5,1
200260b8:	8963883a 	add	r17,r17,r5
200260bc:	780a943a 	slli	r5,r15,16
200260c0:	91bfffcc 	andi	r6,r18,65535
200260c4:	70c7883a 	add	r3,r14,r3
200260c8:	298d883a 	add	r6,r5,r6
200260cc:	1a8f803a 	cmpltu	r7,r3,r10
200260d0:	350b883a 	add	r5,r6,r20
200260d4:	20c7883a 	add	r3,r4,r3
200260d8:	3955883a 	add	r10,r7,r5
200260dc:	1909803a 	cmpltu	r4,r3,r4
200260e0:	6a91883a 	add	r8,r13,r10
200260e4:	780cd43a 	srli	r6,r15,16
200260e8:	2219883a 	add	r12,r4,r8
200260ec:	2d0b803a 	cmpltu	r5,r5,r20
200260f0:	51cf803a 	cmpltu	r7,r10,r7
200260f4:	29ceb03a 	or	r7,r5,r7
200260f8:	4351803a 	cmpltu	r8,r8,r13
200260fc:	610b803a 	cmpltu	r5,r12,r4
20026100:	4148b03a 	or	r4,r8,r5
20026104:	398f883a 	add	r7,r7,r6
20026108:	3909883a 	add	r4,r7,r4
2002610c:	1810927a 	slli	r8,r3,9
20026110:	2449883a 	add	r4,r4,r17
20026114:	2008927a 	slli	r4,r4,9
20026118:	6022d5fa 	srli	r17,r12,23
2002611c:	1806d5fa 	srli	r3,r3,23
20026120:	4252b03a 	or	r9,r8,r9
20026124:	600a927a 	slli	r5,r12,9
20026128:	4810c03a 	cmpne	r8,r9,zero
2002612c:	2462b03a 	or	r17,r4,r17
20026130:	40c6b03a 	or	r3,r8,r3
20026134:	8900402c 	andhi	r4,r17,256
20026138:	1950b03a 	or	r8,r3,r5
2002613c:	20000726 	beq	r4,zero,2002615c <__muldf3+0x4dc>
20026140:	4006d07a 	srli	r3,r8,1
20026144:	880497fa 	slli	r2,r17,31
20026148:	4200004c 	andi	r8,r8,1
2002614c:	8822d07a 	srli	r17,r17,1
20026150:	1a10b03a 	or	r8,r3,r8
20026154:	1210b03a 	or	r8,r2,r8
20026158:	5805883a 	mov	r2,r11
2002615c:	1140ffc4 	addi	r5,r2,1023
20026160:	0140440e 	bge	zero,r5,20026274 <__muldf3+0x5f4>
20026164:	40c001cc 	andi	r3,r8,7
20026168:	18000726 	beq	r3,zero,20026188 <__muldf3+0x508>
2002616c:	40c003cc 	andi	r3,r8,15
20026170:	01000104 	movi	r4,4
20026174:	19000426 	beq	r3,r4,20026188 <__muldf3+0x508>
20026178:	4107883a 	add	r3,r8,r4
2002617c:	1a11803a 	cmpltu	r8,r3,r8
20026180:	8a23883a 	add	r17,r17,r8
20026184:	1811883a 	mov	r8,r3
20026188:	88c0402c 	andhi	r3,r17,256
2002618c:	18000426 	beq	r3,zero,200261a0 <__muldf3+0x520>
20026190:	11410004 	addi	r5,r2,1024
20026194:	00bfc034 	movhi	r2,65280
20026198:	10bfffc4 	addi	r2,r2,-1
2002619c:	88a2703a 	and	r17,r17,r2
200261a0:	0081ff84 	movi	r2,2046
200261a4:	117f6416 	blt	r2,r5,20025f38 <_gp+0xfffe69d8>
200261a8:	8828977a 	slli	r20,r17,29
200261ac:	4010d0fa 	srli	r8,r8,3
200261b0:	8822927a 	slli	r17,r17,9
200261b4:	2881ffcc 	andi	r2,r5,2047
200261b8:	a228b03a 	or	r20,r20,r8
200261bc:	880ad33a 	srli	r5,r17,12
200261c0:	b02b883a 	mov	r21,r22
200261c4:	003f0d06 	br	20025dfc <_gp+0xfffe689c>
200261c8:	8080022c 	andhi	r2,r16,8
200261cc:	10000926 	beq	r2,zero,200261f4 <__muldf3+0x574>
200261d0:	8880022c 	andhi	r2,r17,8
200261d4:	1000071e 	bne	r2,zero,200261f4 <__muldf3+0x574>
200261d8:	00800434 	movhi	r2,16
200261dc:	89400234 	orhi	r5,r17,8
200261e0:	10bfffc4 	addi	r2,r2,-1
200261e4:	b82b883a 	mov	r21,r23
200261e8:	288a703a 	and	r5,r5,r2
200261ec:	4029883a 	mov	r20,r8
200261f0:	003f6806 	br	20025f94 <_gp+0xfffe6a34>
200261f4:	00800434 	movhi	r2,16
200261f8:	81400234 	orhi	r5,r16,8
200261fc:	10bfffc4 	addi	r2,r2,-1
20026200:	288a703a 	and	r5,r5,r2
20026204:	003f6306 	br	20025f94 <_gp+0xfffe6a34>
20026208:	147ff604 	addi	r17,r2,-40
2002620c:	3462983a 	sll	r17,r6,r17
20026210:	0011883a 	mov	r8,zero
20026214:	003f4406 	br	20025f28 <_gp+0xfffe69c8>
20026218:	3009883a 	mov	r4,r6
2002621c:	d9800215 	stw	r6,8(sp)
20026220:	da400115 	stw	r9,4(sp)
20026224:	da800015 	stw	r10,0(sp)
20026228:	0026df00 	call	20026df0 <__clzsi2>
2002622c:	10800804 	addi	r2,r2,32
20026230:	da800017 	ldw	r10,0(sp)
20026234:	da400117 	ldw	r9,4(sp)
20026238:	d9800217 	ldw	r6,8(sp)
2002623c:	003f3006 	br	20025f00 <_gp+0xfffe69a0>
20026240:	143ff604 	addi	r16,r2,-40
20026244:	9c20983a 	sll	r16,r19,r16
20026248:	0029883a 	mov	r20,zero
2002624c:	003f1606 	br	20025ea8 <_gp+0xfffe6948>
20026250:	d9800215 	stw	r6,8(sp)
20026254:	d9c00015 	stw	r7,0(sp)
20026258:	da400115 	stw	r9,4(sp)
2002625c:	0026df00 	call	20026df0 <__clzsi2>
20026260:	10800804 	addi	r2,r2,32
20026264:	da400117 	ldw	r9,4(sp)
20026268:	d9c00017 	ldw	r7,0(sp)
2002626c:	d9800217 	ldw	r6,8(sp)
20026270:	003f0306 	br	20025e80 <_gp+0xfffe6920>
20026274:	00c00044 	movi	r3,1
20026278:	1947c83a 	sub	r3,r3,r5
2002627c:	00800e04 	movi	r2,56
20026280:	10feda16 	blt	r2,r3,20025dec <_gp+0xfffe688c>
20026284:	008007c4 	movi	r2,31
20026288:	10c01b16 	blt	r2,r3,200262f8 <__muldf3+0x678>
2002628c:	00800804 	movi	r2,32
20026290:	10c5c83a 	sub	r2,r2,r3
20026294:	888a983a 	sll	r5,r17,r2
20026298:	40c8d83a 	srl	r4,r8,r3
2002629c:	4084983a 	sll	r2,r8,r2
200262a0:	88e2d83a 	srl	r17,r17,r3
200262a4:	2906b03a 	or	r3,r5,r4
200262a8:	1004c03a 	cmpne	r2,r2,zero
200262ac:	1886b03a 	or	r3,r3,r2
200262b0:	188001cc 	andi	r2,r3,7
200262b4:	10000726 	beq	r2,zero,200262d4 <__muldf3+0x654>
200262b8:	188003cc 	andi	r2,r3,15
200262bc:	01000104 	movi	r4,4
200262c0:	11000426 	beq	r2,r4,200262d4 <__muldf3+0x654>
200262c4:	1805883a 	mov	r2,r3
200262c8:	10c00104 	addi	r3,r2,4
200262cc:	1885803a 	cmpltu	r2,r3,r2
200262d0:	88a3883a 	add	r17,r17,r2
200262d4:	8880202c 	andhi	r2,r17,128
200262d8:	10001c26 	beq	r2,zero,2002634c <__muldf3+0x6cc>
200262dc:	b02b883a 	mov	r21,r22
200262e0:	00800044 	movi	r2,1
200262e4:	000b883a 	mov	r5,zero
200262e8:	0029883a 	mov	r20,zero
200262ec:	003ec306 	br	20025dfc <_gp+0xfffe689c>
200262f0:	5805883a 	mov	r2,r11
200262f4:	003f9906 	br	2002615c <_gp+0xfffe6bfc>
200262f8:	00bff844 	movi	r2,-31
200262fc:	1145c83a 	sub	r2,r2,r5
20026300:	8888d83a 	srl	r4,r17,r2
20026304:	00800804 	movi	r2,32
20026308:	18801a26 	beq	r3,r2,20026374 <__muldf3+0x6f4>
2002630c:	00801004 	movi	r2,64
20026310:	10c5c83a 	sub	r2,r2,r3
20026314:	8884983a 	sll	r2,r17,r2
20026318:	1204b03a 	or	r2,r2,r8
2002631c:	1004c03a 	cmpne	r2,r2,zero
20026320:	2084b03a 	or	r2,r4,r2
20026324:	144001cc 	andi	r17,r2,7
20026328:	88000d1e 	bne	r17,zero,20026360 <__muldf3+0x6e0>
2002632c:	000b883a 	mov	r5,zero
20026330:	1028d0fa 	srli	r20,r2,3
20026334:	b02b883a 	mov	r21,r22
20026338:	0005883a 	mov	r2,zero
2002633c:	a468b03a 	or	r20,r20,r17
20026340:	003eae06 	br	20025dfc <_gp+0xfffe689c>
20026344:	1007883a 	mov	r3,r2
20026348:	0023883a 	mov	r17,zero
2002634c:	880a927a 	slli	r5,r17,9
20026350:	1805883a 	mov	r2,r3
20026354:	8822977a 	slli	r17,r17,29
20026358:	280ad33a 	srli	r5,r5,12
2002635c:	003ff406 	br	20026330 <_gp+0xfffe6dd0>
20026360:	10c003cc 	andi	r3,r2,15
20026364:	01000104 	movi	r4,4
20026368:	193ff626 	beq	r3,r4,20026344 <_gp+0xfffe6de4>
2002636c:	0023883a 	mov	r17,zero
20026370:	003fd506 	br	200262c8 <_gp+0xfffe6d68>
20026374:	0005883a 	mov	r2,zero
20026378:	003fe706 	br	20026318 <_gp+0xfffe6db8>
2002637c:	00800434 	movhi	r2,16
20026380:	89400234 	orhi	r5,r17,8
20026384:	10bfffc4 	addi	r2,r2,-1
20026388:	b02b883a 	mov	r21,r22
2002638c:	288a703a 	and	r5,r5,r2
20026390:	4029883a 	mov	r20,r8
20026394:	003eff06 	br	20025f94 <_gp+0xfffe6a34>

20026398 <__subdf3>:
20026398:	02000434 	movhi	r8,16
2002639c:	423fffc4 	addi	r8,r8,-1
200263a0:	defffb04 	addi	sp,sp,-20
200263a4:	2a14703a 	and	r10,r5,r8
200263a8:	3812d53a 	srli	r9,r7,20
200263ac:	3a10703a 	and	r8,r7,r8
200263b0:	2006d77a 	srli	r3,r4,29
200263b4:	3004d77a 	srli	r2,r6,29
200263b8:	dc000015 	stw	r16,0(sp)
200263bc:	501490fa 	slli	r10,r10,3
200263c0:	2820d53a 	srli	r16,r5,20
200263c4:	401090fa 	slli	r8,r8,3
200263c8:	dc800215 	stw	r18,8(sp)
200263cc:	dc400115 	stw	r17,4(sp)
200263d0:	dfc00415 	stw	ra,16(sp)
200263d4:	202290fa 	slli	r17,r4,3
200263d8:	dcc00315 	stw	r19,12(sp)
200263dc:	4a41ffcc 	andi	r9,r9,2047
200263e0:	0101ffc4 	movi	r4,2047
200263e4:	2824d7fa 	srli	r18,r5,31
200263e8:	8401ffcc 	andi	r16,r16,2047
200263ec:	50c6b03a 	or	r3,r10,r3
200263f0:	380ed7fa 	srli	r7,r7,31
200263f4:	408ab03a 	or	r5,r8,r2
200263f8:	300c90fa 	slli	r6,r6,3
200263fc:	49009626 	beq	r9,r4,20026658 <__subdf3+0x2c0>
20026400:	39c0005c 	xori	r7,r7,1
20026404:	8245c83a 	sub	r2,r16,r9
20026408:	3c807426 	beq	r7,r18,200265dc <__subdf3+0x244>
2002640c:	0080af0e 	bge	zero,r2,200266cc <__subdf3+0x334>
20026410:	48002a1e 	bne	r9,zero,200264bc <__subdf3+0x124>
20026414:	2988b03a 	or	r4,r5,r6
20026418:	20009a1e 	bne	r4,zero,20026684 <__subdf3+0x2ec>
2002641c:	888001cc 	andi	r2,r17,7
20026420:	10000726 	beq	r2,zero,20026440 <__subdf3+0xa8>
20026424:	888003cc 	andi	r2,r17,15
20026428:	01000104 	movi	r4,4
2002642c:	11000426 	beq	r2,r4,20026440 <__subdf3+0xa8>
20026430:	890b883a 	add	r5,r17,r4
20026434:	2c63803a 	cmpltu	r17,r5,r17
20026438:	1c47883a 	add	r3,r3,r17
2002643c:	2823883a 	mov	r17,r5
20026440:	1880202c 	andhi	r2,r3,128
20026444:	10005926 	beq	r2,zero,200265ac <__subdf3+0x214>
20026448:	84000044 	addi	r16,r16,1
2002644c:	0081ffc4 	movi	r2,2047
20026450:	8080be26 	beq	r16,r2,2002674c <__subdf3+0x3b4>
20026454:	017fe034 	movhi	r5,65408
20026458:	297fffc4 	addi	r5,r5,-1
2002645c:	1946703a 	and	r3,r3,r5
20026460:	1804977a 	slli	r2,r3,29
20026464:	1806927a 	slli	r3,r3,9
20026468:	8822d0fa 	srli	r17,r17,3
2002646c:	8401ffcc 	andi	r16,r16,2047
20026470:	180ad33a 	srli	r5,r3,12
20026474:	9100004c 	andi	r4,r18,1
20026478:	1444b03a 	or	r2,r2,r17
2002647c:	80c1ffcc 	andi	r3,r16,2047
20026480:	1820953a 	slli	r16,r3,20
20026484:	20c03fcc 	andi	r3,r4,255
20026488:	180897fa 	slli	r4,r3,31
2002648c:	00c00434 	movhi	r3,16
20026490:	18ffffc4 	addi	r3,r3,-1
20026494:	28c6703a 	and	r3,r5,r3
20026498:	1c06b03a 	or	r3,r3,r16
2002649c:	1906b03a 	or	r3,r3,r4
200264a0:	dfc00417 	ldw	ra,16(sp)
200264a4:	dcc00317 	ldw	r19,12(sp)
200264a8:	dc800217 	ldw	r18,8(sp)
200264ac:	dc400117 	ldw	r17,4(sp)
200264b0:	dc000017 	ldw	r16,0(sp)
200264b4:	dec00504 	addi	sp,sp,20
200264b8:	f800283a 	ret
200264bc:	0101ffc4 	movi	r4,2047
200264c0:	813fd626 	beq	r16,r4,2002641c <_gp+0xfffe6ebc>
200264c4:	29402034 	orhi	r5,r5,128
200264c8:	01000e04 	movi	r4,56
200264cc:	2080a316 	blt	r4,r2,2002675c <__subdf3+0x3c4>
200264d0:	010007c4 	movi	r4,31
200264d4:	2080c616 	blt	r4,r2,200267f0 <__subdf3+0x458>
200264d8:	01000804 	movi	r4,32
200264dc:	2089c83a 	sub	r4,r4,r2
200264e0:	2910983a 	sll	r8,r5,r4
200264e4:	308ed83a 	srl	r7,r6,r2
200264e8:	3108983a 	sll	r4,r6,r4
200264ec:	2884d83a 	srl	r2,r5,r2
200264f0:	41ccb03a 	or	r6,r8,r7
200264f4:	2008c03a 	cmpne	r4,r4,zero
200264f8:	310cb03a 	or	r6,r6,r4
200264fc:	898dc83a 	sub	r6,r17,r6
20026500:	89a3803a 	cmpltu	r17,r17,r6
20026504:	1887c83a 	sub	r3,r3,r2
20026508:	1c47c83a 	sub	r3,r3,r17
2002650c:	3023883a 	mov	r17,r6
20026510:	1880202c 	andhi	r2,r3,128
20026514:	10002326 	beq	r2,zero,200265a4 <__subdf3+0x20c>
20026518:	04c02034 	movhi	r19,128
2002651c:	9cffffc4 	addi	r19,r19,-1
20026520:	1ce6703a 	and	r19,r3,r19
20026524:	98007a26 	beq	r19,zero,20026710 <__subdf3+0x378>
20026528:	9809883a 	mov	r4,r19
2002652c:	0026df00 	call	20026df0 <__clzsi2>
20026530:	113ffe04 	addi	r4,r2,-8
20026534:	00c007c4 	movi	r3,31
20026538:	19007b16 	blt	r3,r4,20026728 <__subdf3+0x390>
2002653c:	00800804 	movi	r2,32
20026540:	1105c83a 	sub	r2,r2,r4
20026544:	8884d83a 	srl	r2,r17,r2
20026548:	9906983a 	sll	r3,r19,r4
2002654c:	8922983a 	sll	r17,r17,r4
20026550:	10c4b03a 	or	r2,r2,r3
20026554:	24007816 	blt	r4,r16,20026738 <__subdf3+0x3a0>
20026558:	2421c83a 	sub	r16,r4,r16
2002655c:	80c00044 	addi	r3,r16,1
20026560:	010007c4 	movi	r4,31
20026564:	20c09516 	blt	r4,r3,200267bc <__subdf3+0x424>
20026568:	01400804 	movi	r5,32
2002656c:	28cbc83a 	sub	r5,r5,r3
20026570:	88c8d83a 	srl	r4,r17,r3
20026574:	8962983a 	sll	r17,r17,r5
20026578:	114a983a 	sll	r5,r2,r5
2002657c:	10c6d83a 	srl	r3,r2,r3
20026580:	8804c03a 	cmpne	r2,r17,zero
20026584:	290ab03a 	or	r5,r5,r4
20026588:	28a2b03a 	or	r17,r5,r2
2002658c:	0021883a 	mov	r16,zero
20026590:	003fa206 	br	2002641c <_gp+0xfffe6ebc>
20026594:	2090b03a 	or	r8,r4,r2
20026598:	40018e26 	beq	r8,zero,20026bd4 <__subdf3+0x83c>
2002659c:	1007883a 	mov	r3,r2
200265a0:	2023883a 	mov	r17,r4
200265a4:	888001cc 	andi	r2,r17,7
200265a8:	103f9e1e 	bne	r2,zero,20026424 <_gp+0xfffe6ec4>
200265ac:	1804977a 	slli	r2,r3,29
200265b0:	8822d0fa 	srli	r17,r17,3
200265b4:	1810d0fa 	srli	r8,r3,3
200265b8:	9100004c 	andi	r4,r18,1
200265bc:	1444b03a 	or	r2,r2,r17
200265c0:	00c1ffc4 	movi	r3,2047
200265c4:	80c02826 	beq	r16,r3,20026668 <__subdf3+0x2d0>
200265c8:	01400434 	movhi	r5,16
200265cc:	297fffc4 	addi	r5,r5,-1
200265d0:	80e0703a 	and	r16,r16,r3
200265d4:	414a703a 	and	r5,r8,r5
200265d8:	003fa806 	br	2002647c <_gp+0xfffe6f1c>
200265dc:	0080630e 	bge	zero,r2,2002676c <__subdf3+0x3d4>
200265e0:	48003026 	beq	r9,zero,200266a4 <__subdf3+0x30c>
200265e4:	0101ffc4 	movi	r4,2047
200265e8:	813f8c26 	beq	r16,r4,2002641c <_gp+0xfffe6ebc>
200265ec:	29402034 	orhi	r5,r5,128
200265f0:	01000e04 	movi	r4,56
200265f4:	2080a90e 	bge	r4,r2,2002689c <__subdf3+0x504>
200265f8:	298cb03a 	or	r6,r5,r6
200265fc:	3012c03a 	cmpne	r9,r6,zero
20026600:	0005883a 	mov	r2,zero
20026604:	4c53883a 	add	r9,r9,r17
20026608:	4c63803a 	cmpltu	r17,r9,r17
2002660c:	10c7883a 	add	r3,r2,r3
20026610:	88c7883a 	add	r3,r17,r3
20026614:	4823883a 	mov	r17,r9
20026618:	1880202c 	andhi	r2,r3,128
2002661c:	1000d026 	beq	r2,zero,20026960 <__subdf3+0x5c8>
20026620:	84000044 	addi	r16,r16,1
20026624:	0081ffc4 	movi	r2,2047
20026628:	8080fe26 	beq	r16,r2,20026a24 <__subdf3+0x68c>
2002662c:	00bfe034 	movhi	r2,65408
20026630:	10bfffc4 	addi	r2,r2,-1
20026634:	1886703a 	and	r3,r3,r2
20026638:	880ad07a 	srli	r5,r17,1
2002663c:	180497fa 	slli	r2,r3,31
20026640:	8900004c 	andi	r4,r17,1
20026644:	2922b03a 	or	r17,r5,r4
20026648:	1806d07a 	srli	r3,r3,1
2002664c:	1462b03a 	or	r17,r2,r17
20026650:	3825883a 	mov	r18,r7
20026654:	003f7106 	br	2002641c <_gp+0xfffe6ebc>
20026658:	2984b03a 	or	r2,r5,r6
2002665c:	103f6826 	beq	r2,zero,20026400 <_gp+0xfffe6ea0>
20026660:	39c03fcc 	andi	r7,r7,255
20026664:	003f6706 	br	20026404 <_gp+0xfffe6ea4>
20026668:	4086b03a 	or	r3,r8,r2
2002666c:	18015226 	beq	r3,zero,20026bb8 <__subdf3+0x820>
20026670:	00c00434 	movhi	r3,16
20026674:	41400234 	orhi	r5,r8,8
20026678:	18ffffc4 	addi	r3,r3,-1
2002667c:	28ca703a 	and	r5,r5,r3
20026680:	003f7e06 	br	2002647c <_gp+0xfffe6f1c>
20026684:	10bfffc4 	addi	r2,r2,-1
20026688:	1000491e 	bne	r2,zero,200267b0 <__subdf3+0x418>
2002668c:	898fc83a 	sub	r7,r17,r6
20026690:	89e3803a 	cmpltu	r17,r17,r7
20026694:	1947c83a 	sub	r3,r3,r5
20026698:	1c47c83a 	sub	r3,r3,r17
2002669c:	3823883a 	mov	r17,r7
200266a0:	003f9b06 	br	20026510 <_gp+0xfffe6fb0>
200266a4:	2988b03a 	or	r4,r5,r6
200266a8:	203f5c26 	beq	r4,zero,2002641c <_gp+0xfffe6ebc>
200266ac:	10bfffc4 	addi	r2,r2,-1
200266b0:	1000931e 	bne	r2,zero,20026900 <__subdf3+0x568>
200266b4:	898d883a 	add	r6,r17,r6
200266b8:	3463803a 	cmpltu	r17,r6,r17
200266bc:	1947883a 	add	r3,r3,r5
200266c0:	88c7883a 	add	r3,r17,r3
200266c4:	3023883a 	mov	r17,r6
200266c8:	003fd306 	br	20026618 <_gp+0xfffe70b8>
200266cc:	1000541e 	bne	r2,zero,20026820 <__subdf3+0x488>
200266d0:	80800044 	addi	r2,r16,1
200266d4:	1081ffcc 	andi	r2,r2,2047
200266d8:	01000044 	movi	r4,1
200266dc:	2080a20e 	bge	r4,r2,20026968 <__subdf3+0x5d0>
200266e0:	8989c83a 	sub	r4,r17,r6
200266e4:	8905803a 	cmpltu	r2,r17,r4
200266e8:	1967c83a 	sub	r19,r3,r5
200266ec:	98a7c83a 	sub	r19,r19,r2
200266f0:	9880202c 	andhi	r2,r19,128
200266f4:	10006326 	beq	r2,zero,20026884 <__subdf3+0x4ec>
200266f8:	3463c83a 	sub	r17,r6,r17
200266fc:	28c7c83a 	sub	r3,r5,r3
20026700:	344d803a 	cmpltu	r6,r6,r17
20026704:	19a7c83a 	sub	r19,r3,r6
20026708:	3825883a 	mov	r18,r7
2002670c:	983f861e 	bne	r19,zero,20026528 <_gp+0xfffe6fc8>
20026710:	8809883a 	mov	r4,r17
20026714:	0026df00 	call	20026df0 <__clzsi2>
20026718:	10800804 	addi	r2,r2,32
2002671c:	113ffe04 	addi	r4,r2,-8
20026720:	00c007c4 	movi	r3,31
20026724:	193f850e 	bge	r3,r4,2002653c <_gp+0xfffe6fdc>
20026728:	10bff604 	addi	r2,r2,-40
2002672c:	8884983a 	sll	r2,r17,r2
20026730:	0023883a 	mov	r17,zero
20026734:	243f880e 	bge	r4,r16,20026558 <_gp+0xfffe6ff8>
20026738:	00ffe034 	movhi	r3,65408
2002673c:	18ffffc4 	addi	r3,r3,-1
20026740:	8121c83a 	sub	r16,r16,r4
20026744:	10c6703a 	and	r3,r2,r3
20026748:	003f3406 	br	2002641c <_gp+0xfffe6ebc>
2002674c:	9100004c 	andi	r4,r18,1
20026750:	000b883a 	mov	r5,zero
20026754:	0005883a 	mov	r2,zero
20026758:	003f4806 	br	2002647c <_gp+0xfffe6f1c>
2002675c:	298cb03a 	or	r6,r5,r6
20026760:	300cc03a 	cmpne	r6,r6,zero
20026764:	0005883a 	mov	r2,zero
20026768:	003f6406 	br	200264fc <_gp+0xfffe6f9c>
2002676c:	10009a1e 	bne	r2,zero,200269d8 <__subdf3+0x640>
20026770:	82400044 	addi	r9,r16,1
20026774:	4881ffcc 	andi	r2,r9,2047
20026778:	02800044 	movi	r10,1
2002677c:	5080670e 	bge	r10,r2,2002691c <__subdf3+0x584>
20026780:	0081ffc4 	movi	r2,2047
20026784:	4880af26 	beq	r9,r2,20026a44 <__subdf3+0x6ac>
20026788:	898d883a 	add	r6,r17,r6
2002678c:	1945883a 	add	r2,r3,r5
20026790:	3447803a 	cmpltu	r3,r6,r17
20026794:	1887883a 	add	r3,r3,r2
20026798:	182297fa 	slli	r17,r3,31
2002679c:	300cd07a 	srli	r6,r6,1
200267a0:	1806d07a 	srli	r3,r3,1
200267a4:	4821883a 	mov	r16,r9
200267a8:	89a2b03a 	or	r17,r17,r6
200267ac:	003f1b06 	br	2002641c <_gp+0xfffe6ebc>
200267b0:	0101ffc4 	movi	r4,2047
200267b4:	813f441e 	bne	r16,r4,200264c8 <_gp+0xfffe6f68>
200267b8:	003f1806 	br	2002641c <_gp+0xfffe6ebc>
200267bc:	843ff844 	addi	r16,r16,-31
200267c0:	01400804 	movi	r5,32
200267c4:	1408d83a 	srl	r4,r2,r16
200267c8:	19405026 	beq	r3,r5,2002690c <__subdf3+0x574>
200267cc:	01401004 	movi	r5,64
200267d0:	28c7c83a 	sub	r3,r5,r3
200267d4:	10c4983a 	sll	r2,r2,r3
200267d8:	88a2b03a 	or	r17,r17,r2
200267dc:	8822c03a 	cmpne	r17,r17,zero
200267e0:	2462b03a 	or	r17,r4,r17
200267e4:	0007883a 	mov	r3,zero
200267e8:	0021883a 	mov	r16,zero
200267ec:	003f6d06 	br	200265a4 <_gp+0xfffe7044>
200267f0:	11fff804 	addi	r7,r2,-32
200267f4:	01000804 	movi	r4,32
200267f8:	29ced83a 	srl	r7,r5,r7
200267fc:	11004526 	beq	r2,r4,20026914 <__subdf3+0x57c>
20026800:	01001004 	movi	r4,64
20026804:	2089c83a 	sub	r4,r4,r2
20026808:	2904983a 	sll	r2,r5,r4
2002680c:	118cb03a 	or	r6,r2,r6
20026810:	300cc03a 	cmpne	r6,r6,zero
20026814:	398cb03a 	or	r6,r7,r6
20026818:	0005883a 	mov	r2,zero
2002681c:	003f3706 	br	200264fc <_gp+0xfffe6f9c>
20026820:	80002a26 	beq	r16,zero,200268cc <__subdf3+0x534>
20026824:	0101ffc4 	movi	r4,2047
20026828:	49006626 	beq	r9,r4,200269c4 <__subdf3+0x62c>
2002682c:	0085c83a 	sub	r2,zero,r2
20026830:	18c02034 	orhi	r3,r3,128
20026834:	01000e04 	movi	r4,56
20026838:	20807e16 	blt	r4,r2,20026a34 <__subdf3+0x69c>
2002683c:	010007c4 	movi	r4,31
20026840:	2080e716 	blt	r4,r2,20026be0 <__subdf3+0x848>
20026844:	01000804 	movi	r4,32
20026848:	2089c83a 	sub	r4,r4,r2
2002684c:	1914983a 	sll	r10,r3,r4
20026850:	8890d83a 	srl	r8,r17,r2
20026854:	8908983a 	sll	r4,r17,r4
20026858:	1884d83a 	srl	r2,r3,r2
2002685c:	5222b03a 	or	r17,r10,r8
20026860:	2006c03a 	cmpne	r3,r4,zero
20026864:	88e2b03a 	or	r17,r17,r3
20026868:	3463c83a 	sub	r17,r6,r17
2002686c:	2885c83a 	sub	r2,r5,r2
20026870:	344d803a 	cmpltu	r6,r6,r17
20026874:	1187c83a 	sub	r3,r2,r6
20026878:	4821883a 	mov	r16,r9
2002687c:	3825883a 	mov	r18,r7
20026880:	003f2306 	br	20026510 <_gp+0xfffe6fb0>
20026884:	24d0b03a 	or	r8,r4,r19
20026888:	40001b1e 	bne	r8,zero,200268f8 <__subdf3+0x560>
2002688c:	0005883a 	mov	r2,zero
20026890:	0009883a 	mov	r4,zero
20026894:	0021883a 	mov	r16,zero
20026898:	003f4906 	br	200265c0 <_gp+0xfffe7060>
2002689c:	010007c4 	movi	r4,31
200268a0:	20803a16 	blt	r4,r2,2002698c <__subdf3+0x5f4>
200268a4:	01000804 	movi	r4,32
200268a8:	2089c83a 	sub	r4,r4,r2
200268ac:	2912983a 	sll	r9,r5,r4
200268b0:	3090d83a 	srl	r8,r6,r2
200268b4:	3108983a 	sll	r4,r6,r4
200268b8:	2884d83a 	srl	r2,r5,r2
200268bc:	4a12b03a 	or	r9,r9,r8
200268c0:	2008c03a 	cmpne	r4,r4,zero
200268c4:	4912b03a 	or	r9,r9,r4
200268c8:	003f4e06 	br	20026604 <_gp+0xfffe70a4>
200268cc:	1c48b03a 	or	r4,r3,r17
200268d0:	20003c26 	beq	r4,zero,200269c4 <__subdf3+0x62c>
200268d4:	0084303a 	nor	r2,zero,r2
200268d8:	1000381e 	bne	r2,zero,200269bc <__subdf3+0x624>
200268dc:	3463c83a 	sub	r17,r6,r17
200268e0:	28c5c83a 	sub	r2,r5,r3
200268e4:	344d803a 	cmpltu	r6,r6,r17
200268e8:	1187c83a 	sub	r3,r2,r6
200268ec:	4821883a 	mov	r16,r9
200268f0:	3825883a 	mov	r18,r7
200268f4:	003f0606 	br	20026510 <_gp+0xfffe6fb0>
200268f8:	2023883a 	mov	r17,r4
200268fc:	003f0906 	br	20026524 <_gp+0xfffe6fc4>
20026900:	0101ffc4 	movi	r4,2047
20026904:	813f3a1e 	bne	r16,r4,200265f0 <_gp+0xfffe7090>
20026908:	003ec406 	br	2002641c <_gp+0xfffe6ebc>
2002690c:	0005883a 	mov	r2,zero
20026910:	003fb106 	br	200267d8 <_gp+0xfffe7278>
20026914:	0005883a 	mov	r2,zero
20026918:	003fbc06 	br	2002680c <_gp+0xfffe72ac>
2002691c:	1c44b03a 	or	r2,r3,r17
20026920:	80008e1e 	bne	r16,zero,20026b5c <__subdf3+0x7c4>
20026924:	1000c826 	beq	r2,zero,20026c48 <__subdf3+0x8b0>
20026928:	2984b03a 	or	r2,r5,r6
2002692c:	103ebb26 	beq	r2,zero,2002641c <_gp+0xfffe6ebc>
20026930:	8989883a 	add	r4,r17,r6
20026934:	1945883a 	add	r2,r3,r5
20026938:	2447803a 	cmpltu	r3,r4,r17
2002693c:	1887883a 	add	r3,r3,r2
20026940:	1880202c 	andhi	r2,r3,128
20026944:	2023883a 	mov	r17,r4
20026948:	103f1626 	beq	r2,zero,200265a4 <_gp+0xfffe7044>
2002694c:	00bfe034 	movhi	r2,65408
20026950:	10bfffc4 	addi	r2,r2,-1
20026954:	5021883a 	mov	r16,r10
20026958:	1886703a 	and	r3,r3,r2
2002695c:	003eaf06 	br	2002641c <_gp+0xfffe6ebc>
20026960:	3825883a 	mov	r18,r7
20026964:	003f0f06 	br	200265a4 <_gp+0xfffe7044>
20026968:	1c44b03a 	or	r2,r3,r17
2002696c:	8000251e 	bne	r16,zero,20026a04 <__subdf3+0x66c>
20026970:	1000661e 	bne	r2,zero,20026b0c <__subdf3+0x774>
20026974:	2990b03a 	or	r8,r5,r6
20026978:	40009626 	beq	r8,zero,20026bd4 <__subdf3+0x83c>
2002697c:	2807883a 	mov	r3,r5
20026980:	3023883a 	mov	r17,r6
20026984:	3825883a 	mov	r18,r7
20026988:	003ea406 	br	2002641c <_gp+0xfffe6ebc>
2002698c:	127ff804 	addi	r9,r2,-32
20026990:	01000804 	movi	r4,32
20026994:	2a52d83a 	srl	r9,r5,r9
20026998:	11008c26 	beq	r2,r4,20026bcc <__subdf3+0x834>
2002699c:	01001004 	movi	r4,64
200269a0:	2085c83a 	sub	r2,r4,r2
200269a4:	2884983a 	sll	r2,r5,r2
200269a8:	118cb03a 	or	r6,r2,r6
200269ac:	300cc03a 	cmpne	r6,r6,zero
200269b0:	4992b03a 	or	r9,r9,r6
200269b4:	0005883a 	mov	r2,zero
200269b8:	003f1206 	br	20026604 <_gp+0xfffe70a4>
200269bc:	0101ffc4 	movi	r4,2047
200269c0:	493f9c1e 	bne	r9,r4,20026834 <_gp+0xfffe72d4>
200269c4:	2807883a 	mov	r3,r5
200269c8:	3023883a 	mov	r17,r6
200269cc:	4821883a 	mov	r16,r9
200269d0:	3825883a 	mov	r18,r7
200269d4:	003e9106 	br	2002641c <_gp+0xfffe6ebc>
200269d8:	80001f1e 	bne	r16,zero,20026a58 <__subdf3+0x6c0>
200269dc:	1c48b03a 	or	r4,r3,r17
200269e0:	20005a26 	beq	r4,zero,20026b4c <__subdf3+0x7b4>
200269e4:	0084303a 	nor	r2,zero,r2
200269e8:	1000561e 	bne	r2,zero,20026b44 <__subdf3+0x7ac>
200269ec:	89a3883a 	add	r17,r17,r6
200269f0:	1945883a 	add	r2,r3,r5
200269f4:	898d803a 	cmpltu	r6,r17,r6
200269f8:	3087883a 	add	r3,r6,r2
200269fc:	4821883a 	mov	r16,r9
20026a00:	003f0506 	br	20026618 <_gp+0xfffe70b8>
20026a04:	10002b1e 	bne	r2,zero,20026ab4 <__subdf3+0x71c>
20026a08:	2984b03a 	or	r2,r5,r6
20026a0c:	10008026 	beq	r2,zero,20026c10 <__subdf3+0x878>
20026a10:	2807883a 	mov	r3,r5
20026a14:	3023883a 	mov	r17,r6
20026a18:	3825883a 	mov	r18,r7
20026a1c:	0401ffc4 	movi	r16,2047
20026a20:	003e7e06 	br	2002641c <_gp+0xfffe6ebc>
20026a24:	3809883a 	mov	r4,r7
20026a28:	0011883a 	mov	r8,zero
20026a2c:	0005883a 	mov	r2,zero
20026a30:	003ee306 	br	200265c0 <_gp+0xfffe7060>
20026a34:	1c62b03a 	or	r17,r3,r17
20026a38:	8822c03a 	cmpne	r17,r17,zero
20026a3c:	0005883a 	mov	r2,zero
20026a40:	003f8906 	br	20026868 <_gp+0xfffe7308>
20026a44:	3809883a 	mov	r4,r7
20026a48:	4821883a 	mov	r16,r9
20026a4c:	0011883a 	mov	r8,zero
20026a50:	0005883a 	mov	r2,zero
20026a54:	003eda06 	br	200265c0 <_gp+0xfffe7060>
20026a58:	0101ffc4 	movi	r4,2047
20026a5c:	49003b26 	beq	r9,r4,20026b4c <__subdf3+0x7b4>
20026a60:	0085c83a 	sub	r2,zero,r2
20026a64:	18c02034 	orhi	r3,r3,128
20026a68:	01000e04 	movi	r4,56
20026a6c:	20806e16 	blt	r4,r2,20026c28 <__subdf3+0x890>
20026a70:	010007c4 	movi	r4,31
20026a74:	20807716 	blt	r4,r2,20026c54 <__subdf3+0x8bc>
20026a78:	01000804 	movi	r4,32
20026a7c:	2089c83a 	sub	r4,r4,r2
20026a80:	1914983a 	sll	r10,r3,r4
20026a84:	8890d83a 	srl	r8,r17,r2
20026a88:	8908983a 	sll	r4,r17,r4
20026a8c:	1884d83a 	srl	r2,r3,r2
20026a90:	5222b03a 	or	r17,r10,r8
20026a94:	2006c03a 	cmpne	r3,r4,zero
20026a98:	88e2b03a 	or	r17,r17,r3
20026a9c:	89a3883a 	add	r17,r17,r6
20026aa0:	1145883a 	add	r2,r2,r5
20026aa4:	898d803a 	cmpltu	r6,r17,r6
20026aa8:	3087883a 	add	r3,r6,r2
20026aac:	4821883a 	mov	r16,r9
20026ab0:	003ed906 	br	20026618 <_gp+0xfffe70b8>
20026ab4:	2984b03a 	or	r2,r5,r6
20026ab8:	10004226 	beq	r2,zero,20026bc4 <__subdf3+0x82c>
20026abc:	1808d0fa 	srli	r4,r3,3
20026ac0:	8822d0fa 	srli	r17,r17,3
20026ac4:	1806977a 	slli	r3,r3,29
20026ac8:	2080022c 	andhi	r2,r4,8
20026acc:	1c62b03a 	or	r17,r3,r17
20026ad0:	10000826 	beq	r2,zero,20026af4 <__subdf3+0x75c>
20026ad4:	2812d0fa 	srli	r9,r5,3
20026ad8:	4880022c 	andhi	r2,r9,8
20026adc:	1000051e 	bne	r2,zero,20026af4 <__subdf3+0x75c>
20026ae0:	300cd0fa 	srli	r6,r6,3
20026ae4:	2804977a 	slli	r2,r5,29
20026ae8:	4809883a 	mov	r4,r9
20026aec:	3825883a 	mov	r18,r7
20026af0:	11a2b03a 	or	r17,r2,r6
20026af4:	8806d77a 	srli	r3,r17,29
20026af8:	200890fa 	slli	r4,r4,3
20026afc:	882290fa 	slli	r17,r17,3
20026b00:	0401ffc4 	movi	r16,2047
20026b04:	1906b03a 	or	r3,r3,r4
20026b08:	003e4406 	br	2002641c <_gp+0xfffe6ebc>
20026b0c:	2984b03a 	or	r2,r5,r6
20026b10:	103e4226 	beq	r2,zero,2002641c <_gp+0xfffe6ebc>
20026b14:	8989c83a 	sub	r4,r17,r6
20026b18:	8911803a 	cmpltu	r8,r17,r4
20026b1c:	1945c83a 	sub	r2,r3,r5
20026b20:	1205c83a 	sub	r2,r2,r8
20026b24:	1200202c 	andhi	r8,r2,128
20026b28:	403e9a26 	beq	r8,zero,20026594 <_gp+0xfffe7034>
20026b2c:	3463c83a 	sub	r17,r6,r17
20026b30:	28c5c83a 	sub	r2,r5,r3
20026b34:	344d803a 	cmpltu	r6,r6,r17
20026b38:	1187c83a 	sub	r3,r2,r6
20026b3c:	3825883a 	mov	r18,r7
20026b40:	003e3606 	br	2002641c <_gp+0xfffe6ebc>
20026b44:	0101ffc4 	movi	r4,2047
20026b48:	493fc71e 	bne	r9,r4,20026a68 <_gp+0xfffe7508>
20026b4c:	2807883a 	mov	r3,r5
20026b50:	3023883a 	mov	r17,r6
20026b54:	4821883a 	mov	r16,r9
20026b58:	003e3006 	br	2002641c <_gp+0xfffe6ebc>
20026b5c:	10003626 	beq	r2,zero,20026c38 <__subdf3+0x8a0>
20026b60:	2984b03a 	or	r2,r5,r6
20026b64:	10001726 	beq	r2,zero,20026bc4 <__subdf3+0x82c>
20026b68:	1808d0fa 	srli	r4,r3,3
20026b6c:	8822d0fa 	srli	r17,r17,3
20026b70:	1806977a 	slli	r3,r3,29
20026b74:	2080022c 	andhi	r2,r4,8
20026b78:	1c62b03a 	or	r17,r3,r17
20026b7c:	10000726 	beq	r2,zero,20026b9c <__subdf3+0x804>
20026b80:	2812d0fa 	srli	r9,r5,3
20026b84:	4880022c 	andhi	r2,r9,8
20026b88:	1000041e 	bne	r2,zero,20026b9c <__subdf3+0x804>
20026b8c:	300cd0fa 	srli	r6,r6,3
20026b90:	2804977a 	slli	r2,r5,29
20026b94:	4809883a 	mov	r4,r9
20026b98:	11a2b03a 	or	r17,r2,r6
20026b9c:	8806d77a 	srli	r3,r17,29
20026ba0:	200890fa 	slli	r4,r4,3
20026ba4:	882290fa 	slli	r17,r17,3
20026ba8:	3825883a 	mov	r18,r7
20026bac:	1906b03a 	or	r3,r3,r4
20026bb0:	0401ffc4 	movi	r16,2047
20026bb4:	003e1906 	br	2002641c <_gp+0xfffe6ebc>
20026bb8:	000b883a 	mov	r5,zero
20026bbc:	0005883a 	mov	r2,zero
20026bc0:	003e2e06 	br	2002647c <_gp+0xfffe6f1c>
20026bc4:	0401ffc4 	movi	r16,2047
20026bc8:	003e1406 	br	2002641c <_gp+0xfffe6ebc>
20026bcc:	0005883a 	mov	r2,zero
20026bd0:	003f7506 	br	200269a8 <_gp+0xfffe7448>
20026bd4:	0005883a 	mov	r2,zero
20026bd8:	0009883a 	mov	r4,zero
20026bdc:	003e7806 	br	200265c0 <_gp+0xfffe7060>
20026be0:	123ff804 	addi	r8,r2,-32
20026be4:	01000804 	movi	r4,32
20026be8:	1a10d83a 	srl	r8,r3,r8
20026bec:	11002526 	beq	r2,r4,20026c84 <__subdf3+0x8ec>
20026bf0:	01001004 	movi	r4,64
20026bf4:	2085c83a 	sub	r2,r4,r2
20026bf8:	1884983a 	sll	r2,r3,r2
20026bfc:	1444b03a 	or	r2,r2,r17
20026c00:	1004c03a 	cmpne	r2,r2,zero
20026c04:	40a2b03a 	or	r17,r8,r2
20026c08:	0005883a 	mov	r2,zero
20026c0c:	003f1606 	br	20026868 <_gp+0xfffe7308>
20026c10:	02000434 	movhi	r8,16
20026c14:	0009883a 	mov	r4,zero
20026c18:	423fffc4 	addi	r8,r8,-1
20026c1c:	00bfffc4 	movi	r2,-1
20026c20:	0401ffc4 	movi	r16,2047
20026c24:	003e6606 	br	200265c0 <_gp+0xfffe7060>
20026c28:	1c62b03a 	or	r17,r3,r17
20026c2c:	8822c03a 	cmpne	r17,r17,zero
20026c30:	0005883a 	mov	r2,zero
20026c34:	003f9906 	br	20026a9c <_gp+0xfffe753c>
20026c38:	2807883a 	mov	r3,r5
20026c3c:	3023883a 	mov	r17,r6
20026c40:	0401ffc4 	movi	r16,2047
20026c44:	003df506 	br	2002641c <_gp+0xfffe6ebc>
20026c48:	2807883a 	mov	r3,r5
20026c4c:	3023883a 	mov	r17,r6
20026c50:	003df206 	br	2002641c <_gp+0xfffe6ebc>
20026c54:	123ff804 	addi	r8,r2,-32
20026c58:	01000804 	movi	r4,32
20026c5c:	1a10d83a 	srl	r8,r3,r8
20026c60:	11000a26 	beq	r2,r4,20026c8c <__subdf3+0x8f4>
20026c64:	01001004 	movi	r4,64
20026c68:	2085c83a 	sub	r2,r4,r2
20026c6c:	1884983a 	sll	r2,r3,r2
20026c70:	1444b03a 	or	r2,r2,r17
20026c74:	1004c03a 	cmpne	r2,r2,zero
20026c78:	40a2b03a 	or	r17,r8,r2
20026c7c:	0005883a 	mov	r2,zero
20026c80:	003f8606 	br	20026a9c <_gp+0xfffe753c>
20026c84:	0005883a 	mov	r2,zero
20026c88:	003fdc06 	br	20026bfc <_gp+0xfffe769c>
20026c8c:	0005883a 	mov	r2,zero
20026c90:	003ff706 	br	20026c70 <_gp+0xfffe7710>

20026c94 <__fixdfsi>:
20026c94:	280cd53a 	srli	r6,r5,20
20026c98:	00c00434 	movhi	r3,16
20026c9c:	18ffffc4 	addi	r3,r3,-1
20026ca0:	3181ffcc 	andi	r6,r6,2047
20026ca4:	01c0ff84 	movi	r7,1022
20026ca8:	28c6703a 	and	r3,r5,r3
20026cac:	280ad7fa 	srli	r5,r5,31
20026cb0:	3980120e 	bge	r7,r6,20026cfc <__fixdfsi+0x68>
20026cb4:	00810744 	movi	r2,1053
20026cb8:	11800c16 	blt	r2,r6,20026cec <__fixdfsi+0x58>
20026cbc:	00810cc4 	movi	r2,1075
20026cc0:	1185c83a 	sub	r2,r2,r6
20026cc4:	01c007c4 	movi	r7,31
20026cc8:	18c00434 	orhi	r3,r3,16
20026ccc:	38800d16 	blt	r7,r2,20026d04 <__fixdfsi+0x70>
20026cd0:	31befb44 	addi	r6,r6,-1043
20026cd4:	2084d83a 	srl	r2,r4,r2
20026cd8:	1986983a 	sll	r3,r3,r6
20026cdc:	1884b03a 	or	r2,r3,r2
20026ce0:	28000726 	beq	r5,zero,20026d00 <__fixdfsi+0x6c>
20026ce4:	0085c83a 	sub	r2,zero,r2
20026ce8:	f800283a 	ret
20026cec:	00a00034 	movhi	r2,32768
20026cf0:	10bfffc4 	addi	r2,r2,-1
20026cf4:	2885883a 	add	r2,r5,r2
20026cf8:	f800283a 	ret
20026cfc:	0005883a 	mov	r2,zero
20026d00:	f800283a 	ret
20026d04:	008104c4 	movi	r2,1043
20026d08:	1185c83a 	sub	r2,r2,r6
20026d0c:	1884d83a 	srl	r2,r3,r2
20026d10:	003ff306 	br	20026ce0 <_gp+0xfffe7780>

20026d14 <__floatsidf>:
20026d14:	defffd04 	addi	sp,sp,-12
20026d18:	dfc00215 	stw	ra,8(sp)
20026d1c:	dc400115 	stw	r17,4(sp)
20026d20:	dc000015 	stw	r16,0(sp)
20026d24:	20002b26 	beq	r4,zero,20026dd4 <__floatsidf+0xc0>
20026d28:	2023883a 	mov	r17,r4
20026d2c:	2020d7fa 	srli	r16,r4,31
20026d30:	20002d16 	blt	r4,zero,20026de8 <__floatsidf+0xd4>
20026d34:	8809883a 	mov	r4,r17
20026d38:	0026df00 	call	20026df0 <__clzsi2>
20026d3c:	01410784 	movi	r5,1054
20026d40:	288bc83a 	sub	r5,r5,r2
20026d44:	01010cc4 	movi	r4,1075
20026d48:	2149c83a 	sub	r4,r4,r5
20026d4c:	00c007c4 	movi	r3,31
20026d50:	1900160e 	bge	r3,r4,20026dac <__floatsidf+0x98>
20026d54:	00c104c4 	movi	r3,1043
20026d58:	1947c83a 	sub	r3,r3,r5
20026d5c:	88c6983a 	sll	r3,r17,r3
20026d60:	00800434 	movhi	r2,16
20026d64:	10bfffc4 	addi	r2,r2,-1
20026d68:	1886703a 	and	r3,r3,r2
20026d6c:	2941ffcc 	andi	r5,r5,2047
20026d70:	800d883a 	mov	r6,r16
20026d74:	0005883a 	mov	r2,zero
20026d78:	280a953a 	slli	r5,r5,20
20026d7c:	31803fcc 	andi	r6,r6,255
20026d80:	01000434 	movhi	r4,16
20026d84:	300c97fa 	slli	r6,r6,31
20026d88:	213fffc4 	addi	r4,r4,-1
20026d8c:	1906703a 	and	r3,r3,r4
20026d90:	1946b03a 	or	r3,r3,r5
20026d94:	1986b03a 	or	r3,r3,r6
20026d98:	dfc00217 	ldw	ra,8(sp)
20026d9c:	dc400117 	ldw	r17,4(sp)
20026da0:	dc000017 	ldw	r16,0(sp)
20026da4:	dec00304 	addi	sp,sp,12
20026da8:	f800283a 	ret
20026dac:	00c002c4 	movi	r3,11
20026db0:	1887c83a 	sub	r3,r3,r2
20026db4:	88c6d83a 	srl	r3,r17,r3
20026db8:	8904983a 	sll	r2,r17,r4
20026dbc:	01000434 	movhi	r4,16
20026dc0:	213fffc4 	addi	r4,r4,-1
20026dc4:	2941ffcc 	andi	r5,r5,2047
20026dc8:	1906703a 	and	r3,r3,r4
20026dcc:	800d883a 	mov	r6,r16
20026dd0:	003fe906 	br	20026d78 <_gp+0xfffe7818>
20026dd4:	000d883a 	mov	r6,zero
20026dd8:	000b883a 	mov	r5,zero
20026ddc:	0007883a 	mov	r3,zero
20026de0:	0005883a 	mov	r2,zero
20026de4:	003fe406 	br	20026d78 <_gp+0xfffe7818>
20026de8:	0123c83a 	sub	r17,zero,r4
20026dec:	003fd106 	br	20026d34 <_gp+0xfffe77d4>

20026df0 <__clzsi2>:
20026df0:	00bfffd4 	movui	r2,65535
20026df4:	11000536 	bltu	r2,r4,20026e0c <__clzsi2+0x1c>
20026df8:	00803fc4 	movi	r2,255
20026dfc:	11000f36 	bltu	r2,r4,20026e3c <__clzsi2+0x4c>
20026e00:	00800804 	movi	r2,32
20026e04:	0007883a 	mov	r3,zero
20026e08:	00000506 	br	20026e20 <__clzsi2+0x30>
20026e0c:	00804034 	movhi	r2,256
20026e10:	10bfffc4 	addi	r2,r2,-1
20026e14:	11000c2e 	bgeu	r2,r4,20026e48 <__clzsi2+0x58>
20026e18:	00800204 	movi	r2,8
20026e1c:	00c00604 	movi	r3,24
20026e20:	20c8d83a 	srl	r4,r4,r3
20026e24:	00c800f4 	movhi	r3,8195
20026e28:	18d5d304 	addi	r3,r3,22348
20026e2c:	1909883a 	add	r4,r3,r4
20026e30:	20c00003 	ldbu	r3,0(r4)
20026e34:	10c5c83a 	sub	r2,r2,r3
20026e38:	f800283a 	ret
20026e3c:	00800604 	movi	r2,24
20026e40:	00c00204 	movi	r3,8
20026e44:	003ff606 	br	20026e20 <_gp+0xfffe78c0>
20026e48:	00800404 	movi	r2,16
20026e4c:	1007883a 	mov	r3,r2
20026e50:	003ff306 	br	20026e20 <_gp+0xfffe78c0>

20026e54 <__assert_func>:
20026e54:	008800f4 	movhi	r2,8195
20026e58:	109d5a04 	addi	r2,r2,30056
20026e5c:	10800017 	ldw	r2,0(r2)
20026e60:	defffc04 	addi	sp,sp,-16
20026e64:	dfc00315 	stw	ra,12(sp)
20026e68:	2015883a 	mov	r10,r4
20026e6c:	2811883a 	mov	r8,r5
20026e70:	3813883a 	mov	r9,r7
20026e74:	11000317 	ldw	r4,12(r2)
20026e78:	30000c26 	beq	r6,zero,20026eac <__assert_func+0x58>
20026e7c:	00c800f4 	movhi	r3,8195
20026e80:	18d61304 	addi	r3,r3,22604
20026e84:	3005883a 	mov	r2,r6
20026e88:	014800f4 	movhi	r5,8195
20026e8c:	29561704 	addi	r5,r5,22620
20026e90:	500f883a 	mov	r7,r10
20026e94:	480d883a 	mov	r6,r9
20026e98:	d8c00115 	stw	r3,4(sp)
20026e9c:	da000015 	stw	r8,0(sp)
20026ea0:	d8800215 	stw	r2,8(sp)
20026ea4:	00277280 	call	20027728 <fiprintf>
20026ea8:	002bccc0 	call	2002bccc <abort>
20026eac:	00c800f4 	movhi	r3,8195
20026eb0:	18d61604 	addi	r3,r3,22616
20026eb4:	1805883a 	mov	r2,r3
20026eb8:	003ff306 	br	20026e88 <_gp+0xfffe7928>

20026ebc <__assert>:
20026ebc:	deffff04 	addi	sp,sp,-4
20026ec0:	300f883a 	mov	r7,r6
20026ec4:	000d883a 	mov	r6,zero
20026ec8:	dfc00015 	stw	ra,0(sp)
20026ecc:	0026e540 	call	20026e54 <__assert_func>

20026ed0 <calloc>:
20026ed0:	008800f4 	movhi	r2,8195
20026ed4:	109d5a04 	addi	r2,r2,30056
20026ed8:	280d883a 	mov	r6,r5
20026edc:	200b883a 	mov	r5,r4
20026ee0:	11000017 	ldw	r4,0(r2)
20026ee4:	0026ee81 	jmpi	20026ee8 <_calloc_r>

20026ee8 <_calloc_r>:
20026ee8:	298b383a 	mul	r5,r5,r6
20026eec:	defffe04 	addi	sp,sp,-8
20026ef0:	dfc00115 	stw	ra,4(sp)
20026ef4:	dc000015 	stw	r16,0(sp)
20026ef8:	00288980 	call	20028898 <_malloc_r>
20026efc:	10002926 	beq	r2,zero,20026fa4 <_calloc_r+0xbc>
20026f00:	11bfff17 	ldw	r6,-4(r2)
20026f04:	1021883a 	mov	r16,r2
20026f08:	00bfff04 	movi	r2,-4
20026f0c:	308c703a 	and	r6,r6,r2
20026f10:	00c00904 	movi	r3,36
20026f14:	308d883a 	add	r6,r6,r2
20026f18:	19801636 	bltu	r3,r6,20026f74 <_calloc_r+0x8c>
20026f1c:	008004c4 	movi	r2,19
20026f20:	11800b2e 	bgeu	r2,r6,20026f50 <_calloc_r+0x68>
20026f24:	80000015 	stw	zero,0(r16)
20026f28:	80000115 	stw	zero,4(r16)
20026f2c:	008006c4 	movi	r2,27
20026f30:	11801a2e 	bgeu	r2,r6,20026f9c <_calloc_r+0xb4>
20026f34:	80000215 	stw	zero,8(r16)
20026f38:	80000315 	stw	zero,12(r16)
20026f3c:	30c0151e 	bne	r6,r3,20026f94 <_calloc_r+0xac>
20026f40:	80000415 	stw	zero,16(r16)
20026f44:	80800604 	addi	r2,r16,24
20026f48:	80000515 	stw	zero,20(r16)
20026f4c:	00000106 	br	20026f54 <_calloc_r+0x6c>
20026f50:	8005883a 	mov	r2,r16
20026f54:	10000015 	stw	zero,0(r2)
20026f58:	10000115 	stw	zero,4(r2)
20026f5c:	10000215 	stw	zero,8(r2)
20026f60:	8005883a 	mov	r2,r16
20026f64:	dfc00117 	ldw	ra,4(sp)
20026f68:	dc000017 	ldw	r16,0(sp)
20026f6c:	dec00204 	addi	sp,sp,8
20026f70:	f800283a 	ret
20026f74:	000b883a 	mov	r5,zero
20026f78:	8009883a 	mov	r4,r16
20026f7c:	00291ec0 	call	200291ec <memset>
20026f80:	8005883a 	mov	r2,r16
20026f84:	dfc00117 	ldw	ra,4(sp)
20026f88:	dc000017 	ldw	r16,0(sp)
20026f8c:	dec00204 	addi	sp,sp,8
20026f90:	f800283a 	ret
20026f94:	80800404 	addi	r2,r16,16
20026f98:	003fee06 	br	20026f54 <_gp+0xfffe79f4>
20026f9c:	80800204 	addi	r2,r16,8
20026fa0:	003fec06 	br	20026f54 <_gp+0xfffe79f4>
20026fa4:	0005883a 	mov	r2,zero
20026fa8:	003fee06 	br	20026f64 <_gp+0xfffe7a04>

20026fac <__errno>:
20026fac:	008800f4 	movhi	r2,8195
20026fb0:	109d5a04 	addi	r2,r2,30056
20026fb4:	10800017 	ldw	r2,0(r2)
20026fb8:	f800283a 	ret

20026fbc <_fclose_r>:
20026fbc:	28003926 	beq	r5,zero,200270a4 <_fclose_r+0xe8>
20026fc0:	defffc04 	addi	sp,sp,-16
20026fc4:	dc400115 	stw	r17,4(sp)
20026fc8:	dc000015 	stw	r16,0(sp)
20026fcc:	dfc00315 	stw	ra,12(sp)
20026fd0:	dc800215 	stw	r18,8(sp)
20026fd4:	2023883a 	mov	r17,r4
20026fd8:	2821883a 	mov	r16,r5
20026fdc:	20000226 	beq	r4,zero,20026fe8 <_fclose_r+0x2c>
20026fe0:	20800e17 	ldw	r2,56(r4)
20026fe4:	10002726 	beq	r2,zero,20027084 <_fclose_r+0xc8>
20026fe8:	8080030f 	ldh	r2,12(r16)
20026fec:	1000071e 	bne	r2,zero,2002700c <_fclose_r+0x50>
20026ff0:	0005883a 	mov	r2,zero
20026ff4:	dfc00317 	ldw	ra,12(sp)
20026ff8:	dc800217 	ldw	r18,8(sp)
20026ffc:	dc400117 	ldw	r17,4(sp)
20027000:	dc000017 	ldw	r16,0(sp)
20027004:	dec00404 	addi	sp,sp,16
20027008:	f800283a 	ret
2002700c:	800b883a 	mov	r5,r16
20027010:	8809883a 	mov	r4,r17
20027014:	00270c00 	call	200270c0 <__sflush_r>
20027018:	1025883a 	mov	r18,r2
2002701c:	80800b17 	ldw	r2,44(r16)
20027020:	10000426 	beq	r2,zero,20027034 <_fclose_r+0x78>
20027024:	81400717 	ldw	r5,28(r16)
20027028:	8809883a 	mov	r4,r17
2002702c:	103ee83a 	callr	r2
20027030:	10001616 	blt	r2,zero,2002708c <_fclose_r+0xd0>
20027034:	8080030b 	ldhu	r2,12(r16)
20027038:	1080200c 	andi	r2,r2,128
2002703c:	1000151e 	bne	r2,zero,20027094 <_fclose_r+0xd8>
20027040:	81400c17 	ldw	r5,48(r16)
20027044:	28000526 	beq	r5,zero,2002705c <_fclose_r+0xa0>
20027048:	80801004 	addi	r2,r16,64
2002704c:	28800226 	beq	r5,r2,20027058 <_fclose_r+0x9c>
20027050:	8809883a 	mov	r4,r17
20027054:	0027c400 	call	20027c40 <_free_r>
20027058:	80000c15 	stw	zero,48(r16)
2002705c:	81401117 	ldw	r5,68(r16)
20027060:	28000326 	beq	r5,zero,20027070 <_fclose_r+0xb4>
20027064:	8809883a 	mov	r4,r17
20027068:	0027c400 	call	20027c40 <_free_r>
2002706c:	80001115 	stw	zero,68(r16)
20027070:	00276c80 	call	200276c8 <__sfp_lock_acquire>
20027074:	8000030d 	sth	zero,12(r16)
20027078:	00276cc0 	call	200276cc <__sfp_lock_release>
2002707c:	9005883a 	mov	r2,r18
20027080:	003fdc06 	br	20026ff4 <_gp+0xfffe7a94>
20027084:	00276b80 	call	200276b8 <__sinit>
20027088:	003fd706 	br	20026fe8 <_gp+0xfffe7a88>
2002708c:	04bfffc4 	movi	r18,-1
20027090:	003fe806 	br	20027034 <_gp+0xfffe7ad4>
20027094:	81400417 	ldw	r5,16(r16)
20027098:	8809883a 	mov	r4,r17
2002709c:	0027c400 	call	20027c40 <_free_r>
200270a0:	003fe706 	br	20027040 <_gp+0xfffe7ae0>
200270a4:	0005883a 	mov	r2,zero
200270a8:	f800283a 	ret

200270ac <fclose>:
200270ac:	008800f4 	movhi	r2,8195
200270b0:	109d5a04 	addi	r2,r2,30056
200270b4:	200b883a 	mov	r5,r4
200270b8:	11000017 	ldw	r4,0(r2)
200270bc:	0026fbc1 	jmpi	20026fbc <_fclose_r>

200270c0 <__sflush_r>:
200270c0:	2880030b 	ldhu	r2,12(r5)
200270c4:	defffb04 	addi	sp,sp,-20
200270c8:	dcc00315 	stw	r19,12(sp)
200270cc:	dc400115 	stw	r17,4(sp)
200270d0:	dfc00415 	stw	ra,16(sp)
200270d4:	dc800215 	stw	r18,8(sp)
200270d8:	dc000015 	stw	r16,0(sp)
200270dc:	10c0020c 	andi	r3,r2,8
200270e0:	2823883a 	mov	r17,r5
200270e4:	2027883a 	mov	r19,r4
200270e8:	1800311e 	bne	r3,zero,200271b0 <__sflush_r+0xf0>
200270ec:	28c00117 	ldw	r3,4(r5)
200270f0:	10820014 	ori	r2,r2,2048
200270f4:	2880030d 	sth	r2,12(r5)
200270f8:	00c04b0e 	bge	zero,r3,20027228 <__sflush_r+0x168>
200270fc:	8a000a17 	ldw	r8,40(r17)
20027100:	40002326 	beq	r8,zero,20027190 <__sflush_r+0xd0>
20027104:	9c000017 	ldw	r16,0(r19)
20027108:	10c4000c 	andi	r3,r2,4096
2002710c:	98000015 	stw	zero,0(r19)
20027110:	18004826 	beq	r3,zero,20027234 <__sflush_r+0x174>
20027114:	89801417 	ldw	r6,80(r17)
20027118:	10c0010c 	andi	r3,r2,4
2002711c:	18000626 	beq	r3,zero,20027138 <__sflush_r+0x78>
20027120:	88c00117 	ldw	r3,4(r17)
20027124:	88800c17 	ldw	r2,48(r17)
20027128:	30cdc83a 	sub	r6,r6,r3
2002712c:	10000226 	beq	r2,zero,20027138 <__sflush_r+0x78>
20027130:	88800f17 	ldw	r2,60(r17)
20027134:	308dc83a 	sub	r6,r6,r2
20027138:	89400717 	ldw	r5,28(r17)
2002713c:	000f883a 	mov	r7,zero
20027140:	9809883a 	mov	r4,r19
20027144:	403ee83a 	callr	r8
20027148:	00ffffc4 	movi	r3,-1
2002714c:	10c04426 	beq	r2,r3,20027260 <__sflush_r+0x1a0>
20027150:	88c0030b 	ldhu	r3,12(r17)
20027154:	89000417 	ldw	r4,16(r17)
20027158:	88000115 	stw	zero,4(r17)
2002715c:	197dffcc 	andi	r5,r3,63487
20027160:	8940030d 	sth	r5,12(r17)
20027164:	89000015 	stw	r4,0(r17)
20027168:	18c4000c 	andi	r3,r3,4096
2002716c:	18002c1e 	bne	r3,zero,20027220 <__sflush_r+0x160>
20027170:	89400c17 	ldw	r5,48(r17)
20027174:	9c000015 	stw	r16,0(r19)
20027178:	28000526 	beq	r5,zero,20027190 <__sflush_r+0xd0>
2002717c:	88801004 	addi	r2,r17,64
20027180:	28800226 	beq	r5,r2,2002718c <__sflush_r+0xcc>
20027184:	9809883a 	mov	r4,r19
20027188:	0027c400 	call	20027c40 <_free_r>
2002718c:	88000c15 	stw	zero,48(r17)
20027190:	0005883a 	mov	r2,zero
20027194:	dfc00417 	ldw	ra,16(sp)
20027198:	dcc00317 	ldw	r19,12(sp)
2002719c:	dc800217 	ldw	r18,8(sp)
200271a0:	dc400117 	ldw	r17,4(sp)
200271a4:	dc000017 	ldw	r16,0(sp)
200271a8:	dec00504 	addi	sp,sp,20
200271ac:	f800283a 	ret
200271b0:	2c800417 	ldw	r18,16(r5)
200271b4:	903ff626 	beq	r18,zero,20027190 <_gp+0xfffe7c30>
200271b8:	2c000017 	ldw	r16,0(r5)
200271bc:	108000cc 	andi	r2,r2,3
200271c0:	2c800015 	stw	r18,0(r5)
200271c4:	84a1c83a 	sub	r16,r16,r18
200271c8:	1000131e 	bne	r2,zero,20027218 <__sflush_r+0x158>
200271cc:	28800517 	ldw	r2,20(r5)
200271d0:	88800215 	stw	r2,8(r17)
200271d4:	04000316 	blt	zero,r16,200271e4 <__sflush_r+0x124>
200271d8:	003fed06 	br	20027190 <_gp+0xfffe7c30>
200271dc:	90a5883a 	add	r18,r18,r2
200271e0:	043feb0e 	bge	zero,r16,20027190 <_gp+0xfffe7c30>
200271e4:	88800917 	ldw	r2,36(r17)
200271e8:	89400717 	ldw	r5,28(r17)
200271ec:	800f883a 	mov	r7,r16
200271f0:	900d883a 	mov	r6,r18
200271f4:	9809883a 	mov	r4,r19
200271f8:	103ee83a 	callr	r2
200271fc:	80a1c83a 	sub	r16,r16,r2
20027200:	00bff616 	blt	zero,r2,200271dc <_gp+0xfffe7c7c>
20027204:	88c0030b 	ldhu	r3,12(r17)
20027208:	00bfffc4 	movi	r2,-1
2002720c:	18c01014 	ori	r3,r3,64
20027210:	88c0030d 	sth	r3,12(r17)
20027214:	003fdf06 	br	20027194 <_gp+0xfffe7c34>
20027218:	0005883a 	mov	r2,zero
2002721c:	003fec06 	br	200271d0 <_gp+0xfffe7c70>
20027220:	88801415 	stw	r2,80(r17)
20027224:	003fd206 	br	20027170 <_gp+0xfffe7c10>
20027228:	28c00f17 	ldw	r3,60(r5)
2002722c:	00ffb316 	blt	zero,r3,200270fc <_gp+0xfffe7b9c>
20027230:	003fd706 	br	20027190 <_gp+0xfffe7c30>
20027234:	89400717 	ldw	r5,28(r17)
20027238:	000d883a 	mov	r6,zero
2002723c:	01c00044 	movi	r7,1
20027240:	9809883a 	mov	r4,r19
20027244:	403ee83a 	callr	r8
20027248:	100d883a 	mov	r6,r2
2002724c:	00bfffc4 	movi	r2,-1
20027250:	30801426 	beq	r6,r2,200272a4 <__sflush_r+0x1e4>
20027254:	8880030b 	ldhu	r2,12(r17)
20027258:	8a000a17 	ldw	r8,40(r17)
2002725c:	003fae06 	br	20027118 <_gp+0xfffe7bb8>
20027260:	98c00017 	ldw	r3,0(r19)
20027264:	183fba26 	beq	r3,zero,20027150 <_gp+0xfffe7bf0>
20027268:	01000744 	movi	r4,29
2002726c:	19000626 	beq	r3,r4,20027288 <__sflush_r+0x1c8>
20027270:	01000584 	movi	r4,22
20027274:	19000426 	beq	r3,r4,20027288 <__sflush_r+0x1c8>
20027278:	88c0030b 	ldhu	r3,12(r17)
2002727c:	18c01014 	ori	r3,r3,64
20027280:	88c0030d 	sth	r3,12(r17)
20027284:	003fc306 	br	20027194 <_gp+0xfffe7c34>
20027288:	8880030b 	ldhu	r2,12(r17)
2002728c:	88c00417 	ldw	r3,16(r17)
20027290:	88000115 	stw	zero,4(r17)
20027294:	10bdffcc 	andi	r2,r2,63487
20027298:	8880030d 	sth	r2,12(r17)
2002729c:	88c00015 	stw	r3,0(r17)
200272a0:	003fb306 	br	20027170 <_gp+0xfffe7c10>
200272a4:	98800017 	ldw	r2,0(r19)
200272a8:	103fea26 	beq	r2,zero,20027254 <_gp+0xfffe7cf4>
200272ac:	00c00744 	movi	r3,29
200272b0:	10c00226 	beq	r2,r3,200272bc <__sflush_r+0x1fc>
200272b4:	00c00584 	movi	r3,22
200272b8:	10c0031e 	bne	r2,r3,200272c8 <__sflush_r+0x208>
200272bc:	9c000015 	stw	r16,0(r19)
200272c0:	0005883a 	mov	r2,zero
200272c4:	003fb306 	br	20027194 <_gp+0xfffe7c34>
200272c8:	88c0030b 	ldhu	r3,12(r17)
200272cc:	3005883a 	mov	r2,r6
200272d0:	18c01014 	ori	r3,r3,64
200272d4:	88c0030d 	sth	r3,12(r17)
200272d8:	003fae06 	br	20027194 <_gp+0xfffe7c34>

200272dc <_fflush_r>:
200272dc:	defffd04 	addi	sp,sp,-12
200272e0:	dc000115 	stw	r16,4(sp)
200272e4:	dfc00215 	stw	ra,8(sp)
200272e8:	2021883a 	mov	r16,r4
200272ec:	20000226 	beq	r4,zero,200272f8 <_fflush_r+0x1c>
200272f0:	20800e17 	ldw	r2,56(r4)
200272f4:	10000c26 	beq	r2,zero,20027328 <_fflush_r+0x4c>
200272f8:	2880030f 	ldh	r2,12(r5)
200272fc:	1000051e 	bne	r2,zero,20027314 <_fflush_r+0x38>
20027300:	0005883a 	mov	r2,zero
20027304:	dfc00217 	ldw	ra,8(sp)
20027308:	dc000117 	ldw	r16,4(sp)
2002730c:	dec00304 	addi	sp,sp,12
20027310:	f800283a 	ret
20027314:	8009883a 	mov	r4,r16
20027318:	dfc00217 	ldw	ra,8(sp)
2002731c:	dc000117 	ldw	r16,4(sp)
20027320:	dec00304 	addi	sp,sp,12
20027324:	00270c01 	jmpi	200270c0 <__sflush_r>
20027328:	d9400015 	stw	r5,0(sp)
2002732c:	00276b80 	call	200276b8 <__sinit>
20027330:	d9400017 	ldw	r5,0(sp)
20027334:	003ff006 	br	200272f8 <_gp+0xfffe7d98>

20027338 <fflush>:
20027338:	20000526 	beq	r4,zero,20027350 <fflush+0x18>
2002733c:	008800f4 	movhi	r2,8195
20027340:	109d5a04 	addi	r2,r2,30056
20027344:	200b883a 	mov	r5,r4
20027348:	11000017 	ldw	r4,0(r2)
2002734c:	00272dc1 	jmpi	200272dc <_fflush_r>
20027350:	008800f4 	movhi	r2,8195
20027354:	109d5904 	addi	r2,r2,30052
20027358:	11000017 	ldw	r4,0(r2)
2002735c:	014800b4 	movhi	r5,8194
20027360:	295cb704 	addi	r5,r5,29404
20027364:	00284f01 	jmpi	200284f0 <_fwalk_reent>

20027368 <__fp_unlock>:
20027368:	0005883a 	mov	r2,zero
2002736c:	f800283a 	ret

20027370 <_cleanup_r>:
20027370:	014800b4 	movhi	r5,8194
20027374:	295bef04 	addi	r5,r5,28604
20027378:	00284f01 	jmpi	200284f0 <_fwalk_reent>

2002737c <__sinit.part.1>:
2002737c:	defff704 	addi	sp,sp,-36
20027380:	00c800b4 	movhi	r3,8194
20027384:	dfc00815 	stw	ra,32(sp)
20027388:	ddc00715 	stw	r23,28(sp)
2002738c:	dd800615 	stw	r22,24(sp)
20027390:	dd400515 	stw	r21,20(sp)
20027394:	dd000415 	stw	r20,16(sp)
20027398:	dcc00315 	stw	r19,12(sp)
2002739c:	dc800215 	stw	r18,8(sp)
200273a0:	dc400115 	stw	r17,4(sp)
200273a4:	dc000015 	stw	r16,0(sp)
200273a8:	18dcdc04 	addi	r3,r3,29552
200273ac:	24000117 	ldw	r16,4(r4)
200273b0:	20c00f15 	stw	r3,60(r4)
200273b4:	2080bb04 	addi	r2,r4,748
200273b8:	00c000c4 	movi	r3,3
200273bc:	20c0b915 	stw	r3,740(r4)
200273c0:	2080ba15 	stw	r2,744(r4)
200273c4:	2000b815 	stw	zero,736(r4)
200273c8:	05c00204 	movi	r23,8
200273cc:	00800104 	movi	r2,4
200273d0:	2025883a 	mov	r18,r4
200273d4:	b80d883a 	mov	r6,r23
200273d8:	81001704 	addi	r4,r16,92
200273dc:	000b883a 	mov	r5,zero
200273e0:	80000015 	stw	zero,0(r16)
200273e4:	80000115 	stw	zero,4(r16)
200273e8:	80000215 	stw	zero,8(r16)
200273ec:	8080030d 	sth	r2,12(r16)
200273f0:	80001915 	stw	zero,100(r16)
200273f4:	8000038d 	sth	zero,14(r16)
200273f8:	80000415 	stw	zero,16(r16)
200273fc:	80000515 	stw	zero,20(r16)
20027400:	80000615 	stw	zero,24(r16)
20027404:	00291ec0 	call	200291ec <memset>
20027408:	058800f4 	movhi	r22,8195
2002740c:	94400217 	ldw	r17,8(r18)
20027410:	054800f4 	movhi	r21,8195
20027414:	050800f4 	movhi	r20,8195
20027418:	04c800f4 	movhi	r19,8195
2002741c:	b5a5a804 	addi	r22,r22,-26976
20027420:	ad65bf04 	addi	r21,r21,-26884
20027424:	a525de04 	addi	r20,r20,-26760
20027428:	9ce5f504 	addi	r19,r19,-26668
2002742c:	85800815 	stw	r22,32(r16)
20027430:	85400915 	stw	r21,36(r16)
20027434:	85000a15 	stw	r20,40(r16)
20027438:	84c00b15 	stw	r19,44(r16)
2002743c:	84000715 	stw	r16,28(r16)
20027440:	00800284 	movi	r2,10
20027444:	8880030d 	sth	r2,12(r17)
20027448:	00800044 	movi	r2,1
2002744c:	b80d883a 	mov	r6,r23
20027450:	89001704 	addi	r4,r17,92
20027454:	000b883a 	mov	r5,zero
20027458:	88000015 	stw	zero,0(r17)
2002745c:	88000115 	stw	zero,4(r17)
20027460:	88000215 	stw	zero,8(r17)
20027464:	88001915 	stw	zero,100(r17)
20027468:	8880038d 	sth	r2,14(r17)
2002746c:	88000415 	stw	zero,16(r17)
20027470:	88000515 	stw	zero,20(r17)
20027474:	88000615 	stw	zero,24(r17)
20027478:	00291ec0 	call	200291ec <memset>
2002747c:	94000317 	ldw	r16,12(r18)
20027480:	00800484 	movi	r2,18
20027484:	8c400715 	stw	r17,28(r17)
20027488:	8d800815 	stw	r22,32(r17)
2002748c:	8d400915 	stw	r21,36(r17)
20027490:	8d000a15 	stw	r20,40(r17)
20027494:	8cc00b15 	stw	r19,44(r17)
20027498:	8080030d 	sth	r2,12(r16)
2002749c:	00800084 	movi	r2,2
200274a0:	80000015 	stw	zero,0(r16)
200274a4:	80000115 	stw	zero,4(r16)
200274a8:	80000215 	stw	zero,8(r16)
200274ac:	80001915 	stw	zero,100(r16)
200274b0:	8080038d 	sth	r2,14(r16)
200274b4:	80000415 	stw	zero,16(r16)
200274b8:	80000515 	stw	zero,20(r16)
200274bc:	80000615 	stw	zero,24(r16)
200274c0:	b80d883a 	mov	r6,r23
200274c4:	000b883a 	mov	r5,zero
200274c8:	81001704 	addi	r4,r16,92
200274cc:	00291ec0 	call	200291ec <memset>
200274d0:	00800044 	movi	r2,1
200274d4:	84000715 	stw	r16,28(r16)
200274d8:	85800815 	stw	r22,32(r16)
200274dc:	85400915 	stw	r21,36(r16)
200274e0:	85000a15 	stw	r20,40(r16)
200274e4:	84c00b15 	stw	r19,44(r16)
200274e8:	90800e15 	stw	r2,56(r18)
200274ec:	dfc00817 	ldw	ra,32(sp)
200274f0:	ddc00717 	ldw	r23,28(sp)
200274f4:	dd800617 	ldw	r22,24(sp)
200274f8:	dd400517 	ldw	r21,20(sp)
200274fc:	dd000417 	ldw	r20,16(sp)
20027500:	dcc00317 	ldw	r19,12(sp)
20027504:	dc800217 	ldw	r18,8(sp)
20027508:	dc400117 	ldw	r17,4(sp)
2002750c:	dc000017 	ldw	r16,0(sp)
20027510:	dec00904 	addi	sp,sp,36
20027514:	f800283a 	ret

20027518 <__fp_lock>:
20027518:	0005883a 	mov	r2,zero
2002751c:	f800283a 	ret

20027520 <__sfmoreglue>:
20027520:	defffc04 	addi	sp,sp,-16
20027524:	dc400115 	stw	r17,4(sp)
20027528:	2c7fffc4 	addi	r17,r5,-1
2002752c:	8c401a24 	muli	r17,r17,104
20027530:	dc800215 	stw	r18,8(sp)
20027534:	2825883a 	mov	r18,r5
20027538:	89401d04 	addi	r5,r17,116
2002753c:	dc000015 	stw	r16,0(sp)
20027540:	dfc00315 	stw	ra,12(sp)
20027544:	00288980 	call	20028898 <_malloc_r>
20027548:	1021883a 	mov	r16,r2
2002754c:	10000726 	beq	r2,zero,2002756c <__sfmoreglue+0x4c>
20027550:	11000304 	addi	r4,r2,12
20027554:	10000015 	stw	zero,0(r2)
20027558:	14800115 	stw	r18,4(r2)
2002755c:	11000215 	stw	r4,8(r2)
20027560:	89801a04 	addi	r6,r17,104
20027564:	000b883a 	mov	r5,zero
20027568:	00291ec0 	call	200291ec <memset>
2002756c:	8005883a 	mov	r2,r16
20027570:	dfc00317 	ldw	ra,12(sp)
20027574:	dc800217 	ldw	r18,8(sp)
20027578:	dc400117 	ldw	r17,4(sp)
2002757c:	dc000017 	ldw	r16,0(sp)
20027580:	dec00404 	addi	sp,sp,16
20027584:	f800283a 	ret

20027588 <__sfp>:
20027588:	defffb04 	addi	sp,sp,-20
2002758c:	dc000015 	stw	r16,0(sp)
20027590:	040800f4 	movhi	r16,8195
20027594:	841d5904 	addi	r16,r16,30052
20027598:	dcc00315 	stw	r19,12(sp)
2002759c:	2027883a 	mov	r19,r4
200275a0:	81000017 	ldw	r4,0(r16)
200275a4:	dfc00415 	stw	ra,16(sp)
200275a8:	dc800215 	stw	r18,8(sp)
200275ac:	20800e17 	ldw	r2,56(r4)
200275b0:	dc400115 	stw	r17,4(sp)
200275b4:	1000021e 	bne	r2,zero,200275c0 <__sfp+0x38>
200275b8:	002737c0 	call	2002737c <__sinit.part.1>
200275bc:	81000017 	ldw	r4,0(r16)
200275c0:	2480b804 	addi	r18,r4,736
200275c4:	047fffc4 	movi	r17,-1
200275c8:	91000117 	ldw	r4,4(r18)
200275cc:	94000217 	ldw	r16,8(r18)
200275d0:	213fffc4 	addi	r4,r4,-1
200275d4:	20000a16 	blt	r4,zero,20027600 <__sfp+0x78>
200275d8:	8080030f 	ldh	r2,12(r16)
200275dc:	10000c26 	beq	r2,zero,20027610 <__sfp+0x88>
200275e0:	80c01d04 	addi	r3,r16,116
200275e4:	00000206 	br	200275f0 <__sfp+0x68>
200275e8:	18bfe60f 	ldh	r2,-104(r3)
200275ec:	10000826 	beq	r2,zero,20027610 <__sfp+0x88>
200275f0:	213fffc4 	addi	r4,r4,-1
200275f4:	1c3ffd04 	addi	r16,r3,-12
200275f8:	18c01a04 	addi	r3,r3,104
200275fc:	247ffa1e 	bne	r4,r17,200275e8 <_gp+0xfffe8088>
20027600:	90800017 	ldw	r2,0(r18)
20027604:	10001d26 	beq	r2,zero,2002767c <__sfp+0xf4>
20027608:	1025883a 	mov	r18,r2
2002760c:	003fee06 	br	200275c8 <_gp+0xfffe8068>
20027610:	00bfffc4 	movi	r2,-1
20027614:	8080038d 	sth	r2,14(r16)
20027618:	00800044 	movi	r2,1
2002761c:	8080030d 	sth	r2,12(r16)
20027620:	80001915 	stw	zero,100(r16)
20027624:	80000015 	stw	zero,0(r16)
20027628:	80000215 	stw	zero,8(r16)
2002762c:	80000115 	stw	zero,4(r16)
20027630:	80000415 	stw	zero,16(r16)
20027634:	80000515 	stw	zero,20(r16)
20027638:	80000615 	stw	zero,24(r16)
2002763c:	01800204 	movi	r6,8
20027640:	000b883a 	mov	r5,zero
20027644:	81001704 	addi	r4,r16,92
20027648:	00291ec0 	call	200291ec <memset>
2002764c:	8005883a 	mov	r2,r16
20027650:	80000c15 	stw	zero,48(r16)
20027654:	80000d15 	stw	zero,52(r16)
20027658:	80001115 	stw	zero,68(r16)
2002765c:	80001215 	stw	zero,72(r16)
20027660:	dfc00417 	ldw	ra,16(sp)
20027664:	dcc00317 	ldw	r19,12(sp)
20027668:	dc800217 	ldw	r18,8(sp)
2002766c:	dc400117 	ldw	r17,4(sp)
20027670:	dc000017 	ldw	r16,0(sp)
20027674:	dec00504 	addi	sp,sp,20
20027678:	f800283a 	ret
2002767c:	01400104 	movi	r5,4
20027680:	9809883a 	mov	r4,r19
20027684:	00275200 	call	20027520 <__sfmoreglue>
20027688:	90800015 	stw	r2,0(r18)
2002768c:	103fde1e 	bne	r2,zero,20027608 <_gp+0xfffe80a8>
20027690:	00800304 	movi	r2,12
20027694:	98800015 	stw	r2,0(r19)
20027698:	0005883a 	mov	r2,zero
2002769c:	003ff006 	br	20027660 <_gp+0xfffe8100>

200276a0 <_cleanup>:
200276a0:	008800f4 	movhi	r2,8195
200276a4:	109d5904 	addi	r2,r2,30052
200276a8:	11000017 	ldw	r4,0(r2)
200276ac:	014800b4 	movhi	r5,8194
200276b0:	295bef04 	addi	r5,r5,28604
200276b4:	00284f01 	jmpi	200284f0 <_fwalk_reent>

200276b8 <__sinit>:
200276b8:	20800e17 	ldw	r2,56(r4)
200276bc:	10000126 	beq	r2,zero,200276c4 <__sinit+0xc>
200276c0:	f800283a 	ret
200276c4:	002737c1 	jmpi	2002737c <__sinit.part.1>

200276c8 <__sfp_lock_acquire>:
200276c8:	f800283a 	ret

200276cc <__sfp_lock_release>:
200276cc:	f800283a 	ret

200276d0 <__sinit_lock_acquire>:
200276d0:	f800283a 	ret

200276d4 <__sinit_lock_release>:
200276d4:	f800283a 	ret

200276d8 <__fp_lock_all>:
200276d8:	008800f4 	movhi	r2,8195
200276dc:	109d5a04 	addi	r2,r2,30056
200276e0:	11000017 	ldw	r4,0(r2)
200276e4:	014800b4 	movhi	r5,8194
200276e8:	295d4604 	addi	r5,r5,29976
200276ec:	002842c1 	jmpi	2002842c <_fwalk>

200276f0 <__fp_unlock_all>:
200276f0:	008800f4 	movhi	r2,8195
200276f4:	109d5a04 	addi	r2,r2,30056
200276f8:	11000017 	ldw	r4,0(r2)
200276fc:	014800b4 	movhi	r5,8194
20027700:	295cda04 	addi	r5,r5,29544
20027704:	002842c1 	jmpi	2002842c <_fwalk>

20027708 <_fiprintf_r>:
20027708:	defffe04 	addi	sp,sp,-8
2002770c:	dfc00015 	stw	ra,0(sp)
20027710:	d9c00115 	stw	r7,4(sp)
20027714:	d9c00104 	addi	r7,sp,4
20027718:	00297dc0 	call	200297dc <_vfiprintf_r>
2002771c:	dfc00017 	ldw	ra,0(sp)
20027720:	dec00204 	addi	sp,sp,8
20027724:	f800283a 	ret

20027728 <fiprintf>:
20027728:	defffd04 	addi	sp,sp,-12
2002772c:	2005883a 	mov	r2,r4
20027730:	dfc00015 	stw	ra,0(sp)
20027734:	d9800115 	stw	r6,4(sp)
20027738:	d9c00215 	stw	r7,8(sp)
2002773c:	00c800f4 	movhi	r3,8195
20027740:	18dd5a04 	addi	r3,r3,30056
20027744:	19000017 	ldw	r4,0(r3)
20027748:	280d883a 	mov	r6,r5
2002774c:	d9c00104 	addi	r7,sp,4
20027750:	100b883a 	mov	r5,r2
20027754:	00297dc0 	call	200297dc <_vfiprintf_r>
20027758:	dfc00017 	ldw	ra,0(sp)
2002775c:	dec00304 	addi	sp,sp,12
20027760:	f800283a 	ret

20027764 <_fopen_r>:
20027764:	defffa04 	addi	sp,sp,-24
20027768:	3005883a 	mov	r2,r6
2002776c:	dcc00415 	stw	r19,16(sp)
20027770:	d80d883a 	mov	r6,sp
20027774:	2827883a 	mov	r19,r5
20027778:	100b883a 	mov	r5,r2
2002777c:	dc800315 	stw	r18,12(sp)
20027780:	dfc00515 	stw	ra,20(sp)
20027784:	dc400215 	stw	r17,8(sp)
20027788:	dc000115 	stw	r16,4(sp)
2002778c:	2025883a 	mov	r18,r4
20027790:	002d56c0 	call	2002d56c <__sflags>
20027794:	10002726 	beq	r2,zero,20027834 <_fopen_r+0xd0>
20027798:	9009883a 	mov	r4,r18
2002779c:	1023883a 	mov	r17,r2
200277a0:	00275880 	call	20027588 <__sfp>
200277a4:	1021883a 	mov	r16,r2
200277a8:	10002226 	beq	r2,zero,20027834 <_fopen_r+0xd0>
200277ac:	d9800017 	ldw	r6,0(sp)
200277b0:	01c06d84 	movi	r7,438
200277b4:	980b883a 	mov	r5,r19
200277b8:	9009883a 	mov	r4,r18
200277bc:	00293140 	call	20029314 <_open_r>
200277c0:	10001916 	blt	r2,zero,20027828 <_fopen_r+0xc4>
200277c4:	8080038d 	sth	r2,14(r16)
200277c8:	008800f4 	movhi	r2,8195
200277cc:	10a5a804 	addi	r2,r2,-26976
200277d0:	80800815 	stw	r2,32(r16)
200277d4:	008800f4 	movhi	r2,8195
200277d8:	10a5bf04 	addi	r2,r2,-26884
200277dc:	80800915 	stw	r2,36(r16)
200277e0:	008800f4 	movhi	r2,8195
200277e4:	10a5de04 	addi	r2,r2,-26760
200277e8:	80800a15 	stw	r2,40(r16)
200277ec:	008800f4 	movhi	r2,8195
200277f0:	10a5f504 	addi	r2,r2,-26668
200277f4:	8440030d 	sth	r17,12(r16)
200277f8:	84000715 	stw	r16,28(r16)
200277fc:	80800b15 	stw	r2,44(r16)
20027800:	8c40400c 	andi	r17,r17,256
20027804:	88000d1e 	bne	r17,zero,2002783c <_fopen_r+0xd8>
20027808:	8005883a 	mov	r2,r16
2002780c:	dfc00517 	ldw	ra,20(sp)
20027810:	dcc00417 	ldw	r19,16(sp)
20027814:	dc800317 	ldw	r18,12(sp)
20027818:	dc400217 	ldw	r17,8(sp)
2002781c:	dc000117 	ldw	r16,4(sp)
20027820:	dec00604 	addi	sp,sp,24
20027824:	f800283a 	ret
20027828:	00276c80 	call	200276c8 <__sfp_lock_acquire>
2002782c:	8000030d 	sth	zero,12(r16)
20027830:	00276cc0 	call	200276cc <__sfp_lock_release>
20027834:	0005883a 	mov	r2,zero
20027838:	003ff406 	br	2002780c <_gp+0xfffe82ac>
2002783c:	01c00084 	movi	r7,2
20027840:	000d883a 	mov	r6,zero
20027844:	800b883a 	mov	r5,r16
20027848:	9009883a 	mov	r4,r18
2002784c:	0027f500 	call	20027f50 <_fseek_r>
20027850:	8005883a 	mov	r2,r16
20027854:	003fed06 	br	2002780c <_gp+0xfffe82ac>

20027858 <fopen>:
20027858:	008800f4 	movhi	r2,8195
2002785c:	109d5a04 	addi	r2,r2,30056
20027860:	280d883a 	mov	r6,r5
20027864:	200b883a 	mov	r5,r4
20027868:	11000017 	ldw	r4,0(r2)
2002786c:	00277641 	jmpi	20027764 <_fopen_r>

20027870 <_fprintf_r>:
20027870:	defffe04 	addi	sp,sp,-8
20027874:	2809883a 	mov	r4,r5
20027878:	300b883a 	mov	r5,r6
2002787c:	dfc00015 	stw	ra,0(sp)
20027880:	d9c00115 	stw	r7,4(sp)
20027884:	d9800104 	addi	r6,sp,4
20027888:	002b9ec0 	call	2002b9ec <__vfprintf_internal>
2002788c:	dfc00017 	ldw	ra,0(sp)
20027890:	dec00204 	addi	sp,sp,8
20027894:	f800283a 	ret

20027898 <fprintf>:
20027898:	defffd04 	addi	sp,sp,-12
2002789c:	dfc00015 	stw	ra,0(sp)
200278a0:	d9800115 	stw	r6,4(sp)
200278a4:	d9c00215 	stw	r7,8(sp)
200278a8:	d9800104 	addi	r6,sp,4
200278ac:	002b9ec0 	call	2002b9ec <__vfprintf_internal>
200278b0:	dfc00017 	ldw	ra,0(sp)
200278b4:	dec00304 	addi	sp,sp,12
200278b8:	f800283a 	ret

200278bc <_fread_r>:
200278bc:	defff404 	addi	sp,sp,-48
200278c0:	dd800815 	stw	r22,32(sp)
200278c4:	39ad383a 	mul	r22,r7,r6
200278c8:	dc000215 	stw	r16,8(sp)
200278cc:	dfc00b15 	stw	ra,44(sp)
200278d0:	df000a15 	stw	fp,40(sp)
200278d4:	ddc00915 	stw	r23,36(sp)
200278d8:	dd400715 	stw	r21,28(sp)
200278dc:	dd000615 	stw	r20,24(sp)
200278e0:	dcc00515 	stw	r19,20(sp)
200278e4:	dc800415 	stw	r18,16(sp)
200278e8:	dc400315 	stw	r17,12(sp)
200278ec:	dc000c17 	ldw	r16,48(sp)
200278f0:	b0003b26 	beq	r22,zero,200279e0 <_fread_r+0x124>
200278f4:	302f883a 	mov	r23,r6
200278f8:	382b883a 	mov	r21,r7
200278fc:	2029883a 	mov	r20,r4
20027900:	2827883a 	mov	r19,r5
20027904:	20000226 	beq	r4,zero,20027910 <_fread_r+0x54>
20027908:	20800e17 	ldw	r2,56(r4)
2002790c:	10006e26 	beq	r2,zero,20027ac8 <_fread_r+0x20c>
20027910:	8080030b 	ldhu	r2,12(r16)
20027914:	10c8000c 	andi	r3,r2,8192
20027918:	1800061e 	bne	r3,zero,20027934 <_fread_r+0x78>
2002791c:	81001917 	ldw	r4,100(r16)
20027920:	00f7ffc4 	movi	r3,-8193
20027924:	10880014 	ori	r2,r2,8192
20027928:	20c6703a 	and	r3,r4,r3
2002792c:	8080030d 	sth	r2,12(r16)
20027930:	80c01915 	stw	r3,100(r16)
20027934:	84400117 	ldw	r17,4(r16)
20027938:	88005f16 	blt	r17,zero,20027ab8 <_fread_r+0x1fc>
2002793c:	8809883a 	mov	r4,r17
20027940:	1080008c 	andi	r2,r2,2
20027944:	1000281e 	bne	r2,zero,200279e8 <_fread_r+0x12c>
20027948:	b025883a 	mov	r18,r22
2002794c:	00000b06 	br	2002797c <_fread_r+0xc0>
20027950:	00290a40 	call	200290a4 <memcpy>
20027954:	80800017 	ldw	r2,0(r16)
20027958:	9c67883a 	add	r19,r19,r17
2002795c:	9465c83a 	sub	r18,r18,r17
20027960:	1463883a 	add	r17,r2,r17
20027964:	800b883a 	mov	r5,r16
20027968:	a009883a 	mov	r4,r20
2002796c:	84400015 	stw	r17,0(r16)
20027970:	00294780 	call	20029478 <__srefill_r>
20027974:	10004c1e 	bne	r2,zero,20027aa8 <_fread_r+0x1ec>
20027978:	84400117 	ldw	r17,4(r16)
2002797c:	880d883a 	mov	r6,r17
20027980:	9809883a 	mov	r4,r19
20027984:	81400017 	ldw	r5,0(r16)
20027988:	8cbff136 	bltu	r17,r18,20027950 <_gp+0xfffe83f0>
2002798c:	900d883a 	mov	r6,r18
20027990:	00290a40 	call	200290a4 <memcpy>
20027994:	80c00117 	ldw	r3,4(r16)
20027998:	81000017 	ldw	r4,0(r16)
2002799c:	a805883a 	mov	r2,r21
200279a0:	1c87c83a 	sub	r3,r3,r18
200279a4:	24a5883a 	add	r18,r4,r18
200279a8:	80c00115 	stw	r3,4(r16)
200279ac:	84800015 	stw	r18,0(r16)
200279b0:	dfc00b17 	ldw	ra,44(sp)
200279b4:	df000a17 	ldw	fp,40(sp)
200279b8:	ddc00917 	ldw	r23,36(sp)
200279bc:	dd800817 	ldw	r22,32(sp)
200279c0:	dd400717 	ldw	r21,28(sp)
200279c4:	dd000617 	ldw	r20,24(sp)
200279c8:	dcc00517 	ldw	r19,20(sp)
200279cc:	dc800417 	ldw	r18,16(sp)
200279d0:	dc400317 	ldw	r17,12(sp)
200279d4:	dc000217 	ldw	r16,8(sp)
200279d8:	dec00c04 	addi	sp,sp,48
200279dc:	f800283a 	ret
200279e0:	0005883a 	mov	r2,zero
200279e4:	003ff206 	br	200279b0 <_gp+0xfffe8450>
200279e8:	b007883a 	mov	r3,r22
200279ec:	2580012e 	bgeu	r4,r22,200279f4 <_fread_r+0x138>
200279f0:	2007883a 	mov	r3,r4
200279f4:	81400017 	ldw	r5,0(r16)
200279f8:	180d883a 	mov	r6,r3
200279fc:	9809883a 	mov	r4,r19
20027a00:	d8c00115 	stw	r3,4(sp)
20027a04:	00290a40 	call	200290a4 <memcpy>
20027a08:	d8c00117 	ldw	r3,4(sp)
20027a0c:	84400017 	ldw	r17,0(r16)
20027a10:	80800117 	ldw	r2,4(r16)
20027a14:	81400c17 	ldw	r5,48(r16)
20027a18:	88e3883a 	add	r17,r17,r3
20027a1c:	10c5c83a 	sub	r2,r2,r3
20027a20:	84400015 	stw	r17,0(r16)
20027a24:	80800115 	stw	r2,4(r16)
20027a28:	b0e5c83a 	sub	r18,r22,r3
20027a2c:	28002b26 	beq	r5,zero,20027adc <_fread_r+0x220>
20027a30:	90002b26 	beq	r18,zero,20027ae0 <_fread_r+0x224>
20027a34:	80801004 	addi	r2,r16,64
20027a38:	28800526 	beq	r5,r2,20027a50 <_fread_r+0x194>
20027a3c:	a009883a 	mov	r4,r20
20027a40:	d8c00115 	stw	r3,4(sp)
20027a44:	0027c400 	call	20027c40 <_free_r>
20027a48:	d8c00117 	ldw	r3,4(sp)
20027a4c:	84400017 	ldw	r17,0(r16)
20027a50:	80000c15 	stw	zero,48(r16)
20027a54:	80800517 	ldw	r2,20(r16)
20027a58:	87000417 	ldw	fp,16(r16)
20027a5c:	98e7883a 	add	r19,r19,r3
20027a60:	d8800015 	stw	r2,0(sp)
20027a64:	00000106 	br	20027a6c <_fread_r+0x1b0>
20027a68:	90001d26 	beq	r18,zero,20027ae0 <_fread_r+0x224>
20027a6c:	84c00415 	stw	r19,16(r16)
20027a70:	84800515 	stw	r18,20(r16)
20027a74:	84c00015 	stw	r19,0(r16)
20027a78:	a009883a 	mov	r4,r20
20027a7c:	800b883a 	mov	r5,r16
20027a80:	00294780 	call	20029478 <__srefill_r>
20027a84:	d9000017 	ldw	r4,0(sp)
20027a88:	80c00117 	ldw	r3,4(r16)
20027a8c:	87000415 	stw	fp,16(r16)
20027a90:	81000515 	stw	r4,20(r16)
20027a94:	84400015 	stw	r17,0(r16)
20027a98:	80000115 	stw	zero,4(r16)
20027a9c:	90e5c83a 	sub	r18,r18,r3
20027aa0:	98e7883a 	add	r19,r19,r3
20027aa4:	103ff026 	beq	r2,zero,20027a68 <_gp+0xfffe8508>
20027aa8:	b80b883a 	mov	r5,r23
20027aac:	b489c83a 	sub	r4,r22,r18
20027ab0:	00248600 	call	20024860 <__udivsi3>
20027ab4:	003fbe06 	br	200279b0 <_gp+0xfffe8450>
20027ab8:	80000115 	stw	zero,4(r16)
20027abc:	0009883a 	mov	r4,zero
20027ac0:	0023883a 	mov	r17,zero
20027ac4:	003f9e06 	br	20027940 <_gp+0xfffe83e0>
20027ac8:	00276b80 	call	200276b8 <__sinit>
20027acc:	8080030b 	ldhu	r2,12(r16)
20027ad0:	10c8000c 	andi	r3,r2,8192
20027ad4:	183f971e 	bne	r3,zero,20027934 <_gp+0xfffe83d4>
20027ad8:	003f9006 	br	2002791c <_gp+0xfffe83bc>
20027adc:	903fdd1e 	bne	r18,zero,20027a54 <_gp+0xfffe84f4>
20027ae0:	a805883a 	mov	r2,r21
20027ae4:	003fb206 	br	200279b0 <_gp+0xfffe8450>

20027ae8 <fread>:
20027ae8:	defffe04 	addi	sp,sp,-8
20027aec:	008800f4 	movhi	r2,8195
20027af0:	d9c00015 	stw	r7,0(sp)
20027af4:	109d5a04 	addi	r2,r2,30056
20027af8:	300f883a 	mov	r7,r6
20027afc:	280d883a 	mov	r6,r5
20027b00:	200b883a 	mov	r5,r4
20027b04:	11000017 	ldw	r4,0(r2)
20027b08:	dfc00115 	stw	ra,4(sp)
20027b0c:	00278bc0 	call	200278bc <_fread_r>
20027b10:	dfc00117 	ldw	ra,4(sp)
20027b14:	dec00204 	addi	sp,sp,8
20027b18:	f800283a 	ret

20027b1c <_malloc_trim_r>:
20027b1c:	defffb04 	addi	sp,sp,-20
20027b20:	dcc00315 	stw	r19,12(sp)
20027b24:	04c800f4 	movhi	r19,8195
20027b28:	dc800215 	stw	r18,8(sp)
20027b2c:	dc400115 	stw	r17,4(sp)
20027b30:	dc000015 	stw	r16,0(sp)
20027b34:	dfc00415 	stw	ra,16(sp)
20027b38:	2821883a 	mov	r16,r5
20027b3c:	9cd7ac04 	addi	r19,r19,24240
20027b40:	2025883a 	mov	r18,r4
20027b44:	003285c0 	call	2003285c <__malloc_lock>
20027b48:	98800217 	ldw	r2,8(r19)
20027b4c:	14400117 	ldw	r17,4(r2)
20027b50:	00bfff04 	movi	r2,-4
20027b54:	88a2703a 	and	r17,r17,r2
20027b58:	8c21c83a 	sub	r16,r17,r16
20027b5c:	8403fbc4 	addi	r16,r16,4079
20027b60:	8020d33a 	srli	r16,r16,12
20027b64:	0083ffc4 	movi	r2,4095
20027b68:	843fffc4 	addi	r16,r16,-1
20027b6c:	8020933a 	slli	r16,r16,12
20027b70:	1400060e 	bge	r2,r16,20027b8c <_malloc_trim_r+0x70>
20027b74:	000b883a 	mov	r5,zero
20027b78:	9009883a 	mov	r4,r18
20027b7c:	002964c0 	call	2002964c <_sbrk_r>
20027b80:	98c00217 	ldw	r3,8(r19)
20027b84:	1c47883a 	add	r3,r3,r17
20027b88:	10c00a26 	beq	r2,r3,20027bb4 <_malloc_trim_r+0x98>
20027b8c:	9009883a 	mov	r4,r18
20027b90:	00328800 	call	20032880 <__malloc_unlock>
20027b94:	0005883a 	mov	r2,zero
20027b98:	dfc00417 	ldw	ra,16(sp)
20027b9c:	dcc00317 	ldw	r19,12(sp)
20027ba0:	dc800217 	ldw	r18,8(sp)
20027ba4:	dc400117 	ldw	r17,4(sp)
20027ba8:	dc000017 	ldw	r16,0(sp)
20027bac:	dec00504 	addi	sp,sp,20
20027bb0:	f800283a 	ret
20027bb4:	040bc83a 	sub	r5,zero,r16
20027bb8:	9009883a 	mov	r4,r18
20027bbc:	002964c0 	call	2002964c <_sbrk_r>
20027bc0:	00ffffc4 	movi	r3,-1
20027bc4:	10c00d26 	beq	r2,r3,20027bfc <_malloc_trim_r+0xe0>
20027bc8:	00c80134 	movhi	r3,8196
20027bcc:	18e46004 	addi	r3,r3,-28288
20027bd0:	18800017 	ldw	r2,0(r3)
20027bd4:	99000217 	ldw	r4,8(r19)
20027bd8:	8c23c83a 	sub	r17,r17,r16
20027bdc:	8c400054 	ori	r17,r17,1
20027be0:	1421c83a 	sub	r16,r2,r16
20027be4:	24400115 	stw	r17,4(r4)
20027be8:	9009883a 	mov	r4,r18
20027bec:	1c000015 	stw	r16,0(r3)
20027bf0:	00328800 	call	20032880 <__malloc_unlock>
20027bf4:	00800044 	movi	r2,1
20027bf8:	003fe706 	br	20027b98 <_gp+0xfffe8638>
20027bfc:	000b883a 	mov	r5,zero
20027c00:	9009883a 	mov	r4,r18
20027c04:	002964c0 	call	2002964c <_sbrk_r>
20027c08:	99000217 	ldw	r4,8(r19)
20027c0c:	014003c4 	movi	r5,15
20027c10:	1107c83a 	sub	r3,r2,r4
20027c14:	28ffdd0e 	bge	r5,r3,20027b8c <_gp+0xfffe862c>
20027c18:	014800f4 	movhi	r5,8195
20027c1c:	295d5b04 	addi	r5,r5,30060
20027c20:	29400017 	ldw	r5,0(r5)
20027c24:	18c00054 	ori	r3,r3,1
20027c28:	20c00115 	stw	r3,4(r4)
20027c2c:	00c80134 	movhi	r3,8196
20027c30:	1145c83a 	sub	r2,r2,r5
20027c34:	18e46004 	addi	r3,r3,-28288
20027c38:	18800015 	stw	r2,0(r3)
20027c3c:	003fd306 	br	20027b8c <_gp+0xfffe862c>

20027c40 <_free_r>:
20027c40:	28004126 	beq	r5,zero,20027d48 <_free_r+0x108>
20027c44:	defffd04 	addi	sp,sp,-12
20027c48:	dc400115 	stw	r17,4(sp)
20027c4c:	dc000015 	stw	r16,0(sp)
20027c50:	2023883a 	mov	r17,r4
20027c54:	2821883a 	mov	r16,r5
20027c58:	dfc00215 	stw	ra,8(sp)
20027c5c:	003285c0 	call	2003285c <__malloc_lock>
20027c60:	81ffff17 	ldw	r7,-4(r16)
20027c64:	00bfff84 	movi	r2,-2
20027c68:	010800f4 	movhi	r4,8195
20027c6c:	81bffe04 	addi	r6,r16,-8
20027c70:	3884703a 	and	r2,r7,r2
20027c74:	2117ac04 	addi	r4,r4,24240
20027c78:	308b883a 	add	r5,r6,r2
20027c7c:	2a400117 	ldw	r9,4(r5)
20027c80:	22000217 	ldw	r8,8(r4)
20027c84:	00ffff04 	movi	r3,-4
20027c88:	48c6703a 	and	r3,r9,r3
20027c8c:	2a005726 	beq	r5,r8,20027dec <_free_r+0x1ac>
20027c90:	28c00115 	stw	r3,4(r5)
20027c94:	39c0004c 	andi	r7,r7,1
20027c98:	3800091e 	bne	r7,zero,20027cc0 <_free_r+0x80>
20027c9c:	823ffe17 	ldw	r8,-8(r16)
20027ca0:	22400204 	addi	r9,r4,8
20027ca4:	320dc83a 	sub	r6,r6,r8
20027ca8:	31c00217 	ldw	r7,8(r6)
20027cac:	1205883a 	add	r2,r2,r8
20027cb0:	3a406526 	beq	r7,r9,20027e48 <_free_r+0x208>
20027cb4:	32000317 	ldw	r8,12(r6)
20027cb8:	3a000315 	stw	r8,12(r7)
20027cbc:	41c00215 	stw	r7,8(r8)
20027cc0:	28cf883a 	add	r7,r5,r3
20027cc4:	39c00117 	ldw	r7,4(r7)
20027cc8:	39c0004c 	andi	r7,r7,1
20027ccc:	38003a26 	beq	r7,zero,20027db8 <_free_r+0x178>
20027cd0:	10c00054 	ori	r3,r2,1
20027cd4:	30c00115 	stw	r3,4(r6)
20027cd8:	3087883a 	add	r3,r6,r2
20027cdc:	18800015 	stw	r2,0(r3)
20027ce0:	00c07fc4 	movi	r3,511
20027ce4:	18801936 	bltu	r3,r2,20027d4c <_free_r+0x10c>
20027ce8:	1004d0fa 	srli	r2,r2,3
20027cec:	01c00044 	movi	r7,1
20027cf0:	21400117 	ldw	r5,4(r4)
20027cf4:	10c00044 	addi	r3,r2,1
20027cf8:	18c7883a 	add	r3,r3,r3
20027cfc:	1005d0ba 	srai	r2,r2,2
20027d00:	18c7883a 	add	r3,r3,r3
20027d04:	18c7883a 	add	r3,r3,r3
20027d08:	1907883a 	add	r3,r3,r4
20027d0c:	3884983a 	sll	r2,r7,r2
20027d10:	19c00017 	ldw	r7,0(r3)
20027d14:	1a3ffe04 	addi	r8,r3,-8
20027d18:	1144b03a 	or	r2,r2,r5
20027d1c:	32000315 	stw	r8,12(r6)
20027d20:	31c00215 	stw	r7,8(r6)
20027d24:	20800115 	stw	r2,4(r4)
20027d28:	19800015 	stw	r6,0(r3)
20027d2c:	39800315 	stw	r6,12(r7)
20027d30:	8809883a 	mov	r4,r17
20027d34:	dfc00217 	ldw	ra,8(sp)
20027d38:	dc400117 	ldw	r17,4(sp)
20027d3c:	dc000017 	ldw	r16,0(sp)
20027d40:	dec00304 	addi	sp,sp,12
20027d44:	00328801 	jmpi	20032880 <__malloc_unlock>
20027d48:	f800283a 	ret
20027d4c:	100ad27a 	srli	r5,r2,9
20027d50:	00c00104 	movi	r3,4
20027d54:	19404a36 	bltu	r3,r5,20027e80 <_free_r+0x240>
20027d58:	100ad1ba 	srli	r5,r2,6
20027d5c:	28c00e44 	addi	r3,r5,57
20027d60:	18c7883a 	add	r3,r3,r3
20027d64:	29400e04 	addi	r5,r5,56
20027d68:	18c7883a 	add	r3,r3,r3
20027d6c:	18c7883a 	add	r3,r3,r3
20027d70:	1909883a 	add	r4,r3,r4
20027d74:	20c00017 	ldw	r3,0(r4)
20027d78:	01c800f4 	movhi	r7,8195
20027d7c:	213ffe04 	addi	r4,r4,-8
20027d80:	39d7ac04 	addi	r7,r7,24240
20027d84:	20c04426 	beq	r4,r3,20027e98 <_free_r+0x258>
20027d88:	01ffff04 	movi	r7,-4
20027d8c:	19400117 	ldw	r5,4(r3)
20027d90:	29ca703a 	and	r5,r5,r7
20027d94:	1140022e 	bgeu	r2,r5,20027da0 <_free_r+0x160>
20027d98:	18c00217 	ldw	r3,8(r3)
20027d9c:	20fffb1e 	bne	r4,r3,20027d8c <_gp+0xfffe882c>
20027da0:	19000317 	ldw	r4,12(r3)
20027da4:	31000315 	stw	r4,12(r6)
20027da8:	30c00215 	stw	r3,8(r6)
20027dac:	21800215 	stw	r6,8(r4)
20027db0:	19800315 	stw	r6,12(r3)
20027db4:	003fde06 	br	20027d30 <_gp+0xfffe87d0>
20027db8:	29c00217 	ldw	r7,8(r5)
20027dbc:	10c5883a 	add	r2,r2,r3
20027dc0:	00c800f4 	movhi	r3,8195
20027dc4:	18d7ae04 	addi	r3,r3,24248
20027dc8:	38c03b26 	beq	r7,r3,20027eb8 <_free_r+0x278>
20027dcc:	2a000317 	ldw	r8,12(r5)
20027dd0:	11400054 	ori	r5,r2,1
20027dd4:	3087883a 	add	r3,r6,r2
20027dd8:	3a000315 	stw	r8,12(r7)
20027ddc:	41c00215 	stw	r7,8(r8)
20027de0:	31400115 	stw	r5,4(r6)
20027de4:	18800015 	stw	r2,0(r3)
20027de8:	003fbd06 	br	20027ce0 <_gp+0xfffe8780>
20027dec:	39c0004c 	andi	r7,r7,1
20027df0:	10c5883a 	add	r2,r2,r3
20027df4:	3800071e 	bne	r7,zero,20027e14 <_free_r+0x1d4>
20027df8:	81fffe17 	ldw	r7,-8(r16)
20027dfc:	31cdc83a 	sub	r6,r6,r7
20027e00:	30c00317 	ldw	r3,12(r6)
20027e04:	31400217 	ldw	r5,8(r6)
20027e08:	11c5883a 	add	r2,r2,r7
20027e0c:	28c00315 	stw	r3,12(r5)
20027e10:	19400215 	stw	r5,8(r3)
20027e14:	10c00054 	ori	r3,r2,1
20027e18:	30c00115 	stw	r3,4(r6)
20027e1c:	00c800f4 	movhi	r3,8195
20027e20:	18dd5c04 	addi	r3,r3,30064
20027e24:	18c00017 	ldw	r3,0(r3)
20027e28:	21800215 	stw	r6,8(r4)
20027e2c:	10ffc036 	bltu	r2,r3,20027d30 <_gp+0xfffe87d0>
20027e30:	00880134 	movhi	r2,8196
20027e34:	10a45604 	addi	r2,r2,-28328
20027e38:	11400017 	ldw	r5,0(r2)
20027e3c:	8809883a 	mov	r4,r17
20027e40:	0027b1c0 	call	20027b1c <_malloc_trim_r>
20027e44:	003fba06 	br	20027d30 <_gp+0xfffe87d0>
20027e48:	28c9883a 	add	r4,r5,r3
20027e4c:	21000117 	ldw	r4,4(r4)
20027e50:	2100004c 	andi	r4,r4,1
20027e54:	2000391e 	bne	r4,zero,20027f3c <_free_r+0x2fc>
20027e58:	29c00217 	ldw	r7,8(r5)
20027e5c:	29000317 	ldw	r4,12(r5)
20027e60:	1885883a 	add	r2,r3,r2
20027e64:	10c00054 	ori	r3,r2,1
20027e68:	39000315 	stw	r4,12(r7)
20027e6c:	21c00215 	stw	r7,8(r4)
20027e70:	30c00115 	stw	r3,4(r6)
20027e74:	308d883a 	add	r6,r6,r2
20027e78:	30800015 	stw	r2,0(r6)
20027e7c:	003fac06 	br	20027d30 <_gp+0xfffe87d0>
20027e80:	00c00504 	movi	r3,20
20027e84:	19401536 	bltu	r3,r5,20027edc <_free_r+0x29c>
20027e88:	28c01704 	addi	r3,r5,92
20027e8c:	18c7883a 	add	r3,r3,r3
20027e90:	294016c4 	addi	r5,r5,91
20027e94:	003fb406 	br	20027d68 <_gp+0xfffe8808>
20027e98:	280bd0ba 	srai	r5,r5,2
20027e9c:	00c00044 	movi	r3,1
20027ea0:	38800117 	ldw	r2,4(r7)
20027ea4:	194a983a 	sll	r5,r3,r5
20027ea8:	2007883a 	mov	r3,r4
20027eac:	2884b03a 	or	r2,r5,r2
20027eb0:	38800115 	stw	r2,4(r7)
20027eb4:	003fbb06 	br	20027da4 <_gp+0xfffe8844>
20027eb8:	21800515 	stw	r6,20(r4)
20027ebc:	21800415 	stw	r6,16(r4)
20027ec0:	10c00054 	ori	r3,r2,1
20027ec4:	31c00315 	stw	r7,12(r6)
20027ec8:	31c00215 	stw	r7,8(r6)
20027ecc:	30c00115 	stw	r3,4(r6)
20027ed0:	308d883a 	add	r6,r6,r2
20027ed4:	30800015 	stw	r2,0(r6)
20027ed8:	003f9506 	br	20027d30 <_gp+0xfffe87d0>
20027edc:	00c01504 	movi	r3,84
20027ee0:	19400536 	bltu	r3,r5,20027ef8 <_free_r+0x2b8>
20027ee4:	100ad33a 	srli	r5,r2,12
20027ee8:	28c01bc4 	addi	r3,r5,111
20027eec:	18c7883a 	add	r3,r3,r3
20027ef0:	29401b84 	addi	r5,r5,110
20027ef4:	003f9c06 	br	20027d68 <_gp+0xfffe8808>
20027ef8:	00c05504 	movi	r3,340
20027efc:	19400536 	bltu	r3,r5,20027f14 <_free_r+0x2d4>
20027f00:	100ad3fa 	srli	r5,r2,15
20027f04:	28c01e04 	addi	r3,r5,120
20027f08:	18c7883a 	add	r3,r3,r3
20027f0c:	29401dc4 	addi	r5,r5,119
20027f10:	003f9506 	br	20027d68 <_gp+0xfffe8808>
20027f14:	00c15504 	movi	r3,1364
20027f18:	19400536 	bltu	r3,r5,20027f30 <_free_r+0x2f0>
20027f1c:	100ad4ba 	srli	r5,r2,18
20027f20:	28c01f44 	addi	r3,r5,125
20027f24:	18c7883a 	add	r3,r3,r3
20027f28:	29401f04 	addi	r5,r5,124
20027f2c:	003f8e06 	br	20027d68 <_gp+0xfffe8808>
20027f30:	00c03f84 	movi	r3,254
20027f34:	01401f84 	movi	r5,126
20027f38:	003f8b06 	br	20027d68 <_gp+0xfffe8808>
20027f3c:	10c00054 	ori	r3,r2,1
20027f40:	30c00115 	stw	r3,4(r6)
20027f44:	308d883a 	add	r6,r6,r2
20027f48:	30800015 	stw	r2,0(r6)
20027f4c:	003f7806 	br	20027d30 <_gp+0xfffe87d0>

20027f50 <_fseek_r>:
20027f50:	0027f701 	jmpi	20027f70 <_fseeko_r>

20027f54 <fseek>:
20027f54:	008800f4 	movhi	r2,8195
20027f58:	109d5a04 	addi	r2,r2,30056
20027f5c:	300f883a 	mov	r7,r6
20027f60:	280d883a 	mov	r6,r5
20027f64:	200b883a 	mov	r5,r4
20027f68:	11000017 	ldw	r4,0(r2)
20027f6c:	0027f701 	jmpi	20027f70 <_fseeko_r>

20027f70 <_fseeko_r>:
20027f70:	deffe804 	addi	sp,sp,-96
20027f74:	dd401415 	stw	r21,80(sp)
20027f78:	dc801115 	stw	r18,68(sp)
20027f7c:	dc401015 	stw	r17,64(sp)
20027f80:	dc000f15 	stw	r16,60(sp)
20027f84:	dfc01715 	stw	ra,92(sp)
20027f88:	ddc01615 	stw	r23,88(sp)
20027f8c:	dd801515 	stw	r22,84(sp)
20027f90:	dd001315 	stw	r20,76(sp)
20027f94:	dcc01215 	stw	r19,72(sp)
20027f98:	2023883a 	mov	r17,r4
20027f9c:	2821883a 	mov	r16,r5
20027fa0:	302b883a 	mov	r21,r6
20027fa4:	3825883a 	mov	r18,r7
20027fa8:	20000226 	beq	r4,zero,20027fb4 <_fseeko_r+0x44>
20027fac:	20800e17 	ldw	r2,56(r4)
20027fb0:	10005a26 	beq	r2,zero,2002811c <_fseeko_r+0x1ac>
20027fb4:	8080030b 	ldhu	r2,12(r16)
20027fb8:	00c04204 	movi	r3,264
20027fbc:	1080420c 	andi	r2,r2,264
20027fc0:	10c05b26 	beq	r2,r3,20028130 <_fseeko_r+0x1c0>
20027fc4:	85000a17 	ldw	r20,40(r16)
20027fc8:	a000f626 	beq	r20,zero,200283a4 <_fseeko_r+0x434>
20027fcc:	00800044 	movi	r2,1
20027fd0:	90803e26 	beq	r18,r2,200280cc <_fseeko_r+0x15c>
20027fd4:	00800084 	movi	r2,2
20027fd8:	90801026 	beq	r18,r2,2002801c <_fseeko_r+0xac>
20027fdc:	90000f26 	beq	r18,zero,2002801c <_fseeko_r+0xac>
20027fe0:	00800584 	movi	r2,22
20027fe4:	88800015 	stw	r2,0(r17)
20027fe8:	04ffffc4 	movi	r19,-1
20027fec:	9805883a 	mov	r2,r19
20027ff0:	dfc01717 	ldw	ra,92(sp)
20027ff4:	ddc01617 	ldw	r23,88(sp)
20027ff8:	dd801517 	ldw	r22,84(sp)
20027ffc:	dd401417 	ldw	r21,80(sp)
20028000:	dd001317 	ldw	r20,76(sp)
20028004:	dcc01217 	ldw	r19,72(sp)
20028008:	dc801117 	ldw	r18,68(sp)
2002800c:	dc401017 	ldw	r17,64(sp)
20028010:	dc000f17 	ldw	r16,60(sp)
20028014:	dec01804 	addi	sp,sp,96
20028018:	f800283a 	ret
2002801c:	80800417 	ldw	r2,16(r16)
20028020:	002f883a 	mov	r23,zero
20028024:	0027883a 	mov	r19,zero
20028028:	1000cb26 	beq	r2,zero,20028358 <_fseeko_r+0x3e8>
2002802c:	8080030b 	ldhu	r2,12(r16)
20028030:	10c2068c 	andi	r3,r2,2074
20028034:	1800071e 	bne	r3,zero,20028054 <_fseeko_r+0xe4>
20028038:	10c1000c 	andi	r3,r2,1024
2002803c:	1800451e 	bne	r3,zero,20028154 <_fseeko_r+0x1e4>
20028040:	00c800f4 	movhi	r3,8195
20028044:	18e5de04 	addi	r3,r3,-26760
20028048:	a0c0b726 	beq	r20,r3,20028328 <_fseeko_r+0x3b8>
2002804c:	10820014 	ori	r2,r2,2048
20028050:	8080030d 	sth	r2,12(r16)
20028054:	800b883a 	mov	r5,r16
20028058:	8809883a 	mov	r4,r17
2002805c:	00272dc0 	call	200272dc <_fflush_r>
20028060:	1027883a 	mov	r19,r2
20028064:	103fe01e 	bne	r2,zero,20027fe8 <_gp+0xfffe8a88>
20028068:	81400717 	ldw	r5,28(r16)
2002806c:	900f883a 	mov	r7,r18
20028070:	a80d883a 	mov	r6,r21
20028074:	8809883a 	mov	r4,r17
20028078:	a03ee83a 	callr	r20
2002807c:	00ffffc4 	movi	r3,-1
20028080:	10ffd926 	beq	r2,r3,20027fe8 <_gp+0xfffe8a88>
20028084:	81400c17 	ldw	r5,48(r16)
20028088:	28000526 	beq	r5,zero,200280a0 <_fseeko_r+0x130>
2002808c:	80801004 	addi	r2,r16,64
20028090:	28800226 	beq	r5,r2,2002809c <_fseeko_r+0x12c>
20028094:	8809883a 	mov	r4,r17
20028098:	0027c400 	call	20027c40 <_free_r>
2002809c:	80000c15 	stw	zero,48(r16)
200280a0:	8080030b 	ldhu	r2,12(r16)
200280a4:	80c00417 	ldw	r3,16(r16)
200280a8:	80000115 	stw	zero,4(r16)
200280ac:	10bdf7cc 	andi	r2,r2,63455
200280b0:	80c00015 	stw	r3,0(r16)
200280b4:	8080030d 	sth	r2,12(r16)
200280b8:	01800204 	movi	r6,8
200280bc:	000b883a 	mov	r5,zero
200280c0:	81001704 	addi	r4,r16,92
200280c4:	00291ec0 	call	200291ec <memset>
200280c8:	003fc806 	br	20027fec <_gp+0xfffe8a8c>
200280cc:	800b883a 	mov	r5,r16
200280d0:	8809883a 	mov	r4,r17
200280d4:	00272dc0 	call	200272dc <_fflush_r>
200280d8:	8080030b 	ldhu	r2,12(r16)
200280dc:	10c4000c 	andi	r3,r2,4096
200280e0:	18008726 	beq	r3,zero,20028300 <_fseeko_r+0x390>
200280e4:	84c01417 	ldw	r19,80(r16)
200280e8:	10c0010c 	andi	r3,r2,4
200280ec:	1800431e 	bne	r3,zero,200281fc <_fseeko_r+0x28c>
200280f0:	1080020c 	andi	r2,r2,8
200280f4:	10008026 	beq	r2,zero,200282f8 <_fseeko_r+0x388>
200280f8:	80c00017 	ldw	r3,0(r16)
200280fc:	80800417 	ldw	r2,16(r16)
20028100:	18000226 	beq	r3,zero,2002810c <_fseeko_r+0x19c>
20028104:	1887c83a 	sub	r3,r3,r2
20028108:	98e7883a 	add	r19,r19,r3
2002810c:	aceb883a 	add	r21,r21,r19
20028110:	05c00044 	movi	r23,1
20028114:	0025883a 	mov	r18,zero
20028118:	003fc306 	br	20028028 <_gp+0xfffe8ac8>
2002811c:	00276b80 	call	200276b8 <__sinit>
20028120:	8080030b 	ldhu	r2,12(r16)
20028124:	00c04204 	movi	r3,264
20028128:	1080420c 	andi	r2,r2,264
2002812c:	10ffa51e 	bne	r2,r3,20027fc4 <_gp+0xfffe8a64>
20028130:	800b883a 	mov	r5,r16
20028134:	8809883a 	mov	r4,r17
20028138:	00272dc0 	call	200272dc <_fflush_r>
2002813c:	003fa106 	br	20027fc4 <_gp+0xfffe8a64>
20028140:	8080030b 	ldhu	r2,12(r16)
20028144:	00c10004 	movi	r3,1024
20028148:	80c01315 	stw	r3,76(r16)
2002814c:	10c4b03a 	or	r2,r2,r3
20028150:	8080030d 	sth	r2,12(r16)
20028154:	9000311e 	bne	r18,zero,2002821c <_fseeko_r+0x2ac>
20028158:	a82d883a 	mov	r22,r21
2002815c:	b800371e 	bne	r23,zero,2002823c <_fseeko_r+0x2cc>
20028160:	8080030b 	ldhu	r2,12(r16)
20028164:	1084000c 	andi	r2,r2,4096
20028168:	10007f26 	beq	r2,zero,20028368 <_fseeko_r+0x3f8>
2002816c:	80801417 	ldw	r2,80(r16)
20028170:	81800117 	ldw	r6,4(r16)
20028174:	81400c17 	ldw	r5,48(r16)
20028178:	11a7c83a 	sub	r19,r2,r6
2002817c:	28008226 	beq	r5,zero,20028388 <_fseeko_r+0x418>
20028180:	81c00f17 	ldw	r7,60(r16)
20028184:	99e7c83a 	sub	r19,r19,r7
20028188:	81000e17 	ldw	r4,56(r16)
2002818c:	80800417 	ldw	r2,16(r16)
20028190:	99a7883a 	add	r19,r19,r6
20028194:	2087c83a 	sub	r3,r4,r2
20028198:	98e7c83a 	sub	r19,r19,r3
2002819c:	38c7883a 	add	r3,r7,r3
200281a0:	b4c02b16 	blt	r22,r19,20028250 <_fseeko_r+0x2e0>
200281a4:	98c9883a 	add	r4,r19,r3
200281a8:	b100292e 	bgeu	r22,r4,20028250 <_fseeko_r+0x2e0>
200281ac:	b4e7c83a 	sub	r19,r22,r19
200281b0:	14c5883a 	add	r2,r2,r19
200281b4:	1ce7c83a 	sub	r19,r3,r19
200281b8:	80800015 	stw	r2,0(r16)
200281bc:	84c00115 	stw	r19,4(r16)
200281c0:	28000526 	beq	r5,zero,200281d8 <_fseeko_r+0x268>
200281c4:	80801004 	addi	r2,r16,64
200281c8:	28800226 	beq	r5,r2,200281d4 <_fseeko_r+0x264>
200281cc:	8809883a 	mov	r4,r17
200281d0:	0027c400 	call	20027c40 <_free_r>
200281d4:	80000c15 	stw	zero,48(r16)
200281d8:	8080030b 	ldhu	r2,12(r16)
200281dc:	01800204 	movi	r6,8
200281e0:	000b883a 	mov	r5,zero
200281e4:	10bff7cc 	andi	r2,r2,65503
200281e8:	8080030d 	sth	r2,12(r16)
200281ec:	81001704 	addi	r4,r16,92
200281f0:	00291ec0 	call	200291ec <memset>
200281f4:	0027883a 	mov	r19,zero
200281f8:	003f7c06 	br	20027fec <_gp+0xfffe8a8c>
200281fc:	80c00117 	ldw	r3,4(r16)
20028200:	80800c17 	ldw	r2,48(r16)
20028204:	98e7c83a 	sub	r19,r19,r3
20028208:	10003b26 	beq	r2,zero,200282f8 <_fseeko_r+0x388>
2002820c:	80c00f17 	ldw	r3,60(r16)
20028210:	80800417 	ldw	r2,16(r16)
20028214:	98e7c83a 	sub	r19,r19,r3
20028218:	003fbc06 	br	2002810c <_gp+0xfffe8bac>
2002821c:	8140038f 	ldh	r5,14(r16)
20028220:	d80d883a 	mov	r6,sp
20028224:	8809883a 	mov	r4,r17
20028228:	00283d00 	call	200283d0 <_fstat_r>
2002822c:	103f891e 	bne	r2,zero,20028054 <_gp+0xfffe8af4>
20028230:	dd800417 	ldw	r22,16(sp)
20028234:	adad883a 	add	r22,r21,r22
20028238:	b83fc926 	beq	r23,zero,20028160 <_gp+0xfffe8c00>
2002823c:	81400c17 	ldw	r5,48(r16)
20028240:	81800117 	ldw	r6,4(r16)
20028244:	28005026 	beq	r5,zero,20028388 <_fseeko_r+0x418>
20028248:	81c00f17 	ldw	r7,60(r16)
2002824c:	003fce06 	br	20028188 <_gp+0xfffe8c28>
20028250:	84c01317 	ldw	r19,76(r16)
20028254:	81400717 	ldw	r5,28(r16)
20028258:	000f883a 	mov	r7,zero
2002825c:	04e7c83a 	sub	r19,zero,r19
20028260:	9da6703a 	and	r19,r19,r22
20028264:	980d883a 	mov	r6,r19
20028268:	8809883a 	mov	r4,r17
2002826c:	a03ee83a 	callr	r20
20028270:	00ffffc4 	movi	r3,-1
20028274:	10ff7726 	beq	r2,r3,20028054 <_gp+0xfffe8af4>
20028278:	80800417 	ldw	r2,16(r16)
2002827c:	81400c17 	ldw	r5,48(r16)
20028280:	80000115 	stw	zero,4(r16)
20028284:	80800015 	stw	r2,0(r16)
20028288:	28000526 	beq	r5,zero,200282a0 <_fseeko_r+0x330>
2002828c:	80801004 	addi	r2,r16,64
20028290:	28800226 	beq	r5,r2,2002829c <_fseeko_r+0x32c>
20028294:	8809883a 	mov	r4,r17
20028298:	0027c400 	call	20027c40 <_free_r>
2002829c:	80000c15 	stw	zero,48(r16)
200282a0:	8080030b 	ldhu	r2,12(r16)
200282a4:	b4e7c83a 	sub	r19,r22,r19
200282a8:	10bff7cc 	andi	r2,r2,65503
200282ac:	8080030d 	sth	r2,12(r16)
200282b0:	98000b26 	beq	r19,zero,200282e0 <_fseeko_r+0x370>
200282b4:	800b883a 	mov	r5,r16
200282b8:	8809883a 	mov	r4,r17
200282bc:	00294780 	call	20029478 <__srefill_r>
200282c0:	103f641e 	bne	r2,zero,20028054 <_gp+0xfffe8af4>
200282c4:	80800117 	ldw	r2,4(r16)
200282c8:	14ff6236 	bltu	r2,r19,20028054 <_gp+0xfffe8af4>
200282cc:	80c00017 	ldw	r3,0(r16)
200282d0:	14c5c83a 	sub	r2,r2,r19
200282d4:	80800115 	stw	r2,4(r16)
200282d8:	1ce7883a 	add	r19,r3,r19
200282dc:	84c00015 	stw	r19,0(r16)
200282e0:	01800204 	movi	r6,8
200282e4:	000b883a 	mov	r5,zero
200282e8:	81001704 	addi	r4,r16,92
200282ec:	00291ec0 	call	200291ec <memset>
200282f0:	0027883a 	mov	r19,zero
200282f4:	003f3d06 	br	20027fec <_gp+0xfffe8a8c>
200282f8:	80800417 	ldw	r2,16(r16)
200282fc:	003f8306 	br	2002810c <_gp+0xfffe8bac>
20028300:	81400717 	ldw	r5,28(r16)
20028304:	900f883a 	mov	r7,r18
20028308:	000d883a 	mov	r6,zero
2002830c:	8809883a 	mov	r4,r17
20028310:	a03ee83a 	callr	r20
20028314:	1027883a 	mov	r19,r2
20028318:	00bfffc4 	movi	r2,-1
2002831c:	98bf3226 	beq	r19,r2,20027fe8 <_gp+0xfffe8a88>
20028320:	8080030b 	ldhu	r2,12(r16)
20028324:	003f7006 	br	200280e8 <_gp+0xfffe8b88>
20028328:	8140038f 	ldh	r5,14(r16)
2002832c:	283f4716 	blt	r5,zero,2002804c <_gp+0xfffe8aec>
20028330:	d80d883a 	mov	r6,sp
20028334:	8809883a 	mov	r4,r17
20028338:	00283d00 	call	200283d0 <_fstat_r>
2002833c:	1000041e 	bne	r2,zero,20028350 <_fseeko_r+0x3e0>
20028340:	d8800117 	ldw	r2,4(sp)
20028344:	00e00014 	movui	r3,32768
20028348:	10bc000c 	andi	r2,r2,61440
2002834c:	10ff7c26 	beq	r2,r3,20028140 <_gp+0xfffe8be0>
20028350:	8080030b 	ldhu	r2,12(r16)
20028354:	003f3d06 	br	2002804c <_gp+0xfffe8aec>
20028358:	800b883a 	mov	r5,r16
2002835c:	8809883a 	mov	r4,r17
20028360:	00286b40 	call	200286b4 <__smakebuf_r>
20028364:	003f3106 	br	2002802c <_gp+0xfffe8acc>
20028368:	81400717 	ldw	r5,28(r16)
2002836c:	01c00044 	movi	r7,1
20028370:	000d883a 	mov	r6,zero
20028374:	8809883a 	mov	r4,r17
20028378:	a03ee83a 	callr	r20
2002837c:	00ffffc4 	movi	r3,-1
20028380:	10ff7b1e 	bne	r2,r3,20028170 <_gp+0xfffe8c10>
20028384:	003f3306 	br	20028054 <_gp+0xfffe8af4>
20028388:	80c00017 	ldw	r3,0(r16)
2002838c:	80800417 	ldw	r2,16(r16)
20028390:	000b883a 	mov	r5,zero
20028394:	1887c83a 	sub	r3,r3,r2
20028398:	98e7c83a 	sub	r19,r19,r3
2002839c:	30c7883a 	add	r3,r6,r3
200283a0:	003f7f06 	br	200281a0 <_gp+0xfffe8c40>
200283a4:	00800744 	movi	r2,29
200283a8:	88800015 	stw	r2,0(r17)
200283ac:	04ffffc4 	movi	r19,-1
200283b0:	003f0e06 	br	20027fec <_gp+0xfffe8a8c>

200283b4 <fseeko>:
200283b4:	008800f4 	movhi	r2,8195
200283b8:	109d5a04 	addi	r2,r2,30056
200283bc:	300f883a 	mov	r7,r6
200283c0:	280d883a 	mov	r6,r5
200283c4:	200b883a 	mov	r5,r4
200283c8:	11000017 	ldw	r4,0(r2)
200283cc:	0027f701 	jmpi	20027f70 <_fseeko_r>

200283d0 <_fstat_r>:
200283d0:	defffd04 	addi	sp,sp,-12
200283d4:	2805883a 	mov	r2,r5
200283d8:	dc000015 	stw	r16,0(sp)
200283dc:	04080134 	movhi	r16,8196
200283e0:	dc400115 	stw	r17,4(sp)
200283e4:	84245304 	addi	r16,r16,-28340
200283e8:	2023883a 	mov	r17,r4
200283ec:	300b883a 	mov	r5,r6
200283f0:	1009883a 	mov	r4,r2
200283f4:	dfc00215 	stw	ra,8(sp)
200283f8:	80000015 	stw	zero,0(r16)
200283fc:	00322c80 	call	200322c8 <fstat>
20028400:	00ffffc4 	movi	r3,-1
20028404:	10c00526 	beq	r2,r3,2002841c <_fstat_r+0x4c>
20028408:	dfc00217 	ldw	ra,8(sp)
2002840c:	dc400117 	ldw	r17,4(sp)
20028410:	dc000017 	ldw	r16,0(sp)
20028414:	dec00304 	addi	sp,sp,12
20028418:	f800283a 	ret
2002841c:	80c00017 	ldw	r3,0(r16)
20028420:	183ff926 	beq	r3,zero,20028408 <_gp+0xfffe8ea8>
20028424:	88c00015 	stw	r3,0(r17)
20028428:	003ff706 	br	20028408 <_gp+0xfffe8ea8>

2002842c <_fwalk>:
2002842c:	defff704 	addi	sp,sp,-36
20028430:	dd000415 	stw	r20,16(sp)
20028434:	dfc00815 	stw	ra,32(sp)
20028438:	ddc00715 	stw	r23,28(sp)
2002843c:	dd800615 	stw	r22,24(sp)
20028440:	dd400515 	stw	r21,20(sp)
20028444:	dcc00315 	stw	r19,12(sp)
20028448:	dc800215 	stw	r18,8(sp)
2002844c:	dc400115 	stw	r17,4(sp)
20028450:	dc000015 	stw	r16,0(sp)
20028454:	2500b804 	addi	r20,r4,736
20028458:	a0002326 	beq	r20,zero,200284e8 <_fwalk+0xbc>
2002845c:	282b883a 	mov	r21,r5
20028460:	002f883a 	mov	r23,zero
20028464:	05800044 	movi	r22,1
20028468:	04ffffc4 	movi	r19,-1
2002846c:	a4400117 	ldw	r17,4(r20)
20028470:	a4800217 	ldw	r18,8(r20)
20028474:	8c7fffc4 	addi	r17,r17,-1
20028478:	88000d16 	blt	r17,zero,200284b0 <_fwalk+0x84>
2002847c:	94000304 	addi	r16,r18,12
20028480:	94800384 	addi	r18,r18,14
20028484:	8080000b 	ldhu	r2,0(r16)
20028488:	8c7fffc4 	addi	r17,r17,-1
2002848c:	813ffd04 	addi	r4,r16,-12
20028490:	b080042e 	bgeu	r22,r2,200284a4 <_fwalk+0x78>
20028494:	9080000f 	ldh	r2,0(r18)
20028498:	14c00226 	beq	r2,r19,200284a4 <_fwalk+0x78>
2002849c:	a83ee83a 	callr	r21
200284a0:	b8aeb03a 	or	r23,r23,r2
200284a4:	84001a04 	addi	r16,r16,104
200284a8:	94801a04 	addi	r18,r18,104
200284ac:	8cfff51e 	bne	r17,r19,20028484 <_gp+0xfffe8f24>
200284b0:	a5000017 	ldw	r20,0(r20)
200284b4:	a03fed1e 	bne	r20,zero,2002846c <_gp+0xfffe8f0c>
200284b8:	b805883a 	mov	r2,r23
200284bc:	dfc00817 	ldw	ra,32(sp)
200284c0:	ddc00717 	ldw	r23,28(sp)
200284c4:	dd800617 	ldw	r22,24(sp)
200284c8:	dd400517 	ldw	r21,20(sp)
200284cc:	dd000417 	ldw	r20,16(sp)
200284d0:	dcc00317 	ldw	r19,12(sp)
200284d4:	dc800217 	ldw	r18,8(sp)
200284d8:	dc400117 	ldw	r17,4(sp)
200284dc:	dc000017 	ldw	r16,0(sp)
200284e0:	dec00904 	addi	sp,sp,36
200284e4:	f800283a 	ret
200284e8:	002f883a 	mov	r23,zero
200284ec:	003ff206 	br	200284b8 <_gp+0xfffe8f58>

200284f0 <_fwalk_reent>:
200284f0:	defff704 	addi	sp,sp,-36
200284f4:	dd000415 	stw	r20,16(sp)
200284f8:	dfc00815 	stw	ra,32(sp)
200284fc:	ddc00715 	stw	r23,28(sp)
20028500:	dd800615 	stw	r22,24(sp)
20028504:	dd400515 	stw	r21,20(sp)
20028508:	dcc00315 	stw	r19,12(sp)
2002850c:	dc800215 	stw	r18,8(sp)
20028510:	dc400115 	stw	r17,4(sp)
20028514:	dc000015 	stw	r16,0(sp)
20028518:	2500b804 	addi	r20,r4,736
2002851c:	a0002326 	beq	r20,zero,200285ac <_fwalk_reent+0xbc>
20028520:	282b883a 	mov	r21,r5
20028524:	2027883a 	mov	r19,r4
20028528:	002f883a 	mov	r23,zero
2002852c:	05800044 	movi	r22,1
20028530:	04bfffc4 	movi	r18,-1
20028534:	a4400117 	ldw	r17,4(r20)
20028538:	a4000217 	ldw	r16,8(r20)
2002853c:	8c7fffc4 	addi	r17,r17,-1
20028540:	88000c16 	blt	r17,zero,20028574 <_fwalk_reent+0x84>
20028544:	84000304 	addi	r16,r16,12
20028548:	8080000b 	ldhu	r2,0(r16)
2002854c:	8c7fffc4 	addi	r17,r17,-1
20028550:	817ffd04 	addi	r5,r16,-12
20028554:	b080052e 	bgeu	r22,r2,2002856c <_fwalk_reent+0x7c>
20028558:	8080008f 	ldh	r2,2(r16)
2002855c:	9809883a 	mov	r4,r19
20028560:	14800226 	beq	r2,r18,2002856c <_fwalk_reent+0x7c>
20028564:	a83ee83a 	callr	r21
20028568:	b8aeb03a 	or	r23,r23,r2
2002856c:	84001a04 	addi	r16,r16,104
20028570:	8cbff51e 	bne	r17,r18,20028548 <_gp+0xfffe8fe8>
20028574:	a5000017 	ldw	r20,0(r20)
20028578:	a03fee1e 	bne	r20,zero,20028534 <_gp+0xfffe8fd4>
2002857c:	b805883a 	mov	r2,r23
20028580:	dfc00817 	ldw	ra,32(sp)
20028584:	ddc00717 	ldw	r23,28(sp)
20028588:	dd800617 	ldw	r22,24(sp)
2002858c:	dd400517 	ldw	r21,20(sp)
20028590:	dd000417 	ldw	r20,16(sp)
20028594:	dcc00317 	ldw	r19,12(sp)
20028598:	dc800217 	ldw	r18,8(sp)
2002859c:	dc400117 	ldw	r17,4(sp)
200285a0:	dc000017 	ldw	r16,0(sp)
200285a4:	dec00904 	addi	sp,sp,36
200285a8:	f800283a 	ret
200285ac:	002f883a 	mov	r23,zero
200285b0:	003ff206 	br	2002857c <_gp+0xfffe901c>

200285b4 <_fwrite_r>:
200285b4:	defff504 	addi	sp,sp,-44
200285b8:	dc800815 	stw	r18,32(sp)
200285bc:	39a5383a 	mul	r18,r7,r6
200285c0:	d8800304 	addi	r2,sp,12
200285c4:	d8800015 	stw	r2,0(sp)
200285c8:	00800044 	movi	r2,1
200285cc:	dcc00915 	stw	r19,36(sp)
200285d0:	dc400715 	stw	r17,28(sp)
200285d4:	dc000615 	stw	r16,24(sp)
200285d8:	d9400315 	stw	r5,12(sp)
200285dc:	dfc00a15 	stw	ra,40(sp)
200285e0:	dc800415 	stw	r18,16(sp)
200285e4:	dc800215 	stw	r18,8(sp)
200285e8:	d8800115 	stw	r2,4(sp)
200285ec:	3027883a 	mov	r19,r6
200285f0:	3821883a 	mov	r16,r7
200285f4:	2023883a 	mov	r17,r4
200285f8:	d9400b17 	ldw	r5,44(sp)
200285fc:	20000226 	beq	r4,zero,20028608 <_fwrite_r+0x54>
20028600:	20800e17 	ldw	r2,56(r4)
20028604:	10001a26 	beq	r2,zero,20028670 <_fwrite_r+0xbc>
20028608:	2880030b 	ldhu	r2,12(r5)
2002860c:	10c8000c 	andi	r3,r2,8192
20028610:	1800061e 	bne	r3,zero,2002862c <_fwrite_r+0x78>
20028614:	29001917 	ldw	r4,100(r5)
20028618:	00f7ffc4 	movi	r3,-8193
2002861c:	10880014 	ori	r2,r2,8192
20028620:	20c6703a 	and	r3,r4,r3
20028624:	2880030d 	sth	r2,12(r5)
20028628:	28c01915 	stw	r3,100(r5)
2002862c:	d80d883a 	mov	r6,sp
20028630:	8809883a 	mov	r4,r17
20028634:	002d6180 	call	2002d618 <__sfvwrite_r>
20028638:	10000b26 	beq	r2,zero,20028668 <_fwrite_r+0xb4>
2002863c:	d9000217 	ldw	r4,8(sp)
20028640:	980b883a 	mov	r5,r19
20028644:	9109c83a 	sub	r4,r18,r4
20028648:	00248600 	call	20024860 <__udivsi3>
2002864c:	dfc00a17 	ldw	ra,40(sp)
20028650:	dcc00917 	ldw	r19,36(sp)
20028654:	dc800817 	ldw	r18,32(sp)
20028658:	dc400717 	ldw	r17,28(sp)
2002865c:	dc000617 	ldw	r16,24(sp)
20028660:	dec00b04 	addi	sp,sp,44
20028664:	f800283a 	ret
20028668:	8005883a 	mov	r2,r16
2002866c:	003ff706 	br	2002864c <_gp+0xfffe90ec>
20028670:	d9400515 	stw	r5,20(sp)
20028674:	00276b80 	call	200276b8 <__sinit>
20028678:	d9400517 	ldw	r5,20(sp)
2002867c:	003fe206 	br	20028608 <_gp+0xfffe90a8>

20028680 <fwrite>:
20028680:	defffe04 	addi	sp,sp,-8
20028684:	008800f4 	movhi	r2,8195
20028688:	d9c00015 	stw	r7,0(sp)
2002868c:	109d5a04 	addi	r2,r2,30056
20028690:	300f883a 	mov	r7,r6
20028694:	280d883a 	mov	r6,r5
20028698:	200b883a 	mov	r5,r4
2002869c:	11000017 	ldw	r4,0(r2)
200286a0:	dfc00115 	stw	ra,4(sp)
200286a4:	00285b40 	call	200285b4 <_fwrite_r>
200286a8:	dfc00117 	ldw	ra,4(sp)
200286ac:	dec00204 	addi	sp,sp,8
200286b0:	f800283a 	ret

200286b4 <__smakebuf_r>:
200286b4:	2880030b 	ldhu	r2,12(r5)
200286b8:	10c0008c 	andi	r3,r2,2
200286bc:	1800411e 	bne	r3,zero,200287c4 <__smakebuf_r+0x110>
200286c0:	deffec04 	addi	sp,sp,-80
200286c4:	dc000f15 	stw	r16,60(sp)
200286c8:	2821883a 	mov	r16,r5
200286cc:	2940038f 	ldh	r5,14(r5)
200286d0:	dc401015 	stw	r17,64(sp)
200286d4:	dfc01315 	stw	ra,76(sp)
200286d8:	dcc01215 	stw	r19,72(sp)
200286dc:	dc801115 	stw	r18,68(sp)
200286e0:	2023883a 	mov	r17,r4
200286e4:	28001c16 	blt	r5,zero,20028758 <__smakebuf_r+0xa4>
200286e8:	d80d883a 	mov	r6,sp
200286ec:	00283d00 	call	200283d0 <_fstat_r>
200286f0:	10001816 	blt	r2,zero,20028754 <__smakebuf_r+0xa0>
200286f4:	d8800117 	ldw	r2,4(sp)
200286f8:	00e00014 	movui	r3,32768
200286fc:	10bc000c 	andi	r2,r2,61440
20028700:	14c80020 	cmpeqi	r19,r2,8192
20028704:	10c03726 	beq	r2,r3,200287e4 <__smakebuf_r+0x130>
20028708:	80c0030b 	ldhu	r3,12(r16)
2002870c:	18c20014 	ori	r3,r3,2048
20028710:	80c0030d 	sth	r3,12(r16)
20028714:	00c80004 	movi	r3,8192
20028718:	10c0521e 	bne	r2,r3,20028864 <__smakebuf_r+0x1b0>
2002871c:	8140038f 	ldh	r5,14(r16)
20028720:	8809883a 	mov	r4,r17
20028724:	002dad40 	call	2002dad4 <_isatty_r>
20028728:	10004c26 	beq	r2,zero,2002885c <__smakebuf_r+0x1a8>
2002872c:	8080030b 	ldhu	r2,12(r16)
20028730:	80c010c4 	addi	r3,r16,67
20028734:	80c00015 	stw	r3,0(r16)
20028738:	10800054 	ori	r2,r2,1
2002873c:	8080030d 	sth	r2,12(r16)
20028740:	00800044 	movi	r2,1
20028744:	80c00415 	stw	r3,16(r16)
20028748:	80800515 	stw	r2,20(r16)
2002874c:	04810004 	movi	r18,1024
20028750:	00000706 	br	20028770 <__smakebuf_r+0xbc>
20028754:	8080030b 	ldhu	r2,12(r16)
20028758:	10c0200c 	andi	r3,r2,128
2002875c:	18001f1e 	bne	r3,zero,200287dc <__smakebuf_r+0x128>
20028760:	04810004 	movi	r18,1024
20028764:	10820014 	ori	r2,r2,2048
20028768:	8080030d 	sth	r2,12(r16)
2002876c:	0027883a 	mov	r19,zero
20028770:	900b883a 	mov	r5,r18
20028774:	8809883a 	mov	r4,r17
20028778:	00288980 	call	20028898 <_malloc_r>
2002877c:	10002c26 	beq	r2,zero,20028830 <__smakebuf_r+0x17c>
20028780:	80c0030b 	ldhu	r3,12(r16)
20028784:	010800b4 	movhi	r4,8194
20028788:	211cdc04 	addi	r4,r4,29552
2002878c:	89000f15 	stw	r4,60(r17)
20028790:	18c02014 	ori	r3,r3,128
20028794:	80c0030d 	sth	r3,12(r16)
20028798:	80800015 	stw	r2,0(r16)
2002879c:	80800415 	stw	r2,16(r16)
200287a0:	84800515 	stw	r18,20(r16)
200287a4:	98001a1e 	bne	r19,zero,20028810 <__smakebuf_r+0x15c>
200287a8:	dfc01317 	ldw	ra,76(sp)
200287ac:	dcc01217 	ldw	r19,72(sp)
200287b0:	dc801117 	ldw	r18,68(sp)
200287b4:	dc401017 	ldw	r17,64(sp)
200287b8:	dc000f17 	ldw	r16,60(sp)
200287bc:	dec01404 	addi	sp,sp,80
200287c0:	f800283a 	ret
200287c4:	288010c4 	addi	r2,r5,67
200287c8:	28800015 	stw	r2,0(r5)
200287cc:	28800415 	stw	r2,16(r5)
200287d0:	00800044 	movi	r2,1
200287d4:	28800515 	stw	r2,20(r5)
200287d8:	f800283a 	ret
200287dc:	04801004 	movi	r18,64
200287e0:	003fe006 	br	20028764 <_gp+0xfffe9204>
200287e4:	81000a17 	ldw	r4,40(r16)
200287e8:	00c800f4 	movhi	r3,8195
200287ec:	18e5de04 	addi	r3,r3,-26760
200287f0:	20ffc51e 	bne	r4,r3,20028708 <_gp+0xfffe91a8>
200287f4:	8080030b 	ldhu	r2,12(r16)
200287f8:	04810004 	movi	r18,1024
200287fc:	84801315 	stw	r18,76(r16)
20028800:	1484b03a 	or	r2,r2,r18
20028804:	8080030d 	sth	r2,12(r16)
20028808:	0027883a 	mov	r19,zero
2002880c:	003fd806 	br	20028770 <_gp+0xfffe9210>
20028810:	8140038f 	ldh	r5,14(r16)
20028814:	8809883a 	mov	r4,r17
20028818:	002dad40 	call	2002dad4 <_isatty_r>
2002881c:	103fe226 	beq	r2,zero,200287a8 <_gp+0xfffe9248>
20028820:	8080030b 	ldhu	r2,12(r16)
20028824:	10800054 	ori	r2,r2,1
20028828:	8080030d 	sth	r2,12(r16)
2002882c:	003fde06 	br	200287a8 <_gp+0xfffe9248>
20028830:	8080030b 	ldhu	r2,12(r16)
20028834:	10c0800c 	andi	r3,r2,512
20028838:	183fdb1e 	bne	r3,zero,200287a8 <_gp+0xfffe9248>
2002883c:	10800094 	ori	r2,r2,2
20028840:	80c010c4 	addi	r3,r16,67
20028844:	8080030d 	sth	r2,12(r16)
20028848:	00800044 	movi	r2,1
2002884c:	80c00015 	stw	r3,0(r16)
20028850:	80c00415 	stw	r3,16(r16)
20028854:	80800515 	stw	r2,20(r16)
20028858:	003fd306 	br	200287a8 <_gp+0xfffe9248>
2002885c:	04810004 	movi	r18,1024
20028860:	003fc306 	br	20028770 <_gp+0xfffe9210>
20028864:	0027883a 	mov	r19,zero
20028868:	04810004 	movi	r18,1024
2002886c:	003fc006 	br	20028770 <_gp+0xfffe9210>

20028870 <malloc>:
20028870:	008800f4 	movhi	r2,8195
20028874:	109d5a04 	addi	r2,r2,30056
20028878:	200b883a 	mov	r5,r4
2002887c:	11000017 	ldw	r4,0(r2)
20028880:	00288981 	jmpi	20028898 <_malloc_r>

20028884 <free>:
20028884:	008800f4 	movhi	r2,8195
20028888:	109d5a04 	addi	r2,r2,30056
2002888c:	200b883a 	mov	r5,r4
20028890:	11000017 	ldw	r4,0(r2)
20028894:	0027c401 	jmpi	20027c40 <_free_r>

20028898 <_malloc_r>:
20028898:	defff504 	addi	sp,sp,-44
2002889c:	dc800315 	stw	r18,12(sp)
200288a0:	dfc00a15 	stw	ra,40(sp)
200288a4:	df000915 	stw	fp,36(sp)
200288a8:	ddc00815 	stw	r23,32(sp)
200288ac:	dd800715 	stw	r22,28(sp)
200288b0:	dd400615 	stw	r21,24(sp)
200288b4:	dd000515 	stw	r20,20(sp)
200288b8:	dcc00415 	stw	r19,16(sp)
200288bc:	dc400215 	stw	r17,8(sp)
200288c0:	dc000115 	stw	r16,4(sp)
200288c4:	288002c4 	addi	r2,r5,11
200288c8:	00c00584 	movi	r3,22
200288cc:	2025883a 	mov	r18,r4
200288d0:	18807f2e 	bgeu	r3,r2,20028ad0 <_malloc_r+0x238>
200288d4:	047ffe04 	movi	r17,-8
200288d8:	1462703a 	and	r17,r2,r17
200288dc:	8800a316 	blt	r17,zero,20028b6c <_malloc_r+0x2d4>
200288e0:	8940a236 	bltu	r17,r5,20028b6c <_malloc_r+0x2d4>
200288e4:	003285c0 	call	2003285c <__malloc_lock>
200288e8:	00807dc4 	movi	r2,503
200288ec:	1441e92e 	bgeu	r2,r17,20029094 <_malloc_r+0x7fc>
200288f0:	8804d27a 	srli	r2,r17,9
200288f4:	1000a126 	beq	r2,zero,20028b7c <_malloc_r+0x2e4>
200288f8:	00c00104 	movi	r3,4
200288fc:	18811e36 	bltu	r3,r2,20028d78 <_malloc_r+0x4e0>
20028900:	8804d1ba 	srli	r2,r17,6
20028904:	12000e44 	addi	r8,r2,57
20028908:	11c00e04 	addi	r7,r2,56
2002890c:	4209883a 	add	r4,r8,r8
20028910:	04c800f4 	movhi	r19,8195
20028914:	2109883a 	add	r4,r4,r4
20028918:	9cd7ac04 	addi	r19,r19,24240
2002891c:	2109883a 	add	r4,r4,r4
20028920:	9909883a 	add	r4,r19,r4
20028924:	24000117 	ldw	r16,4(r4)
20028928:	213ffe04 	addi	r4,r4,-8
2002892c:	24009726 	beq	r4,r16,20028b8c <_malloc_r+0x2f4>
20028930:	80800117 	ldw	r2,4(r16)
20028934:	01bfff04 	movi	r6,-4
20028938:	014003c4 	movi	r5,15
2002893c:	1184703a 	and	r2,r2,r6
20028940:	1447c83a 	sub	r3,r2,r17
20028944:	28c00716 	blt	r5,r3,20028964 <_malloc_r+0xcc>
20028948:	1800920e 	bge	r3,zero,20028b94 <_malloc_r+0x2fc>
2002894c:	84000317 	ldw	r16,12(r16)
20028950:	24008e26 	beq	r4,r16,20028b8c <_malloc_r+0x2f4>
20028954:	80800117 	ldw	r2,4(r16)
20028958:	1184703a 	and	r2,r2,r6
2002895c:	1447c83a 	sub	r3,r2,r17
20028960:	28fff90e 	bge	r5,r3,20028948 <_gp+0xfffe93e8>
20028964:	3809883a 	mov	r4,r7
20028968:	018800f4 	movhi	r6,8195
2002896c:	9c000417 	ldw	r16,16(r19)
20028970:	3197ac04 	addi	r6,r6,24240
20028974:	32000204 	addi	r8,r6,8
20028978:	82013426 	beq	r16,r8,20028e4c <_malloc_r+0x5b4>
2002897c:	80c00117 	ldw	r3,4(r16)
20028980:	00bfff04 	movi	r2,-4
20028984:	188e703a 	and	r7,r3,r2
20028988:	3c45c83a 	sub	r2,r7,r17
2002898c:	00c003c4 	movi	r3,15
20028990:	18811f16 	blt	r3,r2,20028e10 <_malloc_r+0x578>
20028994:	32000515 	stw	r8,20(r6)
20028998:	32000415 	stw	r8,16(r6)
2002899c:	10007f0e 	bge	r2,zero,20028b9c <_malloc_r+0x304>
200289a0:	00807fc4 	movi	r2,511
200289a4:	11c0fd36 	bltu	r2,r7,20028d9c <_malloc_r+0x504>
200289a8:	3806d0fa 	srli	r3,r7,3
200289ac:	01c00044 	movi	r7,1
200289b0:	30800117 	ldw	r2,4(r6)
200289b4:	19400044 	addi	r5,r3,1
200289b8:	294b883a 	add	r5,r5,r5
200289bc:	1807d0ba 	srai	r3,r3,2
200289c0:	294b883a 	add	r5,r5,r5
200289c4:	294b883a 	add	r5,r5,r5
200289c8:	298b883a 	add	r5,r5,r6
200289cc:	38c6983a 	sll	r3,r7,r3
200289d0:	29c00017 	ldw	r7,0(r5)
200289d4:	2a7ffe04 	addi	r9,r5,-8
200289d8:	1886b03a 	or	r3,r3,r2
200289dc:	82400315 	stw	r9,12(r16)
200289e0:	81c00215 	stw	r7,8(r16)
200289e4:	30c00115 	stw	r3,4(r6)
200289e8:	2c000015 	stw	r16,0(r5)
200289ec:	3c000315 	stw	r16,12(r7)
200289f0:	2005d0ba 	srai	r2,r4,2
200289f4:	01400044 	movi	r5,1
200289f8:	288a983a 	sll	r5,r5,r2
200289fc:	19406f36 	bltu	r3,r5,20028bbc <_malloc_r+0x324>
20028a00:	28c4703a 	and	r2,r5,r3
20028a04:	10000a1e 	bne	r2,zero,20028a30 <_malloc_r+0x198>
20028a08:	00bfff04 	movi	r2,-4
20028a0c:	294b883a 	add	r5,r5,r5
20028a10:	2088703a 	and	r4,r4,r2
20028a14:	28c4703a 	and	r2,r5,r3
20028a18:	21000104 	addi	r4,r4,4
20028a1c:	1000041e 	bne	r2,zero,20028a30 <_malloc_r+0x198>
20028a20:	294b883a 	add	r5,r5,r5
20028a24:	28c4703a 	and	r2,r5,r3
20028a28:	21000104 	addi	r4,r4,4
20028a2c:	103ffc26 	beq	r2,zero,20028a20 <_gp+0xfffe94c0>
20028a30:	02bfff04 	movi	r10,-4
20028a34:	024003c4 	movi	r9,15
20028a38:	21800044 	addi	r6,r4,1
20028a3c:	318d883a 	add	r6,r6,r6
20028a40:	318d883a 	add	r6,r6,r6
20028a44:	318d883a 	add	r6,r6,r6
20028a48:	998d883a 	add	r6,r19,r6
20028a4c:	333ffe04 	addi	r12,r6,-8
20028a50:	2017883a 	mov	r11,r4
20028a54:	31800104 	addi	r6,r6,4
20028a58:	34000017 	ldw	r16,0(r6)
20028a5c:	31fffd04 	addi	r7,r6,-12
20028a60:	81c0041e 	bne	r16,r7,20028a74 <_malloc_r+0x1dc>
20028a64:	0000fb06 	br	20028e54 <_malloc_r+0x5bc>
20028a68:	1801030e 	bge	r3,zero,20028e78 <_malloc_r+0x5e0>
20028a6c:	84000317 	ldw	r16,12(r16)
20028a70:	81c0f826 	beq	r16,r7,20028e54 <_malloc_r+0x5bc>
20028a74:	80800117 	ldw	r2,4(r16)
20028a78:	1284703a 	and	r2,r2,r10
20028a7c:	1447c83a 	sub	r3,r2,r17
20028a80:	48fff90e 	bge	r9,r3,20028a68 <_gp+0xfffe9508>
20028a84:	80800317 	ldw	r2,12(r16)
20028a88:	81000217 	ldw	r4,8(r16)
20028a8c:	89400054 	ori	r5,r17,1
20028a90:	81400115 	stw	r5,4(r16)
20028a94:	20800315 	stw	r2,12(r4)
20028a98:	11000215 	stw	r4,8(r2)
20028a9c:	8463883a 	add	r17,r16,r17
20028aa0:	9c400515 	stw	r17,20(r19)
20028aa4:	9c400415 	stw	r17,16(r19)
20028aa8:	18800054 	ori	r2,r3,1
20028aac:	88800115 	stw	r2,4(r17)
20028ab0:	8a000315 	stw	r8,12(r17)
20028ab4:	8a000215 	stw	r8,8(r17)
20028ab8:	88e3883a 	add	r17,r17,r3
20028abc:	88c00015 	stw	r3,0(r17)
20028ac0:	9009883a 	mov	r4,r18
20028ac4:	00328800 	call	20032880 <__malloc_unlock>
20028ac8:	80800204 	addi	r2,r16,8
20028acc:	00001b06 	br	20028b3c <_malloc_r+0x2a4>
20028ad0:	04400404 	movi	r17,16
20028ad4:	89402536 	bltu	r17,r5,20028b6c <_malloc_r+0x2d4>
20028ad8:	003285c0 	call	2003285c <__malloc_lock>
20028adc:	00800184 	movi	r2,6
20028ae0:	01000084 	movi	r4,2
20028ae4:	04c800f4 	movhi	r19,8195
20028ae8:	1085883a 	add	r2,r2,r2
20028aec:	9cd7ac04 	addi	r19,r19,24240
20028af0:	1085883a 	add	r2,r2,r2
20028af4:	9885883a 	add	r2,r19,r2
20028af8:	14000117 	ldw	r16,4(r2)
20028afc:	10fffe04 	addi	r3,r2,-8
20028b00:	80c0d926 	beq	r16,r3,20028e68 <_malloc_r+0x5d0>
20028b04:	80c00117 	ldw	r3,4(r16)
20028b08:	81000317 	ldw	r4,12(r16)
20028b0c:	00bfff04 	movi	r2,-4
20028b10:	1884703a 	and	r2,r3,r2
20028b14:	81400217 	ldw	r5,8(r16)
20028b18:	8085883a 	add	r2,r16,r2
20028b1c:	10c00117 	ldw	r3,4(r2)
20028b20:	29000315 	stw	r4,12(r5)
20028b24:	21400215 	stw	r5,8(r4)
20028b28:	18c00054 	ori	r3,r3,1
20028b2c:	10c00115 	stw	r3,4(r2)
20028b30:	9009883a 	mov	r4,r18
20028b34:	00328800 	call	20032880 <__malloc_unlock>
20028b38:	80800204 	addi	r2,r16,8
20028b3c:	dfc00a17 	ldw	ra,40(sp)
20028b40:	df000917 	ldw	fp,36(sp)
20028b44:	ddc00817 	ldw	r23,32(sp)
20028b48:	dd800717 	ldw	r22,28(sp)
20028b4c:	dd400617 	ldw	r21,24(sp)
20028b50:	dd000517 	ldw	r20,20(sp)
20028b54:	dcc00417 	ldw	r19,16(sp)
20028b58:	dc800317 	ldw	r18,12(sp)
20028b5c:	dc400217 	ldw	r17,8(sp)
20028b60:	dc000117 	ldw	r16,4(sp)
20028b64:	dec00b04 	addi	sp,sp,44
20028b68:	f800283a 	ret
20028b6c:	00800304 	movi	r2,12
20028b70:	90800015 	stw	r2,0(r18)
20028b74:	0005883a 	mov	r2,zero
20028b78:	003ff006 	br	20028b3c <_gp+0xfffe95dc>
20028b7c:	01002004 	movi	r4,128
20028b80:	02001004 	movi	r8,64
20028b84:	01c00fc4 	movi	r7,63
20028b88:	003f6106 	br	20028910 <_gp+0xfffe93b0>
20028b8c:	4009883a 	mov	r4,r8
20028b90:	003f7506 	br	20028968 <_gp+0xfffe9408>
20028b94:	81000317 	ldw	r4,12(r16)
20028b98:	003fde06 	br	20028b14 <_gp+0xfffe95b4>
20028b9c:	81c5883a 	add	r2,r16,r7
20028ba0:	11400117 	ldw	r5,4(r2)
20028ba4:	9009883a 	mov	r4,r18
20028ba8:	29400054 	ori	r5,r5,1
20028bac:	11400115 	stw	r5,4(r2)
20028bb0:	00328800 	call	20032880 <__malloc_unlock>
20028bb4:	80800204 	addi	r2,r16,8
20028bb8:	003fe006 	br	20028b3c <_gp+0xfffe95dc>
20028bbc:	9c000217 	ldw	r16,8(r19)
20028bc0:	00bfff04 	movi	r2,-4
20028bc4:	85800117 	ldw	r22,4(r16)
20028bc8:	b0ac703a 	and	r22,r22,r2
20028bcc:	b4400336 	bltu	r22,r17,20028bdc <_malloc_r+0x344>
20028bd0:	b445c83a 	sub	r2,r22,r17
20028bd4:	00c003c4 	movi	r3,15
20028bd8:	18805d16 	blt	r3,r2,20028d50 <_malloc_r+0x4b8>
20028bdc:	05c800f4 	movhi	r23,8195
20028be0:	00880134 	movhi	r2,8196
20028be4:	10a45604 	addi	r2,r2,-28328
20028be8:	bddd5b04 	addi	r23,r23,30060
20028bec:	15400017 	ldw	r21,0(r2)
20028bf0:	b8c00017 	ldw	r3,0(r23)
20028bf4:	00bfffc4 	movi	r2,-1
20028bf8:	858d883a 	add	r6,r16,r22
20028bfc:	8d6b883a 	add	r21,r17,r21
20028c00:	1880ea26 	beq	r3,r2,20028fac <_malloc_r+0x714>
20028c04:	ad4403c4 	addi	r21,r21,4111
20028c08:	00bc0004 	movi	r2,-4096
20028c0c:	a8aa703a 	and	r21,r21,r2
20028c10:	a80b883a 	mov	r5,r21
20028c14:	9009883a 	mov	r4,r18
20028c18:	d9800015 	stw	r6,0(sp)
20028c1c:	002964c0 	call	2002964c <_sbrk_r>
20028c20:	1029883a 	mov	r20,r2
20028c24:	00bfffc4 	movi	r2,-1
20028c28:	d9800017 	ldw	r6,0(sp)
20028c2c:	a080e826 	beq	r20,r2,20028fd0 <_malloc_r+0x738>
20028c30:	a180a636 	bltu	r20,r6,20028ecc <_malloc_r+0x634>
20028c34:	07080134 	movhi	fp,8196
20028c38:	e7246004 	addi	fp,fp,-28288
20028c3c:	e0800017 	ldw	r2,0(fp)
20028c40:	a887883a 	add	r3,r21,r2
20028c44:	e0c00015 	stw	r3,0(fp)
20028c48:	3500e626 	beq	r6,r20,20028fe4 <_malloc_r+0x74c>
20028c4c:	b9000017 	ldw	r4,0(r23)
20028c50:	00bfffc4 	movi	r2,-1
20028c54:	2080ee26 	beq	r4,r2,20029010 <_malloc_r+0x778>
20028c58:	a185c83a 	sub	r2,r20,r6
20028c5c:	10c5883a 	add	r2,r2,r3
20028c60:	e0800015 	stw	r2,0(fp)
20028c64:	a0c001cc 	andi	r3,r20,7
20028c68:	1800bc26 	beq	r3,zero,20028f5c <_malloc_r+0x6c4>
20028c6c:	a0e9c83a 	sub	r20,r20,r3
20028c70:	00840204 	movi	r2,4104
20028c74:	a5000204 	addi	r20,r20,8
20028c78:	10c7c83a 	sub	r3,r2,r3
20028c7c:	a545883a 	add	r2,r20,r21
20028c80:	1083ffcc 	andi	r2,r2,4095
20028c84:	18abc83a 	sub	r21,r3,r2
20028c88:	a80b883a 	mov	r5,r21
20028c8c:	9009883a 	mov	r4,r18
20028c90:	002964c0 	call	2002964c <_sbrk_r>
20028c94:	00ffffc4 	movi	r3,-1
20028c98:	10c0e126 	beq	r2,r3,20029020 <_malloc_r+0x788>
20028c9c:	1505c83a 	sub	r2,r2,r20
20028ca0:	1545883a 	add	r2,r2,r21
20028ca4:	10800054 	ori	r2,r2,1
20028ca8:	e0c00017 	ldw	r3,0(fp)
20028cac:	9d000215 	stw	r20,8(r19)
20028cb0:	a0800115 	stw	r2,4(r20)
20028cb4:	a8c7883a 	add	r3,r21,r3
20028cb8:	e0c00015 	stw	r3,0(fp)
20028cbc:	84c00e26 	beq	r16,r19,20028cf8 <_malloc_r+0x460>
20028cc0:	018003c4 	movi	r6,15
20028cc4:	3580a72e 	bgeu	r6,r22,20028f64 <_malloc_r+0x6cc>
20028cc8:	81400117 	ldw	r5,4(r16)
20028ccc:	013ffe04 	movi	r4,-8
20028cd0:	b0bffd04 	addi	r2,r22,-12
20028cd4:	1104703a 	and	r2,r2,r4
20028cd8:	2900004c 	andi	r4,r5,1
20028cdc:	2088b03a 	or	r4,r4,r2
20028ce0:	81000115 	stw	r4,4(r16)
20028ce4:	01400144 	movi	r5,5
20028ce8:	8089883a 	add	r4,r16,r2
20028cec:	21400115 	stw	r5,4(r4)
20028cf0:	21400215 	stw	r5,8(r4)
20028cf4:	3080cd36 	bltu	r6,r2,2002902c <_malloc_r+0x794>
20028cf8:	00880134 	movhi	r2,8196
20028cfc:	10a45504 	addi	r2,r2,-28332
20028d00:	11000017 	ldw	r4,0(r2)
20028d04:	20c0012e 	bgeu	r4,r3,20028d0c <_malloc_r+0x474>
20028d08:	10c00015 	stw	r3,0(r2)
20028d0c:	00880134 	movhi	r2,8196
20028d10:	10a45404 	addi	r2,r2,-28336
20028d14:	11000017 	ldw	r4,0(r2)
20028d18:	9c000217 	ldw	r16,8(r19)
20028d1c:	20c0012e 	bgeu	r4,r3,20028d24 <_malloc_r+0x48c>
20028d20:	10c00015 	stw	r3,0(r2)
20028d24:	80c00117 	ldw	r3,4(r16)
20028d28:	00bfff04 	movi	r2,-4
20028d2c:	1886703a 	and	r3,r3,r2
20028d30:	1c45c83a 	sub	r2,r3,r17
20028d34:	1c400236 	bltu	r3,r17,20028d40 <_malloc_r+0x4a8>
20028d38:	00c003c4 	movi	r3,15
20028d3c:	18800416 	blt	r3,r2,20028d50 <_malloc_r+0x4b8>
20028d40:	9009883a 	mov	r4,r18
20028d44:	00328800 	call	20032880 <__malloc_unlock>
20028d48:	0005883a 	mov	r2,zero
20028d4c:	003f7b06 	br	20028b3c <_gp+0xfffe95dc>
20028d50:	88c00054 	ori	r3,r17,1
20028d54:	80c00115 	stw	r3,4(r16)
20028d58:	8463883a 	add	r17,r16,r17
20028d5c:	10800054 	ori	r2,r2,1
20028d60:	9c400215 	stw	r17,8(r19)
20028d64:	88800115 	stw	r2,4(r17)
20028d68:	9009883a 	mov	r4,r18
20028d6c:	00328800 	call	20032880 <__malloc_unlock>
20028d70:	80800204 	addi	r2,r16,8
20028d74:	003f7106 	br	20028b3c <_gp+0xfffe95dc>
20028d78:	00c00504 	movi	r3,20
20028d7c:	18804a2e 	bgeu	r3,r2,20028ea8 <_malloc_r+0x610>
20028d80:	00c01504 	movi	r3,84
20028d84:	18806e36 	bltu	r3,r2,20028f40 <_malloc_r+0x6a8>
20028d88:	8804d33a 	srli	r2,r17,12
20028d8c:	12001bc4 	addi	r8,r2,111
20028d90:	11c01b84 	addi	r7,r2,110
20028d94:	4209883a 	add	r4,r8,r8
20028d98:	003edd06 	br	20028910 <_gp+0xfffe93b0>
20028d9c:	3804d27a 	srli	r2,r7,9
20028da0:	00c00104 	movi	r3,4
20028da4:	1880442e 	bgeu	r3,r2,20028eb8 <_malloc_r+0x620>
20028da8:	00c00504 	movi	r3,20
20028dac:	18808136 	bltu	r3,r2,20028fb4 <_malloc_r+0x71c>
20028db0:	11401704 	addi	r5,r2,92
20028db4:	10c016c4 	addi	r3,r2,91
20028db8:	294b883a 	add	r5,r5,r5
20028dbc:	294b883a 	add	r5,r5,r5
20028dc0:	294b883a 	add	r5,r5,r5
20028dc4:	994b883a 	add	r5,r19,r5
20028dc8:	28800017 	ldw	r2,0(r5)
20028dcc:	018800f4 	movhi	r6,8195
20028dd0:	297ffe04 	addi	r5,r5,-8
20028dd4:	3197ac04 	addi	r6,r6,24240
20028dd8:	28806526 	beq	r5,r2,20028f70 <_malloc_r+0x6d8>
20028ddc:	01bfff04 	movi	r6,-4
20028de0:	10c00117 	ldw	r3,4(r2)
20028de4:	1986703a 	and	r3,r3,r6
20028de8:	38c0022e 	bgeu	r7,r3,20028df4 <_malloc_r+0x55c>
20028dec:	10800217 	ldw	r2,8(r2)
20028df0:	28bffb1e 	bne	r5,r2,20028de0 <_gp+0xfffe9880>
20028df4:	11400317 	ldw	r5,12(r2)
20028df8:	98c00117 	ldw	r3,4(r19)
20028dfc:	81400315 	stw	r5,12(r16)
20028e00:	80800215 	stw	r2,8(r16)
20028e04:	2c000215 	stw	r16,8(r5)
20028e08:	14000315 	stw	r16,12(r2)
20028e0c:	003ef806 	br	200289f0 <_gp+0xfffe9490>
20028e10:	88c00054 	ori	r3,r17,1
20028e14:	80c00115 	stw	r3,4(r16)
20028e18:	8463883a 	add	r17,r16,r17
20028e1c:	34400515 	stw	r17,20(r6)
20028e20:	34400415 	stw	r17,16(r6)
20028e24:	10c00054 	ori	r3,r2,1
20028e28:	8a000315 	stw	r8,12(r17)
20028e2c:	8a000215 	stw	r8,8(r17)
20028e30:	88c00115 	stw	r3,4(r17)
20028e34:	88a3883a 	add	r17,r17,r2
20028e38:	88800015 	stw	r2,0(r17)
20028e3c:	9009883a 	mov	r4,r18
20028e40:	00328800 	call	20032880 <__malloc_unlock>
20028e44:	80800204 	addi	r2,r16,8
20028e48:	003f3c06 	br	20028b3c <_gp+0xfffe95dc>
20028e4c:	30c00117 	ldw	r3,4(r6)
20028e50:	003ee706 	br	200289f0 <_gp+0xfffe9490>
20028e54:	5ac00044 	addi	r11,r11,1
20028e58:	588000cc 	andi	r2,r11,3
20028e5c:	31800204 	addi	r6,r6,8
20028e60:	103efd1e 	bne	r2,zero,20028a58 <_gp+0xfffe94f8>
20028e64:	00002406 	br	20028ef8 <_malloc_r+0x660>
20028e68:	14000317 	ldw	r16,12(r2)
20028e6c:	143f251e 	bne	r2,r16,20028b04 <_gp+0xfffe95a4>
20028e70:	21000084 	addi	r4,r4,2
20028e74:	003ebc06 	br	20028968 <_gp+0xfffe9408>
20028e78:	8085883a 	add	r2,r16,r2
20028e7c:	10c00117 	ldw	r3,4(r2)
20028e80:	81000317 	ldw	r4,12(r16)
20028e84:	81400217 	ldw	r5,8(r16)
20028e88:	18c00054 	ori	r3,r3,1
20028e8c:	10c00115 	stw	r3,4(r2)
20028e90:	29000315 	stw	r4,12(r5)
20028e94:	21400215 	stw	r5,8(r4)
20028e98:	9009883a 	mov	r4,r18
20028e9c:	00328800 	call	20032880 <__malloc_unlock>
20028ea0:	80800204 	addi	r2,r16,8
20028ea4:	003f2506 	br	20028b3c <_gp+0xfffe95dc>
20028ea8:	12001704 	addi	r8,r2,92
20028eac:	11c016c4 	addi	r7,r2,91
20028eb0:	4209883a 	add	r4,r8,r8
20028eb4:	003e9606 	br	20028910 <_gp+0xfffe93b0>
20028eb8:	3804d1ba 	srli	r2,r7,6
20028ebc:	11400e44 	addi	r5,r2,57
20028ec0:	10c00e04 	addi	r3,r2,56
20028ec4:	294b883a 	add	r5,r5,r5
20028ec8:	003fbc06 	br	20028dbc <_gp+0xfffe985c>
20028ecc:	84ff5926 	beq	r16,r19,20028c34 <_gp+0xfffe96d4>
20028ed0:	008800f4 	movhi	r2,8195
20028ed4:	1097ac04 	addi	r2,r2,24240
20028ed8:	14000217 	ldw	r16,8(r2)
20028edc:	00bfff04 	movi	r2,-4
20028ee0:	80c00117 	ldw	r3,4(r16)
20028ee4:	1886703a 	and	r3,r3,r2
20028ee8:	003f9106 	br	20028d30 <_gp+0xfffe97d0>
20028eec:	60800217 	ldw	r2,8(r12)
20028ef0:	213fffc4 	addi	r4,r4,-1
20028ef4:	1300651e 	bne	r2,r12,2002908c <_malloc_r+0x7f4>
20028ef8:	208000cc 	andi	r2,r4,3
20028efc:	633ffe04 	addi	r12,r12,-8
20028f00:	103ffa1e 	bne	r2,zero,20028eec <_gp+0xfffe998c>
20028f04:	98800117 	ldw	r2,4(r19)
20028f08:	0146303a 	nor	r3,zero,r5
20028f0c:	1884703a 	and	r2,r3,r2
20028f10:	98800115 	stw	r2,4(r19)
20028f14:	294b883a 	add	r5,r5,r5
20028f18:	117f2836 	bltu	r2,r5,20028bbc <_gp+0xfffe965c>
20028f1c:	283f2726 	beq	r5,zero,20028bbc <_gp+0xfffe965c>
20028f20:	2886703a 	and	r3,r5,r2
20028f24:	5809883a 	mov	r4,r11
20028f28:	183ec31e 	bne	r3,zero,20028a38 <_gp+0xfffe94d8>
20028f2c:	294b883a 	add	r5,r5,r5
20028f30:	2886703a 	and	r3,r5,r2
20028f34:	21000104 	addi	r4,r4,4
20028f38:	183ffc26 	beq	r3,zero,20028f2c <_gp+0xfffe99cc>
20028f3c:	003ebe06 	br	20028a38 <_gp+0xfffe94d8>
20028f40:	00c05504 	movi	r3,340
20028f44:	18801236 	bltu	r3,r2,20028f90 <_malloc_r+0x6f8>
20028f48:	8804d3fa 	srli	r2,r17,15
20028f4c:	12001e04 	addi	r8,r2,120
20028f50:	11c01dc4 	addi	r7,r2,119
20028f54:	4209883a 	add	r4,r8,r8
20028f58:	003e6d06 	br	20028910 <_gp+0xfffe93b0>
20028f5c:	00c40004 	movi	r3,4096
20028f60:	003f4606 	br	20028c7c <_gp+0xfffe971c>
20028f64:	00800044 	movi	r2,1
20028f68:	a0800115 	stw	r2,4(r20)
20028f6c:	003f7406 	br	20028d40 <_gp+0xfffe97e0>
20028f70:	1805d0ba 	srai	r2,r3,2
20028f74:	01c00044 	movi	r7,1
20028f78:	30c00117 	ldw	r3,4(r6)
20028f7c:	388e983a 	sll	r7,r7,r2
20028f80:	2805883a 	mov	r2,r5
20028f84:	38c6b03a 	or	r3,r7,r3
20028f88:	30c00115 	stw	r3,4(r6)
20028f8c:	003f9b06 	br	20028dfc <_gp+0xfffe989c>
20028f90:	00c15504 	movi	r3,1364
20028f94:	18801a36 	bltu	r3,r2,20029000 <_malloc_r+0x768>
20028f98:	8804d4ba 	srli	r2,r17,18
20028f9c:	12001f44 	addi	r8,r2,125
20028fa0:	11c01f04 	addi	r7,r2,124
20028fa4:	4209883a 	add	r4,r8,r8
20028fa8:	003e5906 	br	20028910 <_gp+0xfffe93b0>
20028fac:	ad400404 	addi	r21,r21,16
20028fb0:	003f1706 	br	20028c10 <_gp+0xfffe96b0>
20028fb4:	00c01504 	movi	r3,84
20028fb8:	18802336 	bltu	r3,r2,20029048 <_malloc_r+0x7b0>
20028fbc:	3804d33a 	srli	r2,r7,12
20028fc0:	11401bc4 	addi	r5,r2,111
20028fc4:	10c01b84 	addi	r3,r2,110
20028fc8:	294b883a 	add	r5,r5,r5
20028fcc:	003f7b06 	br	20028dbc <_gp+0xfffe985c>
20028fd0:	9c000217 	ldw	r16,8(r19)
20028fd4:	00bfff04 	movi	r2,-4
20028fd8:	80c00117 	ldw	r3,4(r16)
20028fdc:	1886703a 	and	r3,r3,r2
20028fe0:	003f5306 	br	20028d30 <_gp+0xfffe97d0>
20028fe4:	3083ffcc 	andi	r2,r6,4095
20028fe8:	103f181e 	bne	r2,zero,20028c4c <_gp+0xfffe96ec>
20028fec:	99000217 	ldw	r4,8(r19)
20028ff0:	b545883a 	add	r2,r22,r21
20028ff4:	10800054 	ori	r2,r2,1
20028ff8:	20800115 	stw	r2,4(r4)
20028ffc:	003f3e06 	br	20028cf8 <_gp+0xfffe9798>
20029000:	01003f84 	movi	r4,254
20029004:	02001fc4 	movi	r8,127
20029008:	01c01f84 	movi	r7,126
2002900c:	003e4006 	br	20028910 <_gp+0xfffe93b0>
20029010:	008800f4 	movhi	r2,8195
20029014:	109d5b04 	addi	r2,r2,30060
20029018:	15000015 	stw	r20,0(r2)
2002901c:	003f1106 	br	20028c64 <_gp+0xfffe9704>
20029020:	00800044 	movi	r2,1
20029024:	002b883a 	mov	r21,zero
20029028:	003f1f06 	br	20028ca8 <_gp+0xfffe9748>
2002902c:	81400204 	addi	r5,r16,8
20029030:	9009883a 	mov	r4,r18
20029034:	0027c400 	call	20027c40 <_free_r>
20029038:	00880134 	movhi	r2,8196
2002903c:	10a46004 	addi	r2,r2,-28288
20029040:	10c00017 	ldw	r3,0(r2)
20029044:	003f2c06 	br	20028cf8 <_gp+0xfffe9798>
20029048:	00c05504 	movi	r3,340
2002904c:	18800536 	bltu	r3,r2,20029064 <_malloc_r+0x7cc>
20029050:	3804d3fa 	srli	r2,r7,15
20029054:	11401e04 	addi	r5,r2,120
20029058:	10c01dc4 	addi	r3,r2,119
2002905c:	294b883a 	add	r5,r5,r5
20029060:	003f5606 	br	20028dbc <_gp+0xfffe985c>
20029064:	00c15504 	movi	r3,1364
20029068:	18800536 	bltu	r3,r2,20029080 <_malloc_r+0x7e8>
2002906c:	3804d4ba 	srli	r2,r7,18
20029070:	11401f44 	addi	r5,r2,125
20029074:	10c01f04 	addi	r3,r2,124
20029078:	294b883a 	add	r5,r5,r5
2002907c:	003f4f06 	br	20028dbc <_gp+0xfffe985c>
20029080:	01403f84 	movi	r5,254
20029084:	00c01f84 	movi	r3,126
20029088:	003f4c06 	br	20028dbc <_gp+0xfffe985c>
2002908c:	98800117 	ldw	r2,4(r19)
20029090:	003fa006 	br	20028f14 <_gp+0xfffe99b4>
20029094:	8808d0fa 	srli	r4,r17,3
20029098:	20800044 	addi	r2,r4,1
2002909c:	1085883a 	add	r2,r2,r2
200290a0:	003e9006 	br	20028ae4 <_gp+0xfffe9584>

200290a4 <memcpy>:
200290a4:	defffd04 	addi	sp,sp,-12
200290a8:	dfc00215 	stw	ra,8(sp)
200290ac:	dc400115 	stw	r17,4(sp)
200290b0:	dc000015 	stw	r16,0(sp)
200290b4:	00c003c4 	movi	r3,15
200290b8:	2005883a 	mov	r2,r4
200290bc:	1980452e 	bgeu	r3,r6,200291d4 <memcpy+0x130>
200290c0:	2906b03a 	or	r3,r5,r4
200290c4:	18c000cc 	andi	r3,r3,3
200290c8:	1800441e 	bne	r3,zero,200291dc <memcpy+0x138>
200290cc:	347ffc04 	addi	r17,r6,-16
200290d0:	8822d13a 	srli	r17,r17,4
200290d4:	28c00104 	addi	r3,r5,4
200290d8:	23400104 	addi	r13,r4,4
200290dc:	8820913a 	slli	r16,r17,4
200290e0:	2b000204 	addi	r12,r5,8
200290e4:	22c00204 	addi	r11,r4,8
200290e8:	84000504 	addi	r16,r16,20
200290ec:	2a800304 	addi	r10,r5,12
200290f0:	22400304 	addi	r9,r4,12
200290f4:	2c21883a 	add	r16,r5,r16
200290f8:	2811883a 	mov	r8,r5
200290fc:	200f883a 	mov	r7,r4
20029100:	41000017 	ldw	r4,0(r8)
20029104:	1fc00017 	ldw	ra,0(r3)
20029108:	63c00017 	ldw	r15,0(r12)
2002910c:	39000015 	stw	r4,0(r7)
20029110:	53800017 	ldw	r14,0(r10)
20029114:	6fc00015 	stw	ra,0(r13)
20029118:	5bc00015 	stw	r15,0(r11)
2002911c:	4b800015 	stw	r14,0(r9)
20029120:	18c00404 	addi	r3,r3,16
20029124:	39c00404 	addi	r7,r7,16
20029128:	42000404 	addi	r8,r8,16
2002912c:	6b400404 	addi	r13,r13,16
20029130:	63000404 	addi	r12,r12,16
20029134:	5ac00404 	addi	r11,r11,16
20029138:	52800404 	addi	r10,r10,16
2002913c:	4a400404 	addi	r9,r9,16
20029140:	1c3fef1e 	bne	r3,r16,20029100 <_gp+0xfffe9ba0>
20029144:	89c00044 	addi	r7,r17,1
20029148:	380e913a 	slli	r7,r7,4
2002914c:	310003cc 	andi	r4,r6,15
20029150:	02c000c4 	movi	r11,3
20029154:	11c7883a 	add	r3,r2,r7
20029158:	29cb883a 	add	r5,r5,r7
2002915c:	5900212e 	bgeu	r11,r4,200291e4 <memcpy+0x140>
20029160:	1813883a 	mov	r9,r3
20029164:	2811883a 	mov	r8,r5
20029168:	200f883a 	mov	r7,r4
2002916c:	42800017 	ldw	r10,0(r8)
20029170:	4a400104 	addi	r9,r9,4
20029174:	39ffff04 	addi	r7,r7,-4
20029178:	4abfff15 	stw	r10,-4(r9)
2002917c:	42000104 	addi	r8,r8,4
20029180:	59fffa36 	bltu	r11,r7,2002916c <_gp+0xfffe9c0c>
20029184:	213fff04 	addi	r4,r4,-4
20029188:	2008d0ba 	srli	r4,r4,2
2002918c:	318000cc 	andi	r6,r6,3
20029190:	21000044 	addi	r4,r4,1
20029194:	2109883a 	add	r4,r4,r4
20029198:	2109883a 	add	r4,r4,r4
2002919c:	1907883a 	add	r3,r3,r4
200291a0:	290b883a 	add	r5,r5,r4
200291a4:	30000626 	beq	r6,zero,200291c0 <memcpy+0x11c>
200291a8:	198d883a 	add	r6,r3,r6
200291ac:	29c00003 	ldbu	r7,0(r5)
200291b0:	18c00044 	addi	r3,r3,1
200291b4:	29400044 	addi	r5,r5,1
200291b8:	19ffffc5 	stb	r7,-1(r3)
200291bc:	19bffb1e 	bne	r3,r6,200291ac <_gp+0xfffe9c4c>
200291c0:	dfc00217 	ldw	ra,8(sp)
200291c4:	dc400117 	ldw	r17,4(sp)
200291c8:	dc000017 	ldw	r16,0(sp)
200291cc:	dec00304 	addi	sp,sp,12
200291d0:	f800283a 	ret
200291d4:	2007883a 	mov	r3,r4
200291d8:	003ff206 	br	200291a4 <_gp+0xfffe9c44>
200291dc:	2007883a 	mov	r3,r4
200291e0:	003ff106 	br	200291a8 <_gp+0xfffe9c48>
200291e4:	200d883a 	mov	r6,r4
200291e8:	003fee06 	br	200291a4 <_gp+0xfffe9c44>

200291ec <memset>:
200291ec:	20c000cc 	andi	r3,r4,3
200291f0:	2005883a 	mov	r2,r4
200291f4:	18004426 	beq	r3,zero,20029308 <memset+0x11c>
200291f8:	31ffffc4 	addi	r7,r6,-1
200291fc:	30004026 	beq	r6,zero,20029300 <memset+0x114>
20029200:	2813883a 	mov	r9,r5
20029204:	200d883a 	mov	r6,r4
20029208:	2007883a 	mov	r3,r4
2002920c:	00000406 	br	20029220 <memset+0x34>
20029210:	3a3fffc4 	addi	r8,r7,-1
20029214:	31800044 	addi	r6,r6,1
20029218:	38003926 	beq	r7,zero,20029300 <memset+0x114>
2002921c:	400f883a 	mov	r7,r8
20029220:	18c00044 	addi	r3,r3,1
20029224:	32400005 	stb	r9,0(r6)
20029228:	1a0000cc 	andi	r8,r3,3
2002922c:	403ff81e 	bne	r8,zero,20029210 <_gp+0xfffe9cb0>
20029230:	010000c4 	movi	r4,3
20029234:	21c02d2e 	bgeu	r4,r7,200292ec <memset+0x100>
20029238:	29003fcc 	andi	r4,r5,255
2002923c:	200c923a 	slli	r6,r4,8
20029240:	3108b03a 	or	r4,r6,r4
20029244:	200c943a 	slli	r6,r4,16
20029248:	218cb03a 	or	r6,r4,r6
2002924c:	010003c4 	movi	r4,15
20029250:	21c0182e 	bgeu	r4,r7,200292b4 <memset+0xc8>
20029254:	3b3ffc04 	addi	r12,r7,-16
20029258:	6018d13a 	srli	r12,r12,4
2002925c:	1a000104 	addi	r8,r3,4
20029260:	1ac00204 	addi	r11,r3,8
20029264:	6008913a 	slli	r4,r12,4
20029268:	1a800304 	addi	r10,r3,12
2002926c:	1813883a 	mov	r9,r3
20029270:	21000504 	addi	r4,r4,20
20029274:	1909883a 	add	r4,r3,r4
20029278:	49800015 	stw	r6,0(r9)
2002927c:	41800015 	stw	r6,0(r8)
20029280:	59800015 	stw	r6,0(r11)
20029284:	51800015 	stw	r6,0(r10)
20029288:	42000404 	addi	r8,r8,16
2002928c:	4a400404 	addi	r9,r9,16
20029290:	5ac00404 	addi	r11,r11,16
20029294:	52800404 	addi	r10,r10,16
20029298:	413ff71e 	bne	r8,r4,20029278 <_gp+0xfffe9d18>
2002929c:	63000044 	addi	r12,r12,1
200292a0:	6018913a 	slli	r12,r12,4
200292a4:	39c003cc 	andi	r7,r7,15
200292a8:	010000c4 	movi	r4,3
200292ac:	1b07883a 	add	r3,r3,r12
200292b0:	21c00e2e 	bgeu	r4,r7,200292ec <memset+0x100>
200292b4:	1813883a 	mov	r9,r3
200292b8:	3811883a 	mov	r8,r7
200292bc:	010000c4 	movi	r4,3
200292c0:	49800015 	stw	r6,0(r9)
200292c4:	423fff04 	addi	r8,r8,-4
200292c8:	4a400104 	addi	r9,r9,4
200292cc:	223ffc36 	bltu	r4,r8,200292c0 <_gp+0xfffe9d60>
200292d0:	393fff04 	addi	r4,r7,-4
200292d4:	2008d0ba 	srli	r4,r4,2
200292d8:	39c000cc 	andi	r7,r7,3
200292dc:	21000044 	addi	r4,r4,1
200292e0:	2109883a 	add	r4,r4,r4
200292e4:	2109883a 	add	r4,r4,r4
200292e8:	1907883a 	add	r3,r3,r4
200292ec:	38000526 	beq	r7,zero,20029304 <memset+0x118>
200292f0:	19cf883a 	add	r7,r3,r7
200292f4:	19400005 	stb	r5,0(r3)
200292f8:	18c00044 	addi	r3,r3,1
200292fc:	38fffd1e 	bne	r7,r3,200292f4 <_gp+0xfffe9d94>
20029300:	f800283a 	ret
20029304:	f800283a 	ret
20029308:	2007883a 	mov	r3,r4
2002930c:	300f883a 	mov	r7,r6
20029310:	003fc706 	br	20029230 <_gp+0xfffe9cd0>

20029314 <_open_r>:
20029314:	defffd04 	addi	sp,sp,-12
20029318:	2805883a 	mov	r2,r5
2002931c:	dc000015 	stw	r16,0(sp)
20029320:	04080134 	movhi	r16,8196
20029324:	dc400115 	stw	r17,4(sp)
20029328:	300b883a 	mov	r5,r6
2002932c:	84245304 	addi	r16,r16,-28340
20029330:	2023883a 	mov	r17,r4
20029334:	380d883a 	mov	r6,r7
20029338:	1009883a 	mov	r4,r2
2002933c:	dfc00215 	stw	ra,8(sp)
20029340:	80000015 	stw	zero,0(r16)
20029344:	00329a40 	call	200329a4 <open>
20029348:	00ffffc4 	movi	r3,-1
2002934c:	10c00526 	beq	r2,r3,20029364 <_open_r+0x50>
20029350:	dfc00217 	ldw	ra,8(sp)
20029354:	dc400117 	ldw	r17,4(sp)
20029358:	dc000017 	ldw	r16,0(sp)
2002935c:	dec00304 	addi	sp,sp,12
20029360:	f800283a 	ret
20029364:	80c00017 	ldw	r3,0(r16)
20029368:	183ff926 	beq	r3,zero,20029350 <_gp+0xfffe9df0>
2002936c:	88c00015 	stw	r3,0(r17)
20029370:	003ff706 	br	20029350 <_gp+0xfffe9df0>

20029374 <_printf_r>:
20029374:	defffd04 	addi	sp,sp,-12
20029378:	2805883a 	mov	r2,r5
2002937c:	dfc00015 	stw	ra,0(sp)
20029380:	d9800115 	stw	r6,4(sp)
20029384:	d9c00215 	stw	r7,8(sp)
20029388:	21400217 	ldw	r5,8(r4)
2002938c:	d9c00104 	addi	r7,sp,4
20029390:	100d883a 	mov	r6,r2
20029394:	00297f40 	call	200297f4 <___vfprintf_internal_r>
20029398:	dfc00017 	ldw	ra,0(sp)
2002939c:	dec00304 	addi	sp,sp,12
200293a0:	f800283a 	ret

200293a4 <printf>:
200293a4:	defffc04 	addi	sp,sp,-16
200293a8:	dfc00015 	stw	ra,0(sp)
200293ac:	d9400115 	stw	r5,4(sp)
200293b0:	d9800215 	stw	r6,8(sp)
200293b4:	d9c00315 	stw	r7,12(sp)
200293b8:	008800f4 	movhi	r2,8195
200293bc:	109d5a04 	addi	r2,r2,30056
200293c0:	10800017 	ldw	r2,0(r2)
200293c4:	200b883a 	mov	r5,r4
200293c8:	d9800104 	addi	r6,sp,4
200293cc:	11000217 	ldw	r4,8(r2)
200293d0:	002b9ec0 	call	2002b9ec <__vfprintf_internal>
200293d4:	dfc00017 	ldw	ra,0(sp)
200293d8:	dec00404 	addi	sp,sp,16
200293dc:	f800283a 	ret

200293e0 <srand>:
200293e0:	008800f4 	movhi	r2,8195
200293e4:	109d5a04 	addi	r2,r2,30056
200293e8:	10800017 	ldw	r2,0(r2)
200293ec:	11002915 	stw	r4,164(r2)
200293f0:	10002a15 	stw	zero,168(r2)
200293f4:	f800283a 	ret

200293f8 <rand>:
200293f8:	008800f4 	movhi	r2,8195
200293fc:	defffe04 	addi	sp,sp,-8
20029400:	109d5a04 	addi	r2,r2,30056
20029404:	dc000015 	stw	r16,0(sp)
20029408:	14000017 	ldw	r16,0(r2)
2002940c:	dfc00115 	stw	ra,4(sp)
20029410:	01932574 	movhi	r6,19605
20029414:	81002917 	ldw	r4,164(r16)
20029418:	81402a17 	ldw	r5,168(r16)
2002941c:	01d614b4 	movhi	r7,22610
20029420:	319fcb44 	addi	r6,r6,32557
20029424:	39fd0b44 	addi	r7,r7,-3027
20029428:	00314e00 	call	200314e0 <__muldi3>
2002942c:	11000044 	addi	r4,r2,1
20029430:	2085803a 	cmpltu	r2,r4,r2
20029434:	10c7883a 	add	r3,r2,r3
20029438:	00a00034 	movhi	r2,32768
2002943c:	10bfffc4 	addi	r2,r2,-1
20029440:	1884703a 	and	r2,r3,r2
20029444:	81002915 	stw	r4,164(r16)
20029448:	80c02a15 	stw	r3,168(r16)
2002944c:	dfc00117 	ldw	ra,4(sp)
20029450:	dc000017 	ldw	r16,0(sp)
20029454:	dec00204 	addi	sp,sp,8
20029458:	f800283a 	ret

2002945c <lflush>:
2002945c:	2080030b 	ldhu	r2,12(r4)
20029460:	00c00244 	movi	r3,9
20029464:	1080024c 	andi	r2,r2,9
20029468:	10c00226 	beq	r2,r3,20029474 <lflush+0x18>
2002946c:	0005883a 	mov	r2,zero
20029470:	f800283a 	ret
20029474:	00273381 	jmpi	20027338 <fflush>

20029478 <__srefill_r>:
20029478:	defffc04 	addi	sp,sp,-16
2002947c:	dc400115 	stw	r17,4(sp)
20029480:	dc000015 	stw	r16,0(sp)
20029484:	dfc00315 	stw	ra,12(sp)
20029488:	dc800215 	stw	r18,8(sp)
2002948c:	2023883a 	mov	r17,r4
20029490:	2821883a 	mov	r16,r5
20029494:	20000226 	beq	r4,zero,200294a0 <__srefill_r+0x28>
20029498:	20800e17 	ldw	r2,56(r4)
2002949c:	10003c26 	beq	r2,zero,20029590 <__srefill_r+0x118>
200294a0:	80c0030b 	ldhu	r3,12(r16)
200294a4:	1908000c 	andi	r4,r3,8192
200294a8:	1805883a 	mov	r2,r3
200294ac:	2000071e 	bne	r4,zero,200294cc <__srefill_r+0x54>
200294b0:	81001917 	ldw	r4,100(r16)
200294b4:	18880014 	ori	r2,r3,8192
200294b8:	00f7ffc4 	movi	r3,-8193
200294bc:	20c8703a 	and	r4,r4,r3
200294c0:	8080030d 	sth	r2,12(r16)
200294c4:	1007883a 	mov	r3,r2
200294c8:	81001915 	stw	r4,100(r16)
200294cc:	80000115 	stw	zero,4(r16)
200294d0:	1100080c 	andi	r4,r2,32
200294d4:	2000571e 	bne	r4,zero,20029634 <__srefill_r+0x1bc>
200294d8:	1100010c 	andi	r4,r2,4
200294dc:	20001f26 	beq	r4,zero,2002955c <__srefill_r+0xe4>
200294e0:	81400c17 	ldw	r5,48(r16)
200294e4:	28000826 	beq	r5,zero,20029508 <__srefill_r+0x90>
200294e8:	80801004 	addi	r2,r16,64
200294ec:	28800226 	beq	r5,r2,200294f8 <__srefill_r+0x80>
200294f0:	8809883a 	mov	r4,r17
200294f4:	0027c400 	call	20027c40 <_free_r>
200294f8:	80800f17 	ldw	r2,60(r16)
200294fc:	80000c15 	stw	zero,48(r16)
20029500:	80800115 	stw	r2,4(r16)
20029504:	1000391e 	bne	r2,zero,200295ec <__srefill_r+0x174>
20029508:	80800417 	ldw	r2,16(r16)
2002950c:	10004b26 	beq	r2,zero,2002963c <__srefill_r+0x1c4>
20029510:	8480030b 	ldhu	r18,12(r16)
20029514:	908000cc 	andi	r2,r18,3
20029518:	10001f1e 	bne	r2,zero,20029598 <__srefill_r+0x120>
2002951c:	81800417 	ldw	r6,16(r16)
20029520:	80800817 	ldw	r2,32(r16)
20029524:	81c00517 	ldw	r7,20(r16)
20029528:	81400717 	ldw	r5,28(r16)
2002952c:	81800015 	stw	r6,0(r16)
20029530:	8809883a 	mov	r4,r17
20029534:	103ee83a 	callr	r2
20029538:	80800115 	stw	r2,4(r16)
2002953c:	00800e0e 	bge	zero,r2,20029578 <__srefill_r+0x100>
20029540:	0005883a 	mov	r2,zero
20029544:	dfc00317 	ldw	ra,12(sp)
20029548:	dc800217 	ldw	r18,8(sp)
2002954c:	dc400117 	ldw	r17,4(sp)
20029550:	dc000017 	ldw	r16,0(sp)
20029554:	dec00404 	addi	sp,sp,16
20029558:	f800283a 	ret
2002955c:	1100040c 	andi	r4,r2,16
20029560:	20003026 	beq	r4,zero,20029624 <__srefill_r+0x1ac>
20029564:	1080020c 	andi	r2,r2,8
20029568:	1000241e 	bne	r2,zero,200295fc <__srefill_r+0x184>
2002956c:	18c00114 	ori	r3,r3,4
20029570:	80c0030d 	sth	r3,12(r16)
20029574:	003fe406 	br	20029508 <_gp+0xfffe9fa8>
20029578:	80c0030b 	ldhu	r3,12(r16)
2002957c:	1000161e 	bne	r2,zero,200295d8 <__srefill_r+0x160>
20029580:	18c00814 	ori	r3,r3,32
20029584:	00bfffc4 	movi	r2,-1
20029588:	80c0030d 	sth	r3,12(r16)
2002958c:	003fed06 	br	20029544 <_gp+0xfffe9fe4>
20029590:	00276b80 	call	200276b8 <__sinit>
20029594:	003fc206 	br	200294a0 <_gp+0xfffe9f40>
20029598:	008800f4 	movhi	r2,8195
2002959c:	109d5904 	addi	r2,r2,30052
200295a0:	11000017 	ldw	r4,0(r2)
200295a4:	014800f4 	movhi	r5,8195
200295a8:	00800044 	movi	r2,1
200295ac:	29651704 	addi	r5,r5,-27556
200295b0:	8080030d 	sth	r2,12(r16)
200295b4:	002842c0 	call	2002842c <_fwalk>
200295b8:	00800244 	movi	r2,9
200295bc:	8480030d 	sth	r18,12(r16)
200295c0:	9480024c 	andi	r18,r18,9
200295c4:	90bfd51e 	bne	r18,r2,2002951c <_gp+0xfffe9fbc>
200295c8:	800b883a 	mov	r5,r16
200295cc:	8809883a 	mov	r4,r17
200295d0:	00270c00 	call	200270c0 <__sflush_r>
200295d4:	003fd106 	br	2002951c <_gp+0xfffe9fbc>
200295d8:	18c01014 	ori	r3,r3,64
200295dc:	80000115 	stw	zero,4(r16)
200295e0:	00bfffc4 	movi	r2,-1
200295e4:	80c0030d 	sth	r3,12(r16)
200295e8:	003fd606 	br	20029544 <_gp+0xfffe9fe4>
200295ec:	80c00e17 	ldw	r3,56(r16)
200295f0:	0005883a 	mov	r2,zero
200295f4:	80c00015 	stw	r3,0(r16)
200295f8:	003fd206 	br	20029544 <_gp+0xfffe9fe4>
200295fc:	800b883a 	mov	r5,r16
20029600:	8809883a 	mov	r4,r17
20029604:	00272dc0 	call	200272dc <_fflush_r>
20029608:	10000a1e 	bne	r2,zero,20029634 <__srefill_r+0x1bc>
2002960c:	8080030b 	ldhu	r2,12(r16)
20029610:	00fffdc4 	movi	r3,-9
20029614:	80000215 	stw	zero,8(r16)
20029618:	1886703a 	and	r3,r3,r2
2002961c:	80000615 	stw	zero,24(r16)
20029620:	003fd206 	br	2002956c <_gp+0xfffea00c>
20029624:	00800244 	movi	r2,9
20029628:	88800015 	stw	r2,0(r17)
2002962c:	18c01014 	ori	r3,r3,64
20029630:	80c0030d 	sth	r3,12(r16)
20029634:	00bfffc4 	movi	r2,-1
20029638:	003fc206 	br	20029544 <_gp+0xfffe9fe4>
2002963c:	800b883a 	mov	r5,r16
20029640:	8809883a 	mov	r4,r17
20029644:	00286b40 	call	200286b4 <__smakebuf_r>
20029648:	003fb106 	br	20029510 <_gp+0xfffe9fb0>

2002964c <_sbrk_r>:
2002964c:	defffd04 	addi	sp,sp,-12
20029650:	dc000015 	stw	r16,0(sp)
20029654:	04080134 	movhi	r16,8196
20029658:	dc400115 	stw	r17,4(sp)
2002965c:	84245304 	addi	r16,r16,-28340
20029660:	2023883a 	mov	r17,r4
20029664:	2809883a 	mov	r4,r5
20029668:	dfc00215 	stw	ra,8(sp)
2002966c:	80000015 	stw	zero,0(r16)
20029670:	0032cd00 	call	20032cd0 <sbrk>
20029674:	00ffffc4 	movi	r3,-1
20029678:	10c00526 	beq	r2,r3,20029690 <_sbrk_r+0x44>
2002967c:	dfc00217 	ldw	ra,8(sp)
20029680:	dc400117 	ldw	r17,4(sp)
20029684:	dc000017 	ldw	r16,0(sp)
20029688:	dec00304 	addi	sp,sp,12
2002968c:	f800283a 	ret
20029690:	80c00017 	ldw	r3,0(r16)
20029694:	183ff926 	beq	r3,zero,2002967c <_gp+0xfffea11c>
20029698:	88c00015 	stw	r3,0(r17)
2002969c:	003ff706 	br	2002967c <_gp+0xfffea11c>

200296a0 <__sread>:
200296a0:	defffe04 	addi	sp,sp,-8
200296a4:	dc000015 	stw	r16,0(sp)
200296a8:	2821883a 	mov	r16,r5
200296ac:	2940038f 	ldh	r5,14(r5)
200296b0:	dfc00115 	stw	ra,4(sp)
200296b4:	002eea00 	call	2002eea0 <_read_r>
200296b8:	10000716 	blt	r2,zero,200296d8 <__sread+0x38>
200296bc:	80c01417 	ldw	r3,80(r16)
200296c0:	1887883a 	add	r3,r3,r2
200296c4:	80c01415 	stw	r3,80(r16)
200296c8:	dfc00117 	ldw	ra,4(sp)
200296cc:	dc000017 	ldw	r16,0(sp)
200296d0:	dec00204 	addi	sp,sp,8
200296d4:	f800283a 	ret
200296d8:	80c0030b 	ldhu	r3,12(r16)
200296dc:	18fbffcc 	andi	r3,r3,61439
200296e0:	80c0030d 	sth	r3,12(r16)
200296e4:	dfc00117 	ldw	ra,4(sp)
200296e8:	dc000017 	ldw	r16,0(sp)
200296ec:	dec00204 	addi	sp,sp,8
200296f0:	f800283a 	ret

200296f4 <__seofread>:
200296f4:	0005883a 	mov	r2,zero
200296f8:	f800283a 	ret

200296fc <__swrite>:
200296fc:	2880030b 	ldhu	r2,12(r5)
20029700:	defffb04 	addi	sp,sp,-20
20029704:	dcc00315 	stw	r19,12(sp)
20029708:	dc800215 	stw	r18,8(sp)
2002970c:	dc400115 	stw	r17,4(sp)
20029710:	dc000015 	stw	r16,0(sp)
20029714:	dfc00415 	stw	ra,16(sp)
20029718:	10c0400c 	andi	r3,r2,256
2002971c:	2821883a 	mov	r16,r5
20029720:	2023883a 	mov	r17,r4
20029724:	3025883a 	mov	r18,r6
20029728:	3827883a 	mov	r19,r7
2002972c:	18000526 	beq	r3,zero,20029744 <__swrite+0x48>
20029730:	2940038f 	ldh	r5,14(r5)
20029734:	01c00084 	movi	r7,2
20029738:	000d883a 	mov	r6,zero
2002973c:	002dc040 	call	2002dc04 <_lseek_r>
20029740:	8080030b 	ldhu	r2,12(r16)
20029744:	8140038f 	ldh	r5,14(r16)
20029748:	10bbffcc 	andi	r2,r2,61439
2002974c:	980f883a 	mov	r7,r19
20029750:	900d883a 	mov	r6,r18
20029754:	8809883a 	mov	r4,r17
20029758:	8080030d 	sth	r2,12(r16)
2002975c:	dfc00417 	ldw	ra,16(sp)
20029760:	dcc00317 	ldw	r19,12(sp)
20029764:	dc800217 	ldw	r18,8(sp)
20029768:	dc400117 	ldw	r17,4(sp)
2002976c:	dc000017 	ldw	r16,0(sp)
20029770:	dec00504 	addi	sp,sp,20
20029774:	002bac41 	jmpi	2002bac4 <_write_r>

20029778 <__sseek>:
20029778:	defffe04 	addi	sp,sp,-8
2002977c:	dc000015 	stw	r16,0(sp)
20029780:	2821883a 	mov	r16,r5
20029784:	2940038f 	ldh	r5,14(r5)
20029788:	dfc00115 	stw	ra,4(sp)
2002978c:	002dc040 	call	2002dc04 <_lseek_r>
20029790:	00ffffc4 	movi	r3,-1
20029794:	10c00826 	beq	r2,r3,200297b8 <__sseek+0x40>
20029798:	80c0030b 	ldhu	r3,12(r16)
2002979c:	80801415 	stw	r2,80(r16)
200297a0:	18c40014 	ori	r3,r3,4096
200297a4:	80c0030d 	sth	r3,12(r16)
200297a8:	dfc00117 	ldw	ra,4(sp)
200297ac:	dc000017 	ldw	r16,0(sp)
200297b0:	dec00204 	addi	sp,sp,8
200297b4:	f800283a 	ret
200297b8:	80c0030b 	ldhu	r3,12(r16)
200297bc:	18fbffcc 	andi	r3,r3,61439
200297c0:	80c0030d 	sth	r3,12(r16)
200297c4:	dfc00117 	ldw	ra,4(sp)
200297c8:	dc000017 	ldw	r16,0(sp)
200297cc:	dec00204 	addi	sp,sp,8
200297d0:	f800283a 	ret

200297d4 <__sclose>:
200297d4:	2940038f 	ldh	r5,14(r5)
200297d8:	002bc781 	jmpi	2002bc78 <_close_r>

200297dc <_vfiprintf_r>:
200297dc:	deffff04 	addi	sp,sp,-4
200297e0:	dfc00015 	stw	ra,0(sp)
200297e4:	002fa640 	call	2002fa64 <___vfiprintf_internal_r>
200297e8:	dfc00017 	ldw	ra,0(sp)
200297ec:	dec00104 	addi	sp,sp,4
200297f0:	f800283a 	ret

200297f4 <___vfprintf_internal_r>:
200297f4:	deffb804 	addi	sp,sp,-288
200297f8:	dfc04715 	stw	ra,284(sp)
200297fc:	ddc04515 	stw	r23,276(sp)
20029800:	dd404315 	stw	r21,268(sp)
20029804:	d9002c15 	stw	r4,176(sp)
20029808:	282f883a 	mov	r23,r5
2002980c:	302b883a 	mov	r21,r6
20029810:	d9c02d15 	stw	r7,180(sp)
20029814:	df004615 	stw	fp,280(sp)
20029818:	dd804415 	stw	r22,272(sp)
2002981c:	dd004215 	stw	r20,264(sp)
20029820:	dcc04115 	stw	r19,260(sp)
20029824:	dc804015 	stw	r18,256(sp)
20029828:	dc403f15 	stw	r17,252(sp)
2002982c:	dc003e15 	stw	r16,248(sp)
20029830:	002dbd40 	call	2002dbd4 <_localeconv_r>
20029834:	10800017 	ldw	r2,0(r2)
20029838:	1009883a 	mov	r4,r2
2002983c:	d8803415 	stw	r2,208(sp)
20029840:	002f8b80 	call	2002f8b8 <strlen>
20029844:	d8803715 	stw	r2,220(sp)
20029848:	d8802c17 	ldw	r2,176(sp)
2002984c:	10000226 	beq	r2,zero,20029858 <___vfprintf_internal_r+0x64>
20029850:	10800e17 	ldw	r2,56(r2)
20029854:	1000f926 	beq	r2,zero,20029c3c <___vfprintf_internal_r+0x448>
20029858:	b880030b 	ldhu	r2,12(r23)
2002985c:	10c8000c 	andi	r3,r2,8192
20029860:	1800061e 	bne	r3,zero,2002987c <___vfprintf_internal_r+0x88>
20029864:	b9001917 	ldw	r4,100(r23)
20029868:	00f7ffc4 	movi	r3,-8193
2002986c:	10880014 	ori	r2,r2,8192
20029870:	20c6703a 	and	r3,r4,r3
20029874:	b880030d 	sth	r2,12(r23)
20029878:	b8c01915 	stw	r3,100(r23)
2002987c:	10c0020c 	andi	r3,r2,8
20029880:	1800c126 	beq	r3,zero,20029b88 <___vfprintf_internal_r+0x394>
20029884:	b8c00417 	ldw	r3,16(r23)
20029888:	1800bf26 	beq	r3,zero,20029b88 <___vfprintf_internal_r+0x394>
2002988c:	1080068c 	andi	r2,r2,26
20029890:	00c00284 	movi	r3,10
20029894:	10c0c426 	beq	r2,r3,20029ba8 <___vfprintf_internal_r+0x3b4>
20029898:	d8c00404 	addi	r3,sp,16
2002989c:	050800f4 	movhi	r20,8195
200298a0:	d9001e04 	addi	r4,sp,120
200298a4:	a5163484 	addi	r20,r20,22738
200298a8:	d8c01e15 	stw	r3,120(sp)
200298ac:	d8002015 	stw	zero,128(sp)
200298b0:	d8001f15 	stw	zero,124(sp)
200298b4:	d8003315 	stw	zero,204(sp)
200298b8:	d8003615 	stw	zero,216(sp)
200298bc:	d8003815 	stw	zero,224(sp)
200298c0:	1811883a 	mov	r8,r3
200298c4:	d8003915 	stw	zero,228(sp)
200298c8:	d8003a15 	stw	zero,232(sp)
200298cc:	d8002f15 	stw	zero,188(sp)
200298d0:	d9002815 	stw	r4,160(sp)
200298d4:	a8800007 	ldb	r2,0(r21)
200298d8:	10027b26 	beq	r2,zero,2002a2c8 <___vfprintf_internal_r+0xad4>
200298dc:	00c00944 	movi	r3,37
200298e0:	a821883a 	mov	r16,r21
200298e4:	10c0021e 	bne	r2,r3,200298f0 <___vfprintf_internal_r+0xfc>
200298e8:	00001406 	br	2002993c <___vfprintf_internal_r+0x148>
200298ec:	10c00326 	beq	r2,r3,200298fc <___vfprintf_internal_r+0x108>
200298f0:	84000044 	addi	r16,r16,1
200298f4:	80800007 	ldb	r2,0(r16)
200298f8:	103ffc1e 	bne	r2,zero,200298ec <_gp+0xfffea38c>
200298fc:	8563c83a 	sub	r17,r16,r21
20029900:	88000e26 	beq	r17,zero,2002993c <___vfprintf_internal_r+0x148>
20029904:	d8c02017 	ldw	r3,128(sp)
20029908:	d8801f17 	ldw	r2,124(sp)
2002990c:	45400015 	stw	r21,0(r8)
20029910:	1c47883a 	add	r3,r3,r17
20029914:	10800044 	addi	r2,r2,1
20029918:	d8c02015 	stw	r3,128(sp)
2002991c:	44400115 	stw	r17,4(r8)
20029920:	d8801f15 	stw	r2,124(sp)
20029924:	00c001c4 	movi	r3,7
20029928:	1880a716 	blt	r3,r2,20029bc8 <___vfprintf_internal_r+0x3d4>
2002992c:	42000204 	addi	r8,r8,8
20029930:	d9402f17 	ldw	r5,188(sp)
20029934:	2c4b883a 	add	r5,r5,r17
20029938:	d9402f15 	stw	r5,188(sp)
2002993c:	80800007 	ldb	r2,0(r16)
20029940:	1000a826 	beq	r2,zero,20029be4 <___vfprintf_internal_r+0x3f0>
20029944:	84400047 	ldb	r17,1(r16)
20029948:	00bfffc4 	movi	r2,-1
2002994c:	85400044 	addi	r21,r16,1
20029950:	d8002785 	stb	zero,158(sp)
20029954:	0007883a 	mov	r3,zero
20029958:	000f883a 	mov	r7,zero
2002995c:	d8802915 	stw	r2,164(sp)
20029960:	d8003115 	stw	zero,196(sp)
20029964:	0025883a 	mov	r18,zero
20029968:	01401604 	movi	r5,88
2002996c:	01800244 	movi	r6,9
20029970:	02800a84 	movi	r10,42
20029974:	02401b04 	movi	r9,108
20029978:	ad400044 	addi	r21,r21,1
2002997c:	88bff804 	addi	r2,r17,-32
20029980:	28830436 	bltu	r5,r2,2002a594 <___vfprintf_internal_r+0xda0>
20029984:	100490ba 	slli	r2,r2,2
20029988:	010800f4 	movhi	r4,8195
2002998c:	21266704 	addi	r4,r4,-26212
20029990:	1105883a 	add	r2,r2,r4
20029994:	10800017 	ldw	r2,0(r2)
20029998:	1000683a 	jmp	r2
2002999c:	2002a4b4 	orhi	zero,r4,2706
200299a0:	2002a594 	ori	zero,r4,2710
200299a4:	2002a594 	ori	zero,r4,2710
200299a8:	2002a4d4 	ori	zero,r4,2707
200299ac:	2002a594 	ori	zero,r4,2710
200299b0:	2002a594 	ori	zero,r4,2710
200299b4:	2002a594 	ori	zero,r4,2710
200299b8:	2002a594 	ori	zero,r4,2710
200299bc:	2002a594 	ori	zero,r4,2710
200299c0:	2002a594 	ori	zero,r4,2710
200299c4:	20029c48 	cmpgei	zero,r4,2673
200299c8:	2002a3f0 	cmpltui	zero,r4,2703
200299cc:	2002a594 	ori	zero,r4,2710
200299d0:	20029b10 	cmplti	zero,r4,2668
200299d4:	20029c70 	cmpltui	zero,r4,2673
200299d8:	2002a594 	ori	zero,r4,2710
200299dc:	20029cb0 	cmpltui	zero,r4,2674
200299e0:	20029cbc 	xorhi	zero,r4,2674
200299e4:	20029cbc 	xorhi	zero,r4,2674
200299e8:	20029cbc 	xorhi	zero,r4,2674
200299ec:	20029cbc 	xorhi	zero,r4,2674
200299f0:	20029cbc 	xorhi	zero,r4,2674
200299f4:	20029cbc 	xorhi	zero,r4,2674
200299f8:	20029cbc 	xorhi	zero,r4,2674
200299fc:	20029cbc 	xorhi	zero,r4,2674
20029a00:	20029cbc 	xorhi	zero,r4,2674
20029a04:	2002a594 	ori	zero,r4,2710
20029a08:	2002a594 	ori	zero,r4,2710
20029a0c:	2002a594 	ori	zero,r4,2710
20029a10:	2002a594 	ori	zero,r4,2710
20029a14:	2002a594 	ori	zero,r4,2710
20029a18:	2002a594 	ori	zero,r4,2710
20029a1c:	2002a594 	ori	zero,r4,2710
20029a20:	2002a594 	ori	zero,r4,2710
20029a24:	2002a594 	ori	zero,r4,2710
20029a28:	2002a594 	ori	zero,r4,2710
20029a2c:	20029cf0 	cmpltui	zero,r4,2675
20029a30:	20029dac 	andhi	zero,r4,2678
20029a34:	2002a594 	ori	zero,r4,2710
20029a38:	20029dac 	andhi	zero,r4,2678
20029a3c:	2002a594 	ori	zero,r4,2710
20029a40:	2002a594 	ori	zero,r4,2710
20029a44:	2002a594 	ori	zero,r4,2710
20029a48:	2002a594 	ori	zero,r4,2710
20029a4c:	20029e4c 	andi	zero,r4,2681
20029a50:	2002a594 	ori	zero,r4,2710
20029a54:	2002a594 	ori	zero,r4,2710
20029a58:	20029e58 	cmpnei	zero,r4,2681
20029a5c:	2002a594 	ori	zero,r4,2710
20029a60:	2002a594 	ori	zero,r4,2710
20029a64:	2002a594 	ori	zero,r4,2710
20029a68:	2002a594 	ori	zero,r4,2710
20029a6c:	2002a594 	ori	zero,r4,2710
20029a70:	2002a2d0 	cmplti	zero,r4,2699
20029a74:	2002a594 	ori	zero,r4,2710
20029a78:	2002a594 	ori	zero,r4,2710
20029a7c:	2002a330 	cmpltui	zero,r4,2700
20029a80:	2002a594 	ori	zero,r4,2710
20029a84:	2002a594 	ori	zero,r4,2710
20029a88:	2002a594 	ori	zero,r4,2710
20029a8c:	2002a594 	ori	zero,r4,2710
20029a90:	2002a594 	ori	zero,r4,2710
20029a94:	2002a594 	ori	zero,r4,2710
20029a98:	2002a594 	ori	zero,r4,2710
20029a9c:	2002a594 	ori	zero,r4,2710
20029aa0:	2002a594 	ori	zero,r4,2710
20029aa4:	2002a594 	ori	zero,r4,2710
20029aa8:	2002a540 	call	22002a54 <_gp+0x1fc34f4>
20029aac:	2002a4e0 	cmpeqi	zero,r4,2707
20029ab0:	20029dac 	andhi	zero,r4,2678
20029ab4:	20029dac 	andhi	zero,r4,2678
20029ab8:	20029dac 	andhi	zero,r4,2678
20029abc:	2002a4f0 	cmpltui	zero,r4,2707
20029ac0:	2002a4e0 	cmpeqi	zero,r4,2707
20029ac4:	2002a594 	ori	zero,r4,2710
20029ac8:	2002a594 	ori	zero,r4,2710
20029acc:	2002a4fc 	xorhi	zero,r4,2707
20029ad0:	2002a594 	ori	zero,r4,2710
20029ad4:	2002a50c 	andi	zero,r4,2708
20029ad8:	2002a3e0 	cmpeqi	zero,r4,2703
20029adc:	20029b1c 	xori	zero,r4,2668
20029ae0:	2002a400 	call	22002a40 <_gp+0x1fc34e0>
20029ae4:	2002a594 	ori	zero,r4,2710
20029ae8:	2002a40c 	andi	zero,r4,2704
20029aec:	2002a594 	ori	zero,r4,2710
20029af0:	2002a468 	cmpgeui	zero,r4,2705
20029af4:	2002a594 	ori	zero,r4,2710
20029af8:	2002a594 	ori	zero,r4,2710
20029afc:	2002a478 	rdprs	zero,r4,2705
20029b00:	d9003117 	ldw	r4,196(sp)
20029b04:	d8802d15 	stw	r2,180(sp)
20029b08:	0109c83a 	sub	r4,zero,r4
20029b0c:	d9003115 	stw	r4,196(sp)
20029b10:	94800114 	ori	r18,r18,4
20029b14:	ac400007 	ldb	r17,0(r21)
20029b18:	003f9706 	br	20029978 <_gp+0xfffea418>
20029b1c:	00800c04 	movi	r2,48
20029b20:	d9002d17 	ldw	r4,180(sp)
20029b24:	d9402917 	ldw	r5,164(sp)
20029b28:	d8802705 	stb	r2,156(sp)
20029b2c:	00801e04 	movi	r2,120
20029b30:	d8802745 	stb	r2,157(sp)
20029b34:	d8002785 	stb	zero,158(sp)
20029b38:	20c00104 	addi	r3,r4,4
20029b3c:	24c00017 	ldw	r19,0(r4)
20029b40:	002d883a 	mov	r22,zero
20029b44:	90800094 	ori	r2,r18,2
20029b48:	28029a16 	blt	r5,zero,2002a5b4 <___vfprintf_internal_r+0xdc0>
20029b4c:	00bfdfc4 	movi	r2,-129
20029b50:	90a4703a 	and	r18,r18,r2
20029b54:	d8c02d15 	stw	r3,180(sp)
20029b58:	94800094 	ori	r18,r18,2
20029b5c:	9802871e 	bne	r19,zero,2002a57c <___vfprintf_internal_r+0xd88>
20029b60:	008800f4 	movhi	r2,8195
20029b64:	10962d04 	addi	r2,r2,22708
20029b68:	d8803915 	stw	r2,228(sp)
20029b6c:	04401e04 	movi	r17,120
20029b70:	d8802917 	ldw	r2,164(sp)
20029b74:	0039883a 	mov	fp,zero
20029b78:	1001e926 	beq	r2,zero,2002a320 <___vfprintf_internal_r+0xb2c>
20029b7c:	0027883a 	mov	r19,zero
20029b80:	002d883a 	mov	r22,zero
20029b84:	00020506 	br	2002a39c <___vfprintf_internal_r+0xba8>
20029b88:	d9002c17 	ldw	r4,176(sp)
20029b8c:	b80b883a 	mov	r5,r23
20029b90:	002bb240 	call	2002bb24 <__swsetup_r>
20029b94:	1005ac1e 	bne	r2,zero,2002b248 <___vfprintf_internal_r+0x1a54>
20029b98:	b880030b 	ldhu	r2,12(r23)
20029b9c:	00c00284 	movi	r3,10
20029ba0:	1080068c 	andi	r2,r2,26
20029ba4:	10ff3c1e 	bne	r2,r3,20029898 <_gp+0xfffea338>
20029ba8:	b880038f 	ldh	r2,14(r23)
20029bac:	103f3a16 	blt	r2,zero,20029898 <_gp+0xfffea338>
20029bb0:	d9c02d17 	ldw	r7,180(sp)
20029bb4:	d9002c17 	ldw	r4,176(sp)
20029bb8:	a80d883a 	mov	r6,r21
20029bbc:	b80b883a 	mov	r5,r23
20029bc0:	002ba080 	call	2002ba08 <__sbprintf>
20029bc4:	00001106 	br	20029c0c <___vfprintf_internal_r+0x418>
20029bc8:	d9002c17 	ldw	r4,176(sp)
20029bcc:	d9801e04 	addi	r6,sp,120
20029bd0:	b80b883a 	mov	r5,r23
20029bd4:	002fa4c0 	call	2002fa4c <__sprint_r>
20029bd8:	1000081e 	bne	r2,zero,20029bfc <___vfprintf_internal_r+0x408>
20029bdc:	da000404 	addi	r8,sp,16
20029be0:	003f5306 	br	20029930 <_gp+0xfffea3d0>
20029be4:	d8802017 	ldw	r2,128(sp)
20029be8:	10000426 	beq	r2,zero,20029bfc <___vfprintf_internal_r+0x408>
20029bec:	d9002c17 	ldw	r4,176(sp)
20029bf0:	d9801e04 	addi	r6,sp,120
20029bf4:	b80b883a 	mov	r5,r23
20029bf8:	002fa4c0 	call	2002fa4c <__sprint_r>
20029bfc:	b880030b 	ldhu	r2,12(r23)
20029c00:	1080100c 	andi	r2,r2,64
20029c04:	1005901e 	bne	r2,zero,2002b248 <___vfprintf_internal_r+0x1a54>
20029c08:	d8802f17 	ldw	r2,188(sp)
20029c0c:	dfc04717 	ldw	ra,284(sp)
20029c10:	df004617 	ldw	fp,280(sp)
20029c14:	ddc04517 	ldw	r23,276(sp)
20029c18:	dd804417 	ldw	r22,272(sp)
20029c1c:	dd404317 	ldw	r21,268(sp)
20029c20:	dd004217 	ldw	r20,264(sp)
20029c24:	dcc04117 	ldw	r19,260(sp)
20029c28:	dc804017 	ldw	r18,256(sp)
20029c2c:	dc403f17 	ldw	r17,252(sp)
20029c30:	dc003e17 	ldw	r16,248(sp)
20029c34:	dec04804 	addi	sp,sp,288
20029c38:	f800283a 	ret
20029c3c:	d9002c17 	ldw	r4,176(sp)
20029c40:	00276b80 	call	200276b8 <__sinit>
20029c44:	003f0406 	br	20029858 <_gp+0xfffea2f8>
20029c48:	d8802d17 	ldw	r2,180(sp)
20029c4c:	d9002d17 	ldw	r4,180(sp)
20029c50:	10800017 	ldw	r2,0(r2)
20029c54:	d8803115 	stw	r2,196(sp)
20029c58:	20800104 	addi	r2,r4,4
20029c5c:	d9003117 	ldw	r4,196(sp)
20029c60:	203fa716 	blt	r4,zero,20029b00 <_gp+0xfffea5a0>
20029c64:	d8802d15 	stw	r2,180(sp)
20029c68:	ac400007 	ldb	r17,0(r21)
20029c6c:	003f4206 	br	20029978 <_gp+0xfffea418>
20029c70:	ac400007 	ldb	r17,0(r21)
20029c74:	aac00044 	addi	r11,r21,1
20029c78:	8a872826 	beq	r17,r10,2002b91c <___vfprintf_internal_r+0x2128>
20029c7c:	88bff404 	addi	r2,r17,-48
20029c80:	0009883a 	mov	r4,zero
20029c84:	30867d36 	bltu	r6,r2,2002b67c <___vfprintf_internal_r+0x1e88>
20029c88:	5c400007 	ldb	r17,0(r11)
20029c8c:	210002a4 	muli	r4,r4,10
20029c90:	5d400044 	addi	r21,r11,1
20029c94:	a817883a 	mov	r11,r21
20029c98:	2089883a 	add	r4,r4,r2
20029c9c:	88bff404 	addi	r2,r17,-48
20029ca0:	30bff92e 	bgeu	r6,r2,20029c88 <_gp+0xfffea728>
20029ca4:	2005c916 	blt	r4,zero,2002b3cc <___vfprintf_internal_r+0x1bd8>
20029ca8:	d9002915 	stw	r4,164(sp)
20029cac:	003f3306 	br	2002997c <_gp+0xfffea41c>
20029cb0:	94802014 	ori	r18,r18,128
20029cb4:	ac400007 	ldb	r17,0(r21)
20029cb8:	003f2f06 	br	20029978 <_gp+0xfffea418>
20029cbc:	a809883a 	mov	r4,r21
20029cc0:	d8003115 	stw	zero,196(sp)
20029cc4:	88bff404 	addi	r2,r17,-48
20029cc8:	0017883a 	mov	r11,zero
20029ccc:	24400007 	ldb	r17,0(r4)
20029cd0:	5ac002a4 	muli	r11,r11,10
20029cd4:	ad400044 	addi	r21,r21,1
20029cd8:	a809883a 	mov	r4,r21
20029cdc:	12d7883a 	add	r11,r2,r11
20029ce0:	88bff404 	addi	r2,r17,-48
20029ce4:	30bff92e 	bgeu	r6,r2,20029ccc <_gp+0xfffea76c>
20029ce8:	dac03115 	stw	r11,196(sp)
20029cec:	003f2306 	br	2002997c <_gp+0xfffea41c>
20029cf0:	18c03fcc 	andi	r3,r3,255
20029cf4:	18072b1e 	bne	r3,zero,2002b9a4 <___vfprintf_internal_r+0x21b0>
20029cf8:	94800414 	ori	r18,r18,16
20029cfc:	9080080c 	andi	r2,r18,32
20029d00:	10037b26 	beq	r2,zero,2002aaf0 <___vfprintf_internal_r+0x12fc>
20029d04:	d9402d17 	ldw	r5,180(sp)
20029d08:	28800117 	ldw	r2,4(r5)
20029d0c:	2cc00017 	ldw	r19,0(r5)
20029d10:	29400204 	addi	r5,r5,8
20029d14:	d9402d15 	stw	r5,180(sp)
20029d18:	102d883a 	mov	r22,r2
20029d1c:	10044b16 	blt	r2,zero,2002ae4c <___vfprintf_internal_r+0x1658>
20029d20:	d9402917 	ldw	r5,164(sp)
20029d24:	df002783 	ldbu	fp,158(sp)
20029d28:	2803bc16 	blt	r5,zero,2002ac1c <___vfprintf_internal_r+0x1428>
20029d2c:	00ffdfc4 	movi	r3,-129
20029d30:	9d84b03a 	or	r2,r19,r22
20029d34:	90e4703a 	and	r18,r18,r3
20029d38:	10017726 	beq	r2,zero,2002a318 <___vfprintf_internal_r+0xb24>
20029d3c:	b0038326 	beq	r22,zero,2002ab4c <___vfprintf_internal_r+0x1358>
20029d40:	dc402a15 	stw	r17,168(sp)
20029d44:	dc001e04 	addi	r16,sp,120
20029d48:	b023883a 	mov	r17,r22
20029d4c:	402d883a 	mov	r22,r8
20029d50:	9809883a 	mov	r4,r19
20029d54:	880b883a 	mov	r5,r17
20029d58:	01800284 	movi	r6,10
20029d5c:	000f883a 	mov	r7,zero
20029d60:	0031ab80 	call	20031ab8 <__umoddi3>
20029d64:	10800c04 	addi	r2,r2,48
20029d68:	843fffc4 	addi	r16,r16,-1
20029d6c:	9809883a 	mov	r4,r19
20029d70:	880b883a 	mov	r5,r17
20029d74:	80800005 	stb	r2,0(r16)
20029d78:	01800284 	movi	r6,10
20029d7c:	000f883a 	mov	r7,zero
20029d80:	00315400 	call	20031540 <__udivdi3>
20029d84:	1027883a 	mov	r19,r2
20029d88:	10c4b03a 	or	r2,r2,r3
20029d8c:	1823883a 	mov	r17,r3
20029d90:	103fef1e 	bne	r2,zero,20029d50 <_gp+0xfffea7f0>
20029d94:	d8c02817 	ldw	r3,160(sp)
20029d98:	dc402a17 	ldw	r17,168(sp)
20029d9c:	b011883a 	mov	r8,r22
20029da0:	1c07c83a 	sub	r3,r3,r16
20029da4:	d8c02e15 	stw	r3,184(sp)
20029da8:	00005906 	br	20029f10 <___vfprintf_internal_r+0x71c>
20029dac:	18c03fcc 	andi	r3,r3,255
20029db0:	1806fa1e 	bne	r3,zero,2002b99c <___vfprintf_internal_r+0x21a8>
20029db4:	9080020c 	andi	r2,r18,8
20029db8:	10048a26 	beq	r2,zero,2002afe4 <___vfprintf_internal_r+0x17f0>
20029dbc:	d8c02d17 	ldw	r3,180(sp)
20029dc0:	d9002d17 	ldw	r4,180(sp)
20029dc4:	d9402d17 	ldw	r5,180(sp)
20029dc8:	18c00017 	ldw	r3,0(r3)
20029dcc:	21000117 	ldw	r4,4(r4)
20029dd0:	29400204 	addi	r5,r5,8
20029dd4:	d8c03615 	stw	r3,216(sp)
20029dd8:	d9003815 	stw	r4,224(sp)
20029ddc:	d9402d15 	stw	r5,180(sp)
20029de0:	d9003617 	ldw	r4,216(sp)
20029de4:	d9403817 	ldw	r5,224(sp)
20029de8:	da003d15 	stw	r8,244(sp)
20029dec:	04000044 	movi	r16,1
20029df0:	002f4640 	call	2002f464 <__fpclassifyd>
20029df4:	da003d17 	ldw	r8,244(sp)
20029df8:	14041f1e 	bne	r2,r16,2002ae78 <___vfprintf_internal_r+0x1684>
20029dfc:	d9003617 	ldw	r4,216(sp)
20029e00:	d9403817 	ldw	r5,224(sp)
20029e04:	000d883a 	mov	r6,zero
20029e08:	000f883a 	mov	r7,zero
20029e0c:	0025b8c0 	call	20025b8c <__ledf2>
20029e10:	da003d17 	ldw	r8,244(sp)
20029e14:	1005be16 	blt	r2,zero,2002b510 <___vfprintf_internal_r+0x1d1c>
20029e18:	df002783 	ldbu	fp,158(sp)
20029e1c:	008011c4 	movi	r2,71
20029e20:	1445330e 	bge	r2,r17,2002b2f0 <___vfprintf_internal_r+0x1afc>
20029e24:	040800f4 	movhi	r16,8195
20029e28:	84162504 	addi	r16,r16,22676
20029e2c:	00c000c4 	movi	r3,3
20029e30:	00bfdfc4 	movi	r2,-129
20029e34:	d8c02a15 	stw	r3,168(sp)
20029e38:	90a4703a 	and	r18,r18,r2
20029e3c:	d8c02e15 	stw	r3,184(sp)
20029e40:	d8002915 	stw	zero,164(sp)
20029e44:	d8003215 	stw	zero,200(sp)
20029e48:	00003706 	br	20029f28 <___vfprintf_internal_r+0x734>
20029e4c:	94800214 	ori	r18,r18,8
20029e50:	ac400007 	ldb	r17,0(r21)
20029e54:	003ec806 	br	20029978 <_gp+0xfffea418>
20029e58:	18c03fcc 	andi	r3,r3,255
20029e5c:	1806db1e 	bne	r3,zero,2002b9cc <___vfprintf_internal_r+0x21d8>
20029e60:	94800414 	ori	r18,r18,16
20029e64:	9080080c 	andi	r2,r18,32
20029e68:	1002d826 	beq	r2,zero,2002a9cc <___vfprintf_internal_r+0x11d8>
20029e6c:	d9402d17 	ldw	r5,180(sp)
20029e70:	d8c02917 	ldw	r3,164(sp)
20029e74:	d8002785 	stb	zero,158(sp)
20029e78:	28800204 	addi	r2,r5,8
20029e7c:	2cc00017 	ldw	r19,0(r5)
20029e80:	2d800117 	ldw	r22,4(r5)
20029e84:	18048f16 	blt	r3,zero,2002b0c4 <___vfprintf_internal_r+0x18d0>
20029e88:	013fdfc4 	movi	r4,-129
20029e8c:	9d86b03a 	or	r3,r19,r22
20029e90:	d8802d15 	stw	r2,180(sp)
20029e94:	9124703a 	and	r18,r18,r4
20029e98:	1802d91e 	bne	r3,zero,2002aa00 <___vfprintf_internal_r+0x120c>
20029e9c:	d8c02917 	ldw	r3,164(sp)
20029ea0:	0039883a 	mov	fp,zero
20029ea4:	1805c326 	beq	r3,zero,2002b5b4 <___vfprintf_internal_r+0x1dc0>
20029ea8:	0027883a 	mov	r19,zero
20029eac:	002d883a 	mov	r22,zero
20029eb0:	dc001e04 	addi	r16,sp,120
20029eb4:	9806d0fa 	srli	r3,r19,3
20029eb8:	b008977a 	slli	r4,r22,29
20029ebc:	b02cd0fa 	srli	r22,r22,3
20029ec0:	9cc001cc 	andi	r19,r19,7
20029ec4:	98800c04 	addi	r2,r19,48
20029ec8:	843fffc4 	addi	r16,r16,-1
20029ecc:	20e6b03a 	or	r19,r4,r3
20029ed0:	80800005 	stb	r2,0(r16)
20029ed4:	9d86b03a 	or	r3,r19,r22
20029ed8:	183ff61e 	bne	r3,zero,20029eb4 <_gp+0xfffea954>
20029edc:	90c0004c 	andi	r3,r18,1
20029ee0:	18013b26 	beq	r3,zero,2002a3d0 <___vfprintf_internal_r+0xbdc>
20029ee4:	10803fcc 	andi	r2,r2,255
20029ee8:	1080201c 	xori	r2,r2,128
20029eec:	10bfe004 	addi	r2,r2,-128
20029ef0:	00c00c04 	movi	r3,48
20029ef4:	10c13626 	beq	r2,r3,2002a3d0 <___vfprintf_internal_r+0xbdc>
20029ef8:	80ffffc5 	stb	r3,-1(r16)
20029efc:	d8c02817 	ldw	r3,160(sp)
20029f00:	80bfffc4 	addi	r2,r16,-1
20029f04:	1021883a 	mov	r16,r2
20029f08:	1887c83a 	sub	r3,r3,r2
20029f0c:	d8c02e15 	stw	r3,184(sp)
20029f10:	d8802e17 	ldw	r2,184(sp)
20029f14:	d9002917 	ldw	r4,164(sp)
20029f18:	1100010e 	bge	r2,r4,20029f20 <___vfprintf_internal_r+0x72c>
20029f1c:	2005883a 	mov	r2,r4
20029f20:	d8802a15 	stw	r2,168(sp)
20029f24:	d8003215 	stw	zero,200(sp)
20029f28:	e7003fcc 	andi	fp,fp,255
20029f2c:	e700201c 	xori	fp,fp,128
20029f30:	e73fe004 	addi	fp,fp,-128
20029f34:	e0000326 	beq	fp,zero,20029f44 <___vfprintf_internal_r+0x750>
20029f38:	d8c02a17 	ldw	r3,168(sp)
20029f3c:	18c00044 	addi	r3,r3,1
20029f40:	d8c02a15 	stw	r3,168(sp)
20029f44:	90c0008c 	andi	r3,r18,2
20029f48:	d8c02b15 	stw	r3,172(sp)
20029f4c:	18000326 	beq	r3,zero,20029f5c <___vfprintf_internal_r+0x768>
20029f50:	d8c02a17 	ldw	r3,168(sp)
20029f54:	18c00084 	addi	r3,r3,2
20029f58:	d8c02a15 	stw	r3,168(sp)
20029f5c:	90c0210c 	andi	r3,r18,132
20029f60:	d8c03015 	stw	r3,192(sp)
20029f64:	1801a31e 	bne	r3,zero,2002a5f4 <___vfprintf_internal_r+0xe00>
20029f68:	d9003117 	ldw	r4,196(sp)
20029f6c:	d8c02a17 	ldw	r3,168(sp)
20029f70:	20e7c83a 	sub	r19,r4,r3
20029f74:	04c19f0e 	bge	zero,r19,2002a5f4 <___vfprintf_internal_r+0xe00>
20029f78:	02400404 	movi	r9,16
20029f7c:	d8c02017 	ldw	r3,128(sp)
20029f80:	d8801f17 	ldw	r2,124(sp)
20029f84:	4cc50d0e 	bge	r9,r19,2002b3bc <___vfprintf_internal_r+0x1bc8>
20029f88:	014800f4 	movhi	r5,8195
20029f8c:	29563884 	addi	r5,r5,22754
20029f90:	dc403b15 	stw	r17,236(sp)
20029f94:	d9403515 	stw	r5,212(sp)
20029f98:	9823883a 	mov	r17,r19
20029f9c:	482d883a 	mov	r22,r9
20029fa0:	9027883a 	mov	r19,r18
20029fa4:	070001c4 	movi	fp,7
20029fa8:	8025883a 	mov	r18,r16
20029fac:	dc002c17 	ldw	r16,176(sp)
20029fb0:	00000306 	br	20029fc0 <___vfprintf_internal_r+0x7cc>
20029fb4:	8c7ffc04 	addi	r17,r17,-16
20029fb8:	42000204 	addi	r8,r8,8
20029fbc:	b440130e 	bge	r22,r17,2002a00c <___vfprintf_internal_r+0x818>
20029fc0:	010800f4 	movhi	r4,8195
20029fc4:	18c00404 	addi	r3,r3,16
20029fc8:	10800044 	addi	r2,r2,1
20029fcc:	21163884 	addi	r4,r4,22754
20029fd0:	41000015 	stw	r4,0(r8)
20029fd4:	45800115 	stw	r22,4(r8)
20029fd8:	d8c02015 	stw	r3,128(sp)
20029fdc:	d8801f15 	stw	r2,124(sp)
20029fe0:	e0bff40e 	bge	fp,r2,20029fb4 <_gp+0xfffeaa54>
20029fe4:	d9801e04 	addi	r6,sp,120
20029fe8:	b80b883a 	mov	r5,r23
20029fec:	8009883a 	mov	r4,r16
20029ff0:	002fa4c0 	call	2002fa4c <__sprint_r>
20029ff4:	103f011e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
20029ff8:	8c7ffc04 	addi	r17,r17,-16
20029ffc:	d8c02017 	ldw	r3,128(sp)
2002a000:	d8801f17 	ldw	r2,124(sp)
2002a004:	da000404 	addi	r8,sp,16
2002a008:	b47fed16 	blt	r22,r17,20029fc0 <_gp+0xfffeaa60>
2002a00c:	9021883a 	mov	r16,r18
2002a010:	9825883a 	mov	r18,r19
2002a014:	8827883a 	mov	r19,r17
2002a018:	dc403b17 	ldw	r17,236(sp)
2002a01c:	d9403517 	ldw	r5,212(sp)
2002a020:	98c7883a 	add	r3,r19,r3
2002a024:	10800044 	addi	r2,r2,1
2002a028:	41400015 	stw	r5,0(r8)
2002a02c:	44c00115 	stw	r19,4(r8)
2002a030:	d8c02015 	stw	r3,128(sp)
2002a034:	d8801f15 	stw	r2,124(sp)
2002a038:	010001c4 	movi	r4,7
2002a03c:	2082a316 	blt	r4,r2,2002aacc <___vfprintf_internal_r+0x12d8>
2002a040:	df002787 	ldb	fp,158(sp)
2002a044:	42000204 	addi	r8,r8,8
2002a048:	e0000c26 	beq	fp,zero,2002a07c <___vfprintf_internal_r+0x888>
2002a04c:	d8801f17 	ldw	r2,124(sp)
2002a050:	d9002784 	addi	r4,sp,158
2002a054:	18c00044 	addi	r3,r3,1
2002a058:	10800044 	addi	r2,r2,1
2002a05c:	41000015 	stw	r4,0(r8)
2002a060:	01000044 	movi	r4,1
2002a064:	41000115 	stw	r4,4(r8)
2002a068:	d8c02015 	stw	r3,128(sp)
2002a06c:	d8801f15 	stw	r2,124(sp)
2002a070:	010001c4 	movi	r4,7
2002a074:	20823c16 	blt	r4,r2,2002a968 <___vfprintf_internal_r+0x1174>
2002a078:	42000204 	addi	r8,r8,8
2002a07c:	d8802b17 	ldw	r2,172(sp)
2002a080:	10000c26 	beq	r2,zero,2002a0b4 <___vfprintf_internal_r+0x8c0>
2002a084:	d8801f17 	ldw	r2,124(sp)
2002a088:	d9002704 	addi	r4,sp,156
2002a08c:	18c00084 	addi	r3,r3,2
2002a090:	10800044 	addi	r2,r2,1
2002a094:	41000015 	stw	r4,0(r8)
2002a098:	01000084 	movi	r4,2
2002a09c:	41000115 	stw	r4,4(r8)
2002a0a0:	d8c02015 	stw	r3,128(sp)
2002a0a4:	d8801f15 	stw	r2,124(sp)
2002a0a8:	010001c4 	movi	r4,7
2002a0ac:	20823616 	blt	r4,r2,2002a988 <___vfprintf_internal_r+0x1194>
2002a0b0:	42000204 	addi	r8,r8,8
2002a0b4:	d9003017 	ldw	r4,192(sp)
2002a0b8:	00802004 	movi	r2,128
2002a0bc:	20819926 	beq	r4,r2,2002a724 <___vfprintf_internal_r+0xf30>
2002a0c0:	d9402917 	ldw	r5,164(sp)
2002a0c4:	d8802e17 	ldw	r2,184(sp)
2002a0c8:	28adc83a 	sub	r22,r5,r2
2002a0cc:	0580310e 	bge	zero,r22,2002a194 <___vfprintf_internal_r+0x9a0>
2002a0d0:	07000404 	movi	fp,16
2002a0d4:	d8801f17 	ldw	r2,124(sp)
2002a0d8:	e584140e 	bge	fp,r22,2002b12c <___vfprintf_internal_r+0x1938>
2002a0dc:	014800f4 	movhi	r5,8195
2002a0e0:	29563484 	addi	r5,r5,22738
2002a0e4:	dc402915 	stw	r17,164(sp)
2002a0e8:	d9402b15 	stw	r5,172(sp)
2002a0ec:	b023883a 	mov	r17,r22
2002a0f0:	04c001c4 	movi	r19,7
2002a0f4:	a82d883a 	mov	r22,r21
2002a0f8:	902b883a 	mov	r21,r18
2002a0fc:	8025883a 	mov	r18,r16
2002a100:	dc002c17 	ldw	r16,176(sp)
2002a104:	00000306 	br	2002a114 <___vfprintf_internal_r+0x920>
2002a108:	8c7ffc04 	addi	r17,r17,-16
2002a10c:	42000204 	addi	r8,r8,8
2002a110:	e440110e 	bge	fp,r17,2002a158 <___vfprintf_internal_r+0x964>
2002a114:	18c00404 	addi	r3,r3,16
2002a118:	10800044 	addi	r2,r2,1
2002a11c:	45000015 	stw	r20,0(r8)
2002a120:	47000115 	stw	fp,4(r8)
2002a124:	d8c02015 	stw	r3,128(sp)
2002a128:	d8801f15 	stw	r2,124(sp)
2002a12c:	98bff60e 	bge	r19,r2,2002a108 <_gp+0xfffeaba8>
2002a130:	d9801e04 	addi	r6,sp,120
2002a134:	b80b883a 	mov	r5,r23
2002a138:	8009883a 	mov	r4,r16
2002a13c:	002fa4c0 	call	2002fa4c <__sprint_r>
2002a140:	103eae1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002a144:	8c7ffc04 	addi	r17,r17,-16
2002a148:	d8c02017 	ldw	r3,128(sp)
2002a14c:	d8801f17 	ldw	r2,124(sp)
2002a150:	da000404 	addi	r8,sp,16
2002a154:	e47fef16 	blt	fp,r17,2002a114 <_gp+0xfffeabb4>
2002a158:	9021883a 	mov	r16,r18
2002a15c:	a825883a 	mov	r18,r21
2002a160:	b02b883a 	mov	r21,r22
2002a164:	882d883a 	mov	r22,r17
2002a168:	dc402917 	ldw	r17,164(sp)
2002a16c:	d9002b17 	ldw	r4,172(sp)
2002a170:	1d87883a 	add	r3,r3,r22
2002a174:	10800044 	addi	r2,r2,1
2002a178:	41000015 	stw	r4,0(r8)
2002a17c:	45800115 	stw	r22,4(r8)
2002a180:	d8c02015 	stw	r3,128(sp)
2002a184:	d8801f15 	stw	r2,124(sp)
2002a188:	010001c4 	movi	r4,7
2002a18c:	2081ee16 	blt	r4,r2,2002a948 <___vfprintf_internal_r+0x1154>
2002a190:	42000204 	addi	r8,r8,8
2002a194:	9080400c 	andi	r2,r18,256
2002a198:	1001181e 	bne	r2,zero,2002a5fc <___vfprintf_internal_r+0xe08>
2002a19c:	d9402e17 	ldw	r5,184(sp)
2002a1a0:	d8801f17 	ldw	r2,124(sp)
2002a1a4:	44000015 	stw	r16,0(r8)
2002a1a8:	1947883a 	add	r3,r3,r5
2002a1ac:	10800044 	addi	r2,r2,1
2002a1b0:	41400115 	stw	r5,4(r8)
2002a1b4:	d8c02015 	stw	r3,128(sp)
2002a1b8:	d8801f15 	stw	r2,124(sp)
2002a1bc:	010001c4 	movi	r4,7
2002a1c0:	2081d316 	blt	r4,r2,2002a910 <___vfprintf_internal_r+0x111c>
2002a1c4:	42000204 	addi	r8,r8,8
2002a1c8:	9480010c 	andi	r18,r18,4
2002a1cc:	90003226 	beq	r18,zero,2002a298 <___vfprintf_internal_r+0xaa4>
2002a1d0:	d9403117 	ldw	r5,196(sp)
2002a1d4:	d8802a17 	ldw	r2,168(sp)
2002a1d8:	28a1c83a 	sub	r16,r5,r2
2002a1dc:	04002e0e 	bge	zero,r16,2002a298 <___vfprintf_internal_r+0xaa4>
2002a1e0:	04400404 	movi	r17,16
2002a1e4:	d8801f17 	ldw	r2,124(sp)
2002a1e8:	8c04a20e 	bge	r17,r16,2002b474 <___vfprintf_internal_r+0x1c80>
2002a1ec:	014800f4 	movhi	r5,8195
2002a1f0:	29563884 	addi	r5,r5,22754
2002a1f4:	d9403515 	stw	r5,212(sp)
2002a1f8:	048001c4 	movi	r18,7
2002a1fc:	dcc02c17 	ldw	r19,176(sp)
2002a200:	00000306 	br	2002a210 <___vfprintf_internal_r+0xa1c>
2002a204:	843ffc04 	addi	r16,r16,-16
2002a208:	42000204 	addi	r8,r8,8
2002a20c:	8c00130e 	bge	r17,r16,2002a25c <___vfprintf_internal_r+0xa68>
2002a210:	010800f4 	movhi	r4,8195
2002a214:	18c00404 	addi	r3,r3,16
2002a218:	10800044 	addi	r2,r2,1
2002a21c:	21163884 	addi	r4,r4,22754
2002a220:	41000015 	stw	r4,0(r8)
2002a224:	44400115 	stw	r17,4(r8)
2002a228:	d8c02015 	stw	r3,128(sp)
2002a22c:	d8801f15 	stw	r2,124(sp)
2002a230:	90bff40e 	bge	r18,r2,2002a204 <_gp+0xfffeaca4>
2002a234:	d9801e04 	addi	r6,sp,120
2002a238:	b80b883a 	mov	r5,r23
2002a23c:	9809883a 	mov	r4,r19
2002a240:	002fa4c0 	call	2002fa4c <__sprint_r>
2002a244:	103e6d1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002a248:	843ffc04 	addi	r16,r16,-16
2002a24c:	d8c02017 	ldw	r3,128(sp)
2002a250:	d8801f17 	ldw	r2,124(sp)
2002a254:	da000404 	addi	r8,sp,16
2002a258:	8c3fed16 	blt	r17,r16,2002a210 <_gp+0xfffeacb0>
2002a25c:	d9403517 	ldw	r5,212(sp)
2002a260:	1c07883a 	add	r3,r3,r16
2002a264:	10800044 	addi	r2,r2,1
2002a268:	41400015 	stw	r5,0(r8)
2002a26c:	44000115 	stw	r16,4(r8)
2002a270:	d8c02015 	stw	r3,128(sp)
2002a274:	d8801f15 	stw	r2,124(sp)
2002a278:	010001c4 	movi	r4,7
2002a27c:	2080060e 	bge	r4,r2,2002a298 <___vfprintf_internal_r+0xaa4>
2002a280:	d9002c17 	ldw	r4,176(sp)
2002a284:	d9801e04 	addi	r6,sp,120
2002a288:	b80b883a 	mov	r5,r23
2002a28c:	002fa4c0 	call	2002fa4c <__sprint_r>
2002a290:	103e5a1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002a294:	d8c02017 	ldw	r3,128(sp)
2002a298:	d8803117 	ldw	r2,196(sp)
2002a29c:	d9002a17 	ldw	r4,168(sp)
2002a2a0:	1100010e 	bge	r2,r4,2002a2a8 <___vfprintf_internal_r+0xab4>
2002a2a4:	2005883a 	mov	r2,r4
2002a2a8:	d9402f17 	ldw	r5,188(sp)
2002a2ac:	288b883a 	add	r5,r5,r2
2002a2b0:	d9402f15 	stw	r5,188(sp)
2002a2b4:	18019e1e 	bne	r3,zero,2002a930 <___vfprintf_internal_r+0x113c>
2002a2b8:	a8800007 	ldb	r2,0(r21)
2002a2bc:	d8001f15 	stw	zero,124(sp)
2002a2c0:	da000404 	addi	r8,sp,16
2002a2c4:	103d851e 	bne	r2,zero,200298dc <_gp+0xfffea37c>
2002a2c8:	a821883a 	mov	r16,r21
2002a2cc:	003d9b06 	br	2002993c <_gp+0xfffea3dc>
2002a2d0:	18c03fcc 	andi	r3,r3,255
2002a2d4:	1805c11e 	bne	r3,zero,2002b9dc <___vfprintf_internal_r+0x21e8>
2002a2d8:	94800414 	ori	r18,r18,16
2002a2dc:	9080080c 	andi	r2,r18,32
2002a2e0:	10020c26 	beq	r2,zero,2002ab14 <___vfprintf_internal_r+0x1320>
2002a2e4:	d8802d17 	ldw	r2,180(sp)
2002a2e8:	d9002917 	ldw	r4,164(sp)
2002a2ec:	d8002785 	stb	zero,158(sp)
2002a2f0:	10c00204 	addi	r3,r2,8
2002a2f4:	14c00017 	ldw	r19,0(r2)
2002a2f8:	15800117 	ldw	r22,4(r2)
2002a2fc:	20040f16 	blt	r4,zero,2002b33c <___vfprintf_internal_r+0x1b48>
2002a300:	013fdfc4 	movi	r4,-129
2002a304:	9d84b03a 	or	r2,r19,r22
2002a308:	d8c02d15 	stw	r3,180(sp)
2002a30c:	9124703a 	and	r18,r18,r4
2002a310:	0039883a 	mov	fp,zero
2002a314:	103e891e 	bne	r2,zero,20029d3c <_gp+0xfffea7dc>
2002a318:	d9002917 	ldw	r4,164(sp)
2002a31c:	2002c11e 	bne	r4,zero,2002ae24 <___vfprintf_internal_r+0x1630>
2002a320:	d8002915 	stw	zero,164(sp)
2002a324:	d8002e15 	stw	zero,184(sp)
2002a328:	dc001e04 	addi	r16,sp,120
2002a32c:	003ef806 	br	20029f10 <_gp+0xfffea9b0>
2002a330:	18c03fcc 	andi	r3,r3,255
2002a334:	18059d1e 	bne	r3,zero,2002b9ac <___vfprintf_internal_r+0x21b8>
2002a338:	014800f4 	movhi	r5,8195
2002a33c:	29562804 	addi	r5,r5,22688
2002a340:	d9403915 	stw	r5,228(sp)
2002a344:	9080080c 	andi	r2,r18,32
2002a348:	10005226 	beq	r2,zero,2002a494 <___vfprintf_internal_r+0xca0>
2002a34c:	d8802d17 	ldw	r2,180(sp)
2002a350:	14c00017 	ldw	r19,0(r2)
2002a354:	15800117 	ldw	r22,4(r2)
2002a358:	10800204 	addi	r2,r2,8
2002a35c:	d8802d15 	stw	r2,180(sp)
2002a360:	9080004c 	andi	r2,r18,1
2002a364:	10019026 	beq	r2,zero,2002a9a8 <___vfprintf_internal_r+0x11b4>
2002a368:	9d84b03a 	or	r2,r19,r22
2002a36c:	10036926 	beq	r2,zero,2002b114 <___vfprintf_internal_r+0x1920>
2002a370:	d8c02917 	ldw	r3,164(sp)
2002a374:	00800c04 	movi	r2,48
2002a378:	d8802705 	stb	r2,156(sp)
2002a37c:	dc402745 	stb	r17,157(sp)
2002a380:	d8002785 	stb	zero,158(sp)
2002a384:	90800094 	ori	r2,r18,2
2002a388:	18045d16 	blt	r3,zero,2002b500 <___vfprintf_internal_r+0x1d0c>
2002a38c:	00bfdfc4 	movi	r2,-129
2002a390:	90a4703a 	and	r18,r18,r2
2002a394:	94800094 	ori	r18,r18,2
2002a398:	0039883a 	mov	fp,zero
2002a39c:	d9003917 	ldw	r4,228(sp)
2002a3a0:	dc001e04 	addi	r16,sp,120
2002a3a4:	988003cc 	andi	r2,r19,15
2002a3a8:	b006973a 	slli	r3,r22,28
2002a3ac:	2085883a 	add	r2,r4,r2
2002a3b0:	9826d13a 	srli	r19,r19,4
2002a3b4:	10800003 	ldbu	r2,0(r2)
2002a3b8:	b02cd13a 	srli	r22,r22,4
2002a3bc:	843fffc4 	addi	r16,r16,-1
2002a3c0:	1ce6b03a 	or	r19,r3,r19
2002a3c4:	80800005 	stb	r2,0(r16)
2002a3c8:	9d84b03a 	or	r2,r19,r22
2002a3cc:	103ff51e 	bne	r2,zero,2002a3a4 <_gp+0xfffeae44>
2002a3d0:	d8c02817 	ldw	r3,160(sp)
2002a3d4:	1c07c83a 	sub	r3,r3,r16
2002a3d8:	d8c02e15 	stw	r3,184(sp)
2002a3dc:	003ecc06 	br	20029f10 <_gp+0xfffea9b0>
2002a3e0:	18c03fcc 	andi	r3,r3,255
2002a3e4:	183e9f26 	beq	r3,zero,20029e64 <_gp+0xfffea904>
2002a3e8:	d9c02785 	stb	r7,158(sp)
2002a3ec:	003e9d06 	br	20029e64 <_gp+0xfffea904>
2002a3f0:	00c00044 	movi	r3,1
2002a3f4:	01c00ac4 	movi	r7,43
2002a3f8:	ac400007 	ldb	r17,0(r21)
2002a3fc:	003d5e06 	br	20029978 <_gp+0xfffea418>
2002a400:	94800814 	ori	r18,r18,32
2002a404:	ac400007 	ldb	r17,0(r21)
2002a408:	003d5b06 	br	20029978 <_gp+0xfffea418>
2002a40c:	d8c02d17 	ldw	r3,180(sp)
2002a410:	d8002785 	stb	zero,158(sp)
2002a414:	1c000017 	ldw	r16,0(r3)
2002a418:	1cc00104 	addi	r19,r3,4
2002a41c:	80041926 	beq	r16,zero,2002b484 <___vfprintf_internal_r+0x1c90>
2002a420:	d9002917 	ldw	r4,164(sp)
2002a424:	2003d016 	blt	r4,zero,2002b368 <___vfprintf_internal_r+0x1b74>
2002a428:	200d883a 	mov	r6,r4
2002a42c:	000b883a 	mov	r5,zero
2002a430:	8009883a 	mov	r4,r16
2002a434:	da003d15 	stw	r8,244(sp)
2002a438:	002dc640 	call	2002dc64 <memchr>
2002a43c:	da003d17 	ldw	r8,244(sp)
2002a440:	10045426 	beq	r2,zero,2002b594 <___vfprintf_internal_r+0x1da0>
2002a444:	1405c83a 	sub	r2,r2,r16
2002a448:	d8802e15 	stw	r2,184(sp)
2002a44c:	1003cc16 	blt	r2,zero,2002b380 <___vfprintf_internal_r+0x1b8c>
2002a450:	df002783 	ldbu	fp,158(sp)
2002a454:	d8802a15 	stw	r2,168(sp)
2002a458:	dcc02d15 	stw	r19,180(sp)
2002a45c:	d8002915 	stw	zero,164(sp)
2002a460:	d8003215 	stw	zero,200(sp)
2002a464:	003eb006 	br	20029f28 <_gp+0xfffea9c8>
2002a468:	18c03fcc 	andi	r3,r3,255
2002a46c:	183f9b26 	beq	r3,zero,2002a2dc <_gp+0xfffead7c>
2002a470:	d9c02785 	stb	r7,158(sp)
2002a474:	003f9906 	br	2002a2dc <_gp+0xfffead7c>
2002a478:	18c03fcc 	andi	r3,r3,255
2002a47c:	1805551e 	bne	r3,zero,2002b9d4 <___vfprintf_internal_r+0x21e0>
2002a480:	014800f4 	movhi	r5,8195
2002a484:	29562d04 	addi	r5,r5,22708
2002a488:	d9403915 	stw	r5,228(sp)
2002a48c:	9080080c 	andi	r2,r18,32
2002a490:	103fae1e 	bne	r2,zero,2002a34c <_gp+0xfffeadec>
2002a494:	9080040c 	andi	r2,r18,16
2002a498:	1002de26 	beq	r2,zero,2002b014 <___vfprintf_internal_r+0x1820>
2002a49c:	d8c02d17 	ldw	r3,180(sp)
2002a4a0:	002d883a 	mov	r22,zero
2002a4a4:	1cc00017 	ldw	r19,0(r3)
2002a4a8:	18c00104 	addi	r3,r3,4
2002a4ac:	d8c02d15 	stw	r3,180(sp)
2002a4b0:	003fab06 	br	2002a360 <_gp+0xfffeae00>
2002a4b4:	38803fcc 	andi	r2,r7,255
2002a4b8:	1080201c 	xori	r2,r2,128
2002a4bc:	10bfe004 	addi	r2,r2,-128
2002a4c0:	1002d21e 	bne	r2,zero,2002b00c <___vfprintf_internal_r+0x1818>
2002a4c4:	00c00044 	movi	r3,1
2002a4c8:	01c00804 	movi	r7,32
2002a4cc:	ac400007 	ldb	r17,0(r21)
2002a4d0:	003d2906 	br	20029978 <_gp+0xfffea418>
2002a4d4:	94800054 	ori	r18,r18,1
2002a4d8:	ac400007 	ldb	r17,0(r21)
2002a4dc:	003d2606 	br	20029978 <_gp+0xfffea418>
2002a4e0:	18c03fcc 	andi	r3,r3,255
2002a4e4:	183e0526 	beq	r3,zero,20029cfc <_gp+0xfffea79c>
2002a4e8:	d9c02785 	stb	r7,158(sp)
2002a4ec:	003e0306 	br	20029cfc <_gp+0xfffea79c>
2002a4f0:	94801014 	ori	r18,r18,64
2002a4f4:	ac400007 	ldb	r17,0(r21)
2002a4f8:	003d1f06 	br	20029978 <_gp+0xfffea418>
2002a4fc:	ac400007 	ldb	r17,0(r21)
2002a500:	8a438726 	beq	r17,r9,2002b320 <___vfprintf_internal_r+0x1b2c>
2002a504:	94800414 	ori	r18,r18,16
2002a508:	003d1b06 	br	20029978 <_gp+0xfffea418>
2002a50c:	18c03fcc 	andi	r3,r3,255
2002a510:	1805341e 	bne	r3,zero,2002b9e4 <___vfprintf_internal_r+0x21f0>
2002a514:	9080080c 	andi	r2,r18,32
2002a518:	1002cd26 	beq	r2,zero,2002b050 <___vfprintf_internal_r+0x185c>
2002a51c:	d9402d17 	ldw	r5,180(sp)
2002a520:	d9002f17 	ldw	r4,188(sp)
2002a524:	28800017 	ldw	r2,0(r5)
2002a528:	2007d7fa 	srai	r3,r4,31
2002a52c:	29400104 	addi	r5,r5,4
2002a530:	d9402d15 	stw	r5,180(sp)
2002a534:	11000015 	stw	r4,0(r2)
2002a538:	10c00115 	stw	r3,4(r2)
2002a53c:	003ce506 	br	200298d4 <_gp+0xfffea374>
2002a540:	d8c02d17 	ldw	r3,180(sp)
2002a544:	d9002d17 	ldw	r4,180(sp)
2002a548:	d8002785 	stb	zero,158(sp)
2002a54c:	18800017 	ldw	r2,0(r3)
2002a550:	21000104 	addi	r4,r4,4
2002a554:	00c00044 	movi	r3,1
2002a558:	d8c02a15 	stw	r3,168(sp)
2002a55c:	d8801405 	stb	r2,80(sp)
2002a560:	d9002d15 	stw	r4,180(sp)
2002a564:	d8c02e15 	stw	r3,184(sp)
2002a568:	d8002915 	stw	zero,164(sp)
2002a56c:	d8003215 	stw	zero,200(sp)
2002a570:	dc001404 	addi	r16,sp,80
2002a574:	0039883a 	mov	fp,zero
2002a578:	003e7206 	br	20029f44 <_gp+0xfffea9e4>
2002a57c:	010800f4 	movhi	r4,8195
2002a580:	21162d04 	addi	r4,r4,22708
2002a584:	0039883a 	mov	fp,zero
2002a588:	d9003915 	stw	r4,228(sp)
2002a58c:	04401e04 	movi	r17,120
2002a590:	003f8206 	br	2002a39c <_gp+0xfffeae3c>
2002a594:	18c03fcc 	andi	r3,r3,255
2002a598:	1805061e 	bne	r3,zero,2002b9b4 <___vfprintf_internal_r+0x21c0>
2002a59c:	883d9126 	beq	r17,zero,20029be4 <_gp+0xfffea684>
2002a5a0:	00c00044 	movi	r3,1
2002a5a4:	d8c02a15 	stw	r3,168(sp)
2002a5a8:	dc401405 	stb	r17,80(sp)
2002a5ac:	d8002785 	stb	zero,158(sp)
2002a5b0:	003fec06 	br	2002a564 <_gp+0xfffeb004>
2002a5b4:	014800f4 	movhi	r5,8195
2002a5b8:	29562d04 	addi	r5,r5,22708
2002a5bc:	d9403915 	stw	r5,228(sp)
2002a5c0:	d8c02d15 	stw	r3,180(sp)
2002a5c4:	1025883a 	mov	r18,r2
2002a5c8:	04401e04 	movi	r17,120
2002a5cc:	9d84b03a 	or	r2,r19,r22
2002a5d0:	1000fc1e 	bne	r2,zero,2002a9c4 <___vfprintf_internal_r+0x11d0>
2002a5d4:	0039883a 	mov	fp,zero
2002a5d8:	00800084 	movi	r2,2
2002a5dc:	10803fcc 	andi	r2,r2,255
2002a5e0:	00c00044 	movi	r3,1
2002a5e4:	10c20f26 	beq	r2,r3,2002ae24 <___vfprintf_internal_r+0x1630>
2002a5e8:	00c00084 	movi	r3,2
2002a5ec:	10fd6326 	beq	r2,r3,20029b7c <_gp+0xfffea61c>
2002a5f0:	003e2d06 	br	20029ea8 <_gp+0xfffea948>
2002a5f4:	d8c02017 	ldw	r3,128(sp)
2002a5f8:	003e9306 	br	2002a048 <_gp+0xfffeaae8>
2002a5fc:	00801944 	movi	r2,101
2002a600:	14407e0e 	bge	r2,r17,2002a7fc <___vfprintf_internal_r+0x1008>
2002a604:	d9003617 	ldw	r4,216(sp)
2002a608:	d9403817 	ldw	r5,224(sp)
2002a60c:	000d883a 	mov	r6,zero
2002a610:	000f883a 	mov	r7,zero
2002a614:	d8c03c15 	stw	r3,240(sp)
2002a618:	da003d15 	stw	r8,244(sp)
2002a61c:	0031ff00 	call	20031ff0 <__eqdf2>
2002a620:	d8c03c17 	ldw	r3,240(sp)
2002a624:	da003d17 	ldw	r8,244(sp)
2002a628:	1000f71e 	bne	r2,zero,2002aa08 <___vfprintf_internal_r+0x1214>
2002a62c:	d8801f17 	ldw	r2,124(sp)
2002a630:	010800f4 	movhi	r4,8195
2002a634:	21163404 	addi	r4,r4,22736
2002a638:	18c00044 	addi	r3,r3,1
2002a63c:	10800044 	addi	r2,r2,1
2002a640:	41000015 	stw	r4,0(r8)
2002a644:	01000044 	movi	r4,1
2002a648:	41000115 	stw	r4,4(r8)
2002a64c:	d8c02015 	stw	r3,128(sp)
2002a650:	d8801f15 	stw	r2,124(sp)
2002a654:	010001c4 	movi	r4,7
2002a658:	2082b816 	blt	r4,r2,2002b13c <___vfprintf_internal_r+0x1948>
2002a65c:	42000204 	addi	r8,r8,8
2002a660:	d8802617 	ldw	r2,152(sp)
2002a664:	d9403317 	ldw	r5,204(sp)
2002a668:	11400216 	blt	r2,r5,2002a674 <___vfprintf_internal_r+0xe80>
2002a66c:	9080004c 	andi	r2,r18,1
2002a670:	103ed526 	beq	r2,zero,2002a1c8 <_gp+0xfffeac68>
2002a674:	d8803717 	ldw	r2,220(sp)
2002a678:	d9003417 	ldw	r4,208(sp)
2002a67c:	d9403717 	ldw	r5,220(sp)
2002a680:	1887883a 	add	r3,r3,r2
2002a684:	d8801f17 	ldw	r2,124(sp)
2002a688:	41000015 	stw	r4,0(r8)
2002a68c:	41400115 	stw	r5,4(r8)
2002a690:	10800044 	addi	r2,r2,1
2002a694:	d8c02015 	stw	r3,128(sp)
2002a698:	d8801f15 	stw	r2,124(sp)
2002a69c:	010001c4 	movi	r4,7
2002a6a0:	20832916 	blt	r4,r2,2002b348 <___vfprintf_internal_r+0x1b54>
2002a6a4:	42000204 	addi	r8,r8,8
2002a6a8:	d8803317 	ldw	r2,204(sp)
2002a6ac:	143fffc4 	addi	r16,r2,-1
2002a6b0:	043ec50e 	bge	zero,r16,2002a1c8 <_gp+0xfffeac68>
2002a6b4:	04400404 	movi	r17,16
2002a6b8:	d8801f17 	ldw	r2,124(sp)
2002a6bc:	8c00880e 	bge	r17,r16,2002a8e0 <___vfprintf_internal_r+0x10ec>
2002a6c0:	014800f4 	movhi	r5,8195
2002a6c4:	29563484 	addi	r5,r5,22738
2002a6c8:	d9402b15 	stw	r5,172(sp)
2002a6cc:	058001c4 	movi	r22,7
2002a6d0:	dcc02c17 	ldw	r19,176(sp)
2002a6d4:	00000306 	br	2002a6e4 <___vfprintf_internal_r+0xef0>
2002a6d8:	42000204 	addi	r8,r8,8
2002a6dc:	843ffc04 	addi	r16,r16,-16
2002a6e0:	8c00820e 	bge	r17,r16,2002a8ec <___vfprintf_internal_r+0x10f8>
2002a6e4:	18c00404 	addi	r3,r3,16
2002a6e8:	10800044 	addi	r2,r2,1
2002a6ec:	45000015 	stw	r20,0(r8)
2002a6f0:	44400115 	stw	r17,4(r8)
2002a6f4:	d8c02015 	stw	r3,128(sp)
2002a6f8:	d8801f15 	stw	r2,124(sp)
2002a6fc:	b0bff60e 	bge	r22,r2,2002a6d8 <_gp+0xfffeb178>
2002a700:	d9801e04 	addi	r6,sp,120
2002a704:	b80b883a 	mov	r5,r23
2002a708:	9809883a 	mov	r4,r19
2002a70c:	002fa4c0 	call	2002fa4c <__sprint_r>
2002a710:	103d3a1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002a714:	d8c02017 	ldw	r3,128(sp)
2002a718:	d8801f17 	ldw	r2,124(sp)
2002a71c:	da000404 	addi	r8,sp,16
2002a720:	003fee06 	br	2002a6dc <_gp+0xfffeb17c>
2002a724:	d9403117 	ldw	r5,196(sp)
2002a728:	d8802a17 	ldw	r2,168(sp)
2002a72c:	28adc83a 	sub	r22,r5,r2
2002a730:	05be630e 	bge	zero,r22,2002a0c0 <_gp+0xfffeab60>
2002a734:	07000404 	movi	fp,16
2002a738:	d8801f17 	ldw	r2,124(sp)
2002a73c:	e5838f0e 	bge	fp,r22,2002b57c <___vfprintf_internal_r+0x1d88>
2002a740:	014800f4 	movhi	r5,8195
2002a744:	29563484 	addi	r5,r5,22738
2002a748:	dc403015 	stw	r17,192(sp)
2002a74c:	d9402b15 	stw	r5,172(sp)
2002a750:	b023883a 	mov	r17,r22
2002a754:	04c001c4 	movi	r19,7
2002a758:	a82d883a 	mov	r22,r21
2002a75c:	902b883a 	mov	r21,r18
2002a760:	8025883a 	mov	r18,r16
2002a764:	dc002c17 	ldw	r16,176(sp)
2002a768:	00000306 	br	2002a778 <___vfprintf_internal_r+0xf84>
2002a76c:	8c7ffc04 	addi	r17,r17,-16
2002a770:	42000204 	addi	r8,r8,8
2002a774:	e440110e 	bge	fp,r17,2002a7bc <___vfprintf_internal_r+0xfc8>
2002a778:	18c00404 	addi	r3,r3,16
2002a77c:	10800044 	addi	r2,r2,1
2002a780:	45000015 	stw	r20,0(r8)
2002a784:	47000115 	stw	fp,4(r8)
2002a788:	d8c02015 	stw	r3,128(sp)
2002a78c:	d8801f15 	stw	r2,124(sp)
2002a790:	98bff60e 	bge	r19,r2,2002a76c <_gp+0xfffeb20c>
2002a794:	d9801e04 	addi	r6,sp,120
2002a798:	b80b883a 	mov	r5,r23
2002a79c:	8009883a 	mov	r4,r16
2002a7a0:	002fa4c0 	call	2002fa4c <__sprint_r>
2002a7a4:	103d151e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002a7a8:	8c7ffc04 	addi	r17,r17,-16
2002a7ac:	d8c02017 	ldw	r3,128(sp)
2002a7b0:	d8801f17 	ldw	r2,124(sp)
2002a7b4:	da000404 	addi	r8,sp,16
2002a7b8:	e47fef16 	blt	fp,r17,2002a778 <_gp+0xfffeb218>
2002a7bc:	9021883a 	mov	r16,r18
2002a7c0:	a825883a 	mov	r18,r21
2002a7c4:	b02b883a 	mov	r21,r22
2002a7c8:	882d883a 	mov	r22,r17
2002a7cc:	dc403017 	ldw	r17,192(sp)
2002a7d0:	d9002b17 	ldw	r4,172(sp)
2002a7d4:	1d87883a 	add	r3,r3,r22
2002a7d8:	10800044 	addi	r2,r2,1
2002a7dc:	41000015 	stw	r4,0(r8)
2002a7e0:	45800115 	stw	r22,4(r8)
2002a7e4:	d8c02015 	stw	r3,128(sp)
2002a7e8:	d8801f15 	stw	r2,124(sp)
2002a7ec:	010001c4 	movi	r4,7
2002a7f0:	20818e16 	blt	r4,r2,2002ae2c <___vfprintf_internal_r+0x1638>
2002a7f4:	42000204 	addi	r8,r8,8
2002a7f8:	003e3106 	br	2002a0c0 <_gp+0xfffeab60>
2002a7fc:	d9403317 	ldw	r5,204(sp)
2002a800:	00800044 	movi	r2,1
2002a804:	18c00044 	addi	r3,r3,1
2002a808:	1141530e 	bge	r2,r5,2002ad58 <___vfprintf_internal_r+0x1564>
2002a80c:	dc401f17 	ldw	r17,124(sp)
2002a810:	00800044 	movi	r2,1
2002a814:	40800115 	stw	r2,4(r8)
2002a818:	8c400044 	addi	r17,r17,1
2002a81c:	44000015 	stw	r16,0(r8)
2002a820:	d8c02015 	stw	r3,128(sp)
2002a824:	dc401f15 	stw	r17,124(sp)
2002a828:	008001c4 	movi	r2,7
2002a82c:	14416b16 	blt	r2,r17,2002addc <___vfprintf_internal_r+0x15e8>
2002a830:	42000204 	addi	r8,r8,8
2002a834:	d8803717 	ldw	r2,220(sp)
2002a838:	d9003417 	ldw	r4,208(sp)
2002a83c:	8c400044 	addi	r17,r17,1
2002a840:	10c7883a 	add	r3,r2,r3
2002a844:	40800115 	stw	r2,4(r8)
2002a848:	41000015 	stw	r4,0(r8)
2002a84c:	d8c02015 	stw	r3,128(sp)
2002a850:	dc401f15 	stw	r17,124(sp)
2002a854:	008001c4 	movi	r2,7
2002a858:	14416916 	blt	r2,r17,2002ae00 <___vfprintf_internal_r+0x160c>
2002a85c:	45800204 	addi	r22,r8,8
2002a860:	d9003617 	ldw	r4,216(sp)
2002a864:	d9403817 	ldw	r5,224(sp)
2002a868:	000d883a 	mov	r6,zero
2002a86c:	000f883a 	mov	r7,zero
2002a870:	d8c03c15 	stw	r3,240(sp)
2002a874:	0031ff00 	call	20031ff0 <__eqdf2>
2002a878:	d8c03c17 	ldw	r3,240(sp)
2002a87c:	1000bc26 	beq	r2,zero,2002ab70 <___vfprintf_internal_r+0x137c>
2002a880:	d9403317 	ldw	r5,204(sp)
2002a884:	84000044 	addi	r16,r16,1
2002a888:	8c400044 	addi	r17,r17,1
2002a88c:	28bfffc4 	addi	r2,r5,-1
2002a890:	1887883a 	add	r3,r3,r2
2002a894:	b0800115 	stw	r2,4(r22)
2002a898:	b4000015 	stw	r16,0(r22)
2002a89c:	d8c02015 	stw	r3,128(sp)
2002a8a0:	dc401f15 	stw	r17,124(sp)
2002a8a4:	008001c4 	movi	r2,7
2002a8a8:	14414316 	blt	r2,r17,2002adb8 <___vfprintf_internal_r+0x15c4>
2002a8ac:	b5800204 	addi	r22,r22,8
2002a8b0:	d9003a17 	ldw	r4,232(sp)
2002a8b4:	df0022c4 	addi	fp,sp,139
2002a8b8:	8c400044 	addi	r17,r17,1
2002a8bc:	20c7883a 	add	r3,r4,r3
2002a8c0:	b7000015 	stw	fp,0(r22)
2002a8c4:	b1000115 	stw	r4,4(r22)
2002a8c8:	d8c02015 	stw	r3,128(sp)
2002a8cc:	dc401f15 	stw	r17,124(sp)
2002a8d0:	008001c4 	movi	r2,7
2002a8d4:	14400e16 	blt	r2,r17,2002a910 <___vfprintf_internal_r+0x111c>
2002a8d8:	b2000204 	addi	r8,r22,8
2002a8dc:	003e3a06 	br	2002a1c8 <_gp+0xfffeac68>
2002a8e0:	010800f4 	movhi	r4,8195
2002a8e4:	21163484 	addi	r4,r4,22738
2002a8e8:	d9002b15 	stw	r4,172(sp)
2002a8ec:	d9002b17 	ldw	r4,172(sp)
2002a8f0:	1c07883a 	add	r3,r3,r16
2002a8f4:	44000115 	stw	r16,4(r8)
2002a8f8:	41000015 	stw	r4,0(r8)
2002a8fc:	10800044 	addi	r2,r2,1
2002a900:	d8c02015 	stw	r3,128(sp)
2002a904:	d8801f15 	stw	r2,124(sp)
2002a908:	010001c4 	movi	r4,7
2002a90c:	20be2d0e 	bge	r4,r2,2002a1c4 <_gp+0xfffeac64>
2002a910:	d9002c17 	ldw	r4,176(sp)
2002a914:	d9801e04 	addi	r6,sp,120
2002a918:	b80b883a 	mov	r5,r23
2002a91c:	002fa4c0 	call	2002fa4c <__sprint_r>
2002a920:	103cb61e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002a924:	d8c02017 	ldw	r3,128(sp)
2002a928:	da000404 	addi	r8,sp,16
2002a92c:	003e2606 	br	2002a1c8 <_gp+0xfffeac68>
2002a930:	d9002c17 	ldw	r4,176(sp)
2002a934:	d9801e04 	addi	r6,sp,120
2002a938:	b80b883a 	mov	r5,r23
2002a93c:	002fa4c0 	call	2002fa4c <__sprint_r>
2002a940:	103e5d26 	beq	r2,zero,2002a2b8 <_gp+0xfffead58>
2002a944:	003cad06 	br	20029bfc <_gp+0xfffea69c>
2002a948:	d9002c17 	ldw	r4,176(sp)
2002a94c:	d9801e04 	addi	r6,sp,120
2002a950:	b80b883a 	mov	r5,r23
2002a954:	002fa4c0 	call	2002fa4c <__sprint_r>
2002a958:	103ca81e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002a95c:	d8c02017 	ldw	r3,128(sp)
2002a960:	da000404 	addi	r8,sp,16
2002a964:	003e0b06 	br	2002a194 <_gp+0xfffeac34>
2002a968:	d9002c17 	ldw	r4,176(sp)
2002a96c:	d9801e04 	addi	r6,sp,120
2002a970:	b80b883a 	mov	r5,r23
2002a974:	002fa4c0 	call	2002fa4c <__sprint_r>
2002a978:	103ca01e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002a97c:	d8c02017 	ldw	r3,128(sp)
2002a980:	da000404 	addi	r8,sp,16
2002a984:	003dbd06 	br	2002a07c <_gp+0xfffeab1c>
2002a988:	d9002c17 	ldw	r4,176(sp)
2002a98c:	d9801e04 	addi	r6,sp,120
2002a990:	b80b883a 	mov	r5,r23
2002a994:	002fa4c0 	call	2002fa4c <__sprint_r>
2002a998:	103c981e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002a99c:	d8c02017 	ldw	r3,128(sp)
2002a9a0:	da000404 	addi	r8,sp,16
2002a9a4:	003dc306 	br	2002a0b4 <_gp+0xfffeab54>
2002a9a8:	d8802917 	ldw	r2,164(sp)
2002a9ac:	d8002785 	stb	zero,158(sp)
2002a9b0:	103f0616 	blt	r2,zero,2002a5cc <_gp+0xfffeb06c>
2002a9b4:	00ffdfc4 	movi	r3,-129
2002a9b8:	9d84b03a 	or	r2,r19,r22
2002a9bc:	90e4703a 	and	r18,r18,r3
2002a9c0:	103c6b26 	beq	r2,zero,20029b70 <_gp+0xfffea610>
2002a9c4:	0039883a 	mov	fp,zero
2002a9c8:	003e7406 	br	2002a39c <_gp+0xfffeae3c>
2002a9cc:	9080040c 	andi	r2,r18,16
2002a9d0:	1001b326 	beq	r2,zero,2002b0a0 <___vfprintf_internal_r+0x18ac>
2002a9d4:	d9002d17 	ldw	r4,180(sp)
2002a9d8:	d9402917 	ldw	r5,164(sp)
2002a9dc:	d8002785 	stb	zero,158(sp)
2002a9e0:	20800104 	addi	r2,r4,4
2002a9e4:	24c00017 	ldw	r19,0(r4)
2002a9e8:	002d883a 	mov	r22,zero
2002a9ec:	2801b516 	blt	r5,zero,2002b0c4 <___vfprintf_internal_r+0x18d0>
2002a9f0:	00ffdfc4 	movi	r3,-129
2002a9f4:	d8802d15 	stw	r2,180(sp)
2002a9f8:	90e4703a 	and	r18,r18,r3
2002a9fc:	983d2726 	beq	r19,zero,20029e9c <_gp+0xfffea93c>
2002aa00:	0039883a 	mov	fp,zero
2002aa04:	003d2a06 	br	20029eb0 <_gp+0xfffea950>
2002aa08:	dc402617 	ldw	r17,152(sp)
2002aa0c:	0441d30e 	bge	zero,r17,2002b15c <___vfprintf_internal_r+0x1968>
2002aa10:	dc403217 	ldw	r17,200(sp)
2002aa14:	d8803317 	ldw	r2,204(sp)
2002aa18:	1440010e 	bge	r2,r17,2002aa20 <___vfprintf_internal_r+0x122c>
2002aa1c:	1023883a 	mov	r17,r2
2002aa20:	04400a0e 	bge	zero,r17,2002aa4c <___vfprintf_internal_r+0x1258>
2002aa24:	d8801f17 	ldw	r2,124(sp)
2002aa28:	1c47883a 	add	r3,r3,r17
2002aa2c:	44000015 	stw	r16,0(r8)
2002aa30:	10800044 	addi	r2,r2,1
2002aa34:	44400115 	stw	r17,4(r8)
2002aa38:	d8c02015 	stw	r3,128(sp)
2002aa3c:	d8801f15 	stw	r2,124(sp)
2002aa40:	010001c4 	movi	r4,7
2002aa44:	20826516 	blt	r4,r2,2002b3dc <___vfprintf_internal_r+0x1be8>
2002aa48:	42000204 	addi	r8,r8,8
2002aa4c:	88026116 	blt	r17,zero,2002b3d4 <___vfprintf_internal_r+0x1be0>
2002aa50:	d9003217 	ldw	r4,200(sp)
2002aa54:	2463c83a 	sub	r17,r4,r17
2002aa58:	04407b0e 	bge	zero,r17,2002ac48 <___vfprintf_internal_r+0x1454>
2002aa5c:	05800404 	movi	r22,16
2002aa60:	d8801f17 	ldw	r2,124(sp)
2002aa64:	b4419d0e 	bge	r22,r17,2002b0dc <___vfprintf_internal_r+0x18e8>
2002aa68:	010800f4 	movhi	r4,8195
2002aa6c:	21163484 	addi	r4,r4,22738
2002aa70:	d9002b15 	stw	r4,172(sp)
2002aa74:	070001c4 	movi	fp,7
2002aa78:	dcc02c17 	ldw	r19,176(sp)
2002aa7c:	00000306 	br	2002aa8c <___vfprintf_internal_r+0x1298>
2002aa80:	42000204 	addi	r8,r8,8
2002aa84:	8c7ffc04 	addi	r17,r17,-16
2002aa88:	b441970e 	bge	r22,r17,2002b0e8 <___vfprintf_internal_r+0x18f4>
2002aa8c:	18c00404 	addi	r3,r3,16
2002aa90:	10800044 	addi	r2,r2,1
2002aa94:	45000015 	stw	r20,0(r8)
2002aa98:	45800115 	stw	r22,4(r8)
2002aa9c:	d8c02015 	stw	r3,128(sp)
2002aaa0:	d8801f15 	stw	r2,124(sp)
2002aaa4:	e0bff60e 	bge	fp,r2,2002aa80 <_gp+0xfffeb520>
2002aaa8:	d9801e04 	addi	r6,sp,120
2002aaac:	b80b883a 	mov	r5,r23
2002aab0:	9809883a 	mov	r4,r19
2002aab4:	002fa4c0 	call	2002fa4c <__sprint_r>
2002aab8:	103c501e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002aabc:	d8c02017 	ldw	r3,128(sp)
2002aac0:	d8801f17 	ldw	r2,124(sp)
2002aac4:	da000404 	addi	r8,sp,16
2002aac8:	003fee06 	br	2002aa84 <_gp+0xfffeb524>
2002aacc:	d9002c17 	ldw	r4,176(sp)
2002aad0:	d9801e04 	addi	r6,sp,120
2002aad4:	b80b883a 	mov	r5,r23
2002aad8:	002fa4c0 	call	2002fa4c <__sprint_r>
2002aadc:	103c471e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002aae0:	d8c02017 	ldw	r3,128(sp)
2002aae4:	df002787 	ldb	fp,158(sp)
2002aae8:	da000404 	addi	r8,sp,16
2002aaec:	003d5606 	br	2002a048 <_gp+0xfffeaae8>
2002aaf0:	9080040c 	andi	r2,r18,16
2002aaf4:	10016126 	beq	r2,zero,2002b07c <___vfprintf_internal_r+0x1888>
2002aaf8:	d8802d17 	ldw	r2,180(sp)
2002aafc:	14c00017 	ldw	r19,0(r2)
2002ab00:	10800104 	addi	r2,r2,4
2002ab04:	d8802d15 	stw	r2,180(sp)
2002ab08:	982dd7fa 	srai	r22,r19,31
2002ab0c:	b005883a 	mov	r2,r22
2002ab10:	003c8206 	br	20029d1c <_gp+0xfffea7bc>
2002ab14:	9080040c 	andi	r2,r18,16
2002ab18:	10003526 	beq	r2,zero,2002abf0 <___vfprintf_internal_r+0x13fc>
2002ab1c:	d9402d17 	ldw	r5,180(sp)
2002ab20:	d8c02917 	ldw	r3,164(sp)
2002ab24:	d8002785 	stb	zero,158(sp)
2002ab28:	28800104 	addi	r2,r5,4
2002ab2c:	2cc00017 	ldw	r19,0(r5)
2002ab30:	002d883a 	mov	r22,zero
2002ab34:	18003716 	blt	r3,zero,2002ac14 <___vfprintf_internal_r+0x1420>
2002ab38:	00ffdfc4 	movi	r3,-129
2002ab3c:	d8802d15 	stw	r2,180(sp)
2002ab40:	90e4703a 	and	r18,r18,r3
2002ab44:	0039883a 	mov	fp,zero
2002ab48:	983df326 	beq	r19,zero,2002a318 <_gp+0xfffeadb8>
2002ab4c:	00800244 	movi	r2,9
2002ab50:	14fc7b36 	bltu	r2,r19,20029d40 <_gp+0xfffea7e0>
2002ab54:	d8c02817 	ldw	r3,160(sp)
2002ab58:	dc001dc4 	addi	r16,sp,119
2002ab5c:	9cc00c04 	addi	r19,r19,48
2002ab60:	1c07c83a 	sub	r3,r3,r16
2002ab64:	dcc01dc5 	stb	r19,119(sp)
2002ab68:	d8c02e15 	stw	r3,184(sp)
2002ab6c:	003ce806 	br	20029f10 <_gp+0xfffea9b0>
2002ab70:	d8803317 	ldw	r2,204(sp)
2002ab74:	143fffc4 	addi	r16,r2,-1
2002ab78:	043f4d0e 	bge	zero,r16,2002a8b0 <_gp+0xfffeb350>
2002ab7c:	07000404 	movi	fp,16
2002ab80:	e400810e 	bge	fp,r16,2002ad88 <___vfprintf_internal_r+0x1594>
2002ab84:	014800f4 	movhi	r5,8195
2002ab88:	29563484 	addi	r5,r5,22738
2002ab8c:	d9402b15 	stw	r5,172(sp)
2002ab90:	01c001c4 	movi	r7,7
2002ab94:	dcc02c17 	ldw	r19,176(sp)
2002ab98:	00000306 	br	2002aba8 <___vfprintf_internal_r+0x13b4>
2002ab9c:	b5800204 	addi	r22,r22,8
2002aba0:	843ffc04 	addi	r16,r16,-16
2002aba4:	e4007b0e 	bge	fp,r16,2002ad94 <___vfprintf_internal_r+0x15a0>
2002aba8:	18c00404 	addi	r3,r3,16
2002abac:	8c400044 	addi	r17,r17,1
2002abb0:	b5000015 	stw	r20,0(r22)
2002abb4:	b7000115 	stw	fp,4(r22)
2002abb8:	d8c02015 	stw	r3,128(sp)
2002abbc:	dc401f15 	stw	r17,124(sp)
2002abc0:	3c7ff60e 	bge	r7,r17,2002ab9c <_gp+0xfffeb63c>
2002abc4:	d9801e04 	addi	r6,sp,120
2002abc8:	b80b883a 	mov	r5,r23
2002abcc:	9809883a 	mov	r4,r19
2002abd0:	d9c03c15 	stw	r7,240(sp)
2002abd4:	002fa4c0 	call	2002fa4c <__sprint_r>
2002abd8:	d9c03c17 	ldw	r7,240(sp)
2002abdc:	103c071e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002abe0:	d8c02017 	ldw	r3,128(sp)
2002abe4:	dc401f17 	ldw	r17,124(sp)
2002abe8:	dd800404 	addi	r22,sp,16
2002abec:	003fec06 	br	2002aba0 <_gp+0xfffeb640>
2002abf0:	9080100c 	andi	r2,r18,64
2002abf4:	d8002785 	stb	zero,158(sp)
2002abf8:	10010e26 	beq	r2,zero,2002b034 <___vfprintf_internal_r+0x1840>
2002abfc:	d9002d17 	ldw	r4,180(sp)
2002ac00:	d9402917 	ldw	r5,164(sp)
2002ac04:	002d883a 	mov	r22,zero
2002ac08:	20800104 	addi	r2,r4,4
2002ac0c:	24c0000b 	ldhu	r19,0(r4)
2002ac10:	283fc90e 	bge	r5,zero,2002ab38 <_gp+0xfffeb5d8>
2002ac14:	d8802d15 	stw	r2,180(sp)
2002ac18:	0039883a 	mov	fp,zero
2002ac1c:	9d84b03a 	or	r2,r19,r22
2002ac20:	103c461e 	bne	r2,zero,20029d3c <_gp+0xfffea7dc>
2002ac24:	00800044 	movi	r2,1
2002ac28:	003e6c06 	br	2002a5dc <_gp+0xfffeb07c>
2002ac2c:	d9002c17 	ldw	r4,176(sp)
2002ac30:	d9801e04 	addi	r6,sp,120
2002ac34:	b80b883a 	mov	r5,r23
2002ac38:	002fa4c0 	call	2002fa4c <__sprint_r>
2002ac3c:	103bef1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002ac40:	d8c02017 	ldw	r3,128(sp)
2002ac44:	da000404 	addi	r8,sp,16
2002ac48:	d9003217 	ldw	r4,200(sp)
2002ac4c:	d8802617 	ldw	r2,152(sp)
2002ac50:	d9403317 	ldw	r5,204(sp)
2002ac54:	8123883a 	add	r17,r16,r4
2002ac58:	11400216 	blt	r2,r5,2002ac64 <___vfprintf_internal_r+0x1470>
2002ac5c:	9100004c 	andi	r4,r18,1
2002ac60:	20000d26 	beq	r4,zero,2002ac98 <___vfprintf_internal_r+0x14a4>
2002ac64:	d9003717 	ldw	r4,220(sp)
2002ac68:	d9403417 	ldw	r5,208(sp)
2002ac6c:	1907883a 	add	r3,r3,r4
2002ac70:	d9001f17 	ldw	r4,124(sp)
2002ac74:	41400015 	stw	r5,0(r8)
2002ac78:	d9403717 	ldw	r5,220(sp)
2002ac7c:	21000044 	addi	r4,r4,1
2002ac80:	d8c02015 	stw	r3,128(sp)
2002ac84:	41400115 	stw	r5,4(r8)
2002ac88:	d9001f15 	stw	r4,124(sp)
2002ac8c:	014001c4 	movi	r5,7
2002ac90:	2901e816 	blt	r5,r4,2002b434 <___vfprintf_internal_r+0x1c40>
2002ac94:	42000204 	addi	r8,r8,8
2002ac98:	d9003317 	ldw	r4,204(sp)
2002ac9c:	8121883a 	add	r16,r16,r4
2002aca0:	2085c83a 	sub	r2,r4,r2
2002aca4:	8461c83a 	sub	r16,r16,r17
2002aca8:	1400010e 	bge	r2,r16,2002acb0 <___vfprintf_internal_r+0x14bc>
2002acac:	1021883a 	mov	r16,r2
2002acb0:	04000a0e 	bge	zero,r16,2002acdc <___vfprintf_internal_r+0x14e8>
2002acb4:	d9001f17 	ldw	r4,124(sp)
2002acb8:	1c07883a 	add	r3,r3,r16
2002acbc:	44400015 	stw	r17,0(r8)
2002acc0:	21000044 	addi	r4,r4,1
2002acc4:	44000115 	stw	r16,4(r8)
2002acc8:	d8c02015 	stw	r3,128(sp)
2002accc:	d9001f15 	stw	r4,124(sp)
2002acd0:	014001c4 	movi	r5,7
2002acd4:	2901fb16 	blt	r5,r4,2002b4c4 <___vfprintf_internal_r+0x1cd0>
2002acd8:	42000204 	addi	r8,r8,8
2002acdc:	8001f716 	blt	r16,zero,2002b4bc <___vfprintf_internal_r+0x1cc8>
2002ace0:	1421c83a 	sub	r16,r2,r16
2002ace4:	043d380e 	bge	zero,r16,2002a1c8 <_gp+0xfffeac68>
2002ace8:	04400404 	movi	r17,16
2002acec:	d8801f17 	ldw	r2,124(sp)
2002acf0:	8c3efb0e 	bge	r17,r16,2002a8e0 <_gp+0xfffeb380>
2002acf4:	014800f4 	movhi	r5,8195
2002acf8:	29563484 	addi	r5,r5,22738
2002acfc:	d9402b15 	stw	r5,172(sp)
2002ad00:	058001c4 	movi	r22,7
2002ad04:	dcc02c17 	ldw	r19,176(sp)
2002ad08:	00000306 	br	2002ad18 <___vfprintf_internal_r+0x1524>
2002ad0c:	42000204 	addi	r8,r8,8
2002ad10:	843ffc04 	addi	r16,r16,-16
2002ad14:	8c3ef50e 	bge	r17,r16,2002a8ec <_gp+0xfffeb38c>
2002ad18:	18c00404 	addi	r3,r3,16
2002ad1c:	10800044 	addi	r2,r2,1
2002ad20:	45000015 	stw	r20,0(r8)
2002ad24:	44400115 	stw	r17,4(r8)
2002ad28:	d8c02015 	stw	r3,128(sp)
2002ad2c:	d8801f15 	stw	r2,124(sp)
2002ad30:	b0bff60e 	bge	r22,r2,2002ad0c <_gp+0xfffeb7ac>
2002ad34:	d9801e04 	addi	r6,sp,120
2002ad38:	b80b883a 	mov	r5,r23
2002ad3c:	9809883a 	mov	r4,r19
2002ad40:	002fa4c0 	call	2002fa4c <__sprint_r>
2002ad44:	103bad1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002ad48:	d8c02017 	ldw	r3,128(sp)
2002ad4c:	d8801f17 	ldw	r2,124(sp)
2002ad50:	da000404 	addi	r8,sp,16
2002ad54:	003fee06 	br	2002ad10 <_gp+0xfffeb7b0>
2002ad58:	9088703a 	and	r4,r18,r2
2002ad5c:	203eab1e 	bne	r4,zero,2002a80c <_gp+0xfffeb2ac>
2002ad60:	dc401f17 	ldw	r17,124(sp)
2002ad64:	40800115 	stw	r2,4(r8)
2002ad68:	44000015 	stw	r16,0(r8)
2002ad6c:	8c400044 	addi	r17,r17,1
2002ad70:	d8c02015 	stw	r3,128(sp)
2002ad74:	dc401f15 	stw	r17,124(sp)
2002ad78:	008001c4 	movi	r2,7
2002ad7c:	14400e16 	blt	r2,r17,2002adb8 <___vfprintf_internal_r+0x15c4>
2002ad80:	45800204 	addi	r22,r8,8
2002ad84:	003eca06 	br	2002a8b0 <_gp+0xfffeb350>
2002ad88:	010800f4 	movhi	r4,8195
2002ad8c:	21163484 	addi	r4,r4,22738
2002ad90:	d9002b15 	stw	r4,172(sp)
2002ad94:	d8802b17 	ldw	r2,172(sp)
2002ad98:	1c07883a 	add	r3,r3,r16
2002ad9c:	8c400044 	addi	r17,r17,1
2002ada0:	b0800015 	stw	r2,0(r22)
2002ada4:	b4000115 	stw	r16,4(r22)
2002ada8:	d8c02015 	stw	r3,128(sp)
2002adac:	dc401f15 	stw	r17,124(sp)
2002adb0:	008001c4 	movi	r2,7
2002adb4:	147ebd0e 	bge	r2,r17,2002a8ac <_gp+0xfffeb34c>
2002adb8:	d9002c17 	ldw	r4,176(sp)
2002adbc:	d9801e04 	addi	r6,sp,120
2002adc0:	b80b883a 	mov	r5,r23
2002adc4:	002fa4c0 	call	2002fa4c <__sprint_r>
2002adc8:	103b8c1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002adcc:	d8c02017 	ldw	r3,128(sp)
2002add0:	dc401f17 	ldw	r17,124(sp)
2002add4:	dd800404 	addi	r22,sp,16
2002add8:	003eb506 	br	2002a8b0 <_gp+0xfffeb350>
2002addc:	d9002c17 	ldw	r4,176(sp)
2002ade0:	d9801e04 	addi	r6,sp,120
2002ade4:	b80b883a 	mov	r5,r23
2002ade8:	002fa4c0 	call	2002fa4c <__sprint_r>
2002adec:	103b831e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002adf0:	d8c02017 	ldw	r3,128(sp)
2002adf4:	dc401f17 	ldw	r17,124(sp)
2002adf8:	da000404 	addi	r8,sp,16
2002adfc:	003e8d06 	br	2002a834 <_gp+0xfffeb2d4>
2002ae00:	d9002c17 	ldw	r4,176(sp)
2002ae04:	d9801e04 	addi	r6,sp,120
2002ae08:	b80b883a 	mov	r5,r23
2002ae0c:	002fa4c0 	call	2002fa4c <__sprint_r>
2002ae10:	103b7a1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002ae14:	d8c02017 	ldw	r3,128(sp)
2002ae18:	dc401f17 	ldw	r17,124(sp)
2002ae1c:	dd800404 	addi	r22,sp,16
2002ae20:	003e8f06 	br	2002a860 <_gp+0xfffeb300>
2002ae24:	0027883a 	mov	r19,zero
2002ae28:	003f4a06 	br	2002ab54 <_gp+0xfffeb5f4>
2002ae2c:	d9002c17 	ldw	r4,176(sp)
2002ae30:	d9801e04 	addi	r6,sp,120
2002ae34:	b80b883a 	mov	r5,r23
2002ae38:	002fa4c0 	call	2002fa4c <__sprint_r>
2002ae3c:	103b6f1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002ae40:	d8c02017 	ldw	r3,128(sp)
2002ae44:	da000404 	addi	r8,sp,16
2002ae48:	003c9d06 	br	2002a0c0 <_gp+0xfffeab60>
2002ae4c:	04e7c83a 	sub	r19,zero,r19
2002ae50:	9804c03a 	cmpne	r2,r19,zero
2002ae54:	05adc83a 	sub	r22,zero,r22
2002ae58:	b0adc83a 	sub	r22,r22,r2
2002ae5c:	d8802917 	ldw	r2,164(sp)
2002ae60:	07000b44 	movi	fp,45
2002ae64:	df002785 	stb	fp,158(sp)
2002ae68:	10017b16 	blt	r2,zero,2002b458 <___vfprintf_internal_r+0x1c64>
2002ae6c:	00bfdfc4 	movi	r2,-129
2002ae70:	90a4703a 	and	r18,r18,r2
2002ae74:	003bb106 	br	20029d3c <_gp+0xfffea7dc>
2002ae78:	d9003617 	ldw	r4,216(sp)
2002ae7c:	d9403817 	ldw	r5,224(sp)
2002ae80:	da003d15 	stw	r8,244(sp)
2002ae84:	002f4640 	call	2002f464 <__fpclassifyd>
2002ae88:	da003d17 	ldw	r8,244(sp)
2002ae8c:	1000f026 	beq	r2,zero,2002b250 <___vfprintf_internal_r+0x1a5c>
2002ae90:	d9002917 	ldw	r4,164(sp)
2002ae94:	05bff7c4 	movi	r22,-33
2002ae98:	00bfffc4 	movi	r2,-1
2002ae9c:	8dac703a 	and	r22,r17,r22
2002aea0:	20820026 	beq	r4,r2,2002b6a4 <___vfprintf_internal_r+0x1eb0>
2002aea4:	008011c4 	movi	r2,71
2002aea8:	b081f726 	beq	r22,r2,2002b688 <___vfprintf_internal_r+0x1e94>
2002aeac:	d9003817 	ldw	r4,224(sp)
2002aeb0:	90c04014 	ori	r3,r18,256
2002aeb4:	d8c02b15 	stw	r3,172(sp)
2002aeb8:	20021516 	blt	r4,zero,2002b710 <___vfprintf_internal_r+0x1f1c>
2002aebc:	dcc03817 	ldw	r19,224(sp)
2002aec0:	d8002a05 	stb	zero,168(sp)
2002aec4:	00801984 	movi	r2,102
2002aec8:	8881f926 	beq	r17,r2,2002b6b0 <___vfprintf_internal_r+0x1ebc>
2002aecc:	00801184 	movi	r2,70
2002aed0:	88821c26 	beq	r17,r2,2002b744 <___vfprintf_internal_r+0x1f50>
2002aed4:	00801144 	movi	r2,69
2002aed8:	b081ef26 	beq	r22,r2,2002b698 <___vfprintf_internal_r+0x1ea4>
2002aedc:	d8c02917 	ldw	r3,164(sp)
2002aee0:	d8802104 	addi	r2,sp,132
2002aee4:	d8800315 	stw	r2,12(sp)
2002aee8:	d9403617 	ldw	r5,216(sp)
2002aeec:	d8802504 	addi	r2,sp,148
2002aef0:	d9002c17 	ldw	r4,176(sp)
2002aef4:	d8800215 	stw	r2,8(sp)
2002aef8:	d8802604 	addi	r2,sp,152
2002aefc:	d8c00015 	stw	r3,0(sp)
2002af00:	d8800115 	stw	r2,4(sp)
2002af04:	01c00084 	movi	r7,2
2002af08:	980d883a 	mov	r6,r19
2002af0c:	d8c03c15 	stw	r3,240(sp)
2002af10:	da003d15 	stw	r8,244(sp)
2002af14:	002bee40 	call	2002bee4 <_dtoa_r>
2002af18:	1021883a 	mov	r16,r2
2002af1c:	008019c4 	movi	r2,103
2002af20:	d8c03c17 	ldw	r3,240(sp)
2002af24:	da003d17 	ldw	r8,244(sp)
2002af28:	88817126 	beq	r17,r2,2002b4f0 <___vfprintf_internal_r+0x1cfc>
2002af2c:	008011c4 	movi	r2,71
2002af30:	88829226 	beq	r17,r2,2002b97c <___vfprintf_internal_r+0x2188>
2002af34:	80f9883a 	add	fp,r16,r3
2002af38:	d9003617 	ldw	r4,216(sp)
2002af3c:	000d883a 	mov	r6,zero
2002af40:	000f883a 	mov	r7,zero
2002af44:	980b883a 	mov	r5,r19
2002af48:	da003d15 	stw	r8,244(sp)
2002af4c:	0031ff00 	call	20031ff0 <__eqdf2>
2002af50:	da003d17 	ldw	r8,244(sp)
2002af54:	10018d26 	beq	r2,zero,2002b58c <___vfprintf_internal_r+0x1d98>
2002af58:	d8802117 	ldw	r2,132(sp)
2002af5c:	1700062e 	bgeu	r2,fp,2002af78 <___vfprintf_internal_r+0x1784>
2002af60:	01000c04 	movi	r4,48
2002af64:	10c00044 	addi	r3,r2,1
2002af68:	d8c02115 	stw	r3,132(sp)
2002af6c:	11000005 	stb	r4,0(r2)
2002af70:	d8802117 	ldw	r2,132(sp)
2002af74:	173ffb36 	bltu	r2,fp,2002af64 <_gp+0xfffeba04>
2002af78:	1405c83a 	sub	r2,r2,r16
2002af7c:	d8803315 	stw	r2,204(sp)
2002af80:	008011c4 	movi	r2,71
2002af84:	b0817626 	beq	r22,r2,2002b560 <___vfprintf_internal_r+0x1d6c>
2002af88:	00801944 	movi	r2,101
2002af8c:	1442810e 	bge	r2,r17,2002b994 <___vfprintf_internal_r+0x21a0>
2002af90:	d8c02617 	ldw	r3,152(sp)
2002af94:	00801984 	movi	r2,102
2002af98:	d8c03215 	stw	r3,200(sp)
2002af9c:	8881fe26 	beq	r17,r2,2002b798 <___vfprintf_internal_r+0x1fa4>
2002afa0:	d8c03217 	ldw	r3,200(sp)
2002afa4:	d9003317 	ldw	r4,204(sp)
2002afa8:	1901dd16 	blt	r3,r4,2002b720 <___vfprintf_internal_r+0x1f2c>
2002afac:	9480004c 	andi	r18,r18,1
2002afb0:	90022b1e 	bne	r18,zero,2002b860 <___vfprintf_internal_r+0x206c>
2002afb4:	1805883a 	mov	r2,r3
2002afb8:	18028016 	blt	r3,zero,2002b9bc <___vfprintf_internal_r+0x21c8>
2002afbc:	d8c03217 	ldw	r3,200(sp)
2002afc0:	044019c4 	movi	r17,103
2002afc4:	d8c02e15 	stw	r3,184(sp)
2002afc8:	df002a07 	ldb	fp,168(sp)
2002afcc:	e001531e 	bne	fp,zero,2002b51c <___vfprintf_internal_r+0x1d28>
2002afd0:	df002783 	ldbu	fp,158(sp)
2002afd4:	d8802a15 	stw	r2,168(sp)
2002afd8:	dc802b17 	ldw	r18,172(sp)
2002afdc:	d8002915 	stw	zero,164(sp)
2002afe0:	003bd106 	br	20029f28 <_gp+0xfffea9c8>
2002afe4:	d8802d17 	ldw	r2,180(sp)
2002afe8:	d8c02d17 	ldw	r3,180(sp)
2002afec:	d9002d17 	ldw	r4,180(sp)
2002aff0:	10800017 	ldw	r2,0(r2)
2002aff4:	18c00117 	ldw	r3,4(r3)
2002aff8:	21000204 	addi	r4,r4,8
2002affc:	d8803615 	stw	r2,216(sp)
2002b000:	d8c03815 	stw	r3,224(sp)
2002b004:	d9002d15 	stw	r4,180(sp)
2002b008:	003b7506 	br	20029de0 <_gp+0xfffea880>
2002b00c:	ac400007 	ldb	r17,0(r21)
2002b010:	003a5906 	br	20029978 <_gp+0xfffea418>
2002b014:	9080100c 	andi	r2,r18,64
2002b018:	1000a826 	beq	r2,zero,2002b2bc <___vfprintf_internal_r+0x1ac8>
2002b01c:	d9002d17 	ldw	r4,180(sp)
2002b020:	002d883a 	mov	r22,zero
2002b024:	24c0000b 	ldhu	r19,0(r4)
2002b028:	21000104 	addi	r4,r4,4
2002b02c:	d9002d15 	stw	r4,180(sp)
2002b030:	003ccb06 	br	2002a360 <_gp+0xfffeae00>
2002b034:	d8c02d17 	ldw	r3,180(sp)
2002b038:	d9002917 	ldw	r4,164(sp)
2002b03c:	002d883a 	mov	r22,zero
2002b040:	18800104 	addi	r2,r3,4
2002b044:	1cc00017 	ldw	r19,0(r3)
2002b048:	203ebb0e 	bge	r4,zero,2002ab38 <_gp+0xfffeb5d8>
2002b04c:	003ef106 	br	2002ac14 <_gp+0xfffeb6b4>
2002b050:	9080040c 	andi	r2,r18,16
2002b054:	1000921e 	bne	r2,zero,2002b2a0 <___vfprintf_internal_r+0x1aac>
2002b058:	9480100c 	andi	r18,r18,64
2002b05c:	90013926 	beq	r18,zero,2002b544 <___vfprintf_internal_r+0x1d50>
2002b060:	d9002d17 	ldw	r4,180(sp)
2002b064:	d9402f17 	ldw	r5,188(sp)
2002b068:	20800017 	ldw	r2,0(r4)
2002b06c:	21000104 	addi	r4,r4,4
2002b070:	d9002d15 	stw	r4,180(sp)
2002b074:	1140000d 	sth	r5,0(r2)
2002b078:	003a1606 	br	200298d4 <_gp+0xfffea374>
2002b07c:	9080100c 	andi	r2,r18,64
2002b080:	10008026 	beq	r2,zero,2002b284 <___vfprintf_internal_r+0x1a90>
2002b084:	d8c02d17 	ldw	r3,180(sp)
2002b088:	1cc0000f 	ldh	r19,0(r3)
2002b08c:	18c00104 	addi	r3,r3,4
2002b090:	d8c02d15 	stw	r3,180(sp)
2002b094:	982dd7fa 	srai	r22,r19,31
2002b098:	b005883a 	mov	r2,r22
2002b09c:	003b1f06 	br	20029d1c <_gp+0xfffea7bc>
2002b0a0:	9080100c 	andi	r2,r18,64
2002b0a4:	d8002785 	stb	zero,158(sp)
2002b0a8:	10008a1e 	bne	r2,zero,2002b2d4 <___vfprintf_internal_r+0x1ae0>
2002b0ac:	d9402d17 	ldw	r5,180(sp)
2002b0b0:	d8c02917 	ldw	r3,164(sp)
2002b0b4:	002d883a 	mov	r22,zero
2002b0b8:	28800104 	addi	r2,r5,4
2002b0bc:	2cc00017 	ldw	r19,0(r5)
2002b0c0:	183e4b0e 	bge	r3,zero,2002a9f0 <_gp+0xfffeb490>
2002b0c4:	9d86b03a 	or	r3,r19,r22
2002b0c8:	d8802d15 	stw	r2,180(sp)
2002b0cc:	183e4c1e 	bne	r3,zero,2002aa00 <_gp+0xfffeb4a0>
2002b0d0:	0039883a 	mov	fp,zero
2002b0d4:	0005883a 	mov	r2,zero
2002b0d8:	003d4006 	br	2002a5dc <_gp+0xfffeb07c>
2002b0dc:	014800f4 	movhi	r5,8195
2002b0e0:	29563484 	addi	r5,r5,22738
2002b0e4:	d9402b15 	stw	r5,172(sp)
2002b0e8:	d9402b17 	ldw	r5,172(sp)
2002b0ec:	1c47883a 	add	r3,r3,r17
2002b0f0:	10800044 	addi	r2,r2,1
2002b0f4:	41400015 	stw	r5,0(r8)
2002b0f8:	44400115 	stw	r17,4(r8)
2002b0fc:	d8c02015 	stw	r3,128(sp)
2002b100:	d8801f15 	stw	r2,124(sp)
2002b104:	010001c4 	movi	r4,7
2002b108:	20bec816 	blt	r4,r2,2002ac2c <_gp+0xfffeb6cc>
2002b10c:	42000204 	addi	r8,r8,8
2002b110:	003ecd06 	br	2002ac48 <_gp+0xfffeb6e8>
2002b114:	d9002917 	ldw	r4,164(sp)
2002b118:	d8002785 	stb	zero,158(sp)
2002b11c:	203d2d16 	blt	r4,zero,2002a5d4 <_gp+0xfffeb074>
2002b120:	00bfdfc4 	movi	r2,-129
2002b124:	90a4703a 	and	r18,r18,r2
2002b128:	003a9106 	br	20029b70 <_gp+0xfffea610>
2002b12c:	010800f4 	movhi	r4,8195
2002b130:	21163484 	addi	r4,r4,22738
2002b134:	d9002b15 	stw	r4,172(sp)
2002b138:	003c0c06 	br	2002a16c <_gp+0xfffeac0c>
2002b13c:	d9002c17 	ldw	r4,176(sp)
2002b140:	d9801e04 	addi	r6,sp,120
2002b144:	b80b883a 	mov	r5,r23
2002b148:	002fa4c0 	call	2002fa4c <__sprint_r>
2002b14c:	103aab1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002b150:	d8c02017 	ldw	r3,128(sp)
2002b154:	da000404 	addi	r8,sp,16
2002b158:	003d4106 	br	2002a660 <_gp+0xfffeb100>
2002b15c:	d8801f17 	ldw	r2,124(sp)
2002b160:	014800f4 	movhi	r5,8195
2002b164:	01000044 	movi	r4,1
2002b168:	18c00044 	addi	r3,r3,1
2002b16c:	10800044 	addi	r2,r2,1
2002b170:	29563404 	addi	r5,r5,22736
2002b174:	41000115 	stw	r4,4(r8)
2002b178:	41400015 	stw	r5,0(r8)
2002b17c:	d8c02015 	stw	r3,128(sp)
2002b180:	d8801f15 	stw	r2,124(sp)
2002b184:	010001c4 	movi	r4,7
2002b188:	20805c16 	blt	r4,r2,2002b2fc <___vfprintf_internal_r+0x1b08>
2002b18c:	42000204 	addi	r8,r8,8
2002b190:	8800041e 	bne	r17,zero,2002b1a4 <___vfprintf_internal_r+0x19b0>
2002b194:	d8803317 	ldw	r2,204(sp)
2002b198:	1000021e 	bne	r2,zero,2002b1a4 <___vfprintf_internal_r+0x19b0>
2002b19c:	9080004c 	andi	r2,r18,1
2002b1a0:	103c0926 	beq	r2,zero,2002a1c8 <_gp+0xfffeac68>
2002b1a4:	d9003717 	ldw	r4,220(sp)
2002b1a8:	d8801f17 	ldw	r2,124(sp)
2002b1ac:	d9403417 	ldw	r5,208(sp)
2002b1b0:	20c7883a 	add	r3,r4,r3
2002b1b4:	10800044 	addi	r2,r2,1
2002b1b8:	41000115 	stw	r4,4(r8)
2002b1bc:	41400015 	stw	r5,0(r8)
2002b1c0:	d8c02015 	stw	r3,128(sp)
2002b1c4:	d8801f15 	stw	r2,124(sp)
2002b1c8:	010001c4 	movi	r4,7
2002b1cc:	20812116 	blt	r4,r2,2002b654 <___vfprintf_internal_r+0x1e60>
2002b1d0:	42000204 	addi	r8,r8,8
2002b1d4:	0463c83a 	sub	r17,zero,r17
2002b1d8:	0440730e 	bge	zero,r17,2002b3a8 <___vfprintf_internal_r+0x1bb4>
2002b1dc:	05800404 	movi	r22,16
2002b1e0:	b440860e 	bge	r22,r17,2002b3fc <___vfprintf_internal_r+0x1c08>
2002b1e4:	014800f4 	movhi	r5,8195
2002b1e8:	29563484 	addi	r5,r5,22738
2002b1ec:	d9402b15 	stw	r5,172(sp)
2002b1f0:	070001c4 	movi	fp,7
2002b1f4:	dcc02c17 	ldw	r19,176(sp)
2002b1f8:	00000306 	br	2002b208 <___vfprintf_internal_r+0x1a14>
2002b1fc:	42000204 	addi	r8,r8,8
2002b200:	8c7ffc04 	addi	r17,r17,-16
2002b204:	b440800e 	bge	r22,r17,2002b408 <___vfprintf_internal_r+0x1c14>
2002b208:	18c00404 	addi	r3,r3,16
2002b20c:	10800044 	addi	r2,r2,1
2002b210:	45000015 	stw	r20,0(r8)
2002b214:	45800115 	stw	r22,4(r8)
2002b218:	d8c02015 	stw	r3,128(sp)
2002b21c:	d8801f15 	stw	r2,124(sp)
2002b220:	e0bff60e 	bge	fp,r2,2002b1fc <_gp+0xfffebc9c>
2002b224:	d9801e04 	addi	r6,sp,120
2002b228:	b80b883a 	mov	r5,r23
2002b22c:	9809883a 	mov	r4,r19
2002b230:	002fa4c0 	call	2002fa4c <__sprint_r>
2002b234:	103a711e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002b238:	d8c02017 	ldw	r3,128(sp)
2002b23c:	d8801f17 	ldw	r2,124(sp)
2002b240:	da000404 	addi	r8,sp,16
2002b244:	003fee06 	br	2002b200 <_gp+0xfffebca0>
2002b248:	00bfffc4 	movi	r2,-1
2002b24c:	003a6f06 	br	20029c0c <_gp+0xfffea6ac>
2002b250:	008011c4 	movi	r2,71
2002b254:	1440b816 	blt	r2,r17,2002b538 <___vfprintf_internal_r+0x1d44>
2002b258:	040800f4 	movhi	r16,8195
2002b25c:	84162604 	addi	r16,r16,22680
2002b260:	00c000c4 	movi	r3,3
2002b264:	00bfdfc4 	movi	r2,-129
2002b268:	d8c02a15 	stw	r3,168(sp)
2002b26c:	90a4703a 	and	r18,r18,r2
2002b270:	df002783 	ldbu	fp,158(sp)
2002b274:	d8c02e15 	stw	r3,184(sp)
2002b278:	d8002915 	stw	zero,164(sp)
2002b27c:	d8003215 	stw	zero,200(sp)
2002b280:	003b2906 	br	20029f28 <_gp+0xfffea9c8>
2002b284:	d9002d17 	ldw	r4,180(sp)
2002b288:	24c00017 	ldw	r19,0(r4)
2002b28c:	21000104 	addi	r4,r4,4
2002b290:	d9002d15 	stw	r4,180(sp)
2002b294:	982dd7fa 	srai	r22,r19,31
2002b298:	b005883a 	mov	r2,r22
2002b29c:	003a9f06 	br	20029d1c <_gp+0xfffea7bc>
2002b2a0:	d9402d17 	ldw	r5,180(sp)
2002b2a4:	d8c02f17 	ldw	r3,188(sp)
2002b2a8:	28800017 	ldw	r2,0(r5)
2002b2ac:	29400104 	addi	r5,r5,4
2002b2b0:	d9402d15 	stw	r5,180(sp)
2002b2b4:	10c00015 	stw	r3,0(r2)
2002b2b8:	00398606 	br	200298d4 <_gp+0xfffea374>
2002b2bc:	d9402d17 	ldw	r5,180(sp)
2002b2c0:	002d883a 	mov	r22,zero
2002b2c4:	2cc00017 	ldw	r19,0(r5)
2002b2c8:	29400104 	addi	r5,r5,4
2002b2cc:	d9402d15 	stw	r5,180(sp)
2002b2d0:	003c2306 	br	2002a360 <_gp+0xfffeae00>
2002b2d4:	d8c02d17 	ldw	r3,180(sp)
2002b2d8:	d9002917 	ldw	r4,164(sp)
2002b2dc:	002d883a 	mov	r22,zero
2002b2e0:	18800104 	addi	r2,r3,4
2002b2e4:	1cc0000b 	ldhu	r19,0(r3)
2002b2e8:	203dc10e 	bge	r4,zero,2002a9f0 <_gp+0xfffeb490>
2002b2ec:	003f7506 	br	2002b0c4 <_gp+0xfffebb64>
2002b2f0:	040800f4 	movhi	r16,8195
2002b2f4:	84162404 	addi	r16,r16,22672
2002b2f8:	003acc06 	br	20029e2c <_gp+0xfffea8cc>
2002b2fc:	d9002c17 	ldw	r4,176(sp)
2002b300:	d9801e04 	addi	r6,sp,120
2002b304:	b80b883a 	mov	r5,r23
2002b308:	002fa4c0 	call	2002fa4c <__sprint_r>
2002b30c:	103a3b1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002b310:	dc402617 	ldw	r17,152(sp)
2002b314:	d8c02017 	ldw	r3,128(sp)
2002b318:	da000404 	addi	r8,sp,16
2002b31c:	003f9c06 	br	2002b190 <_gp+0xfffebc30>
2002b320:	ac400043 	ldbu	r17,1(r21)
2002b324:	94800814 	ori	r18,r18,32
2002b328:	ad400044 	addi	r21,r21,1
2002b32c:	8c403fcc 	andi	r17,r17,255
2002b330:	8c40201c 	xori	r17,r17,128
2002b334:	8c7fe004 	addi	r17,r17,-128
2002b338:	00398f06 	br	20029978 <_gp+0xfffea418>
2002b33c:	d8c02d15 	stw	r3,180(sp)
2002b340:	0039883a 	mov	fp,zero
2002b344:	003e3506 	br	2002ac1c <_gp+0xfffeb6bc>
2002b348:	d9002c17 	ldw	r4,176(sp)
2002b34c:	d9801e04 	addi	r6,sp,120
2002b350:	b80b883a 	mov	r5,r23
2002b354:	002fa4c0 	call	2002fa4c <__sprint_r>
2002b358:	103a281e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002b35c:	d8c02017 	ldw	r3,128(sp)
2002b360:	da000404 	addi	r8,sp,16
2002b364:	003cd006 	br	2002a6a8 <_gp+0xfffeb148>
2002b368:	8009883a 	mov	r4,r16
2002b36c:	da003d15 	stw	r8,244(sp)
2002b370:	002f8b80 	call	2002f8b8 <strlen>
2002b374:	d8802e15 	stw	r2,184(sp)
2002b378:	da003d17 	ldw	r8,244(sp)
2002b37c:	103c340e 	bge	r2,zero,2002a450 <_gp+0xfffeaef0>
2002b380:	0005883a 	mov	r2,zero
2002b384:	003c3206 	br	2002a450 <_gp+0xfffeaef0>
2002b388:	d9002c17 	ldw	r4,176(sp)
2002b38c:	d9801e04 	addi	r6,sp,120
2002b390:	b80b883a 	mov	r5,r23
2002b394:	002fa4c0 	call	2002fa4c <__sprint_r>
2002b398:	103a181e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002b39c:	d8c02017 	ldw	r3,128(sp)
2002b3a0:	d8801f17 	ldw	r2,124(sp)
2002b3a4:	da000404 	addi	r8,sp,16
2002b3a8:	d9403317 	ldw	r5,204(sp)
2002b3ac:	10800044 	addi	r2,r2,1
2002b3b0:	44000015 	stw	r16,0(r8)
2002b3b4:	28c7883a 	add	r3,r5,r3
2002b3b8:	003b7d06 	br	2002a1b0 <_gp+0xfffeac50>
2002b3bc:	010800f4 	movhi	r4,8195
2002b3c0:	21163884 	addi	r4,r4,22754
2002b3c4:	d9003515 	stw	r4,212(sp)
2002b3c8:	003b1406 	br	2002a01c <_gp+0xfffeaabc>
2002b3cc:	013fffc4 	movi	r4,-1
2002b3d0:	003a3506 	br	20029ca8 <_gp+0xfffea748>
2002b3d4:	0023883a 	mov	r17,zero
2002b3d8:	003d9d06 	br	2002aa50 <_gp+0xfffeb4f0>
2002b3dc:	d9002c17 	ldw	r4,176(sp)
2002b3e0:	d9801e04 	addi	r6,sp,120
2002b3e4:	b80b883a 	mov	r5,r23
2002b3e8:	002fa4c0 	call	2002fa4c <__sprint_r>
2002b3ec:	103a031e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002b3f0:	d8c02017 	ldw	r3,128(sp)
2002b3f4:	da000404 	addi	r8,sp,16
2002b3f8:	003d9406 	br	2002aa4c <_gp+0xfffeb4ec>
2002b3fc:	010800f4 	movhi	r4,8195
2002b400:	21163484 	addi	r4,r4,22738
2002b404:	d9002b15 	stw	r4,172(sp)
2002b408:	d9002b17 	ldw	r4,172(sp)
2002b40c:	1c47883a 	add	r3,r3,r17
2002b410:	10800044 	addi	r2,r2,1
2002b414:	41000015 	stw	r4,0(r8)
2002b418:	44400115 	stw	r17,4(r8)
2002b41c:	d8c02015 	stw	r3,128(sp)
2002b420:	d8801f15 	stw	r2,124(sp)
2002b424:	010001c4 	movi	r4,7
2002b428:	20bfd716 	blt	r4,r2,2002b388 <_gp+0xfffebe28>
2002b42c:	42000204 	addi	r8,r8,8
2002b430:	003fdd06 	br	2002b3a8 <_gp+0xfffebe48>
2002b434:	d9002c17 	ldw	r4,176(sp)
2002b438:	d9801e04 	addi	r6,sp,120
2002b43c:	b80b883a 	mov	r5,r23
2002b440:	002fa4c0 	call	2002fa4c <__sprint_r>
2002b444:	1039ed1e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002b448:	d8802617 	ldw	r2,152(sp)
2002b44c:	d8c02017 	ldw	r3,128(sp)
2002b450:	da000404 	addi	r8,sp,16
2002b454:	003e1006 	br	2002ac98 <_gp+0xfffeb738>
2002b458:	00800044 	movi	r2,1
2002b45c:	10803fcc 	andi	r2,r2,255
2002b460:	00c00044 	movi	r3,1
2002b464:	10fa3526 	beq	r2,r3,20029d3c <_gp+0xfffea7dc>
2002b468:	00c00084 	movi	r3,2
2002b46c:	10fbcb26 	beq	r2,r3,2002a39c <_gp+0xfffeae3c>
2002b470:	003a8f06 	br	20029eb0 <_gp+0xfffea950>
2002b474:	010800f4 	movhi	r4,8195
2002b478:	21163884 	addi	r4,r4,22754
2002b47c:	d9003515 	stw	r4,212(sp)
2002b480:	003b7606 	br	2002a25c <_gp+0xfffeacfc>
2002b484:	d8802917 	ldw	r2,164(sp)
2002b488:	00c00184 	movi	r3,6
2002b48c:	1880012e 	bgeu	r3,r2,2002b494 <___vfprintf_internal_r+0x1ca0>
2002b490:	1805883a 	mov	r2,r3
2002b494:	d8802e15 	stw	r2,184(sp)
2002b498:	1000ef16 	blt	r2,zero,2002b858 <___vfprintf_internal_r+0x2064>
2002b49c:	040800f4 	movhi	r16,8195
2002b4a0:	d8802a15 	stw	r2,168(sp)
2002b4a4:	dcc02d15 	stw	r19,180(sp)
2002b4a8:	d8002915 	stw	zero,164(sp)
2002b4ac:	d8003215 	stw	zero,200(sp)
2002b4b0:	84163204 	addi	r16,r16,22728
2002b4b4:	0039883a 	mov	fp,zero
2002b4b8:	003aa206 	br	20029f44 <_gp+0xfffea9e4>
2002b4bc:	0021883a 	mov	r16,zero
2002b4c0:	003e0706 	br	2002ace0 <_gp+0xfffeb780>
2002b4c4:	d9002c17 	ldw	r4,176(sp)
2002b4c8:	d9801e04 	addi	r6,sp,120
2002b4cc:	b80b883a 	mov	r5,r23
2002b4d0:	002fa4c0 	call	2002fa4c <__sprint_r>
2002b4d4:	1039c91e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002b4d8:	d8802617 	ldw	r2,152(sp)
2002b4dc:	d9403317 	ldw	r5,204(sp)
2002b4e0:	d8c02017 	ldw	r3,128(sp)
2002b4e4:	da000404 	addi	r8,sp,16
2002b4e8:	2885c83a 	sub	r2,r5,r2
2002b4ec:	003dfb06 	br	2002acdc <_gp+0xfffeb77c>
2002b4f0:	9080004c 	andi	r2,r18,1
2002b4f4:	103e8f1e 	bne	r2,zero,2002af34 <_gp+0xfffeb9d4>
2002b4f8:	d8802117 	ldw	r2,132(sp)
2002b4fc:	003e9e06 	br	2002af78 <_gp+0xfffeba18>
2002b500:	1025883a 	mov	r18,r2
2002b504:	0039883a 	mov	fp,zero
2002b508:	00800084 	movi	r2,2
2002b50c:	003fd306 	br	2002b45c <_gp+0xfffebefc>
2002b510:	07000b44 	movi	fp,45
2002b514:	df002785 	stb	fp,158(sp)
2002b518:	003a4006 	br	20029e1c <_gp+0xfffea8bc>
2002b51c:	00c00b44 	movi	r3,45
2002b520:	d8c02785 	stb	r3,158(sp)
2002b524:	d8802a15 	stw	r2,168(sp)
2002b528:	dc802b17 	ldw	r18,172(sp)
2002b52c:	d8002915 	stw	zero,164(sp)
2002b530:	07000b44 	movi	fp,45
2002b534:	003a8006 	br	20029f38 <_gp+0xfffea9d8>
2002b538:	040800f4 	movhi	r16,8195
2002b53c:	84162704 	addi	r16,r16,22684
2002b540:	003f4706 	br	2002b260 <_gp+0xfffebd00>
2002b544:	d8c02d17 	ldw	r3,180(sp)
2002b548:	d9002f17 	ldw	r4,188(sp)
2002b54c:	18800017 	ldw	r2,0(r3)
2002b550:	18c00104 	addi	r3,r3,4
2002b554:	d8c02d15 	stw	r3,180(sp)
2002b558:	11000015 	stw	r4,0(r2)
2002b55c:	0038dd06 	br	200298d4 <_gp+0xfffea374>
2002b560:	dd802617 	ldw	r22,152(sp)
2002b564:	00bfff44 	movi	r2,-3
2002b568:	b0801c16 	blt	r22,r2,2002b5dc <___vfprintf_internal_r+0x1de8>
2002b56c:	d9402917 	ldw	r5,164(sp)
2002b570:	2d801a16 	blt	r5,r22,2002b5dc <___vfprintf_internal_r+0x1de8>
2002b574:	dd803215 	stw	r22,200(sp)
2002b578:	003e8906 	br	2002afa0 <_gp+0xfffeba40>
2002b57c:	010800f4 	movhi	r4,8195
2002b580:	21163484 	addi	r4,r4,22738
2002b584:	d9002b15 	stw	r4,172(sp)
2002b588:	003c9106 	br	2002a7d0 <_gp+0xfffeb270>
2002b58c:	e005883a 	mov	r2,fp
2002b590:	003e7906 	br	2002af78 <_gp+0xfffeba18>
2002b594:	d9402917 	ldw	r5,164(sp)
2002b598:	df002783 	ldbu	fp,158(sp)
2002b59c:	dcc02d15 	stw	r19,180(sp)
2002b5a0:	d9402a15 	stw	r5,168(sp)
2002b5a4:	d9402e15 	stw	r5,184(sp)
2002b5a8:	d8002915 	stw	zero,164(sp)
2002b5ac:	d8003215 	stw	zero,200(sp)
2002b5b0:	003a5d06 	br	20029f28 <_gp+0xfffea9c8>
2002b5b4:	9080004c 	andi	r2,r18,1
2002b5b8:	0039883a 	mov	fp,zero
2002b5bc:	10000426 	beq	r2,zero,2002b5d0 <___vfprintf_internal_r+0x1ddc>
2002b5c0:	00800c04 	movi	r2,48
2002b5c4:	dc001dc4 	addi	r16,sp,119
2002b5c8:	d8801dc5 	stb	r2,119(sp)
2002b5cc:	003b8006 	br	2002a3d0 <_gp+0xfffeae70>
2002b5d0:	d8002e15 	stw	zero,184(sp)
2002b5d4:	dc001e04 	addi	r16,sp,120
2002b5d8:	003a4d06 	br	20029f10 <_gp+0xfffea9b0>
2002b5dc:	8c7fff84 	addi	r17,r17,-2
2002b5e0:	b5bfffc4 	addi	r22,r22,-1
2002b5e4:	dd802615 	stw	r22,152(sp)
2002b5e8:	dc4022c5 	stb	r17,139(sp)
2002b5ec:	b000bf16 	blt	r22,zero,2002b8ec <___vfprintf_internal_r+0x20f8>
2002b5f0:	00800ac4 	movi	r2,43
2002b5f4:	d8802305 	stb	r2,140(sp)
2002b5f8:	00800244 	movi	r2,9
2002b5fc:	15807016 	blt	r2,r22,2002b7c0 <___vfprintf_internal_r+0x1fcc>
2002b600:	00800c04 	movi	r2,48
2002b604:	b5800c04 	addi	r22,r22,48
2002b608:	d8802345 	stb	r2,141(sp)
2002b60c:	dd802385 	stb	r22,142(sp)
2002b610:	d88023c4 	addi	r2,sp,143
2002b614:	df0022c4 	addi	fp,sp,139
2002b618:	d8c03317 	ldw	r3,204(sp)
2002b61c:	1739c83a 	sub	fp,r2,fp
2002b620:	d9003317 	ldw	r4,204(sp)
2002b624:	e0c7883a 	add	r3,fp,r3
2002b628:	df003a15 	stw	fp,232(sp)
2002b62c:	d8c02e15 	stw	r3,184(sp)
2002b630:	00800044 	movi	r2,1
2002b634:	1100b30e 	bge	r2,r4,2002b904 <___vfprintf_internal_r+0x2110>
2002b638:	d8c02e17 	ldw	r3,184(sp)
2002b63c:	18c00044 	addi	r3,r3,1
2002b640:	d8c02e15 	stw	r3,184(sp)
2002b644:	1805883a 	mov	r2,r3
2002b648:	1800ac16 	blt	r3,zero,2002b8fc <___vfprintf_internal_r+0x2108>
2002b64c:	d8003215 	stw	zero,200(sp)
2002b650:	003e5d06 	br	2002afc8 <_gp+0xfffeba68>
2002b654:	d9002c17 	ldw	r4,176(sp)
2002b658:	d9801e04 	addi	r6,sp,120
2002b65c:	b80b883a 	mov	r5,r23
2002b660:	002fa4c0 	call	2002fa4c <__sprint_r>
2002b664:	1039651e 	bne	r2,zero,20029bfc <_gp+0xfffea69c>
2002b668:	dc402617 	ldw	r17,152(sp)
2002b66c:	d8c02017 	ldw	r3,128(sp)
2002b670:	d8801f17 	ldw	r2,124(sp)
2002b674:	da000404 	addi	r8,sp,16
2002b678:	003ed606 	br	2002b1d4 <_gp+0xfffebc74>
2002b67c:	582b883a 	mov	r21,r11
2002b680:	d8002915 	stw	zero,164(sp)
2002b684:	0038bd06 	br	2002997c <_gp+0xfffea41c>
2002b688:	d8802917 	ldw	r2,164(sp)
2002b68c:	103e071e 	bne	r2,zero,2002aeac <_gp+0xfffeb94c>
2002b690:	dc002915 	stw	r16,164(sp)
2002b694:	003e0506 	br	2002aeac <_gp+0xfffeb94c>
2002b698:	d9002917 	ldw	r4,164(sp)
2002b69c:	20c00044 	addi	r3,r4,1
2002b6a0:	003e0f06 	br	2002aee0 <_gp+0xfffeb980>
2002b6a4:	01400184 	movi	r5,6
2002b6a8:	d9402915 	stw	r5,164(sp)
2002b6ac:	003dff06 	br	2002aeac <_gp+0xfffeb94c>
2002b6b0:	d8802104 	addi	r2,sp,132
2002b6b4:	d8800315 	stw	r2,12(sp)
2002b6b8:	d8802504 	addi	r2,sp,148
2002b6bc:	d8800215 	stw	r2,8(sp)
2002b6c0:	d8802604 	addi	r2,sp,152
2002b6c4:	d8800115 	stw	r2,4(sp)
2002b6c8:	d8802917 	ldw	r2,164(sp)
2002b6cc:	d9403617 	ldw	r5,216(sp)
2002b6d0:	d9002c17 	ldw	r4,176(sp)
2002b6d4:	d8800015 	stw	r2,0(sp)
2002b6d8:	01c000c4 	movi	r7,3
2002b6dc:	980d883a 	mov	r6,r19
2002b6e0:	da003d15 	stw	r8,244(sp)
2002b6e4:	002bee40 	call	2002bee4 <_dtoa_r>
2002b6e8:	d8c02917 	ldw	r3,164(sp)
2002b6ec:	da003d17 	ldw	r8,244(sp)
2002b6f0:	1021883a 	mov	r16,r2
2002b6f4:	10f9883a 	add	fp,r2,r3
2002b6f8:	81000007 	ldb	r4,0(r16)
2002b6fc:	00800c04 	movi	r2,48
2002b700:	20805e26 	beq	r4,r2,2002b87c <___vfprintf_internal_r+0x2088>
2002b704:	d8c02617 	ldw	r3,152(sp)
2002b708:	e0f9883a 	add	fp,fp,r3
2002b70c:	003e0a06 	br	2002af38 <_gp+0xfffeb9d8>
2002b710:	00c00b44 	movi	r3,45
2002b714:	24e0003c 	xorhi	r19,r4,32768
2002b718:	d8c02a05 	stb	r3,168(sp)
2002b71c:	003de906 	br	2002aec4 <_gp+0xfffeb964>
2002b720:	d8c03217 	ldw	r3,200(sp)
2002b724:	00c07a0e 	bge	zero,r3,2002b910 <___vfprintf_internal_r+0x211c>
2002b728:	00800044 	movi	r2,1
2002b72c:	d9003317 	ldw	r4,204(sp)
2002b730:	1105883a 	add	r2,r2,r4
2002b734:	d8802e15 	stw	r2,184(sp)
2002b738:	10004e16 	blt	r2,zero,2002b874 <___vfprintf_internal_r+0x2080>
2002b73c:	044019c4 	movi	r17,103
2002b740:	003e2106 	br	2002afc8 <_gp+0xfffeba68>
2002b744:	d9002917 	ldw	r4,164(sp)
2002b748:	d8802104 	addi	r2,sp,132
2002b74c:	d8800315 	stw	r2,12(sp)
2002b750:	d9000015 	stw	r4,0(sp)
2002b754:	d8802504 	addi	r2,sp,148
2002b758:	d9403617 	ldw	r5,216(sp)
2002b75c:	d9002c17 	ldw	r4,176(sp)
2002b760:	d8800215 	stw	r2,8(sp)
2002b764:	d8802604 	addi	r2,sp,152
2002b768:	d8800115 	stw	r2,4(sp)
2002b76c:	01c000c4 	movi	r7,3
2002b770:	980d883a 	mov	r6,r19
2002b774:	da003d15 	stw	r8,244(sp)
2002b778:	002bee40 	call	2002bee4 <_dtoa_r>
2002b77c:	d8c02917 	ldw	r3,164(sp)
2002b780:	da003d17 	ldw	r8,244(sp)
2002b784:	1021883a 	mov	r16,r2
2002b788:	00801184 	movi	r2,70
2002b78c:	80f9883a 	add	fp,r16,r3
2002b790:	88bfd926 	beq	r17,r2,2002b6f8 <_gp+0xfffec198>
2002b794:	003de806 	br	2002af38 <_gp+0xfffeb9d8>
2002b798:	d9002917 	ldw	r4,164(sp)
2002b79c:	00c04d0e 	bge	zero,r3,2002b8d4 <___vfprintf_internal_r+0x20e0>
2002b7a0:	2000441e 	bne	r4,zero,2002b8b4 <___vfprintf_internal_r+0x20c0>
2002b7a4:	9480004c 	andi	r18,r18,1
2002b7a8:	9000421e 	bne	r18,zero,2002b8b4 <___vfprintf_internal_r+0x20c0>
2002b7ac:	1805883a 	mov	r2,r3
2002b7b0:	18007016 	blt	r3,zero,2002b974 <___vfprintf_internal_r+0x2180>
2002b7b4:	d8c03217 	ldw	r3,200(sp)
2002b7b8:	d8c02e15 	stw	r3,184(sp)
2002b7bc:	003e0206 	br	2002afc8 <_gp+0xfffeba68>
2002b7c0:	df0022c4 	addi	fp,sp,139
2002b7c4:	dc002915 	stw	r16,164(sp)
2002b7c8:	4027883a 	mov	r19,r8
2002b7cc:	e021883a 	mov	r16,fp
2002b7d0:	b009883a 	mov	r4,r22
2002b7d4:	01400284 	movi	r5,10
2002b7d8:	00247ec0 	call	200247ec <__modsi3>
2002b7dc:	10800c04 	addi	r2,r2,48
2002b7e0:	843fffc4 	addi	r16,r16,-1
2002b7e4:	b009883a 	mov	r4,r22
2002b7e8:	01400284 	movi	r5,10
2002b7ec:	80800005 	stb	r2,0(r16)
2002b7f0:	00247680 	call	20024768 <__divsi3>
2002b7f4:	102d883a 	mov	r22,r2
2002b7f8:	00800244 	movi	r2,9
2002b7fc:	15bff416 	blt	r2,r22,2002b7d0 <_gp+0xfffec270>
2002b800:	9811883a 	mov	r8,r19
2002b804:	b0800c04 	addi	r2,r22,48
2002b808:	8027883a 	mov	r19,r16
2002b80c:	997fffc4 	addi	r5,r19,-1
2002b810:	98bfffc5 	stb	r2,-1(r19)
2002b814:	dc002917 	ldw	r16,164(sp)
2002b818:	2f006a2e 	bgeu	r5,fp,2002b9c4 <___vfprintf_internal_r+0x21d0>
2002b81c:	d9c02384 	addi	r7,sp,142
2002b820:	3ccfc83a 	sub	r7,r7,r19
2002b824:	d9002344 	addi	r4,sp,141
2002b828:	e1cf883a 	add	r7,fp,r7
2002b82c:	00000106 	br	2002b834 <___vfprintf_internal_r+0x2040>
2002b830:	28800003 	ldbu	r2,0(r5)
2002b834:	20800005 	stb	r2,0(r4)
2002b838:	21000044 	addi	r4,r4,1
2002b83c:	29400044 	addi	r5,r5,1
2002b840:	393ffb1e 	bne	r7,r4,2002b830 <_gp+0xfffec2d0>
2002b844:	d8802304 	addi	r2,sp,140
2002b848:	14c5c83a 	sub	r2,r2,r19
2002b84c:	d8c02344 	addi	r3,sp,141
2002b850:	1885883a 	add	r2,r3,r2
2002b854:	003f7006 	br	2002b618 <_gp+0xfffec0b8>
2002b858:	0005883a 	mov	r2,zero
2002b85c:	003f0f06 	br	2002b49c <_gp+0xfffebf3c>
2002b860:	d8c03217 	ldw	r3,200(sp)
2002b864:	18c00044 	addi	r3,r3,1
2002b868:	d8c02e15 	stw	r3,184(sp)
2002b86c:	1805883a 	mov	r2,r3
2002b870:	183fb20e 	bge	r3,zero,2002b73c <_gp+0xfffec1dc>
2002b874:	0005883a 	mov	r2,zero
2002b878:	003fb006 	br	2002b73c <_gp+0xfffec1dc>
2002b87c:	d9003617 	ldw	r4,216(sp)
2002b880:	000d883a 	mov	r6,zero
2002b884:	000f883a 	mov	r7,zero
2002b888:	980b883a 	mov	r5,r19
2002b88c:	d8c03c15 	stw	r3,240(sp)
2002b890:	da003d15 	stw	r8,244(sp)
2002b894:	0031ff00 	call	20031ff0 <__eqdf2>
2002b898:	d8c03c17 	ldw	r3,240(sp)
2002b89c:	da003d17 	ldw	r8,244(sp)
2002b8a0:	103f9826 	beq	r2,zero,2002b704 <_gp+0xfffec1a4>
2002b8a4:	00800044 	movi	r2,1
2002b8a8:	10c7c83a 	sub	r3,r2,r3
2002b8ac:	d8c02615 	stw	r3,152(sp)
2002b8b0:	003f9506 	br	2002b708 <_gp+0xfffec1a8>
2002b8b4:	d9002917 	ldw	r4,164(sp)
2002b8b8:	d8c03217 	ldw	r3,200(sp)
2002b8bc:	20800044 	addi	r2,r4,1
2002b8c0:	1885883a 	add	r2,r3,r2
2002b8c4:	d8802e15 	stw	r2,184(sp)
2002b8c8:	103dbf0e 	bge	r2,zero,2002afc8 <_gp+0xfffeba68>
2002b8cc:	0005883a 	mov	r2,zero
2002b8d0:	003dbd06 	br	2002afc8 <_gp+0xfffeba68>
2002b8d4:	2000211e 	bne	r4,zero,2002b95c <___vfprintf_internal_r+0x2168>
2002b8d8:	9480004c 	andi	r18,r18,1
2002b8dc:	90001f1e 	bne	r18,zero,2002b95c <___vfprintf_internal_r+0x2168>
2002b8e0:	00800044 	movi	r2,1
2002b8e4:	d8802e15 	stw	r2,184(sp)
2002b8e8:	003db706 	br	2002afc8 <_gp+0xfffeba68>
2002b8ec:	00800b44 	movi	r2,45
2002b8f0:	05adc83a 	sub	r22,zero,r22
2002b8f4:	d8802305 	stb	r2,140(sp)
2002b8f8:	003f3f06 	br	2002b5f8 <_gp+0xfffec098>
2002b8fc:	0005883a 	mov	r2,zero
2002b900:	003f5206 	br	2002b64c <_gp+0xfffec0ec>
2002b904:	90a4703a 	and	r18,r18,r2
2002b908:	903f4e26 	beq	r18,zero,2002b644 <_gp+0xfffec0e4>
2002b90c:	003f4a06 	br	2002b638 <_gp+0xfffec0d8>
2002b910:	00800084 	movi	r2,2
2002b914:	10c5c83a 	sub	r2,r2,r3
2002b918:	003f8406 	br	2002b72c <_gp+0xfffec1cc>
2002b91c:	d8802d17 	ldw	r2,180(sp)
2002b920:	d9002d17 	ldw	r4,180(sp)
2002b924:	ac400043 	ldbu	r17,1(r21)
2002b928:	10800017 	ldw	r2,0(r2)
2002b92c:	582b883a 	mov	r21,r11
2002b930:	d8802915 	stw	r2,164(sp)
2002b934:	20800104 	addi	r2,r4,4
2002b938:	d9002917 	ldw	r4,164(sp)
2002b93c:	d8802d15 	stw	r2,180(sp)
2002b940:	203e7a0e 	bge	r4,zero,2002b32c <_gp+0xfffebdcc>
2002b944:	8c403fcc 	andi	r17,r17,255
2002b948:	00bfffc4 	movi	r2,-1
2002b94c:	8c40201c 	xori	r17,r17,128
2002b950:	d8802915 	stw	r2,164(sp)
2002b954:	8c7fe004 	addi	r17,r17,-128
2002b958:	00380706 	br	20029978 <_gp+0xfffea418>
2002b95c:	d8c02917 	ldw	r3,164(sp)
2002b960:	18c00084 	addi	r3,r3,2
2002b964:	d8c02e15 	stw	r3,184(sp)
2002b968:	1805883a 	mov	r2,r3
2002b96c:	183d960e 	bge	r3,zero,2002afc8 <_gp+0xfffeba68>
2002b970:	003fd606 	br	2002b8cc <_gp+0xfffec36c>
2002b974:	0005883a 	mov	r2,zero
2002b978:	003f8e06 	br	2002b7b4 <_gp+0xfffec254>
2002b97c:	9080004c 	andi	r2,r18,1
2002b980:	103f811e 	bne	r2,zero,2002b788 <_gp+0xfffec228>
2002b984:	d8802117 	ldw	r2,132(sp)
2002b988:	1405c83a 	sub	r2,r2,r16
2002b98c:	d8803315 	stw	r2,204(sp)
2002b990:	b47ef326 	beq	r22,r17,2002b560 <_gp+0xfffec000>
2002b994:	dd802617 	ldw	r22,152(sp)
2002b998:	003f1106 	br	2002b5e0 <_gp+0xfffec080>
2002b99c:	d9c02785 	stb	r7,158(sp)
2002b9a0:	00390406 	br	20029db4 <_gp+0xfffea854>
2002b9a4:	d9c02785 	stb	r7,158(sp)
2002b9a8:	0038d306 	br	20029cf8 <_gp+0xfffea798>
2002b9ac:	d9c02785 	stb	r7,158(sp)
2002b9b0:	003a6106 	br	2002a338 <_gp+0xfffeadd8>
2002b9b4:	d9c02785 	stb	r7,158(sp)
2002b9b8:	003af806 	br	2002a59c <_gp+0xfffeb03c>
2002b9bc:	0005883a 	mov	r2,zero
2002b9c0:	003d7e06 	br	2002afbc <_gp+0xfffeba5c>
2002b9c4:	d8802344 	addi	r2,sp,141
2002b9c8:	003f1306 	br	2002b618 <_gp+0xfffec0b8>
2002b9cc:	d9c02785 	stb	r7,158(sp)
2002b9d0:	00392306 	br	20029e60 <_gp+0xfffea900>
2002b9d4:	d9c02785 	stb	r7,158(sp)
2002b9d8:	003aa906 	br	2002a480 <_gp+0xfffeaf20>
2002b9dc:	d9c02785 	stb	r7,158(sp)
2002b9e0:	003a3d06 	br	2002a2d8 <_gp+0xfffead78>
2002b9e4:	d9c02785 	stb	r7,158(sp)
2002b9e8:	003aca06 	br	2002a514 <_gp+0xfffeafb4>

2002b9ec <__vfprintf_internal>:
2002b9ec:	008800f4 	movhi	r2,8195
2002b9f0:	109d5a04 	addi	r2,r2,30056
2002b9f4:	300f883a 	mov	r7,r6
2002b9f8:	280d883a 	mov	r6,r5
2002b9fc:	200b883a 	mov	r5,r4
2002ba00:	11000017 	ldw	r4,0(r2)
2002ba04:	00297f41 	jmpi	200297f4 <___vfprintf_internal_r>

2002ba08 <__sbprintf>:
2002ba08:	2880030b 	ldhu	r2,12(r5)
2002ba0c:	2ac01917 	ldw	r11,100(r5)
2002ba10:	2a80038b 	ldhu	r10,14(r5)
2002ba14:	2a400717 	ldw	r9,28(r5)
2002ba18:	2a000917 	ldw	r8,36(r5)
2002ba1c:	defee204 	addi	sp,sp,-1144
2002ba20:	00c10004 	movi	r3,1024
2002ba24:	dc011a15 	stw	r16,1128(sp)
2002ba28:	10bfff4c 	andi	r2,r2,65533
2002ba2c:	2821883a 	mov	r16,r5
2002ba30:	d8cb883a 	add	r5,sp,r3
2002ba34:	dc811c15 	stw	r18,1136(sp)
2002ba38:	dc411b15 	stw	r17,1132(sp)
2002ba3c:	dfc11d15 	stw	ra,1140(sp)
2002ba40:	2025883a 	mov	r18,r4
2002ba44:	d881030d 	sth	r2,1036(sp)
2002ba48:	dac11915 	stw	r11,1124(sp)
2002ba4c:	da81038d 	sth	r10,1038(sp)
2002ba50:	da410715 	stw	r9,1052(sp)
2002ba54:	da010915 	stw	r8,1060(sp)
2002ba58:	dec10015 	stw	sp,1024(sp)
2002ba5c:	dec10415 	stw	sp,1040(sp)
2002ba60:	d8c10215 	stw	r3,1032(sp)
2002ba64:	d8c10515 	stw	r3,1044(sp)
2002ba68:	d8010615 	stw	zero,1048(sp)
2002ba6c:	00297f40 	call	200297f4 <___vfprintf_internal_r>
2002ba70:	1023883a 	mov	r17,r2
2002ba74:	10000416 	blt	r2,zero,2002ba88 <__sbprintf+0x80>
2002ba78:	d9410004 	addi	r5,sp,1024
2002ba7c:	9009883a 	mov	r4,r18
2002ba80:	00272dc0 	call	200272dc <_fflush_r>
2002ba84:	10000d1e 	bne	r2,zero,2002babc <__sbprintf+0xb4>
2002ba88:	d881030b 	ldhu	r2,1036(sp)
2002ba8c:	1080100c 	andi	r2,r2,64
2002ba90:	10000326 	beq	r2,zero,2002baa0 <__sbprintf+0x98>
2002ba94:	8080030b 	ldhu	r2,12(r16)
2002ba98:	10801014 	ori	r2,r2,64
2002ba9c:	8080030d 	sth	r2,12(r16)
2002baa0:	8805883a 	mov	r2,r17
2002baa4:	dfc11d17 	ldw	ra,1140(sp)
2002baa8:	dc811c17 	ldw	r18,1136(sp)
2002baac:	dc411b17 	ldw	r17,1132(sp)
2002bab0:	dc011a17 	ldw	r16,1128(sp)
2002bab4:	dec11e04 	addi	sp,sp,1144
2002bab8:	f800283a 	ret
2002babc:	047fffc4 	movi	r17,-1
2002bac0:	003ff106 	br	2002ba88 <_gp+0xfffec528>

2002bac4 <_write_r>:
2002bac4:	defffd04 	addi	sp,sp,-12
2002bac8:	2805883a 	mov	r2,r5
2002bacc:	dc000015 	stw	r16,0(sp)
2002bad0:	04080134 	movhi	r16,8196
2002bad4:	dc400115 	stw	r17,4(sp)
2002bad8:	300b883a 	mov	r5,r6
2002badc:	84245304 	addi	r16,r16,-28340
2002bae0:	2023883a 	mov	r17,r4
2002bae4:	380d883a 	mov	r6,r7
2002bae8:	1009883a 	mov	r4,r2
2002baec:	dfc00215 	stw	ra,8(sp)
2002baf0:	80000015 	stw	zero,0(r16)
2002baf4:	0032dbc0 	call	20032dbc <write>
2002baf8:	00ffffc4 	movi	r3,-1
2002bafc:	10c00526 	beq	r2,r3,2002bb14 <_write_r+0x50>
2002bb00:	dfc00217 	ldw	ra,8(sp)
2002bb04:	dc400117 	ldw	r17,4(sp)
2002bb08:	dc000017 	ldw	r16,0(sp)
2002bb0c:	dec00304 	addi	sp,sp,12
2002bb10:	f800283a 	ret
2002bb14:	80c00017 	ldw	r3,0(r16)
2002bb18:	183ff926 	beq	r3,zero,2002bb00 <_gp+0xfffec5a0>
2002bb1c:	88c00015 	stw	r3,0(r17)
2002bb20:	003ff706 	br	2002bb00 <_gp+0xfffec5a0>

2002bb24 <__swsetup_r>:
2002bb24:	008800f4 	movhi	r2,8195
2002bb28:	defffd04 	addi	sp,sp,-12
2002bb2c:	109d5a04 	addi	r2,r2,30056
2002bb30:	dc400115 	stw	r17,4(sp)
2002bb34:	2023883a 	mov	r17,r4
2002bb38:	11000017 	ldw	r4,0(r2)
2002bb3c:	dc000015 	stw	r16,0(sp)
2002bb40:	dfc00215 	stw	ra,8(sp)
2002bb44:	2821883a 	mov	r16,r5
2002bb48:	20000226 	beq	r4,zero,2002bb54 <__swsetup_r+0x30>
2002bb4c:	20800e17 	ldw	r2,56(r4)
2002bb50:	10003126 	beq	r2,zero,2002bc18 <__swsetup_r+0xf4>
2002bb54:	8080030b 	ldhu	r2,12(r16)
2002bb58:	10c0020c 	andi	r3,r2,8
2002bb5c:	1009883a 	mov	r4,r2
2002bb60:	18000f26 	beq	r3,zero,2002bba0 <__swsetup_r+0x7c>
2002bb64:	80c00417 	ldw	r3,16(r16)
2002bb68:	18001526 	beq	r3,zero,2002bbc0 <__swsetup_r+0x9c>
2002bb6c:	1100004c 	andi	r4,r2,1
2002bb70:	20001c1e 	bne	r4,zero,2002bbe4 <__swsetup_r+0xc0>
2002bb74:	1080008c 	andi	r2,r2,2
2002bb78:	1000291e 	bne	r2,zero,2002bc20 <__swsetup_r+0xfc>
2002bb7c:	80800517 	ldw	r2,20(r16)
2002bb80:	80800215 	stw	r2,8(r16)
2002bb84:	18001c26 	beq	r3,zero,2002bbf8 <__swsetup_r+0xd4>
2002bb88:	0005883a 	mov	r2,zero
2002bb8c:	dfc00217 	ldw	ra,8(sp)
2002bb90:	dc400117 	ldw	r17,4(sp)
2002bb94:	dc000017 	ldw	r16,0(sp)
2002bb98:	dec00304 	addi	sp,sp,12
2002bb9c:	f800283a 	ret
2002bba0:	2080040c 	andi	r2,r4,16
2002bba4:	10002e26 	beq	r2,zero,2002bc60 <__swsetup_r+0x13c>
2002bba8:	2080010c 	andi	r2,r4,4
2002bbac:	10001e1e 	bne	r2,zero,2002bc28 <__swsetup_r+0x104>
2002bbb0:	80c00417 	ldw	r3,16(r16)
2002bbb4:	20800214 	ori	r2,r4,8
2002bbb8:	8080030d 	sth	r2,12(r16)
2002bbbc:	183feb1e 	bne	r3,zero,2002bb6c <_gp+0xfffec60c>
2002bbc0:	1100a00c 	andi	r4,r2,640
2002bbc4:	01408004 	movi	r5,512
2002bbc8:	217fe826 	beq	r4,r5,2002bb6c <_gp+0xfffec60c>
2002bbcc:	800b883a 	mov	r5,r16
2002bbd0:	8809883a 	mov	r4,r17
2002bbd4:	00286b40 	call	200286b4 <__smakebuf_r>
2002bbd8:	8080030b 	ldhu	r2,12(r16)
2002bbdc:	80c00417 	ldw	r3,16(r16)
2002bbe0:	003fe206 	br	2002bb6c <_gp+0xfffec60c>
2002bbe4:	80800517 	ldw	r2,20(r16)
2002bbe8:	80000215 	stw	zero,8(r16)
2002bbec:	0085c83a 	sub	r2,zero,r2
2002bbf0:	80800615 	stw	r2,24(r16)
2002bbf4:	183fe41e 	bne	r3,zero,2002bb88 <_gp+0xfffec628>
2002bbf8:	80c0030b 	ldhu	r3,12(r16)
2002bbfc:	0005883a 	mov	r2,zero
2002bc00:	1900200c 	andi	r4,r3,128
2002bc04:	203fe126 	beq	r4,zero,2002bb8c <_gp+0xfffec62c>
2002bc08:	18c01014 	ori	r3,r3,64
2002bc0c:	80c0030d 	sth	r3,12(r16)
2002bc10:	00bfffc4 	movi	r2,-1
2002bc14:	003fdd06 	br	2002bb8c <_gp+0xfffec62c>
2002bc18:	00276b80 	call	200276b8 <__sinit>
2002bc1c:	003fcd06 	br	2002bb54 <_gp+0xfffec5f4>
2002bc20:	0005883a 	mov	r2,zero
2002bc24:	003fd606 	br	2002bb80 <_gp+0xfffec620>
2002bc28:	81400c17 	ldw	r5,48(r16)
2002bc2c:	28000626 	beq	r5,zero,2002bc48 <__swsetup_r+0x124>
2002bc30:	80801004 	addi	r2,r16,64
2002bc34:	28800326 	beq	r5,r2,2002bc44 <__swsetup_r+0x120>
2002bc38:	8809883a 	mov	r4,r17
2002bc3c:	0027c400 	call	20027c40 <_free_r>
2002bc40:	8100030b 	ldhu	r4,12(r16)
2002bc44:	80000c15 	stw	zero,48(r16)
2002bc48:	80c00417 	ldw	r3,16(r16)
2002bc4c:	00bff6c4 	movi	r2,-37
2002bc50:	1108703a 	and	r4,r2,r4
2002bc54:	80000115 	stw	zero,4(r16)
2002bc58:	80c00015 	stw	r3,0(r16)
2002bc5c:	003fd506 	br	2002bbb4 <_gp+0xfffec654>
2002bc60:	00800244 	movi	r2,9
2002bc64:	88800015 	stw	r2,0(r17)
2002bc68:	20801014 	ori	r2,r4,64
2002bc6c:	8080030d 	sth	r2,12(r16)
2002bc70:	00bfffc4 	movi	r2,-1
2002bc74:	003fc506 	br	2002bb8c <_gp+0xfffec62c>

2002bc78 <_close_r>:
2002bc78:	defffd04 	addi	sp,sp,-12
2002bc7c:	dc000015 	stw	r16,0(sp)
2002bc80:	04080134 	movhi	r16,8196
2002bc84:	dc400115 	stw	r17,4(sp)
2002bc88:	84245304 	addi	r16,r16,-28340
2002bc8c:	2023883a 	mov	r17,r4
2002bc90:	2809883a 	mov	r4,r5
2002bc94:	dfc00215 	stw	ra,8(sp)
2002bc98:	80000015 	stw	zero,0(r16)
2002bc9c:	003215c0 	call	2003215c <close>
2002bca0:	00ffffc4 	movi	r3,-1
2002bca4:	10c00526 	beq	r2,r3,2002bcbc <_close_r+0x44>
2002bca8:	dfc00217 	ldw	ra,8(sp)
2002bcac:	dc400117 	ldw	r17,4(sp)
2002bcb0:	dc000017 	ldw	r16,0(sp)
2002bcb4:	dec00304 	addi	sp,sp,12
2002bcb8:	f800283a 	ret
2002bcbc:	80c00017 	ldw	r3,0(r16)
2002bcc0:	183ff926 	beq	r3,zero,2002bca8 <_gp+0xfffec748>
2002bcc4:	88c00015 	stw	r3,0(r17)
2002bcc8:	003ff706 	br	2002bca8 <_gp+0xfffec748>

2002bccc <abort>:
2002bccc:	deffff04 	addi	sp,sp,-4
2002bcd0:	01000184 	movi	r4,6
2002bcd4:	dfc00015 	stw	ra,0(sp)
2002bcd8:	002f72c0 	call	2002f72c <raise>
2002bcdc:	01000044 	movi	r4,1
2002bce0:	00322580 	call	20032258 <_exit>

2002bce4 <quorem>:
2002bce4:	defff704 	addi	sp,sp,-36
2002bce8:	dc800215 	stw	r18,8(sp)
2002bcec:	20800417 	ldw	r2,16(r4)
2002bcf0:	2c800417 	ldw	r18,16(r5)
2002bcf4:	dfc00815 	stw	ra,32(sp)
2002bcf8:	ddc00715 	stw	r23,28(sp)
2002bcfc:	dd800615 	stw	r22,24(sp)
2002bd00:	dd400515 	stw	r21,20(sp)
2002bd04:	dd000415 	stw	r20,16(sp)
2002bd08:	dcc00315 	stw	r19,12(sp)
2002bd0c:	dc400115 	stw	r17,4(sp)
2002bd10:	dc000015 	stw	r16,0(sp)
2002bd14:	14807116 	blt	r2,r18,2002bedc <quorem+0x1f8>
2002bd18:	94bfffc4 	addi	r18,r18,-1
2002bd1c:	94ad883a 	add	r22,r18,r18
2002bd20:	b5ad883a 	add	r22,r22,r22
2002bd24:	2c400504 	addi	r17,r5,20
2002bd28:	8da9883a 	add	r20,r17,r22
2002bd2c:	25400504 	addi	r21,r4,20
2002bd30:	282f883a 	mov	r23,r5
2002bd34:	adad883a 	add	r22,r21,r22
2002bd38:	a1400017 	ldw	r5,0(r20)
2002bd3c:	2021883a 	mov	r16,r4
2002bd40:	b1000017 	ldw	r4,0(r22)
2002bd44:	29400044 	addi	r5,r5,1
2002bd48:	00248600 	call	20024860 <__udivsi3>
2002bd4c:	1027883a 	mov	r19,r2
2002bd50:	10002c26 	beq	r2,zero,2002be04 <quorem+0x120>
2002bd54:	a813883a 	mov	r9,r21
2002bd58:	880b883a 	mov	r5,r17
2002bd5c:	0009883a 	mov	r4,zero
2002bd60:	000d883a 	mov	r6,zero
2002bd64:	2a000017 	ldw	r8,0(r5)
2002bd68:	49c00017 	ldw	r7,0(r9)
2002bd6c:	29400104 	addi	r5,r5,4
2002bd70:	40bfffcc 	andi	r2,r8,65535
2002bd74:	14c5383a 	mul	r2,r2,r19
2002bd78:	4010d43a 	srli	r8,r8,16
2002bd7c:	38ffffcc 	andi	r3,r7,65535
2002bd80:	1105883a 	add	r2,r2,r4
2002bd84:	1008d43a 	srli	r4,r2,16
2002bd88:	44d1383a 	mul	r8,r8,r19
2002bd8c:	198d883a 	add	r6,r3,r6
2002bd90:	10ffffcc 	andi	r3,r2,65535
2002bd94:	30c7c83a 	sub	r3,r6,r3
2002bd98:	380ed43a 	srli	r7,r7,16
2002bd9c:	4105883a 	add	r2,r8,r4
2002bda0:	180dd43a 	srai	r6,r3,16
2002bda4:	113fffcc 	andi	r4,r2,65535
2002bda8:	390fc83a 	sub	r7,r7,r4
2002bdac:	398d883a 	add	r6,r7,r6
2002bdb0:	300e943a 	slli	r7,r6,16
2002bdb4:	18ffffcc 	andi	r3,r3,65535
2002bdb8:	1008d43a 	srli	r4,r2,16
2002bdbc:	38ceb03a 	or	r7,r7,r3
2002bdc0:	49c00015 	stw	r7,0(r9)
2002bdc4:	300dd43a 	srai	r6,r6,16
2002bdc8:	4a400104 	addi	r9,r9,4
2002bdcc:	a17fe52e 	bgeu	r20,r5,2002bd64 <_gp+0xfffec804>
2002bdd0:	b0800017 	ldw	r2,0(r22)
2002bdd4:	10000b1e 	bne	r2,zero,2002be04 <quorem+0x120>
2002bdd8:	b0bfff04 	addi	r2,r22,-4
2002bddc:	a880082e 	bgeu	r21,r2,2002be00 <quorem+0x11c>
2002bde0:	b0ffff17 	ldw	r3,-4(r22)
2002bde4:	18000326 	beq	r3,zero,2002bdf4 <quorem+0x110>
2002bde8:	00000506 	br	2002be00 <quorem+0x11c>
2002bdec:	10c00017 	ldw	r3,0(r2)
2002bdf0:	1800031e 	bne	r3,zero,2002be00 <quorem+0x11c>
2002bdf4:	10bfff04 	addi	r2,r2,-4
2002bdf8:	94bfffc4 	addi	r18,r18,-1
2002bdfc:	a8bffb36 	bltu	r21,r2,2002bdec <_gp+0xfffec88c>
2002be00:	84800415 	stw	r18,16(r16)
2002be04:	b80b883a 	mov	r5,r23
2002be08:	8009883a 	mov	r4,r16
2002be0c:	002e76c0 	call	2002e76c <__mcmp>
2002be10:	10002616 	blt	r2,zero,2002beac <quorem+0x1c8>
2002be14:	9cc00044 	addi	r19,r19,1
2002be18:	a805883a 	mov	r2,r21
2002be1c:	000b883a 	mov	r5,zero
2002be20:	11000017 	ldw	r4,0(r2)
2002be24:	89800017 	ldw	r6,0(r17)
2002be28:	10800104 	addi	r2,r2,4
2002be2c:	20ffffcc 	andi	r3,r4,65535
2002be30:	194b883a 	add	r5,r3,r5
2002be34:	30ffffcc 	andi	r3,r6,65535
2002be38:	28c7c83a 	sub	r3,r5,r3
2002be3c:	300cd43a 	srli	r6,r6,16
2002be40:	2008d43a 	srli	r4,r4,16
2002be44:	180bd43a 	srai	r5,r3,16
2002be48:	18ffffcc 	andi	r3,r3,65535
2002be4c:	2189c83a 	sub	r4,r4,r6
2002be50:	2149883a 	add	r4,r4,r5
2002be54:	200c943a 	slli	r6,r4,16
2002be58:	8c400104 	addi	r17,r17,4
2002be5c:	200bd43a 	srai	r5,r4,16
2002be60:	30c6b03a 	or	r3,r6,r3
2002be64:	10ffff15 	stw	r3,-4(r2)
2002be68:	a47fed2e 	bgeu	r20,r17,2002be20 <_gp+0xfffec8c0>
2002be6c:	9485883a 	add	r2,r18,r18
2002be70:	1085883a 	add	r2,r2,r2
2002be74:	a887883a 	add	r3,r21,r2
2002be78:	18800017 	ldw	r2,0(r3)
2002be7c:	10000b1e 	bne	r2,zero,2002beac <quorem+0x1c8>
2002be80:	18bfff04 	addi	r2,r3,-4
2002be84:	a880082e 	bgeu	r21,r2,2002bea8 <quorem+0x1c4>
2002be88:	18ffff17 	ldw	r3,-4(r3)
2002be8c:	18000326 	beq	r3,zero,2002be9c <quorem+0x1b8>
2002be90:	00000506 	br	2002bea8 <quorem+0x1c4>
2002be94:	10c00017 	ldw	r3,0(r2)
2002be98:	1800031e 	bne	r3,zero,2002bea8 <quorem+0x1c4>
2002be9c:	10bfff04 	addi	r2,r2,-4
2002bea0:	94bfffc4 	addi	r18,r18,-1
2002bea4:	a8bffb36 	bltu	r21,r2,2002be94 <_gp+0xfffec934>
2002bea8:	84800415 	stw	r18,16(r16)
2002beac:	9805883a 	mov	r2,r19
2002beb0:	dfc00817 	ldw	ra,32(sp)
2002beb4:	ddc00717 	ldw	r23,28(sp)
2002beb8:	dd800617 	ldw	r22,24(sp)
2002bebc:	dd400517 	ldw	r21,20(sp)
2002bec0:	dd000417 	ldw	r20,16(sp)
2002bec4:	dcc00317 	ldw	r19,12(sp)
2002bec8:	dc800217 	ldw	r18,8(sp)
2002becc:	dc400117 	ldw	r17,4(sp)
2002bed0:	dc000017 	ldw	r16,0(sp)
2002bed4:	dec00904 	addi	sp,sp,36
2002bed8:	f800283a 	ret
2002bedc:	0005883a 	mov	r2,zero
2002bee0:	003ff306 	br	2002beb0 <_gp+0xfffec950>

2002bee4 <_dtoa_r>:
2002bee4:	20801017 	ldw	r2,64(r4)
2002bee8:	deffde04 	addi	sp,sp,-136
2002beec:	df002015 	stw	fp,128(sp)
2002bef0:	dcc01b15 	stw	r19,108(sp)
2002bef4:	dc801a15 	stw	r18,104(sp)
2002bef8:	dc401915 	stw	r17,100(sp)
2002befc:	dc001815 	stw	r16,96(sp)
2002bf00:	dfc02115 	stw	ra,132(sp)
2002bf04:	ddc01f15 	stw	r23,124(sp)
2002bf08:	dd801e15 	stw	r22,120(sp)
2002bf0c:	dd401d15 	stw	r21,116(sp)
2002bf10:	dd001c15 	stw	r20,112(sp)
2002bf14:	d9c00315 	stw	r7,12(sp)
2002bf18:	2039883a 	mov	fp,r4
2002bf1c:	3023883a 	mov	r17,r6
2002bf20:	2825883a 	mov	r18,r5
2002bf24:	dc002417 	ldw	r16,144(sp)
2002bf28:	3027883a 	mov	r19,r6
2002bf2c:	10000826 	beq	r2,zero,2002bf50 <_dtoa_r+0x6c>
2002bf30:	21801117 	ldw	r6,68(r4)
2002bf34:	00c00044 	movi	r3,1
2002bf38:	100b883a 	mov	r5,r2
2002bf3c:	1986983a 	sll	r3,r3,r6
2002bf40:	11800115 	stw	r6,4(r2)
2002bf44:	10c00215 	stw	r3,8(r2)
2002bf48:	002df4c0 	call	2002df4c <_Bfree>
2002bf4c:	e0001015 	stw	zero,64(fp)
2002bf50:	88002e16 	blt	r17,zero,2002c00c <_dtoa_r+0x128>
2002bf54:	80000015 	stw	zero,0(r16)
2002bf58:	889ffc2c 	andhi	r2,r17,32752
2002bf5c:	00dffc34 	movhi	r3,32752
2002bf60:	10c01c26 	beq	r2,r3,2002bfd4 <_dtoa_r+0xf0>
2002bf64:	000d883a 	mov	r6,zero
2002bf68:	000f883a 	mov	r7,zero
2002bf6c:	9009883a 	mov	r4,r18
2002bf70:	980b883a 	mov	r5,r19
2002bf74:	0031ff00 	call	20031ff0 <__eqdf2>
2002bf78:	10002b1e 	bne	r2,zero,2002c028 <_dtoa_r+0x144>
2002bf7c:	d9c02317 	ldw	r7,140(sp)
2002bf80:	00800044 	movi	r2,1
2002bf84:	38800015 	stw	r2,0(r7)
2002bf88:	d8802517 	ldw	r2,148(sp)
2002bf8c:	10019e26 	beq	r2,zero,2002c608 <_dtoa_r+0x724>
2002bf90:	d8c02517 	ldw	r3,148(sp)
2002bf94:	008800f4 	movhi	r2,8195
2002bf98:	10963444 	addi	r2,r2,22737
2002bf9c:	18800015 	stw	r2,0(r3)
2002bfa0:	10bfffc4 	addi	r2,r2,-1
2002bfa4:	dfc02117 	ldw	ra,132(sp)
2002bfa8:	df002017 	ldw	fp,128(sp)
2002bfac:	ddc01f17 	ldw	r23,124(sp)
2002bfb0:	dd801e17 	ldw	r22,120(sp)
2002bfb4:	dd401d17 	ldw	r21,116(sp)
2002bfb8:	dd001c17 	ldw	r20,112(sp)
2002bfbc:	dcc01b17 	ldw	r19,108(sp)
2002bfc0:	dc801a17 	ldw	r18,104(sp)
2002bfc4:	dc401917 	ldw	r17,100(sp)
2002bfc8:	dc001817 	ldw	r16,96(sp)
2002bfcc:	dec02204 	addi	sp,sp,136
2002bfd0:	f800283a 	ret
2002bfd4:	d8c02317 	ldw	r3,140(sp)
2002bfd8:	0089c3c4 	movi	r2,9999
2002bfdc:	18800015 	stw	r2,0(r3)
2002bfe0:	90017726 	beq	r18,zero,2002c5c0 <_dtoa_r+0x6dc>
2002bfe4:	008800f4 	movhi	r2,8195
2002bfe8:	10964004 	addi	r2,r2,22784
2002bfec:	d9002517 	ldw	r4,148(sp)
2002bff0:	203fec26 	beq	r4,zero,2002bfa4 <_gp+0xfffeca44>
2002bff4:	10c000c7 	ldb	r3,3(r2)
2002bff8:	1801781e 	bne	r3,zero,2002c5dc <_dtoa_r+0x6f8>
2002bffc:	10c000c4 	addi	r3,r2,3
2002c000:	d9802517 	ldw	r6,148(sp)
2002c004:	30c00015 	stw	r3,0(r6)
2002c008:	003fe606 	br	2002bfa4 <_gp+0xfffeca44>
2002c00c:	04e00034 	movhi	r19,32768
2002c010:	9cffffc4 	addi	r19,r19,-1
2002c014:	00800044 	movi	r2,1
2002c018:	8ce6703a 	and	r19,r17,r19
2002c01c:	80800015 	stw	r2,0(r16)
2002c020:	9823883a 	mov	r17,r19
2002c024:	003fcc06 	br	2002bf58 <_gp+0xfffec9f8>
2002c028:	d8800204 	addi	r2,sp,8
2002c02c:	d8800015 	stw	r2,0(sp)
2002c030:	d9c00104 	addi	r7,sp,4
2002c034:	900b883a 	mov	r5,r18
2002c038:	980d883a 	mov	r6,r19
2002c03c:	e009883a 	mov	r4,fp
2002c040:	8820d53a 	srli	r16,r17,20
2002c044:	002eb380 	call	2002eb38 <__d2b>
2002c048:	d8800915 	stw	r2,36(sp)
2002c04c:	8001651e 	bne	r16,zero,2002c5e4 <_dtoa_r+0x700>
2002c050:	dd800217 	ldw	r22,8(sp)
2002c054:	dc000117 	ldw	r16,4(sp)
2002c058:	00800804 	movi	r2,32
2002c05c:	b421883a 	add	r16,r22,r16
2002c060:	80c10c84 	addi	r3,r16,1074
2002c064:	10c2d10e 	bge	r2,r3,2002cbac <_dtoa_r+0xcc8>
2002c068:	00801004 	movi	r2,64
2002c06c:	81010484 	addi	r4,r16,1042
2002c070:	10c7c83a 	sub	r3,r2,r3
2002c074:	9108d83a 	srl	r4,r18,r4
2002c078:	88e2983a 	sll	r17,r17,r3
2002c07c:	2448b03a 	or	r4,r4,r17
2002c080:	00320780 	call	20032078 <__floatunsidf>
2002c084:	017f8434 	movhi	r5,65040
2002c088:	01800044 	movi	r6,1
2002c08c:	1009883a 	mov	r4,r2
2002c090:	194b883a 	add	r5,r3,r5
2002c094:	843fffc4 	addi	r16,r16,-1
2002c098:	d9801115 	stw	r6,68(sp)
2002c09c:	000d883a 	mov	r6,zero
2002c0a0:	01cffe34 	movhi	r7,16376
2002c0a4:	00263980 	call	20026398 <__subdf3>
2002c0a8:	0198dbf4 	movhi	r6,25455
2002c0ac:	01cff4f4 	movhi	r7,16339
2002c0b0:	3190d844 	addi	r6,r6,17249
2002c0b4:	39e1e9c4 	addi	r7,r7,-30809
2002c0b8:	1009883a 	mov	r4,r2
2002c0bc:	180b883a 	mov	r5,r3
2002c0c0:	0025c800 	call	20025c80 <__muldf3>
2002c0c4:	01a2d874 	movhi	r6,35681
2002c0c8:	01cff1f4 	movhi	r7,16327
2002c0cc:	31b22cc4 	addi	r6,r6,-14157
2002c0d0:	39e28a04 	addi	r7,r7,-30168
2002c0d4:	180b883a 	mov	r5,r3
2002c0d8:	1009883a 	mov	r4,r2
2002c0dc:	002491c0 	call	2002491c <__adddf3>
2002c0e0:	8009883a 	mov	r4,r16
2002c0e4:	1029883a 	mov	r20,r2
2002c0e8:	1823883a 	mov	r17,r3
2002c0ec:	0026d140 	call	20026d14 <__floatsidf>
2002c0f0:	019427f4 	movhi	r6,20639
2002c0f4:	01cff4f4 	movhi	r7,16339
2002c0f8:	319e7ec4 	addi	r6,r6,31227
2002c0fc:	39d104c4 	addi	r7,r7,17427
2002c100:	1009883a 	mov	r4,r2
2002c104:	180b883a 	mov	r5,r3
2002c108:	0025c800 	call	20025c80 <__muldf3>
2002c10c:	100d883a 	mov	r6,r2
2002c110:	180f883a 	mov	r7,r3
2002c114:	a009883a 	mov	r4,r20
2002c118:	880b883a 	mov	r5,r17
2002c11c:	002491c0 	call	2002491c <__adddf3>
2002c120:	1009883a 	mov	r4,r2
2002c124:	180b883a 	mov	r5,r3
2002c128:	1029883a 	mov	r20,r2
2002c12c:	1823883a 	mov	r17,r3
2002c130:	0026c940 	call	20026c94 <__fixdfsi>
2002c134:	000d883a 	mov	r6,zero
2002c138:	000f883a 	mov	r7,zero
2002c13c:	a009883a 	mov	r4,r20
2002c140:	880b883a 	mov	r5,r17
2002c144:	d8800515 	stw	r2,20(sp)
2002c148:	0025b8c0 	call	20025b8c <__ledf2>
2002c14c:	10028716 	blt	r2,zero,2002cb6c <_dtoa_r+0xc88>
2002c150:	d8c00517 	ldw	r3,20(sp)
2002c154:	00800584 	movi	r2,22
2002c158:	10c27536 	bltu	r2,r3,2002cb30 <_dtoa_r+0xc4c>
2002c15c:	180490fa 	slli	r2,r3,3
2002c160:	00c800f4 	movhi	r3,8195
2002c164:	18d65b04 	addi	r3,r3,22892
2002c168:	1885883a 	add	r2,r3,r2
2002c16c:	11000017 	ldw	r4,0(r2)
2002c170:	11400117 	ldw	r5,4(r2)
2002c174:	900d883a 	mov	r6,r18
2002c178:	980f883a 	mov	r7,r19
2002c17c:	0025ab00 	call	20025ab0 <__gedf2>
2002c180:	00828d0e 	bge	zero,r2,2002cbb8 <_dtoa_r+0xcd4>
2002c184:	d9000517 	ldw	r4,20(sp)
2002c188:	d8000e15 	stw	zero,56(sp)
2002c18c:	213fffc4 	addi	r4,r4,-1
2002c190:	d9000515 	stw	r4,20(sp)
2002c194:	b42dc83a 	sub	r22,r22,r16
2002c198:	b5bfffc4 	addi	r22,r22,-1
2002c19c:	b0026f16 	blt	r22,zero,2002cb5c <_dtoa_r+0xc78>
2002c1a0:	d8000815 	stw	zero,32(sp)
2002c1a4:	d9c00517 	ldw	r7,20(sp)
2002c1a8:	38026416 	blt	r7,zero,2002cb3c <_dtoa_r+0xc58>
2002c1ac:	b1ed883a 	add	r22,r22,r7
2002c1b0:	d9c00d15 	stw	r7,52(sp)
2002c1b4:	d8000a15 	stw	zero,40(sp)
2002c1b8:	d9800317 	ldw	r6,12(sp)
2002c1bc:	00800244 	movi	r2,9
2002c1c0:	11811436 	bltu	r2,r6,2002c614 <_dtoa_r+0x730>
2002c1c4:	00800144 	movi	r2,5
2002c1c8:	1184e10e 	bge	r2,r6,2002d550 <_dtoa_r+0x166c>
2002c1cc:	31bfff04 	addi	r6,r6,-4
2002c1d0:	d9800315 	stw	r6,12(sp)
2002c1d4:	0023883a 	mov	r17,zero
2002c1d8:	d9800317 	ldw	r6,12(sp)
2002c1dc:	008000c4 	movi	r2,3
2002c1e0:	30836726 	beq	r6,r2,2002cf80 <_dtoa_r+0x109c>
2002c1e4:	1183410e 	bge	r2,r6,2002ceec <_dtoa_r+0x1008>
2002c1e8:	d9c00317 	ldw	r7,12(sp)
2002c1ec:	00800104 	movi	r2,4
2002c1f0:	38827c26 	beq	r7,r2,2002cbe4 <_dtoa_r+0xd00>
2002c1f4:	00800144 	movi	r2,5
2002c1f8:	3884c41e 	bne	r7,r2,2002d50c <_dtoa_r+0x1628>
2002c1fc:	00800044 	movi	r2,1
2002c200:	d8800b15 	stw	r2,44(sp)
2002c204:	d8c00517 	ldw	r3,20(sp)
2002c208:	d9002217 	ldw	r4,136(sp)
2002c20c:	1907883a 	add	r3,r3,r4
2002c210:	19800044 	addi	r6,r3,1
2002c214:	d8c00c15 	stw	r3,48(sp)
2002c218:	d9800615 	stw	r6,24(sp)
2002c21c:	0183a40e 	bge	zero,r6,2002d0b0 <_dtoa_r+0x11cc>
2002c220:	d9800617 	ldw	r6,24(sp)
2002c224:	3021883a 	mov	r16,r6
2002c228:	e0001115 	stw	zero,68(fp)
2002c22c:	008005c4 	movi	r2,23
2002c230:	1184c92e 	bgeu	r2,r6,2002d558 <_dtoa_r+0x1674>
2002c234:	00c00044 	movi	r3,1
2002c238:	00800104 	movi	r2,4
2002c23c:	1085883a 	add	r2,r2,r2
2002c240:	11000504 	addi	r4,r2,20
2002c244:	180b883a 	mov	r5,r3
2002c248:	18c00044 	addi	r3,r3,1
2002c24c:	313ffb2e 	bgeu	r6,r4,2002c23c <_gp+0xfffeccdc>
2002c250:	e1401115 	stw	r5,68(fp)
2002c254:	e009883a 	mov	r4,fp
2002c258:	002dea40 	call	2002dea4 <_Balloc>
2002c25c:	d8800715 	stw	r2,28(sp)
2002c260:	e0801015 	stw	r2,64(fp)
2002c264:	00800384 	movi	r2,14
2002c268:	1400f736 	bltu	r2,r16,2002c648 <_dtoa_r+0x764>
2002c26c:	8800f626 	beq	r17,zero,2002c648 <_dtoa_r+0x764>
2002c270:	d9c00517 	ldw	r7,20(sp)
2002c274:	01c39a0e 	bge	zero,r7,2002d0e0 <_dtoa_r+0x11fc>
2002c278:	388003cc 	andi	r2,r7,15
2002c27c:	100490fa 	slli	r2,r2,3
2002c280:	382bd13a 	srai	r21,r7,4
2002c284:	00c800f4 	movhi	r3,8195
2002c288:	18d65b04 	addi	r3,r3,22892
2002c28c:	1885883a 	add	r2,r3,r2
2002c290:	a8c0040c 	andi	r3,r21,16
2002c294:	12400017 	ldw	r9,0(r2)
2002c298:	12000117 	ldw	r8,4(r2)
2002c29c:	18037926 	beq	r3,zero,2002d084 <_dtoa_r+0x11a0>
2002c2a0:	008800f4 	movhi	r2,8195
2002c2a4:	10965104 	addi	r2,r2,22852
2002c2a8:	11800817 	ldw	r6,32(r2)
2002c2ac:	11c00917 	ldw	r7,36(r2)
2002c2b0:	9009883a 	mov	r4,r18
2002c2b4:	980b883a 	mov	r5,r19
2002c2b8:	da001715 	stw	r8,92(sp)
2002c2bc:	da401615 	stw	r9,88(sp)
2002c2c0:	00251c80 	call	200251c8 <__divdf3>
2002c2c4:	da001717 	ldw	r8,92(sp)
2002c2c8:	da401617 	ldw	r9,88(sp)
2002c2cc:	ad4003cc 	andi	r21,r21,15
2002c2d0:	040000c4 	movi	r16,3
2002c2d4:	1023883a 	mov	r17,r2
2002c2d8:	1829883a 	mov	r20,r3
2002c2dc:	a8001126 	beq	r21,zero,2002c324 <_dtoa_r+0x440>
2002c2e0:	05c800f4 	movhi	r23,8195
2002c2e4:	bdd65104 	addi	r23,r23,22852
2002c2e8:	4805883a 	mov	r2,r9
2002c2ec:	4007883a 	mov	r3,r8
2002c2f0:	a980004c 	andi	r6,r21,1
2002c2f4:	1009883a 	mov	r4,r2
2002c2f8:	a82bd07a 	srai	r21,r21,1
2002c2fc:	180b883a 	mov	r5,r3
2002c300:	30000426 	beq	r6,zero,2002c314 <_dtoa_r+0x430>
2002c304:	b9800017 	ldw	r6,0(r23)
2002c308:	b9c00117 	ldw	r7,4(r23)
2002c30c:	84000044 	addi	r16,r16,1
2002c310:	0025c800 	call	20025c80 <__muldf3>
2002c314:	bdc00204 	addi	r23,r23,8
2002c318:	a83ff51e 	bne	r21,zero,2002c2f0 <_gp+0xfffecd90>
2002c31c:	1013883a 	mov	r9,r2
2002c320:	1811883a 	mov	r8,r3
2002c324:	480d883a 	mov	r6,r9
2002c328:	400f883a 	mov	r7,r8
2002c32c:	8809883a 	mov	r4,r17
2002c330:	a00b883a 	mov	r5,r20
2002c334:	00251c80 	call	200251c8 <__divdf3>
2002c338:	d8800f15 	stw	r2,60(sp)
2002c33c:	d8c01015 	stw	r3,64(sp)
2002c340:	d8c00e17 	ldw	r3,56(sp)
2002c344:	18000626 	beq	r3,zero,2002c360 <_dtoa_r+0x47c>
2002c348:	d9000f17 	ldw	r4,60(sp)
2002c34c:	d9401017 	ldw	r5,64(sp)
2002c350:	000d883a 	mov	r6,zero
2002c354:	01cffc34 	movhi	r7,16368
2002c358:	0025b8c0 	call	20025b8c <__ledf2>
2002c35c:	10040b16 	blt	r2,zero,2002d38c <_dtoa_r+0x14a8>
2002c360:	8009883a 	mov	r4,r16
2002c364:	0026d140 	call	20026d14 <__floatsidf>
2002c368:	d9800f17 	ldw	r6,60(sp)
2002c36c:	d9c01017 	ldw	r7,64(sp)
2002c370:	1009883a 	mov	r4,r2
2002c374:	180b883a 	mov	r5,r3
2002c378:	0025c800 	call	20025c80 <__muldf3>
2002c37c:	000d883a 	mov	r6,zero
2002c380:	01d00734 	movhi	r7,16412
2002c384:	1009883a 	mov	r4,r2
2002c388:	180b883a 	mov	r5,r3
2002c38c:	002491c0 	call	2002491c <__adddf3>
2002c390:	1021883a 	mov	r16,r2
2002c394:	d8800617 	ldw	r2,24(sp)
2002c398:	047f3034 	movhi	r17,64704
2002c39c:	1c63883a 	add	r17,r3,r17
2002c3a0:	10031826 	beq	r2,zero,2002d004 <_dtoa_r+0x1120>
2002c3a4:	d8c00517 	ldw	r3,20(sp)
2002c3a8:	db000617 	ldw	r12,24(sp)
2002c3ac:	d8c01315 	stw	r3,76(sp)
2002c3b0:	d9000b17 	ldw	r4,44(sp)
2002c3b4:	20038f26 	beq	r4,zero,2002d1f4 <_dtoa_r+0x1310>
2002c3b8:	60bfffc4 	addi	r2,r12,-1
2002c3bc:	100490fa 	slli	r2,r2,3
2002c3c0:	00c800f4 	movhi	r3,8195
2002c3c4:	18d65b04 	addi	r3,r3,22892
2002c3c8:	1885883a 	add	r2,r3,r2
2002c3cc:	11800017 	ldw	r6,0(r2)
2002c3d0:	11c00117 	ldw	r7,4(r2)
2002c3d4:	d8800717 	ldw	r2,28(sp)
2002c3d8:	0009883a 	mov	r4,zero
2002c3dc:	014ff834 	movhi	r5,16352
2002c3e0:	db001615 	stw	r12,88(sp)
2002c3e4:	15c00044 	addi	r23,r2,1
2002c3e8:	00251c80 	call	200251c8 <__divdf3>
2002c3ec:	800d883a 	mov	r6,r16
2002c3f0:	880f883a 	mov	r7,r17
2002c3f4:	1009883a 	mov	r4,r2
2002c3f8:	180b883a 	mov	r5,r3
2002c3fc:	00263980 	call	20026398 <__subdf3>
2002c400:	d9401017 	ldw	r5,64(sp)
2002c404:	d9000f17 	ldw	r4,60(sp)
2002c408:	102b883a 	mov	r21,r2
2002c40c:	d8c01215 	stw	r3,72(sp)
2002c410:	0026c940 	call	20026c94 <__fixdfsi>
2002c414:	1009883a 	mov	r4,r2
2002c418:	1029883a 	mov	r20,r2
2002c41c:	0026d140 	call	20026d14 <__floatsidf>
2002c420:	d9000f17 	ldw	r4,60(sp)
2002c424:	d9401017 	ldw	r5,64(sp)
2002c428:	100d883a 	mov	r6,r2
2002c42c:	180f883a 	mov	r7,r3
2002c430:	00263980 	call	20026398 <__subdf3>
2002c434:	1823883a 	mov	r17,r3
2002c438:	d8c00717 	ldw	r3,28(sp)
2002c43c:	d9401217 	ldw	r5,72(sp)
2002c440:	a2000c04 	addi	r8,r20,48
2002c444:	1021883a 	mov	r16,r2
2002c448:	1a000005 	stb	r8,0(r3)
2002c44c:	800d883a 	mov	r6,r16
2002c450:	880f883a 	mov	r7,r17
2002c454:	a809883a 	mov	r4,r21
2002c458:	4029883a 	mov	r20,r8
2002c45c:	0025ab00 	call	20025ab0 <__gedf2>
2002c460:	00841d16 	blt	zero,r2,2002d4d8 <_dtoa_r+0x15f4>
2002c464:	800d883a 	mov	r6,r16
2002c468:	880f883a 	mov	r7,r17
2002c46c:	0009883a 	mov	r4,zero
2002c470:	014ffc34 	movhi	r5,16368
2002c474:	00263980 	call	20026398 <__subdf3>
2002c478:	d9401217 	ldw	r5,72(sp)
2002c47c:	100d883a 	mov	r6,r2
2002c480:	180f883a 	mov	r7,r3
2002c484:	a809883a 	mov	r4,r21
2002c488:	0025ab00 	call	20025ab0 <__gedf2>
2002c48c:	db001617 	ldw	r12,88(sp)
2002c490:	00840e16 	blt	zero,r2,2002d4cc <_dtoa_r+0x15e8>
2002c494:	00800044 	movi	r2,1
2002c498:	13006b0e 	bge	r2,r12,2002c648 <_dtoa_r+0x764>
2002c49c:	d9000717 	ldw	r4,28(sp)
2002c4a0:	dd800f15 	stw	r22,60(sp)
2002c4a4:	dcc01015 	stw	r19,64(sp)
2002c4a8:	2319883a 	add	r12,r4,r12
2002c4ac:	dcc01217 	ldw	r19,72(sp)
2002c4b0:	602d883a 	mov	r22,r12
2002c4b4:	dc801215 	stw	r18,72(sp)
2002c4b8:	b825883a 	mov	r18,r23
2002c4bc:	00000906 	br	2002c4e4 <_dtoa_r+0x600>
2002c4c0:	00263980 	call	20026398 <__subdf3>
2002c4c4:	a80d883a 	mov	r6,r21
2002c4c8:	980f883a 	mov	r7,r19
2002c4cc:	1009883a 	mov	r4,r2
2002c4d0:	180b883a 	mov	r5,r3
2002c4d4:	0025b8c0 	call	20025b8c <__ledf2>
2002c4d8:	1003e816 	blt	r2,zero,2002d47c <_dtoa_r+0x1598>
2002c4dc:	b825883a 	mov	r18,r23
2002c4e0:	bd83e926 	beq	r23,r22,2002d488 <_dtoa_r+0x15a4>
2002c4e4:	a809883a 	mov	r4,r21
2002c4e8:	980b883a 	mov	r5,r19
2002c4ec:	000d883a 	mov	r6,zero
2002c4f0:	01d00934 	movhi	r7,16420
2002c4f4:	0025c800 	call	20025c80 <__muldf3>
2002c4f8:	000d883a 	mov	r6,zero
2002c4fc:	01d00934 	movhi	r7,16420
2002c500:	8009883a 	mov	r4,r16
2002c504:	880b883a 	mov	r5,r17
2002c508:	102b883a 	mov	r21,r2
2002c50c:	1827883a 	mov	r19,r3
2002c510:	0025c800 	call	20025c80 <__muldf3>
2002c514:	180b883a 	mov	r5,r3
2002c518:	1009883a 	mov	r4,r2
2002c51c:	1821883a 	mov	r16,r3
2002c520:	1023883a 	mov	r17,r2
2002c524:	0026c940 	call	20026c94 <__fixdfsi>
2002c528:	1009883a 	mov	r4,r2
2002c52c:	1029883a 	mov	r20,r2
2002c530:	0026d140 	call	20026d14 <__floatsidf>
2002c534:	8809883a 	mov	r4,r17
2002c538:	800b883a 	mov	r5,r16
2002c53c:	100d883a 	mov	r6,r2
2002c540:	180f883a 	mov	r7,r3
2002c544:	00263980 	call	20026398 <__subdf3>
2002c548:	a5000c04 	addi	r20,r20,48
2002c54c:	a80d883a 	mov	r6,r21
2002c550:	980f883a 	mov	r7,r19
2002c554:	1009883a 	mov	r4,r2
2002c558:	180b883a 	mov	r5,r3
2002c55c:	95000005 	stb	r20,0(r18)
2002c560:	1021883a 	mov	r16,r2
2002c564:	1823883a 	mov	r17,r3
2002c568:	0025b8c0 	call	20025b8c <__ledf2>
2002c56c:	bdc00044 	addi	r23,r23,1
2002c570:	800d883a 	mov	r6,r16
2002c574:	880f883a 	mov	r7,r17
2002c578:	0009883a 	mov	r4,zero
2002c57c:	014ffc34 	movhi	r5,16368
2002c580:	103fcf0e 	bge	r2,zero,2002c4c0 <_gp+0xfffecf60>
2002c584:	d8c01317 	ldw	r3,76(sp)
2002c588:	d8c00515 	stw	r3,20(sp)
2002c58c:	d9400917 	ldw	r5,36(sp)
2002c590:	e009883a 	mov	r4,fp
2002c594:	002df4c0 	call	2002df4c <_Bfree>
2002c598:	d9000517 	ldw	r4,20(sp)
2002c59c:	d9802317 	ldw	r6,140(sp)
2002c5a0:	d9c02517 	ldw	r7,148(sp)
2002c5a4:	b8000005 	stb	zero,0(r23)
2002c5a8:	20800044 	addi	r2,r4,1
2002c5ac:	30800015 	stw	r2,0(r6)
2002c5b0:	3802aa26 	beq	r7,zero,2002d05c <_dtoa_r+0x1178>
2002c5b4:	3dc00015 	stw	r23,0(r7)
2002c5b8:	d8800717 	ldw	r2,28(sp)
2002c5bc:	003e7906 	br	2002bfa4 <_gp+0xfffeca44>
2002c5c0:	00800434 	movhi	r2,16
2002c5c4:	10bfffc4 	addi	r2,r2,-1
2002c5c8:	88a2703a 	and	r17,r17,r2
2002c5cc:	883e851e 	bne	r17,zero,2002bfe4 <_gp+0xfffeca84>
2002c5d0:	008800f4 	movhi	r2,8195
2002c5d4:	10963d04 	addi	r2,r2,22772
2002c5d8:	003e8406 	br	2002bfec <_gp+0xfffeca8c>
2002c5dc:	10c00204 	addi	r3,r2,8
2002c5e0:	003e8706 	br	2002c000 <_gp+0xfffecaa0>
2002c5e4:	01400434 	movhi	r5,16
2002c5e8:	297fffc4 	addi	r5,r5,-1
2002c5ec:	994a703a 	and	r5,r19,r5
2002c5f0:	9009883a 	mov	r4,r18
2002c5f4:	843f0044 	addi	r16,r16,-1023
2002c5f8:	294ffc34 	orhi	r5,r5,16368
2002c5fc:	dd800217 	ldw	r22,8(sp)
2002c600:	d8001115 	stw	zero,68(sp)
2002c604:	003ea506 	br	2002c09c <_gp+0xfffecb3c>
2002c608:	008800f4 	movhi	r2,8195
2002c60c:	10963404 	addi	r2,r2,22736
2002c610:	003e6406 	br	2002bfa4 <_gp+0xfffeca44>
2002c614:	e0001115 	stw	zero,68(fp)
2002c618:	000b883a 	mov	r5,zero
2002c61c:	e009883a 	mov	r4,fp
2002c620:	002dea40 	call	2002dea4 <_Balloc>
2002c624:	01bfffc4 	movi	r6,-1
2002c628:	01c00044 	movi	r7,1
2002c62c:	d8800715 	stw	r2,28(sp)
2002c630:	d9800c15 	stw	r6,48(sp)
2002c634:	e0801015 	stw	r2,64(fp)
2002c638:	d8000315 	stw	zero,12(sp)
2002c63c:	d9c00b15 	stw	r7,44(sp)
2002c640:	d9800615 	stw	r6,24(sp)
2002c644:	d8002215 	stw	zero,136(sp)
2002c648:	d8800117 	ldw	r2,4(sp)
2002c64c:	10008916 	blt	r2,zero,2002c874 <_dtoa_r+0x990>
2002c650:	d9000517 	ldw	r4,20(sp)
2002c654:	00c00384 	movi	r3,14
2002c658:	19008616 	blt	r3,r4,2002c874 <_dtoa_r+0x990>
2002c65c:	200490fa 	slli	r2,r4,3
2002c660:	00c800f4 	movhi	r3,8195
2002c664:	d9802217 	ldw	r6,136(sp)
2002c668:	18d65b04 	addi	r3,r3,22892
2002c66c:	1885883a 	add	r2,r3,r2
2002c670:	14000017 	ldw	r16,0(r2)
2002c674:	14400117 	ldw	r17,4(r2)
2002c678:	30016316 	blt	r6,zero,2002cc08 <_dtoa_r+0xd24>
2002c67c:	800d883a 	mov	r6,r16
2002c680:	880f883a 	mov	r7,r17
2002c684:	9009883a 	mov	r4,r18
2002c688:	980b883a 	mov	r5,r19
2002c68c:	00251c80 	call	200251c8 <__divdf3>
2002c690:	180b883a 	mov	r5,r3
2002c694:	1009883a 	mov	r4,r2
2002c698:	0026c940 	call	20026c94 <__fixdfsi>
2002c69c:	1009883a 	mov	r4,r2
2002c6a0:	102b883a 	mov	r21,r2
2002c6a4:	0026d140 	call	20026d14 <__floatsidf>
2002c6a8:	800d883a 	mov	r6,r16
2002c6ac:	880f883a 	mov	r7,r17
2002c6b0:	1009883a 	mov	r4,r2
2002c6b4:	180b883a 	mov	r5,r3
2002c6b8:	0025c800 	call	20025c80 <__muldf3>
2002c6bc:	100d883a 	mov	r6,r2
2002c6c0:	180f883a 	mov	r7,r3
2002c6c4:	9009883a 	mov	r4,r18
2002c6c8:	980b883a 	mov	r5,r19
2002c6cc:	00263980 	call	20026398 <__subdf3>
2002c6d0:	d9c00717 	ldw	r7,28(sp)
2002c6d4:	1009883a 	mov	r4,r2
2002c6d8:	a8800c04 	addi	r2,r21,48
2002c6dc:	38800005 	stb	r2,0(r7)
2002c6e0:	3dc00044 	addi	r23,r7,1
2002c6e4:	d9c00617 	ldw	r7,24(sp)
2002c6e8:	01800044 	movi	r6,1
2002c6ec:	180b883a 	mov	r5,r3
2002c6f0:	2005883a 	mov	r2,r4
2002c6f4:	39803826 	beq	r7,r6,2002c7d8 <_dtoa_r+0x8f4>
2002c6f8:	000d883a 	mov	r6,zero
2002c6fc:	01d00934 	movhi	r7,16420
2002c700:	0025c800 	call	20025c80 <__muldf3>
2002c704:	000d883a 	mov	r6,zero
2002c708:	000f883a 	mov	r7,zero
2002c70c:	1009883a 	mov	r4,r2
2002c710:	180b883a 	mov	r5,r3
2002c714:	1025883a 	mov	r18,r2
2002c718:	1827883a 	mov	r19,r3
2002c71c:	0031ff00 	call	20031ff0 <__eqdf2>
2002c720:	103f9a26 	beq	r2,zero,2002c58c <_gp+0xfffed02c>
2002c724:	d9c00617 	ldw	r7,24(sp)
2002c728:	d8c00717 	ldw	r3,28(sp)
2002c72c:	b829883a 	mov	r20,r23
2002c730:	38bfffc4 	addi	r2,r7,-1
2002c734:	18ad883a 	add	r22,r3,r2
2002c738:	00000a06 	br	2002c764 <_dtoa_r+0x880>
2002c73c:	0025c800 	call	20025c80 <__muldf3>
2002c740:	000d883a 	mov	r6,zero
2002c744:	000f883a 	mov	r7,zero
2002c748:	1009883a 	mov	r4,r2
2002c74c:	180b883a 	mov	r5,r3
2002c750:	1025883a 	mov	r18,r2
2002c754:	1827883a 	mov	r19,r3
2002c758:	b829883a 	mov	r20,r23
2002c75c:	0031ff00 	call	20031ff0 <__eqdf2>
2002c760:	103f8a26 	beq	r2,zero,2002c58c <_gp+0xfffed02c>
2002c764:	800d883a 	mov	r6,r16
2002c768:	880f883a 	mov	r7,r17
2002c76c:	9009883a 	mov	r4,r18
2002c770:	980b883a 	mov	r5,r19
2002c774:	00251c80 	call	200251c8 <__divdf3>
2002c778:	180b883a 	mov	r5,r3
2002c77c:	1009883a 	mov	r4,r2
2002c780:	0026c940 	call	20026c94 <__fixdfsi>
2002c784:	1009883a 	mov	r4,r2
2002c788:	102b883a 	mov	r21,r2
2002c78c:	0026d140 	call	20026d14 <__floatsidf>
2002c790:	800d883a 	mov	r6,r16
2002c794:	880f883a 	mov	r7,r17
2002c798:	1009883a 	mov	r4,r2
2002c79c:	180b883a 	mov	r5,r3
2002c7a0:	0025c800 	call	20025c80 <__muldf3>
2002c7a4:	100d883a 	mov	r6,r2
2002c7a8:	180f883a 	mov	r7,r3
2002c7ac:	9009883a 	mov	r4,r18
2002c7b0:	980b883a 	mov	r5,r19
2002c7b4:	00263980 	call	20026398 <__subdf3>
2002c7b8:	aa000c04 	addi	r8,r21,48
2002c7bc:	a2000005 	stb	r8,0(r20)
2002c7c0:	000d883a 	mov	r6,zero
2002c7c4:	01d00934 	movhi	r7,16420
2002c7c8:	1009883a 	mov	r4,r2
2002c7cc:	180b883a 	mov	r5,r3
2002c7d0:	a5c00044 	addi	r23,r20,1
2002c7d4:	b53fd91e 	bne	r22,r20,2002c73c <_gp+0xfffed1dc>
2002c7d8:	100d883a 	mov	r6,r2
2002c7dc:	180f883a 	mov	r7,r3
2002c7e0:	1009883a 	mov	r4,r2
2002c7e4:	180b883a 	mov	r5,r3
2002c7e8:	002491c0 	call	2002491c <__adddf3>
2002c7ec:	100d883a 	mov	r6,r2
2002c7f0:	180f883a 	mov	r7,r3
2002c7f4:	8009883a 	mov	r4,r16
2002c7f8:	880b883a 	mov	r5,r17
2002c7fc:	1027883a 	mov	r19,r2
2002c800:	1825883a 	mov	r18,r3
2002c804:	0025b8c0 	call	20025b8c <__ledf2>
2002c808:	10000816 	blt	r2,zero,2002c82c <_dtoa_r+0x948>
2002c80c:	980d883a 	mov	r6,r19
2002c810:	900f883a 	mov	r7,r18
2002c814:	8009883a 	mov	r4,r16
2002c818:	880b883a 	mov	r5,r17
2002c81c:	0031ff00 	call	20031ff0 <__eqdf2>
2002c820:	103f5a1e 	bne	r2,zero,2002c58c <_gp+0xfffed02c>
2002c824:	ad40004c 	andi	r21,r21,1
2002c828:	a83f5826 	beq	r21,zero,2002c58c <_gp+0xfffed02c>
2002c82c:	bd3fffc3 	ldbu	r20,-1(r23)
2002c830:	b8bfffc4 	addi	r2,r23,-1
2002c834:	1007883a 	mov	r3,r2
2002c838:	01400e44 	movi	r5,57
2002c83c:	d9800717 	ldw	r6,28(sp)
2002c840:	00000506 	br	2002c858 <_dtoa_r+0x974>
2002c844:	18ffffc4 	addi	r3,r3,-1
2002c848:	11824726 	beq	r2,r6,2002d168 <_dtoa_r+0x1284>
2002c84c:	1d000003 	ldbu	r20,0(r3)
2002c850:	102f883a 	mov	r23,r2
2002c854:	10bfffc4 	addi	r2,r2,-1
2002c858:	a1003fcc 	andi	r4,r20,255
2002c85c:	2100201c 	xori	r4,r4,128
2002c860:	213fe004 	addi	r4,r4,-128
2002c864:	217ff726 	beq	r4,r5,2002c844 <_gp+0xfffed2e4>
2002c868:	a2000044 	addi	r8,r20,1
2002c86c:	12000005 	stb	r8,0(r2)
2002c870:	003f4606 	br	2002c58c <_gp+0xfffed02c>
2002c874:	d9000b17 	ldw	r4,44(sp)
2002c878:	2000c826 	beq	r4,zero,2002cb9c <_dtoa_r+0xcb8>
2002c87c:	d9800317 	ldw	r6,12(sp)
2002c880:	00c00044 	movi	r3,1
2002c884:	1980f90e 	bge	r3,r6,2002cc6c <_dtoa_r+0xd88>
2002c888:	d8800617 	ldw	r2,24(sp)
2002c88c:	d8c00a17 	ldw	r3,40(sp)
2002c890:	157fffc4 	addi	r21,r2,-1
2002c894:	1d41f316 	blt	r3,r21,2002d064 <_dtoa_r+0x1180>
2002c898:	1d6bc83a 	sub	r21,r3,r21
2002c89c:	d9c00617 	ldw	r7,24(sp)
2002c8a0:	3802aa16 	blt	r7,zero,2002d34c <_dtoa_r+0x1468>
2002c8a4:	dd000817 	ldw	r20,32(sp)
2002c8a8:	d8800617 	ldw	r2,24(sp)
2002c8ac:	d8c00817 	ldw	r3,32(sp)
2002c8b0:	01400044 	movi	r5,1
2002c8b4:	e009883a 	mov	r4,fp
2002c8b8:	1887883a 	add	r3,r3,r2
2002c8bc:	d8c00815 	stw	r3,32(sp)
2002c8c0:	b0ad883a 	add	r22,r22,r2
2002c8c4:	002e2b00 	call	2002e2b0 <__i2b>
2002c8c8:	1023883a 	mov	r17,r2
2002c8cc:	a0000826 	beq	r20,zero,2002c8f0 <_dtoa_r+0xa0c>
2002c8d0:	0580070e 	bge	zero,r22,2002c8f0 <_dtoa_r+0xa0c>
2002c8d4:	a005883a 	mov	r2,r20
2002c8d8:	b500b916 	blt	r22,r20,2002cbc0 <_dtoa_r+0xcdc>
2002c8dc:	d9000817 	ldw	r4,32(sp)
2002c8e0:	a0a9c83a 	sub	r20,r20,r2
2002c8e4:	b0adc83a 	sub	r22,r22,r2
2002c8e8:	2089c83a 	sub	r4,r4,r2
2002c8ec:	d9000815 	stw	r4,32(sp)
2002c8f0:	d9800a17 	ldw	r6,40(sp)
2002c8f4:	0181810e 	bge	zero,r6,2002cefc <_dtoa_r+0x1018>
2002c8f8:	d9c00b17 	ldw	r7,44(sp)
2002c8fc:	3800b326 	beq	r7,zero,2002cbcc <_dtoa_r+0xce8>
2002c900:	a800b226 	beq	r21,zero,2002cbcc <_dtoa_r+0xce8>
2002c904:	880b883a 	mov	r5,r17
2002c908:	a80d883a 	mov	r6,r21
2002c90c:	e009883a 	mov	r4,fp
2002c910:	002e4e40 	call	2002e4e4 <__pow5mult>
2002c914:	d9800917 	ldw	r6,36(sp)
2002c918:	100b883a 	mov	r5,r2
2002c91c:	e009883a 	mov	r4,fp
2002c920:	1023883a 	mov	r17,r2
2002c924:	002e2ec0 	call	2002e2ec <__multiply>
2002c928:	1021883a 	mov	r16,r2
2002c92c:	d8800a17 	ldw	r2,40(sp)
2002c930:	d9400917 	ldw	r5,36(sp)
2002c934:	e009883a 	mov	r4,fp
2002c938:	1545c83a 	sub	r2,r2,r21
2002c93c:	d8800a15 	stw	r2,40(sp)
2002c940:	002df4c0 	call	2002df4c <_Bfree>
2002c944:	d8c00a17 	ldw	r3,40(sp)
2002c948:	18009f1e 	bne	r3,zero,2002cbc8 <_dtoa_r+0xce4>
2002c94c:	05c00044 	movi	r23,1
2002c950:	e009883a 	mov	r4,fp
2002c954:	b80b883a 	mov	r5,r23
2002c958:	002e2b00 	call	2002e2b0 <__i2b>
2002c95c:	d9000d17 	ldw	r4,52(sp)
2002c960:	102b883a 	mov	r21,r2
2002c964:	2000ce26 	beq	r4,zero,2002cca0 <_dtoa_r+0xdbc>
2002c968:	200d883a 	mov	r6,r4
2002c96c:	100b883a 	mov	r5,r2
2002c970:	e009883a 	mov	r4,fp
2002c974:	002e4e40 	call	2002e4e4 <__pow5mult>
2002c978:	d9800317 	ldw	r6,12(sp)
2002c97c:	102b883a 	mov	r21,r2
2002c980:	b981810e 	bge	r23,r6,2002cf88 <_dtoa_r+0x10a4>
2002c984:	0027883a 	mov	r19,zero
2002c988:	a8800417 	ldw	r2,16(r21)
2002c98c:	05c00804 	movi	r23,32
2002c990:	10800104 	addi	r2,r2,4
2002c994:	1085883a 	add	r2,r2,r2
2002c998:	1085883a 	add	r2,r2,r2
2002c99c:	a885883a 	add	r2,r21,r2
2002c9a0:	11000017 	ldw	r4,0(r2)
2002c9a4:	002e1980 	call	2002e198 <__hi0bits>
2002c9a8:	b885c83a 	sub	r2,r23,r2
2002c9ac:	1585883a 	add	r2,r2,r22
2002c9b0:	108007cc 	andi	r2,r2,31
2002c9b4:	1000b326 	beq	r2,zero,2002cc84 <_dtoa_r+0xda0>
2002c9b8:	00c00804 	movi	r3,32
2002c9bc:	1887c83a 	sub	r3,r3,r2
2002c9c0:	01000104 	movi	r4,4
2002c9c4:	20c2cd0e 	bge	r4,r3,2002d4fc <_dtoa_r+0x1618>
2002c9c8:	00c00704 	movi	r3,28
2002c9cc:	1885c83a 	sub	r2,r3,r2
2002c9d0:	d8c00817 	ldw	r3,32(sp)
2002c9d4:	a0a9883a 	add	r20,r20,r2
2002c9d8:	b0ad883a 	add	r22,r22,r2
2002c9dc:	1887883a 	add	r3,r3,r2
2002c9e0:	d8c00815 	stw	r3,32(sp)
2002c9e4:	d9800817 	ldw	r6,32(sp)
2002c9e8:	0180040e 	bge	zero,r6,2002c9fc <_dtoa_r+0xb18>
2002c9ec:	800b883a 	mov	r5,r16
2002c9f0:	e009883a 	mov	r4,fp
2002c9f4:	002e6240 	call	2002e624 <__lshift>
2002c9f8:	1021883a 	mov	r16,r2
2002c9fc:	0580050e 	bge	zero,r22,2002ca14 <_dtoa_r+0xb30>
2002ca00:	a80b883a 	mov	r5,r21
2002ca04:	b00d883a 	mov	r6,r22
2002ca08:	e009883a 	mov	r4,fp
2002ca0c:	002e6240 	call	2002e624 <__lshift>
2002ca10:	102b883a 	mov	r21,r2
2002ca14:	d9c00e17 	ldw	r7,56(sp)
2002ca18:	3801211e 	bne	r7,zero,2002cea0 <_dtoa_r+0xfbc>
2002ca1c:	d9800617 	ldw	r6,24(sp)
2002ca20:	0181380e 	bge	zero,r6,2002cf04 <_dtoa_r+0x1020>
2002ca24:	d8c00b17 	ldw	r3,44(sp)
2002ca28:	1800ab1e 	bne	r3,zero,2002ccd8 <_dtoa_r+0xdf4>
2002ca2c:	dc800717 	ldw	r18,28(sp)
2002ca30:	dcc00617 	ldw	r19,24(sp)
2002ca34:	9029883a 	mov	r20,r18
2002ca38:	00000206 	br	2002ca44 <_dtoa_r+0xb60>
2002ca3c:	002df740 	call	2002df74 <__multadd>
2002ca40:	1021883a 	mov	r16,r2
2002ca44:	a80b883a 	mov	r5,r21
2002ca48:	8009883a 	mov	r4,r16
2002ca4c:	002bce40 	call	2002bce4 <quorem>
2002ca50:	10800c04 	addi	r2,r2,48
2002ca54:	90800005 	stb	r2,0(r18)
2002ca58:	94800044 	addi	r18,r18,1
2002ca5c:	9507c83a 	sub	r3,r18,r20
2002ca60:	000f883a 	mov	r7,zero
2002ca64:	01800284 	movi	r6,10
2002ca68:	800b883a 	mov	r5,r16
2002ca6c:	e009883a 	mov	r4,fp
2002ca70:	1cfff216 	blt	r3,r19,2002ca3c <_gp+0xfffed4dc>
2002ca74:	1011883a 	mov	r8,r2
2002ca78:	d8800617 	ldw	r2,24(sp)
2002ca7c:	0082370e 	bge	zero,r2,2002d35c <_dtoa_r+0x1478>
2002ca80:	d9000717 	ldw	r4,28(sp)
2002ca84:	0025883a 	mov	r18,zero
2002ca88:	20af883a 	add	r23,r4,r2
2002ca8c:	01800044 	movi	r6,1
2002ca90:	800b883a 	mov	r5,r16
2002ca94:	e009883a 	mov	r4,fp
2002ca98:	da001715 	stw	r8,92(sp)
2002ca9c:	002e6240 	call	2002e624 <__lshift>
2002caa0:	a80b883a 	mov	r5,r21
2002caa4:	1009883a 	mov	r4,r2
2002caa8:	d8800915 	stw	r2,36(sp)
2002caac:	002e76c0 	call	2002e76c <__mcmp>
2002cab0:	da001717 	ldw	r8,92(sp)
2002cab4:	0081800e 	bge	zero,r2,2002d0b8 <_dtoa_r+0x11d4>
2002cab8:	b93fffc3 	ldbu	r4,-1(r23)
2002cabc:	b8bfffc4 	addi	r2,r23,-1
2002cac0:	1007883a 	mov	r3,r2
2002cac4:	01800e44 	movi	r6,57
2002cac8:	d9c00717 	ldw	r7,28(sp)
2002cacc:	00000506 	br	2002cae4 <_dtoa_r+0xc00>
2002cad0:	18ffffc4 	addi	r3,r3,-1
2002cad4:	11c12326 	beq	r2,r7,2002cf64 <_dtoa_r+0x1080>
2002cad8:	19000003 	ldbu	r4,0(r3)
2002cadc:	102f883a 	mov	r23,r2
2002cae0:	10bfffc4 	addi	r2,r2,-1
2002cae4:	21403fcc 	andi	r5,r4,255
2002cae8:	2940201c 	xori	r5,r5,128
2002caec:	297fe004 	addi	r5,r5,-128
2002caf0:	29bff726 	beq	r5,r6,2002cad0 <_gp+0xfffed570>
2002caf4:	21000044 	addi	r4,r4,1
2002caf8:	11000005 	stb	r4,0(r2)
2002cafc:	a80b883a 	mov	r5,r21
2002cb00:	e009883a 	mov	r4,fp
2002cb04:	002df4c0 	call	2002df4c <_Bfree>
2002cb08:	883ea026 	beq	r17,zero,2002c58c <_gp+0xfffed02c>
2002cb0c:	90000426 	beq	r18,zero,2002cb20 <_dtoa_r+0xc3c>
2002cb10:	94400326 	beq	r18,r17,2002cb20 <_dtoa_r+0xc3c>
2002cb14:	900b883a 	mov	r5,r18
2002cb18:	e009883a 	mov	r4,fp
2002cb1c:	002df4c0 	call	2002df4c <_Bfree>
2002cb20:	880b883a 	mov	r5,r17
2002cb24:	e009883a 	mov	r4,fp
2002cb28:	002df4c0 	call	2002df4c <_Bfree>
2002cb2c:	003e9706 	br	2002c58c <_gp+0xfffed02c>
2002cb30:	01800044 	movi	r6,1
2002cb34:	d9800e15 	stw	r6,56(sp)
2002cb38:	003d9606 	br	2002c194 <_gp+0xfffecc34>
2002cb3c:	d8800817 	ldw	r2,32(sp)
2002cb40:	d8c00517 	ldw	r3,20(sp)
2002cb44:	d8000d15 	stw	zero,52(sp)
2002cb48:	10c5c83a 	sub	r2,r2,r3
2002cb4c:	00c9c83a 	sub	r4,zero,r3
2002cb50:	d8800815 	stw	r2,32(sp)
2002cb54:	d9000a15 	stw	r4,40(sp)
2002cb58:	003d9706 	br	2002c1b8 <_gp+0xfffecc58>
2002cb5c:	05adc83a 	sub	r22,zero,r22
2002cb60:	dd800815 	stw	r22,32(sp)
2002cb64:	002d883a 	mov	r22,zero
2002cb68:	003d8e06 	br	2002c1a4 <_gp+0xfffecc44>
2002cb6c:	d9000517 	ldw	r4,20(sp)
2002cb70:	0026d140 	call	20026d14 <__floatsidf>
2002cb74:	100d883a 	mov	r6,r2
2002cb78:	180f883a 	mov	r7,r3
2002cb7c:	a009883a 	mov	r4,r20
2002cb80:	880b883a 	mov	r5,r17
2002cb84:	0031ff00 	call	20031ff0 <__eqdf2>
2002cb88:	103d7126 	beq	r2,zero,2002c150 <_gp+0xfffecbf0>
2002cb8c:	d9c00517 	ldw	r7,20(sp)
2002cb90:	39ffffc4 	addi	r7,r7,-1
2002cb94:	d9c00515 	stw	r7,20(sp)
2002cb98:	003d6d06 	br	2002c150 <_gp+0xfffecbf0>
2002cb9c:	dd400a17 	ldw	r21,40(sp)
2002cba0:	dd000817 	ldw	r20,32(sp)
2002cba4:	0023883a 	mov	r17,zero
2002cba8:	003f4806 	br	2002c8cc <_gp+0xfffed36c>
2002cbac:	10e3c83a 	sub	r17,r2,r3
2002cbb0:	9448983a 	sll	r4,r18,r17
2002cbb4:	003d3206 	br	2002c080 <_gp+0xfffecb20>
2002cbb8:	d8000e15 	stw	zero,56(sp)
2002cbbc:	003d7506 	br	2002c194 <_gp+0xfffecc34>
2002cbc0:	b005883a 	mov	r2,r22
2002cbc4:	003f4506 	br	2002c8dc <_gp+0xfffed37c>
2002cbc8:	dc000915 	stw	r16,36(sp)
2002cbcc:	d9800a17 	ldw	r6,40(sp)
2002cbd0:	d9400917 	ldw	r5,36(sp)
2002cbd4:	e009883a 	mov	r4,fp
2002cbd8:	002e4e40 	call	2002e4e4 <__pow5mult>
2002cbdc:	1021883a 	mov	r16,r2
2002cbe0:	003f5a06 	br	2002c94c <_gp+0xfffed3ec>
2002cbe4:	01c00044 	movi	r7,1
2002cbe8:	d9c00b15 	stw	r7,44(sp)
2002cbec:	d8802217 	ldw	r2,136(sp)
2002cbf0:	0081280e 	bge	zero,r2,2002d094 <_dtoa_r+0x11b0>
2002cbf4:	100d883a 	mov	r6,r2
2002cbf8:	1021883a 	mov	r16,r2
2002cbfc:	d8800c15 	stw	r2,48(sp)
2002cc00:	d8800615 	stw	r2,24(sp)
2002cc04:	003d8806 	br	2002c228 <_gp+0xfffeccc8>
2002cc08:	d8800617 	ldw	r2,24(sp)
2002cc0c:	00be9b16 	blt	zero,r2,2002c67c <_gp+0xfffed11c>
2002cc10:	10010f1e 	bne	r2,zero,2002d050 <_dtoa_r+0x116c>
2002cc14:	880b883a 	mov	r5,r17
2002cc18:	000d883a 	mov	r6,zero
2002cc1c:	01d00534 	movhi	r7,16404
2002cc20:	8009883a 	mov	r4,r16
2002cc24:	0025c800 	call	20025c80 <__muldf3>
2002cc28:	900d883a 	mov	r6,r18
2002cc2c:	980f883a 	mov	r7,r19
2002cc30:	1009883a 	mov	r4,r2
2002cc34:	180b883a 	mov	r5,r3
2002cc38:	0025ab00 	call	20025ab0 <__gedf2>
2002cc3c:	002b883a 	mov	r21,zero
2002cc40:	0023883a 	mov	r17,zero
2002cc44:	1000bf16 	blt	r2,zero,2002cf44 <_dtoa_r+0x1060>
2002cc48:	d9802217 	ldw	r6,136(sp)
2002cc4c:	ddc00717 	ldw	r23,28(sp)
2002cc50:	018c303a 	nor	r6,zero,r6
2002cc54:	d9800515 	stw	r6,20(sp)
2002cc58:	a80b883a 	mov	r5,r21
2002cc5c:	e009883a 	mov	r4,fp
2002cc60:	002df4c0 	call	2002df4c <_Bfree>
2002cc64:	883e4926 	beq	r17,zero,2002c58c <_gp+0xfffed02c>
2002cc68:	003fad06 	br	2002cb20 <_gp+0xfffed5c0>
2002cc6c:	d9c01117 	ldw	r7,68(sp)
2002cc70:	3801bc26 	beq	r7,zero,2002d364 <_dtoa_r+0x1480>
2002cc74:	10810cc4 	addi	r2,r2,1075
2002cc78:	dd400a17 	ldw	r21,40(sp)
2002cc7c:	dd000817 	ldw	r20,32(sp)
2002cc80:	003f0a06 	br	2002c8ac <_gp+0xfffed34c>
2002cc84:	00800704 	movi	r2,28
2002cc88:	d9000817 	ldw	r4,32(sp)
2002cc8c:	a0a9883a 	add	r20,r20,r2
2002cc90:	b0ad883a 	add	r22,r22,r2
2002cc94:	2089883a 	add	r4,r4,r2
2002cc98:	d9000815 	stw	r4,32(sp)
2002cc9c:	003f5106 	br	2002c9e4 <_gp+0xfffed484>
2002cca0:	d8c00317 	ldw	r3,12(sp)
2002cca4:	b8c1fc0e 	bge	r23,r3,2002d498 <_dtoa_r+0x15b4>
2002cca8:	0027883a 	mov	r19,zero
2002ccac:	b805883a 	mov	r2,r23
2002ccb0:	003f3e06 	br	2002c9ac <_gp+0xfffed44c>
2002ccb4:	880b883a 	mov	r5,r17
2002ccb8:	e009883a 	mov	r4,fp
2002ccbc:	000f883a 	mov	r7,zero
2002ccc0:	01800284 	movi	r6,10
2002ccc4:	002df740 	call	2002df74 <__multadd>
2002ccc8:	d9000c17 	ldw	r4,48(sp)
2002cccc:	1023883a 	mov	r17,r2
2002ccd0:	0102040e 	bge	zero,r4,2002d4e4 <_dtoa_r+0x1600>
2002ccd4:	d9000615 	stw	r4,24(sp)
2002ccd8:	0500050e 	bge	zero,r20,2002ccf0 <_dtoa_r+0xe0c>
2002ccdc:	880b883a 	mov	r5,r17
2002cce0:	a00d883a 	mov	r6,r20
2002cce4:	e009883a 	mov	r4,fp
2002cce8:	002e6240 	call	2002e624 <__lshift>
2002ccec:	1023883a 	mov	r17,r2
2002ccf0:	9801241e 	bne	r19,zero,2002d184 <_dtoa_r+0x12a0>
2002ccf4:	8829883a 	mov	r20,r17
2002ccf8:	d9000617 	ldw	r4,24(sp)
2002ccfc:	dcc00717 	ldw	r19,28(sp)
2002cd00:	9480004c 	andi	r18,r18,1
2002cd04:	20bfffc4 	addi	r2,r4,-1
2002cd08:	9885883a 	add	r2,r19,r2
2002cd0c:	d8800415 	stw	r2,16(sp)
2002cd10:	dc800615 	stw	r18,24(sp)
2002cd14:	a80b883a 	mov	r5,r21
2002cd18:	8009883a 	mov	r4,r16
2002cd1c:	002bce40 	call	2002bce4 <quorem>
2002cd20:	880b883a 	mov	r5,r17
2002cd24:	8009883a 	mov	r4,r16
2002cd28:	102f883a 	mov	r23,r2
2002cd2c:	002e76c0 	call	2002e76c <__mcmp>
2002cd30:	a80b883a 	mov	r5,r21
2002cd34:	a00d883a 	mov	r6,r20
2002cd38:	e009883a 	mov	r4,fp
2002cd3c:	102d883a 	mov	r22,r2
2002cd40:	002e7cc0 	call	2002e7cc <__mdiff>
2002cd44:	1007883a 	mov	r3,r2
2002cd48:	10800317 	ldw	r2,12(r2)
2002cd4c:	bc800c04 	addi	r18,r23,48
2002cd50:	180b883a 	mov	r5,r3
2002cd54:	10004e1e 	bne	r2,zero,2002ce90 <_dtoa_r+0xfac>
2002cd58:	8009883a 	mov	r4,r16
2002cd5c:	d8c01615 	stw	r3,88(sp)
2002cd60:	002e76c0 	call	2002e76c <__mcmp>
2002cd64:	d8c01617 	ldw	r3,88(sp)
2002cd68:	e009883a 	mov	r4,fp
2002cd6c:	d8801615 	stw	r2,88(sp)
2002cd70:	180b883a 	mov	r5,r3
2002cd74:	002df4c0 	call	2002df4c <_Bfree>
2002cd78:	d8801617 	ldw	r2,88(sp)
2002cd7c:	1000041e 	bne	r2,zero,2002cd90 <_dtoa_r+0xeac>
2002cd80:	d9800317 	ldw	r6,12(sp)
2002cd84:	3000021e 	bne	r6,zero,2002cd90 <_dtoa_r+0xeac>
2002cd88:	d8c00617 	ldw	r3,24(sp)
2002cd8c:	18003726 	beq	r3,zero,2002ce6c <_dtoa_r+0xf88>
2002cd90:	b0002016 	blt	r22,zero,2002ce14 <_dtoa_r+0xf30>
2002cd94:	b000041e 	bne	r22,zero,2002cda8 <_dtoa_r+0xec4>
2002cd98:	d9000317 	ldw	r4,12(sp)
2002cd9c:	2000021e 	bne	r4,zero,2002cda8 <_dtoa_r+0xec4>
2002cda0:	d8c00617 	ldw	r3,24(sp)
2002cda4:	18001b26 	beq	r3,zero,2002ce14 <_dtoa_r+0xf30>
2002cda8:	00810716 	blt	zero,r2,2002d1c8 <_dtoa_r+0x12e4>
2002cdac:	d8c00417 	ldw	r3,16(sp)
2002cdb0:	9d800044 	addi	r22,r19,1
2002cdb4:	9c800005 	stb	r18,0(r19)
2002cdb8:	b02f883a 	mov	r23,r22
2002cdbc:	98c10626 	beq	r19,r3,2002d1d8 <_dtoa_r+0x12f4>
2002cdc0:	800b883a 	mov	r5,r16
2002cdc4:	000f883a 	mov	r7,zero
2002cdc8:	01800284 	movi	r6,10
2002cdcc:	e009883a 	mov	r4,fp
2002cdd0:	002df740 	call	2002df74 <__multadd>
2002cdd4:	1021883a 	mov	r16,r2
2002cdd8:	000f883a 	mov	r7,zero
2002cddc:	01800284 	movi	r6,10
2002cde0:	880b883a 	mov	r5,r17
2002cde4:	e009883a 	mov	r4,fp
2002cde8:	8d002526 	beq	r17,r20,2002ce80 <_dtoa_r+0xf9c>
2002cdec:	002df740 	call	2002df74 <__multadd>
2002cdf0:	a00b883a 	mov	r5,r20
2002cdf4:	000f883a 	mov	r7,zero
2002cdf8:	01800284 	movi	r6,10
2002cdfc:	e009883a 	mov	r4,fp
2002ce00:	1023883a 	mov	r17,r2
2002ce04:	002df740 	call	2002df74 <__multadd>
2002ce08:	1029883a 	mov	r20,r2
2002ce0c:	b027883a 	mov	r19,r22
2002ce10:	003fc006 	br	2002cd14 <_gp+0xfffed7b4>
2002ce14:	9011883a 	mov	r8,r18
2002ce18:	00800e0e 	bge	zero,r2,2002ce54 <_dtoa_r+0xf70>
2002ce1c:	800b883a 	mov	r5,r16
2002ce20:	01800044 	movi	r6,1
2002ce24:	e009883a 	mov	r4,fp
2002ce28:	da001715 	stw	r8,92(sp)
2002ce2c:	002e6240 	call	2002e624 <__lshift>
2002ce30:	a80b883a 	mov	r5,r21
2002ce34:	1009883a 	mov	r4,r2
2002ce38:	1021883a 	mov	r16,r2
2002ce3c:	002e76c0 	call	2002e76c <__mcmp>
2002ce40:	da001717 	ldw	r8,92(sp)
2002ce44:	0081960e 	bge	zero,r2,2002d4a0 <_dtoa_r+0x15bc>
2002ce48:	00800e44 	movi	r2,57
2002ce4c:	40817026 	beq	r8,r2,2002d410 <_dtoa_r+0x152c>
2002ce50:	ba000c44 	addi	r8,r23,49
2002ce54:	8825883a 	mov	r18,r17
2002ce58:	9dc00044 	addi	r23,r19,1
2002ce5c:	9a000005 	stb	r8,0(r19)
2002ce60:	a023883a 	mov	r17,r20
2002ce64:	dc000915 	stw	r16,36(sp)
2002ce68:	003f2406 	br	2002cafc <_gp+0xfffed59c>
2002ce6c:	00800e44 	movi	r2,57
2002ce70:	9011883a 	mov	r8,r18
2002ce74:	90816626 	beq	r18,r2,2002d410 <_dtoa_r+0x152c>
2002ce78:	05bff516 	blt	zero,r22,2002ce50 <_gp+0xfffed8f0>
2002ce7c:	003ff506 	br	2002ce54 <_gp+0xfffed8f4>
2002ce80:	002df740 	call	2002df74 <__multadd>
2002ce84:	1023883a 	mov	r17,r2
2002ce88:	1029883a 	mov	r20,r2
2002ce8c:	003fdf06 	br	2002ce0c <_gp+0xfffed8ac>
2002ce90:	e009883a 	mov	r4,fp
2002ce94:	002df4c0 	call	2002df4c <_Bfree>
2002ce98:	00800044 	movi	r2,1
2002ce9c:	003fbc06 	br	2002cd90 <_gp+0xfffed830>
2002cea0:	a80b883a 	mov	r5,r21
2002cea4:	8009883a 	mov	r4,r16
2002cea8:	002e76c0 	call	2002e76c <__mcmp>
2002ceac:	103edb0e 	bge	r2,zero,2002ca1c <_gp+0xfffed4bc>
2002ceb0:	800b883a 	mov	r5,r16
2002ceb4:	000f883a 	mov	r7,zero
2002ceb8:	01800284 	movi	r6,10
2002cebc:	e009883a 	mov	r4,fp
2002cec0:	002df740 	call	2002df74 <__multadd>
2002cec4:	1021883a 	mov	r16,r2
2002cec8:	d8800517 	ldw	r2,20(sp)
2002cecc:	d8c00b17 	ldw	r3,44(sp)
2002ced0:	10bfffc4 	addi	r2,r2,-1
2002ced4:	d8800515 	stw	r2,20(sp)
2002ced8:	183f761e 	bne	r3,zero,2002ccb4 <_gp+0xfffed754>
2002cedc:	d9000c17 	ldw	r4,48(sp)
2002cee0:	0101730e 	bge	zero,r4,2002d4b0 <_dtoa_r+0x15cc>
2002cee4:	d9000615 	stw	r4,24(sp)
2002cee8:	003ed006 	br	2002ca2c <_gp+0xfffed4cc>
2002ceec:	00800084 	movi	r2,2
2002cef0:	3081861e 	bne	r6,r2,2002d50c <_dtoa_r+0x1628>
2002cef4:	d8000b15 	stw	zero,44(sp)
2002cef8:	003f3c06 	br	2002cbec <_gp+0xfffed68c>
2002cefc:	dc000917 	ldw	r16,36(sp)
2002cf00:	003e9206 	br	2002c94c <_gp+0xfffed3ec>
2002cf04:	d9c00317 	ldw	r7,12(sp)
2002cf08:	00800084 	movi	r2,2
2002cf0c:	11fec50e 	bge	r2,r7,2002ca24 <_gp+0xfffed4c4>
2002cf10:	d9000617 	ldw	r4,24(sp)
2002cf14:	20013c1e 	bne	r4,zero,2002d408 <_dtoa_r+0x1524>
2002cf18:	a80b883a 	mov	r5,r21
2002cf1c:	000f883a 	mov	r7,zero
2002cf20:	01800144 	movi	r6,5
2002cf24:	e009883a 	mov	r4,fp
2002cf28:	002df740 	call	2002df74 <__multadd>
2002cf2c:	100b883a 	mov	r5,r2
2002cf30:	8009883a 	mov	r4,r16
2002cf34:	102b883a 	mov	r21,r2
2002cf38:	002e76c0 	call	2002e76c <__mcmp>
2002cf3c:	dc000915 	stw	r16,36(sp)
2002cf40:	00bf410e 	bge	zero,r2,2002cc48 <_gp+0xfffed6e8>
2002cf44:	d9c00717 	ldw	r7,28(sp)
2002cf48:	00800c44 	movi	r2,49
2002cf4c:	38800005 	stb	r2,0(r7)
2002cf50:	d8800517 	ldw	r2,20(sp)
2002cf54:	3dc00044 	addi	r23,r7,1
2002cf58:	10800044 	addi	r2,r2,1
2002cf5c:	d8800515 	stw	r2,20(sp)
2002cf60:	003f3d06 	br	2002cc58 <_gp+0xfffed6f8>
2002cf64:	d9800517 	ldw	r6,20(sp)
2002cf68:	d9c00717 	ldw	r7,28(sp)
2002cf6c:	00800c44 	movi	r2,49
2002cf70:	31800044 	addi	r6,r6,1
2002cf74:	d9800515 	stw	r6,20(sp)
2002cf78:	38800005 	stb	r2,0(r7)
2002cf7c:	003edf06 	br	2002cafc <_gp+0xfffed59c>
2002cf80:	d8000b15 	stw	zero,44(sp)
2002cf84:	003c9f06 	br	2002c204 <_gp+0xfffecca4>
2002cf88:	903e7e1e 	bne	r18,zero,2002c984 <_gp+0xfffed424>
2002cf8c:	00800434 	movhi	r2,16
2002cf90:	10bfffc4 	addi	r2,r2,-1
2002cf94:	9884703a 	and	r2,r19,r2
2002cf98:	1000ea1e 	bne	r2,zero,2002d344 <_dtoa_r+0x1460>
2002cf9c:	9cdffc2c 	andhi	r19,r19,32752
2002cfa0:	9800e826 	beq	r19,zero,2002d344 <_dtoa_r+0x1460>
2002cfa4:	d9c00817 	ldw	r7,32(sp)
2002cfa8:	b5800044 	addi	r22,r22,1
2002cfac:	04c00044 	movi	r19,1
2002cfb0:	39c00044 	addi	r7,r7,1
2002cfb4:	d9c00815 	stw	r7,32(sp)
2002cfb8:	d8800d17 	ldw	r2,52(sp)
2002cfbc:	103e721e 	bne	r2,zero,2002c988 <_gp+0xfffed428>
2002cfc0:	00800044 	movi	r2,1
2002cfc4:	003e7906 	br	2002c9ac <_gp+0xfffed44c>
2002cfc8:	8009883a 	mov	r4,r16
2002cfcc:	0026d140 	call	20026d14 <__floatsidf>
2002cfd0:	d9800f17 	ldw	r6,60(sp)
2002cfd4:	d9c01017 	ldw	r7,64(sp)
2002cfd8:	1009883a 	mov	r4,r2
2002cfdc:	180b883a 	mov	r5,r3
2002cfe0:	0025c800 	call	20025c80 <__muldf3>
2002cfe4:	000d883a 	mov	r6,zero
2002cfe8:	01d00734 	movhi	r7,16412
2002cfec:	1009883a 	mov	r4,r2
2002cff0:	180b883a 	mov	r5,r3
2002cff4:	002491c0 	call	2002491c <__adddf3>
2002cff8:	047f3034 	movhi	r17,64704
2002cffc:	1021883a 	mov	r16,r2
2002d000:	1c63883a 	add	r17,r3,r17
2002d004:	d9000f17 	ldw	r4,60(sp)
2002d008:	d9401017 	ldw	r5,64(sp)
2002d00c:	000d883a 	mov	r6,zero
2002d010:	01d00534 	movhi	r7,16404
2002d014:	00263980 	call	20026398 <__subdf3>
2002d018:	800d883a 	mov	r6,r16
2002d01c:	880f883a 	mov	r7,r17
2002d020:	1009883a 	mov	r4,r2
2002d024:	180b883a 	mov	r5,r3
2002d028:	102b883a 	mov	r21,r2
2002d02c:	1829883a 	mov	r20,r3
2002d030:	0025ab00 	call	20025ab0 <__gedf2>
2002d034:	00806c16 	blt	zero,r2,2002d1e8 <_dtoa_r+0x1304>
2002d038:	89e0003c 	xorhi	r7,r17,32768
2002d03c:	800d883a 	mov	r6,r16
2002d040:	a809883a 	mov	r4,r21
2002d044:	a00b883a 	mov	r5,r20
2002d048:	0025b8c0 	call	20025b8c <__ledf2>
2002d04c:	103d7e0e 	bge	r2,zero,2002c648 <_gp+0xfffed0e8>
2002d050:	002b883a 	mov	r21,zero
2002d054:	0023883a 	mov	r17,zero
2002d058:	003efb06 	br	2002cc48 <_gp+0xfffed6e8>
2002d05c:	d8800717 	ldw	r2,28(sp)
2002d060:	003bd006 	br	2002bfa4 <_gp+0xfffeca44>
2002d064:	d9000a17 	ldw	r4,40(sp)
2002d068:	d9800d17 	ldw	r6,52(sp)
2002d06c:	dd400a15 	stw	r21,40(sp)
2002d070:	a905c83a 	sub	r2,r21,r4
2002d074:	308d883a 	add	r6,r6,r2
2002d078:	d9800d15 	stw	r6,52(sp)
2002d07c:	002b883a 	mov	r21,zero
2002d080:	003e0606 	br	2002c89c <_gp+0xfffed33c>
2002d084:	9023883a 	mov	r17,r18
2002d088:	9829883a 	mov	r20,r19
2002d08c:	04000084 	movi	r16,2
2002d090:	003c9206 	br	2002c2dc <_gp+0xfffecd7c>
2002d094:	04000044 	movi	r16,1
2002d098:	dc000c15 	stw	r16,48(sp)
2002d09c:	dc000615 	stw	r16,24(sp)
2002d0a0:	dc002215 	stw	r16,136(sp)
2002d0a4:	e0001115 	stw	zero,68(fp)
2002d0a8:	000b883a 	mov	r5,zero
2002d0ac:	003c6906 	br	2002c254 <_gp+0xfffeccf4>
2002d0b0:	3021883a 	mov	r16,r6
2002d0b4:	003ffb06 	br	2002d0a4 <_gp+0xfffedb44>
2002d0b8:	1000021e 	bne	r2,zero,2002d0c4 <_dtoa_r+0x11e0>
2002d0bc:	4200004c 	andi	r8,r8,1
2002d0c0:	403e7d1e 	bne	r8,zero,2002cab8 <_gp+0xfffed558>
2002d0c4:	01000c04 	movi	r4,48
2002d0c8:	00000106 	br	2002d0d0 <_dtoa_r+0x11ec>
2002d0cc:	102f883a 	mov	r23,r2
2002d0d0:	b8bfffc4 	addi	r2,r23,-1
2002d0d4:	10c00007 	ldb	r3,0(r2)
2002d0d8:	193ffc26 	beq	r3,r4,2002d0cc <_gp+0xfffedb6c>
2002d0dc:	003e8706 	br	2002cafc <_gp+0xfffed59c>
2002d0e0:	d8800517 	ldw	r2,20(sp)
2002d0e4:	00a3c83a 	sub	r17,zero,r2
2002d0e8:	8800a426 	beq	r17,zero,2002d37c <_dtoa_r+0x1498>
2002d0ec:	888003cc 	andi	r2,r17,15
2002d0f0:	100490fa 	slli	r2,r2,3
2002d0f4:	00c800f4 	movhi	r3,8195
2002d0f8:	18d65b04 	addi	r3,r3,22892
2002d0fc:	1885883a 	add	r2,r3,r2
2002d100:	11800017 	ldw	r6,0(r2)
2002d104:	11c00117 	ldw	r7,4(r2)
2002d108:	9009883a 	mov	r4,r18
2002d10c:	980b883a 	mov	r5,r19
2002d110:	8823d13a 	srai	r17,r17,4
2002d114:	0025c800 	call	20025c80 <__muldf3>
2002d118:	d8800f15 	stw	r2,60(sp)
2002d11c:	d8c01015 	stw	r3,64(sp)
2002d120:	8800e826 	beq	r17,zero,2002d4c4 <_dtoa_r+0x15e0>
2002d124:	050800f4 	movhi	r20,8195
2002d128:	a5165104 	addi	r20,r20,22852
2002d12c:	04000084 	movi	r16,2
2002d130:	8980004c 	andi	r6,r17,1
2002d134:	1009883a 	mov	r4,r2
2002d138:	8823d07a 	srai	r17,r17,1
2002d13c:	180b883a 	mov	r5,r3
2002d140:	30000426 	beq	r6,zero,2002d154 <_dtoa_r+0x1270>
2002d144:	a1800017 	ldw	r6,0(r20)
2002d148:	a1c00117 	ldw	r7,4(r20)
2002d14c:	84000044 	addi	r16,r16,1
2002d150:	0025c800 	call	20025c80 <__muldf3>
2002d154:	a5000204 	addi	r20,r20,8
2002d158:	883ff51e 	bne	r17,zero,2002d130 <_gp+0xfffedbd0>
2002d15c:	d8800f15 	stw	r2,60(sp)
2002d160:	d8c01015 	stw	r3,64(sp)
2002d164:	003c7606 	br	2002c340 <_gp+0xfffecde0>
2002d168:	00c00c04 	movi	r3,48
2002d16c:	10c00005 	stb	r3,0(r2)
2002d170:	d8c00517 	ldw	r3,20(sp)
2002d174:	bd3fffc3 	ldbu	r20,-1(r23)
2002d178:	18c00044 	addi	r3,r3,1
2002d17c:	d8c00515 	stw	r3,20(sp)
2002d180:	003db906 	br	2002c868 <_gp+0xfffed308>
2002d184:	89400117 	ldw	r5,4(r17)
2002d188:	e009883a 	mov	r4,fp
2002d18c:	002dea40 	call	2002dea4 <_Balloc>
2002d190:	89800417 	ldw	r6,16(r17)
2002d194:	89400304 	addi	r5,r17,12
2002d198:	11000304 	addi	r4,r2,12
2002d19c:	31800084 	addi	r6,r6,2
2002d1a0:	318d883a 	add	r6,r6,r6
2002d1a4:	318d883a 	add	r6,r6,r6
2002d1a8:	1027883a 	mov	r19,r2
2002d1ac:	00290a40 	call	200290a4 <memcpy>
2002d1b0:	01800044 	movi	r6,1
2002d1b4:	980b883a 	mov	r5,r19
2002d1b8:	e009883a 	mov	r4,fp
2002d1bc:	002e6240 	call	2002e624 <__lshift>
2002d1c0:	1029883a 	mov	r20,r2
2002d1c4:	003ecc06 	br	2002ccf8 <_gp+0xfffed798>
2002d1c8:	00800e44 	movi	r2,57
2002d1cc:	90809026 	beq	r18,r2,2002d410 <_dtoa_r+0x152c>
2002d1d0:	92000044 	addi	r8,r18,1
2002d1d4:	003f1f06 	br	2002ce54 <_gp+0xfffed8f4>
2002d1d8:	9011883a 	mov	r8,r18
2002d1dc:	8825883a 	mov	r18,r17
2002d1e0:	a023883a 	mov	r17,r20
2002d1e4:	003e2906 	br	2002ca8c <_gp+0xfffed52c>
2002d1e8:	002b883a 	mov	r21,zero
2002d1ec:	0023883a 	mov	r17,zero
2002d1f0:	003f5406 	br	2002cf44 <_gp+0xfffed9e4>
2002d1f4:	61bfffc4 	addi	r6,r12,-1
2002d1f8:	300490fa 	slli	r2,r6,3
2002d1fc:	00c800f4 	movhi	r3,8195
2002d200:	18d65b04 	addi	r3,r3,22892
2002d204:	1885883a 	add	r2,r3,r2
2002d208:	11000017 	ldw	r4,0(r2)
2002d20c:	11400117 	ldw	r5,4(r2)
2002d210:	d8800717 	ldw	r2,28(sp)
2002d214:	880f883a 	mov	r7,r17
2002d218:	d9801215 	stw	r6,72(sp)
2002d21c:	800d883a 	mov	r6,r16
2002d220:	db001615 	stw	r12,88(sp)
2002d224:	15c00044 	addi	r23,r2,1
2002d228:	0025c800 	call	20025c80 <__muldf3>
2002d22c:	d9401017 	ldw	r5,64(sp)
2002d230:	d9000f17 	ldw	r4,60(sp)
2002d234:	d8c01515 	stw	r3,84(sp)
2002d238:	d8801415 	stw	r2,80(sp)
2002d23c:	0026c940 	call	20026c94 <__fixdfsi>
2002d240:	1009883a 	mov	r4,r2
2002d244:	1021883a 	mov	r16,r2
2002d248:	0026d140 	call	20026d14 <__floatsidf>
2002d24c:	d9000f17 	ldw	r4,60(sp)
2002d250:	d9401017 	ldw	r5,64(sp)
2002d254:	100d883a 	mov	r6,r2
2002d258:	180f883a 	mov	r7,r3
2002d25c:	00263980 	call	20026398 <__subdf3>
2002d260:	1829883a 	mov	r20,r3
2002d264:	d8c00717 	ldw	r3,28(sp)
2002d268:	84000c04 	addi	r16,r16,48
2002d26c:	1023883a 	mov	r17,r2
2002d270:	1c000005 	stb	r16,0(r3)
2002d274:	db001617 	ldw	r12,88(sp)
2002d278:	00800044 	movi	r2,1
2002d27c:	60802226 	beq	r12,r2,2002d308 <_dtoa_r+0x1424>
2002d280:	d9c00717 	ldw	r7,28(sp)
2002d284:	8805883a 	mov	r2,r17
2002d288:	b82b883a 	mov	r21,r23
2002d28c:	3b19883a 	add	r12,r7,r12
2002d290:	6023883a 	mov	r17,r12
2002d294:	a007883a 	mov	r3,r20
2002d298:	dc800f15 	stw	r18,60(sp)
2002d29c:	000d883a 	mov	r6,zero
2002d2a0:	01d00934 	movhi	r7,16420
2002d2a4:	1009883a 	mov	r4,r2
2002d2a8:	180b883a 	mov	r5,r3
2002d2ac:	0025c800 	call	20025c80 <__muldf3>
2002d2b0:	180b883a 	mov	r5,r3
2002d2b4:	1009883a 	mov	r4,r2
2002d2b8:	1829883a 	mov	r20,r3
2002d2bc:	1025883a 	mov	r18,r2
2002d2c0:	0026c940 	call	20026c94 <__fixdfsi>
2002d2c4:	1009883a 	mov	r4,r2
2002d2c8:	1021883a 	mov	r16,r2
2002d2cc:	0026d140 	call	20026d14 <__floatsidf>
2002d2d0:	100d883a 	mov	r6,r2
2002d2d4:	180f883a 	mov	r7,r3
2002d2d8:	9009883a 	mov	r4,r18
2002d2dc:	a00b883a 	mov	r5,r20
2002d2e0:	84000c04 	addi	r16,r16,48
2002d2e4:	00263980 	call	20026398 <__subdf3>
2002d2e8:	ad400044 	addi	r21,r21,1
2002d2ec:	ac3fffc5 	stb	r16,-1(r21)
2002d2f0:	ac7fea1e 	bne	r21,r17,2002d29c <_gp+0xfffedd3c>
2002d2f4:	1023883a 	mov	r17,r2
2002d2f8:	d8801217 	ldw	r2,72(sp)
2002d2fc:	dc800f17 	ldw	r18,60(sp)
2002d300:	1829883a 	mov	r20,r3
2002d304:	b8af883a 	add	r23,r23,r2
2002d308:	d9001417 	ldw	r4,80(sp)
2002d30c:	d9401517 	ldw	r5,84(sp)
2002d310:	000d883a 	mov	r6,zero
2002d314:	01cff834 	movhi	r7,16352
2002d318:	002491c0 	call	2002491c <__adddf3>
2002d31c:	880d883a 	mov	r6,r17
2002d320:	a00f883a 	mov	r7,r20
2002d324:	1009883a 	mov	r4,r2
2002d328:	180b883a 	mov	r5,r3
2002d32c:	0025b8c0 	call	20025b8c <__ledf2>
2002d330:	10003e0e 	bge	r2,zero,2002d42c <_dtoa_r+0x1548>
2002d334:	d9001317 	ldw	r4,76(sp)
2002d338:	bd3fffc3 	ldbu	r20,-1(r23)
2002d33c:	d9000515 	stw	r4,20(sp)
2002d340:	003d3b06 	br	2002c830 <_gp+0xfffed2d0>
2002d344:	0027883a 	mov	r19,zero
2002d348:	003f1b06 	br	2002cfb8 <_gp+0xfffeda58>
2002d34c:	d8800817 	ldw	r2,32(sp)
2002d350:	11e9c83a 	sub	r20,r2,r7
2002d354:	0005883a 	mov	r2,zero
2002d358:	003d5406 	br	2002c8ac <_gp+0xfffed34c>
2002d35c:	00800044 	movi	r2,1
2002d360:	003dc706 	br	2002ca80 <_gp+0xfffed520>
2002d364:	d8c00217 	ldw	r3,8(sp)
2002d368:	00800d84 	movi	r2,54
2002d36c:	dd400a17 	ldw	r21,40(sp)
2002d370:	10c5c83a 	sub	r2,r2,r3
2002d374:	dd000817 	ldw	r20,32(sp)
2002d378:	003d4c06 	br	2002c8ac <_gp+0xfffed34c>
2002d37c:	dc800f15 	stw	r18,60(sp)
2002d380:	dcc01015 	stw	r19,64(sp)
2002d384:	04000084 	movi	r16,2
2002d388:	003bed06 	br	2002c340 <_gp+0xfffecde0>
2002d38c:	d9000617 	ldw	r4,24(sp)
2002d390:	203f0d26 	beq	r4,zero,2002cfc8 <_gp+0xfffeda68>
2002d394:	d9800c17 	ldw	r6,48(sp)
2002d398:	01bcab0e 	bge	zero,r6,2002c648 <_gp+0xfffed0e8>
2002d39c:	d9401017 	ldw	r5,64(sp)
2002d3a0:	d9000f17 	ldw	r4,60(sp)
2002d3a4:	000d883a 	mov	r6,zero
2002d3a8:	01d00934 	movhi	r7,16420
2002d3ac:	0025c800 	call	20025c80 <__muldf3>
2002d3b0:	81000044 	addi	r4,r16,1
2002d3b4:	d8800f15 	stw	r2,60(sp)
2002d3b8:	d8c01015 	stw	r3,64(sp)
2002d3bc:	0026d140 	call	20026d14 <__floatsidf>
2002d3c0:	d9800f17 	ldw	r6,60(sp)
2002d3c4:	d9c01017 	ldw	r7,64(sp)
2002d3c8:	1009883a 	mov	r4,r2
2002d3cc:	180b883a 	mov	r5,r3
2002d3d0:	0025c800 	call	20025c80 <__muldf3>
2002d3d4:	01d00734 	movhi	r7,16412
2002d3d8:	000d883a 	mov	r6,zero
2002d3dc:	1009883a 	mov	r4,r2
2002d3e0:	180b883a 	mov	r5,r3
2002d3e4:	002491c0 	call	2002491c <__adddf3>
2002d3e8:	d9c00517 	ldw	r7,20(sp)
2002d3ec:	047f3034 	movhi	r17,64704
2002d3f0:	1021883a 	mov	r16,r2
2002d3f4:	39ffffc4 	addi	r7,r7,-1
2002d3f8:	d9c01315 	stw	r7,76(sp)
2002d3fc:	1c63883a 	add	r17,r3,r17
2002d400:	db000c17 	ldw	r12,48(sp)
2002d404:	003bea06 	br	2002c3b0 <_gp+0xfffece50>
2002d408:	dc000915 	stw	r16,36(sp)
2002d40c:	003e0e06 	br	2002cc48 <_gp+0xfffed6e8>
2002d410:	01000e44 	movi	r4,57
2002d414:	8825883a 	mov	r18,r17
2002d418:	9dc00044 	addi	r23,r19,1
2002d41c:	99000005 	stb	r4,0(r19)
2002d420:	a023883a 	mov	r17,r20
2002d424:	dc000915 	stw	r16,36(sp)
2002d428:	003da406 	br	2002cabc <_gp+0xfffed55c>
2002d42c:	d9801417 	ldw	r6,80(sp)
2002d430:	d9c01517 	ldw	r7,84(sp)
2002d434:	0009883a 	mov	r4,zero
2002d438:	014ff834 	movhi	r5,16352
2002d43c:	00263980 	call	20026398 <__subdf3>
2002d440:	880d883a 	mov	r6,r17
2002d444:	a00f883a 	mov	r7,r20
2002d448:	1009883a 	mov	r4,r2
2002d44c:	180b883a 	mov	r5,r3
2002d450:	0025ab00 	call	20025ab0 <__gedf2>
2002d454:	00bc7c0e 	bge	zero,r2,2002c648 <_gp+0xfffed0e8>
2002d458:	01000c04 	movi	r4,48
2002d45c:	00000106 	br	2002d464 <_dtoa_r+0x1580>
2002d460:	102f883a 	mov	r23,r2
2002d464:	b8bfffc4 	addi	r2,r23,-1
2002d468:	10c00007 	ldb	r3,0(r2)
2002d46c:	193ffc26 	beq	r3,r4,2002d460 <_gp+0xfffedf00>
2002d470:	d9801317 	ldw	r6,76(sp)
2002d474:	d9800515 	stw	r6,20(sp)
2002d478:	003c4406 	br	2002c58c <_gp+0xfffed02c>
2002d47c:	d9801317 	ldw	r6,76(sp)
2002d480:	d9800515 	stw	r6,20(sp)
2002d484:	003cea06 	br	2002c830 <_gp+0xfffed2d0>
2002d488:	dd800f17 	ldw	r22,60(sp)
2002d48c:	dcc01017 	ldw	r19,64(sp)
2002d490:	dc801217 	ldw	r18,72(sp)
2002d494:	003c6c06 	br	2002c648 <_gp+0xfffed0e8>
2002d498:	903e031e 	bne	r18,zero,2002cca8 <_gp+0xfffed748>
2002d49c:	003ebb06 	br	2002cf8c <_gp+0xfffeda2c>
2002d4a0:	103e6c1e 	bne	r2,zero,2002ce54 <_gp+0xfffed8f4>
2002d4a4:	4080004c 	andi	r2,r8,1
2002d4a8:	103e6a26 	beq	r2,zero,2002ce54 <_gp+0xfffed8f4>
2002d4ac:	003e6606 	br	2002ce48 <_gp+0xfffed8e8>
2002d4b0:	d8c00317 	ldw	r3,12(sp)
2002d4b4:	00800084 	movi	r2,2
2002d4b8:	10c02916 	blt	r2,r3,2002d560 <_dtoa_r+0x167c>
2002d4bc:	d9000c17 	ldw	r4,48(sp)
2002d4c0:	003e8806 	br	2002cee4 <_gp+0xfffed984>
2002d4c4:	04000084 	movi	r16,2
2002d4c8:	003b9d06 	br	2002c340 <_gp+0xfffecde0>
2002d4cc:	d9001317 	ldw	r4,76(sp)
2002d4d0:	d9000515 	stw	r4,20(sp)
2002d4d4:	003cd606 	br	2002c830 <_gp+0xfffed2d0>
2002d4d8:	d8801317 	ldw	r2,76(sp)
2002d4dc:	d8800515 	stw	r2,20(sp)
2002d4e0:	003c2a06 	br	2002c58c <_gp+0xfffed02c>
2002d4e4:	d9800317 	ldw	r6,12(sp)
2002d4e8:	00800084 	movi	r2,2
2002d4ec:	11801516 	blt	r2,r6,2002d544 <_dtoa_r+0x1660>
2002d4f0:	d9c00c17 	ldw	r7,48(sp)
2002d4f4:	d9c00615 	stw	r7,24(sp)
2002d4f8:	003df706 	br	2002ccd8 <_gp+0xfffed778>
2002d4fc:	193d3926 	beq	r3,r4,2002c9e4 <_gp+0xfffed484>
2002d500:	00c00f04 	movi	r3,60
2002d504:	1885c83a 	sub	r2,r3,r2
2002d508:	003ddf06 	br	2002cc88 <_gp+0xfffed728>
2002d50c:	e009883a 	mov	r4,fp
2002d510:	e0001115 	stw	zero,68(fp)
2002d514:	000b883a 	mov	r5,zero
2002d518:	002dea40 	call	2002dea4 <_Balloc>
2002d51c:	d8800715 	stw	r2,28(sp)
2002d520:	d8c00717 	ldw	r3,28(sp)
2002d524:	00bfffc4 	movi	r2,-1
2002d528:	01000044 	movi	r4,1
2002d52c:	d8800c15 	stw	r2,48(sp)
2002d530:	e0c01015 	stw	r3,64(fp)
2002d534:	d9000b15 	stw	r4,44(sp)
2002d538:	d8800615 	stw	r2,24(sp)
2002d53c:	d8002215 	stw	zero,136(sp)
2002d540:	003c4106 	br	2002c648 <_gp+0xfffed0e8>
2002d544:	d8c00c17 	ldw	r3,48(sp)
2002d548:	d8c00615 	stw	r3,24(sp)
2002d54c:	003e7006 	br	2002cf10 <_gp+0xfffed9b0>
2002d550:	04400044 	movi	r17,1
2002d554:	003b2006 	br	2002c1d8 <_gp+0xfffecc78>
2002d558:	000b883a 	mov	r5,zero
2002d55c:	003b3d06 	br	2002c254 <_gp+0xfffeccf4>
2002d560:	d8800c17 	ldw	r2,48(sp)
2002d564:	d8800615 	stw	r2,24(sp)
2002d568:	003e6906 	br	2002cf10 <_gp+0xfffed9b0>

2002d56c <__sflags>:
2002d56c:	28800007 	ldb	r2,0(r5)
2002d570:	00c01c84 	movi	r3,114
2002d574:	10c02426 	beq	r2,r3,2002d608 <__sflags+0x9c>
2002d578:	00c01dc4 	movi	r3,119
2002d57c:	10c01e26 	beq	r2,r3,2002d5f8 <__sflags+0x8c>
2002d580:	00c01844 	movi	r3,97
2002d584:	10c00426 	beq	r2,r3,2002d598 <__sflags+0x2c>
2002d588:	00800584 	movi	r2,22
2002d58c:	20800015 	stw	r2,0(r4)
2002d590:	0005883a 	mov	r2,zero
2002d594:	f800283a 	ret
2002d598:	02c08204 	movi	r11,520
2002d59c:	01000044 	movi	r4,1
2002d5a0:	00804204 	movi	r2,264
2002d5a4:	01c00ac4 	movi	r7,43
2002d5a8:	02bff8c4 	movi	r10,-29
2002d5ac:	027fff04 	movi	r9,-4
2002d5b0:	02001e04 	movi	r8,120
2002d5b4:	29400044 	addi	r5,r5,1
2002d5b8:	28c00007 	ldb	r3,0(r5)
2002d5bc:	18000626 	beq	r3,zero,2002d5d8 <__sflags+0x6c>
2002d5c0:	19c00826 	beq	r3,r7,2002d5e4 <__sflags+0x78>
2002d5c4:	1a3ffb1e 	bne	r3,r8,2002d5b4 <_gp+0xfffee054>
2002d5c8:	29400044 	addi	r5,r5,1
2002d5cc:	28c00007 	ldb	r3,0(r5)
2002d5d0:	21020014 	ori	r4,r4,2048
2002d5d4:	183ffa1e 	bne	r3,zero,2002d5c0 <_gp+0xfffee060>
2002d5d8:	22c8b03a 	or	r4,r4,r11
2002d5dc:	31000015 	stw	r4,0(r6)
2002d5e0:	f800283a 	ret
2002d5e4:	1284703a 	and	r2,r2,r10
2002d5e8:	2248703a 	and	r4,r4,r9
2002d5ec:	10800414 	ori	r2,r2,16
2002d5f0:	21000094 	ori	r4,r4,2
2002d5f4:	003fef06 	br	2002d5b4 <_gp+0xfffee054>
2002d5f8:	02c18004 	movi	r11,1536
2002d5fc:	01000044 	movi	r4,1
2002d600:	00800204 	movi	r2,8
2002d604:	003fe706 	br	2002d5a4 <_gp+0xfffee044>
2002d608:	0017883a 	mov	r11,zero
2002d60c:	0009883a 	mov	r4,zero
2002d610:	00800104 	movi	r2,4
2002d614:	003fe306 	br	2002d5a4 <_gp+0xfffee044>

2002d618 <__sfvwrite_r>:
2002d618:	30800217 	ldw	r2,8(r6)
2002d61c:	10006726 	beq	r2,zero,2002d7bc <__sfvwrite_r+0x1a4>
2002d620:	28c0030b 	ldhu	r3,12(r5)
2002d624:	defff404 	addi	sp,sp,-48
2002d628:	dd400715 	stw	r21,28(sp)
2002d62c:	dd000615 	stw	r20,24(sp)
2002d630:	dc000215 	stw	r16,8(sp)
2002d634:	dfc00b15 	stw	ra,44(sp)
2002d638:	df000a15 	stw	fp,40(sp)
2002d63c:	ddc00915 	stw	r23,36(sp)
2002d640:	dd800815 	stw	r22,32(sp)
2002d644:	dcc00515 	stw	r19,20(sp)
2002d648:	dc800415 	stw	r18,16(sp)
2002d64c:	dc400315 	stw	r17,12(sp)
2002d650:	1880020c 	andi	r2,r3,8
2002d654:	2821883a 	mov	r16,r5
2002d658:	202b883a 	mov	r21,r4
2002d65c:	3029883a 	mov	r20,r6
2002d660:	10002726 	beq	r2,zero,2002d700 <__sfvwrite_r+0xe8>
2002d664:	28800417 	ldw	r2,16(r5)
2002d668:	10002526 	beq	r2,zero,2002d700 <__sfvwrite_r+0xe8>
2002d66c:	1880008c 	andi	r2,r3,2
2002d670:	a4400017 	ldw	r17,0(r20)
2002d674:	10002a26 	beq	r2,zero,2002d720 <__sfvwrite_r+0x108>
2002d678:	05a00034 	movhi	r22,32768
2002d67c:	0027883a 	mov	r19,zero
2002d680:	0025883a 	mov	r18,zero
2002d684:	b5bf0004 	addi	r22,r22,-1024
2002d688:	980d883a 	mov	r6,r19
2002d68c:	a809883a 	mov	r4,r21
2002d690:	90004626 	beq	r18,zero,2002d7ac <__sfvwrite_r+0x194>
2002d694:	900f883a 	mov	r7,r18
2002d698:	b480022e 	bgeu	r22,r18,2002d6a4 <__sfvwrite_r+0x8c>
2002d69c:	01e00034 	movhi	r7,32768
2002d6a0:	39ff0004 	addi	r7,r7,-1024
2002d6a4:	80800917 	ldw	r2,36(r16)
2002d6a8:	81400717 	ldw	r5,28(r16)
2002d6ac:	103ee83a 	callr	r2
2002d6b0:	0080570e 	bge	zero,r2,2002d810 <__sfvwrite_r+0x1f8>
2002d6b4:	a0c00217 	ldw	r3,8(r20)
2002d6b8:	98a7883a 	add	r19,r19,r2
2002d6bc:	90a5c83a 	sub	r18,r18,r2
2002d6c0:	1885c83a 	sub	r2,r3,r2
2002d6c4:	a0800215 	stw	r2,8(r20)
2002d6c8:	103fef1e 	bne	r2,zero,2002d688 <_gp+0xfffee128>
2002d6cc:	0005883a 	mov	r2,zero
2002d6d0:	dfc00b17 	ldw	ra,44(sp)
2002d6d4:	df000a17 	ldw	fp,40(sp)
2002d6d8:	ddc00917 	ldw	r23,36(sp)
2002d6dc:	dd800817 	ldw	r22,32(sp)
2002d6e0:	dd400717 	ldw	r21,28(sp)
2002d6e4:	dd000617 	ldw	r20,24(sp)
2002d6e8:	dcc00517 	ldw	r19,20(sp)
2002d6ec:	dc800417 	ldw	r18,16(sp)
2002d6f0:	dc400317 	ldw	r17,12(sp)
2002d6f4:	dc000217 	ldw	r16,8(sp)
2002d6f8:	dec00c04 	addi	sp,sp,48
2002d6fc:	f800283a 	ret
2002d700:	800b883a 	mov	r5,r16
2002d704:	a809883a 	mov	r4,r21
2002d708:	002bb240 	call	2002bb24 <__swsetup_r>
2002d70c:	1000eb1e 	bne	r2,zero,2002dabc <__sfvwrite_r+0x4a4>
2002d710:	80c0030b 	ldhu	r3,12(r16)
2002d714:	a4400017 	ldw	r17,0(r20)
2002d718:	1880008c 	andi	r2,r3,2
2002d71c:	103fd61e 	bne	r2,zero,2002d678 <_gp+0xfffee118>
2002d720:	1880004c 	andi	r2,r3,1
2002d724:	10003f1e 	bne	r2,zero,2002d824 <__sfvwrite_r+0x20c>
2002d728:	0039883a 	mov	fp,zero
2002d72c:	0025883a 	mov	r18,zero
2002d730:	90001a26 	beq	r18,zero,2002d79c <__sfvwrite_r+0x184>
2002d734:	1880800c 	andi	r2,r3,512
2002d738:	84c00217 	ldw	r19,8(r16)
2002d73c:	10002126 	beq	r2,zero,2002d7c4 <__sfvwrite_r+0x1ac>
2002d740:	982f883a 	mov	r23,r19
2002d744:	94c09336 	bltu	r18,r19,2002d994 <__sfvwrite_r+0x37c>
2002d748:	1881200c 	andi	r2,r3,1152
2002d74c:	10009e1e 	bne	r2,zero,2002d9c8 <__sfvwrite_r+0x3b0>
2002d750:	81000017 	ldw	r4,0(r16)
2002d754:	b80d883a 	mov	r6,r23
2002d758:	e00b883a 	mov	r5,fp
2002d75c:	002dd480 	call	2002dd48 <memmove>
2002d760:	80c00217 	ldw	r3,8(r16)
2002d764:	81000017 	ldw	r4,0(r16)
2002d768:	9005883a 	mov	r2,r18
2002d76c:	1ce7c83a 	sub	r19,r3,r19
2002d770:	25cf883a 	add	r7,r4,r23
2002d774:	84c00215 	stw	r19,8(r16)
2002d778:	81c00015 	stw	r7,0(r16)
2002d77c:	a0c00217 	ldw	r3,8(r20)
2002d780:	e0b9883a 	add	fp,fp,r2
2002d784:	90a5c83a 	sub	r18,r18,r2
2002d788:	18a7c83a 	sub	r19,r3,r2
2002d78c:	a4c00215 	stw	r19,8(r20)
2002d790:	983fce26 	beq	r19,zero,2002d6cc <_gp+0xfffee16c>
2002d794:	80c0030b 	ldhu	r3,12(r16)
2002d798:	903fe61e 	bne	r18,zero,2002d734 <_gp+0xfffee1d4>
2002d79c:	8f000017 	ldw	fp,0(r17)
2002d7a0:	8c800117 	ldw	r18,4(r17)
2002d7a4:	8c400204 	addi	r17,r17,8
2002d7a8:	003fe106 	br	2002d730 <_gp+0xfffee1d0>
2002d7ac:	8cc00017 	ldw	r19,0(r17)
2002d7b0:	8c800117 	ldw	r18,4(r17)
2002d7b4:	8c400204 	addi	r17,r17,8
2002d7b8:	003fb306 	br	2002d688 <_gp+0xfffee128>
2002d7bc:	0005883a 	mov	r2,zero
2002d7c0:	f800283a 	ret
2002d7c4:	81000017 	ldw	r4,0(r16)
2002d7c8:	80800417 	ldw	r2,16(r16)
2002d7cc:	11005736 	bltu	r2,r4,2002d92c <__sfvwrite_r+0x314>
2002d7d0:	85c00517 	ldw	r23,20(r16)
2002d7d4:	95c05536 	bltu	r18,r23,2002d92c <__sfvwrite_r+0x314>
2002d7d8:	00a00034 	movhi	r2,32768
2002d7dc:	10bfffc4 	addi	r2,r2,-1
2002d7e0:	9009883a 	mov	r4,r18
2002d7e4:	1480012e 	bgeu	r2,r18,2002d7ec <__sfvwrite_r+0x1d4>
2002d7e8:	1009883a 	mov	r4,r2
2002d7ec:	b80b883a 	mov	r5,r23
2002d7f0:	00247680 	call	20024768 <__divsi3>
2002d7f4:	15cf383a 	mul	r7,r2,r23
2002d7f8:	81400717 	ldw	r5,28(r16)
2002d7fc:	80800917 	ldw	r2,36(r16)
2002d800:	e00d883a 	mov	r6,fp
2002d804:	a809883a 	mov	r4,r21
2002d808:	103ee83a 	callr	r2
2002d80c:	00bfdb16 	blt	zero,r2,2002d77c <_gp+0xfffee21c>
2002d810:	8080030b 	ldhu	r2,12(r16)
2002d814:	10801014 	ori	r2,r2,64
2002d818:	8080030d 	sth	r2,12(r16)
2002d81c:	00bfffc4 	movi	r2,-1
2002d820:	003fab06 	br	2002d6d0 <_gp+0xfffee170>
2002d824:	0027883a 	mov	r19,zero
2002d828:	0011883a 	mov	r8,zero
2002d82c:	0039883a 	mov	fp,zero
2002d830:	0025883a 	mov	r18,zero
2002d834:	90001f26 	beq	r18,zero,2002d8b4 <__sfvwrite_r+0x29c>
2002d838:	40005a26 	beq	r8,zero,2002d9a4 <__sfvwrite_r+0x38c>
2002d83c:	982d883a 	mov	r22,r19
2002d840:	94c0012e 	bgeu	r18,r19,2002d848 <__sfvwrite_r+0x230>
2002d844:	902d883a 	mov	r22,r18
2002d848:	81000017 	ldw	r4,0(r16)
2002d84c:	80800417 	ldw	r2,16(r16)
2002d850:	b02f883a 	mov	r23,r22
2002d854:	81c00517 	ldw	r7,20(r16)
2002d858:	1100032e 	bgeu	r2,r4,2002d868 <__sfvwrite_r+0x250>
2002d85c:	80c00217 	ldw	r3,8(r16)
2002d860:	38c7883a 	add	r3,r7,r3
2002d864:	1d801816 	blt	r3,r22,2002d8c8 <__sfvwrite_r+0x2b0>
2002d868:	b1c03e16 	blt	r22,r7,2002d964 <__sfvwrite_r+0x34c>
2002d86c:	80800917 	ldw	r2,36(r16)
2002d870:	81400717 	ldw	r5,28(r16)
2002d874:	e00d883a 	mov	r6,fp
2002d878:	da000115 	stw	r8,4(sp)
2002d87c:	a809883a 	mov	r4,r21
2002d880:	103ee83a 	callr	r2
2002d884:	102f883a 	mov	r23,r2
2002d888:	da000117 	ldw	r8,4(sp)
2002d88c:	00bfe00e 	bge	zero,r2,2002d810 <_gp+0xfffee2b0>
2002d890:	9de7c83a 	sub	r19,r19,r23
2002d894:	98001f26 	beq	r19,zero,2002d914 <__sfvwrite_r+0x2fc>
2002d898:	a0800217 	ldw	r2,8(r20)
2002d89c:	e5f9883a 	add	fp,fp,r23
2002d8a0:	95e5c83a 	sub	r18,r18,r23
2002d8a4:	15efc83a 	sub	r23,r2,r23
2002d8a8:	a5c00215 	stw	r23,8(r20)
2002d8ac:	b83f8726 	beq	r23,zero,2002d6cc <_gp+0xfffee16c>
2002d8b0:	903fe11e 	bne	r18,zero,2002d838 <_gp+0xfffee2d8>
2002d8b4:	8f000017 	ldw	fp,0(r17)
2002d8b8:	8c800117 	ldw	r18,4(r17)
2002d8bc:	0011883a 	mov	r8,zero
2002d8c0:	8c400204 	addi	r17,r17,8
2002d8c4:	003fdb06 	br	2002d834 <_gp+0xfffee2d4>
2002d8c8:	180d883a 	mov	r6,r3
2002d8cc:	e00b883a 	mov	r5,fp
2002d8d0:	da000115 	stw	r8,4(sp)
2002d8d4:	d8c00015 	stw	r3,0(sp)
2002d8d8:	002dd480 	call	2002dd48 <memmove>
2002d8dc:	d8c00017 	ldw	r3,0(sp)
2002d8e0:	80800017 	ldw	r2,0(r16)
2002d8e4:	800b883a 	mov	r5,r16
2002d8e8:	a809883a 	mov	r4,r21
2002d8ec:	10c5883a 	add	r2,r2,r3
2002d8f0:	80800015 	stw	r2,0(r16)
2002d8f4:	d8c00015 	stw	r3,0(sp)
2002d8f8:	00272dc0 	call	200272dc <_fflush_r>
2002d8fc:	d8c00017 	ldw	r3,0(sp)
2002d900:	da000117 	ldw	r8,4(sp)
2002d904:	103fc21e 	bne	r2,zero,2002d810 <_gp+0xfffee2b0>
2002d908:	182f883a 	mov	r23,r3
2002d90c:	9de7c83a 	sub	r19,r19,r23
2002d910:	983fe11e 	bne	r19,zero,2002d898 <_gp+0xfffee338>
2002d914:	800b883a 	mov	r5,r16
2002d918:	a809883a 	mov	r4,r21
2002d91c:	00272dc0 	call	200272dc <_fflush_r>
2002d920:	103fbb1e 	bne	r2,zero,2002d810 <_gp+0xfffee2b0>
2002d924:	0011883a 	mov	r8,zero
2002d928:	003fdb06 	br	2002d898 <_gp+0xfffee338>
2002d92c:	94c0012e 	bgeu	r18,r19,2002d934 <__sfvwrite_r+0x31c>
2002d930:	9027883a 	mov	r19,r18
2002d934:	980d883a 	mov	r6,r19
2002d938:	e00b883a 	mov	r5,fp
2002d93c:	002dd480 	call	2002dd48 <memmove>
2002d940:	80800217 	ldw	r2,8(r16)
2002d944:	80c00017 	ldw	r3,0(r16)
2002d948:	14c5c83a 	sub	r2,r2,r19
2002d94c:	1cc7883a 	add	r3,r3,r19
2002d950:	80800215 	stw	r2,8(r16)
2002d954:	80c00015 	stw	r3,0(r16)
2002d958:	10004326 	beq	r2,zero,2002da68 <__sfvwrite_r+0x450>
2002d95c:	9805883a 	mov	r2,r19
2002d960:	003f8606 	br	2002d77c <_gp+0xfffee21c>
2002d964:	b00d883a 	mov	r6,r22
2002d968:	e00b883a 	mov	r5,fp
2002d96c:	da000115 	stw	r8,4(sp)
2002d970:	002dd480 	call	2002dd48 <memmove>
2002d974:	80800217 	ldw	r2,8(r16)
2002d978:	80c00017 	ldw	r3,0(r16)
2002d97c:	da000117 	ldw	r8,4(sp)
2002d980:	1585c83a 	sub	r2,r2,r22
2002d984:	1dad883a 	add	r22,r3,r22
2002d988:	80800215 	stw	r2,8(r16)
2002d98c:	85800015 	stw	r22,0(r16)
2002d990:	003fbf06 	br	2002d890 <_gp+0xfffee330>
2002d994:	81000017 	ldw	r4,0(r16)
2002d998:	9027883a 	mov	r19,r18
2002d99c:	902f883a 	mov	r23,r18
2002d9a0:	003f6c06 	br	2002d754 <_gp+0xfffee1f4>
2002d9a4:	900d883a 	mov	r6,r18
2002d9a8:	01400284 	movi	r5,10
2002d9ac:	e009883a 	mov	r4,fp
2002d9b0:	002dc640 	call	2002dc64 <memchr>
2002d9b4:	10003e26 	beq	r2,zero,2002dab0 <__sfvwrite_r+0x498>
2002d9b8:	10800044 	addi	r2,r2,1
2002d9bc:	1727c83a 	sub	r19,r2,fp
2002d9c0:	02000044 	movi	r8,1
2002d9c4:	003f9d06 	br	2002d83c <_gp+0xfffee2dc>
2002d9c8:	80800517 	ldw	r2,20(r16)
2002d9cc:	81400417 	ldw	r5,16(r16)
2002d9d0:	81c00017 	ldw	r7,0(r16)
2002d9d4:	10a7883a 	add	r19,r2,r2
2002d9d8:	9885883a 	add	r2,r19,r2
2002d9dc:	1026d7fa 	srli	r19,r2,31
2002d9e0:	396dc83a 	sub	r22,r7,r5
2002d9e4:	b1000044 	addi	r4,r22,1
2002d9e8:	9885883a 	add	r2,r19,r2
2002d9ec:	1027d07a 	srai	r19,r2,1
2002d9f0:	2485883a 	add	r2,r4,r18
2002d9f4:	980d883a 	mov	r6,r19
2002d9f8:	9880022e 	bgeu	r19,r2,2002da04 <__sfvwrite_r+0x3ec>
2002d9fc:	1027883a 	mov	r19,r2
2002da00:	100d883a 	mov	r6,r2
2002da04:	18c1000c 	andi	r3,r3,1024
2002da08:	18001c26 	beq	r3,zero,2002da7c <__sfvwrite_r+0x464>
2002da0c:	300b883a 	mov	r5,r6
2002da10:	a809883a 	mov	r4,r21
2002da14:	00288980 	call	20028898 <_malloc_r>
2002da18:	102f883a 	mov	r23,r2
2002da1c:	10002926 	beq	r2,zero,2002dac4 <__sfvwrite_r+0x4ac>
2002da20:	81400417 	ldw	r5,16(r16)
2002da24:	b00d883a 	mov	r6,r22
2002da28:	1009883a 	mov	r4,r2
2002da2c:	00290a40 	call	200290a4 <memcpy>
2002da30:	8080030b 	ldhu	r2,12(r16)
2002da34:	00fedfc4 	movi	r3,-1153
2002da38:	10c4703a 	and	r2,r2,r3
2002da3c:	10802014 	ori	r2,r2,128
2002da40:	8080030d 	sth	r2,12(r16)
2002da44:	bd89883a 	add	r4,r23,r22
2002da48:	9d8fc83a 	sub	r7,r19,r22
2002da4c:	85c00415 	stw	r23,16(r16)
2002da50:	84c00515 	stw	r19,20(r16)
2002da54:	81000015 	stw	r4,0(r16)
2002da58:	9027883a 	mov	r19,r18
2002da5c:	81c00215 	stw	r7,8(r16)
2002da60:	902f883a 	mov	r23,r18
2002da64:	003f3b06 	br	2002d754 <_gp+0xfffee1f4>
2002da68:	800b883a 	mov	r5,r16
2002da6c:	a809883a 	mov	r4,r21
2002da70:	00272dc0 	call	200272dc <_fflush_r>
2002da74:	103fb926 	beq	r2,zero,2002d95c <_gp+0xfffee3fc>
2002da78:	003f6506 	br	2002d810 <_gp+0xfffee2b0>
2002da7c:	a809883a 	mov	r4,r21
2002da80:	002ef000 	call	2002ef00 <_realloc_r>
2002da84:	102f883a 	mov	r23,r2
2002da88:	103fee1e 	bne	r2,zero,2002da44 <_gp+0xfffee4e4>
2002da8c:	81400417 	ldw	r5,16(r16)
2002da90:	a809883a 	mov	r4,r21
2002da94:	0027c400 	call	20027c40 <_free_r>
2002da98:	8080030b 	ldhu	r2,12(r16)
2002da9c:	00ffdfc4 	movi	r3,-129
2002daa0:	1884703a 	and	r2,r3,r2
2002daa4:	00c00304 	movi	r3,12
2002daa8:	a8c00015 	stw	r3,0(r21)
2002daac:	003f5906 	br	2002d814 <_gp+0xfffee2b4>
2002dab0:	94c00044 	addi	r19,r18,1
2002dab4:	02000044 	movi	r8,1
2002dab8:	003f6006 	br	2002d83c <_gp+0xfffee2dc>
2002dabc:	00bfffc4 	movi	r2,-1
2002dac0:	003f0306 	br	2002d6d0 <_gp+0xfffee170>
2002dac4:	00800304 	movi	r2,12
2002dac8:	a8800015 	stw	r2,0(r21)
2002dacc:	8080030b 	ldhu	r2,12(r16)
2002dad0:	003f5006 	br	2002d814 <_gp+0xfffee2b4>

2002dad4 <_isatty_r>:
2002dad4:	defffd04 	addi	sp,sp,-12
2002dad8:	dc000015 	stw	r16,0(sp)
2002dadc:	04080134 	movhi	r16,8196
2002dae0:	dc400115 	stw	r17,4(sp)
2002dae4:	84245304 	addi	r16,r16,-28340
2002dae8:	2023883a 	mov	r17,r4
2002daec:	2809883a 	mov	r4,r5
2002daf0:	dfc00215 	stw	ra,8(sp)
2002daf4:	80000015 	stw	zero,0(r16)
2002daf8:	00323d40 	call	200323d4 <isatty>
2002dafc:	00ffffc4 	movi	r3,-1
2002db00:	10c00526 	beq	r2,r3,2002db18 <_isatty_r+0x44>
2002db04:	dfc00217 	ldw	ra,8(sp)
2002db08:	dc400117 	ldw	r17,4(sp)
2002db0c:	dc000017 	ldw	r16,0(sp)
2002db10:	dec00304 	addi	sp,sp,12
2002db14:	f800283a 	ret
2002db18:	80c00017 	ldw	r3,0(r16)
2002db1c:	183ff926 	beq	r3,zero,2002db04 <_gp+0xfffee5a4>
2002db20:	88c00015 	stw	r3,0(r17)
2002db24:	003ff706 	br	2002db04 <_gp+0xfffee5a4>

2002db28 <_setlocale_r>:
2002db28:	30001b26 	beq	r6,zero,2002db98 <_setlocale_r+0x70>
2002db2c:	014800f4 	movhi	r5,8195
2002db30:	defffe04 	addi	sp,sp,-8
2002db34:	29564104 	addi	r5,r5,22788
2002db38:	3009883a 	mov	r4,r6
2002db3c:	dc000015 	stw	r16,0(sp)
2002db40:	dfc00115 	stw	ra,4(sp)
2002db44:	3021883a 	mov	r16,r6
2002db48:	002f7dc0 	call	2002f7dc <strcmp>
2002db4c:	1000061e 	bne	r2,zero,2002db68 <_setlocale_r+0x40>
2002db50:	008800f4 	movhi	r2,8195
2002db54:	10962304 	addi	r2,r2,22668
2002db58:	dfc00117 	ldw	ra,4(sp)
2002db5c:	dc000017 	ldw	r16,0(sp)
2002db60:	dec00204 	addi	sp,sp,8
2002db64:	f800283a 	ret
2002db68:	014800f4 	movhi	r5,8195
2002db6c:	29562304 	addi	r5,r5,22668
2002db70:	8009883a 	mov	r4,r16
2002db74:	002f7dc0 	call	2002f7dc <strcmp>
2002db78:	103ff526 	beq	r2,zero,2002db50 <_gp+0xfffee5f0>
2002db7c:	014800f4 	movhi	r5,8195
2002db80:	29561604 	addi	r5,r5,22616
2002db84:	8009883a 	mov	r4,r16
2002db88:	002f7dc0 	call	2002f7dc <strcmp>
2002db8c:	103ff026 	beq	r2,zero,2002db50 <_gp+0xfffee5f0>
2002db90:	0005883a 	mov	r2,zero
2002db94:	003ff006 	br	2002db58 <_gp+0xfffee5f8>
2002db98:	008800f4 	movhi	r2,8195
2002db9c:	10962304 	addi	r2,r2,22668
2002dba0:	f800283a 	ret

2002dba4 <__locale_charset>:
2002dba4:	008800f4 	movhi	r2,8195
2002dba8:	1098b604 	addi	r2,r2,25304
2002dbac:	f800283a 	ret

2002dbb0 <__locale_mb_cur_max>:
2002dbb0:	008800f4 	movhi	r2,8195
2002dbb4:	109d5d04 	addi	r2,r2,30068
2002dbb8:	10800017 	ldw	r2,0(r2)
2002dbbc:	f800283a 	ret

2002dbc0 <__locale_msgcharset>:
2002dbc0:	008800f4 	movhi	r2,8195
2002dbc4:	1098ae04 	addi	r2,r2,25272
2002dbc8:	f800283a 	ret

2002dbcc <__locale_cjk_lang>:
2002dbcc:	0005883a 	mov	r2,zero
2002dbd0:	f800283a 	ret

2002dbd4 <_localeconv_r>:
2002dbd4:	008800f4 	movhi	r2,8195
2002dbd8:	1098be04 	addi	r2,r2,25336
2002dbdc:	f800283a 	ret

2002dbe0 <setlocale>:
2002dbe0:	008800f4 	movhi	r2,8195
2002dbe4:	109d5a04 	addi	r2,r2,30056
2002dbe8:	280d883a 	mov	r6,r5
2002dbec:	200b883a 	mov	r5,r4
2002dbf0:	11000017 	ldw	r4,0(r2)
2002dbf4:	002db281 	jmpi	2002db28 <_setlocale_r>

2002dbf8 <localeconv>:
2002dbf8:	008800f4 	movhi	r2,8195
2002dbfc:	1098be04 	addi	r2,r2,25336
2002dc00:	f800283a 	ret

2002dc04 <_lseek_r>:
2002dc04:	defffd04 	addi	sp,sp,-12
2002dc08:	2805883a 	mov	r2,r5
2002dc0c:	dc000015 	stw	r16,0(sp)
2002dc10:	04080134 	movhi	r16,8196
2002dc14:	dc400115 	stw	r17,4(sp)
2002dc18:	300b883a 	mov	r5,r6
2002dc1c:	84245304 	addi	r16,r16,-28340
2002dc20:	2023883a 	mov	r17,r4
2002dc24:	380d883a 	mov	r6,r7
2002dc28:	1009883a 	mov	r4,r2
2002dc2c:	dfc00215 	stw	ra,8(sp)
2002dc30:	80000015 	stw	zero,0(r16)
2002dc34:	003270c0 	call	2003270c <lseek>
2002dc38:	00ffffc4 	movi	r3,-1
2002dc3c:	10c00526 	beq	r2,r3,2002dc54 <_lseek_r+0x50>
2002dc40:	dfc00217 	ldw	ra,8(sp)
2002dc44:	dc400117 	ldw	r17,4(sp)
2002dc48:	dc000017 	ldw	r16,0(sp)
2002dc4c:	dec00304 	addi	sp,sp,12
2002dc50:	f800283a 	ret
2002dc54:	80c00017 	ldw	r3,0(r16)
2002dc58:	183ff926 	beq	r3,zero,2002dc40 <_gp+0xfffee6e0>
2002dc5c:	88c00015 	stw	r3,0(r17)
2002dc60:	003ff706 	br	2002dc40 <_gp+0xfffee6e0>

2002dc64 <memchr>:
2002dc64:	208000cc 	andi	r2,r4,3
2002dc68:	280f883a 	mov	r7,r5
2002dc6c:	10003426 	beq	r2,zero,2002dd40 <memchr+0xdc>
2002dc70:	30bfffc4 	addi	r2,r6,-1
2002dc74:	30001a26 	beq	r6,zero,2002dce0 <memchr+0x7c>
2002dc78:	20c00003 	ldbu	r3,0(r4)
2002dc7c:	29803fcc 	andi	r6,r5,255
2002dc80:	30c0051e 	bne	r6,r3,2002dc98 <memchr+0x34>
2002dc84:	00001806 	br	2002dce8 <memchr+0x84>
2002dc88:	10001526 	beq	r2,zero,2002dce0 <memchr+0x7c>
2002dc8c:	20c00003 	ldbu	r3,0(r4)
2002dc90:	10bfffc4 	addi	r2,r2,-1
2002dc94:	30c01426 	beq	r6,r3,2002dce8 <memchr+0x84>
2002dc98:	21000044 	addi	r4,r4,1
2002dc9c:	20c000cc 	andi	r3,r4,3
2002dca0:	183ff91e 	bne	r3,zero,2002dc88 <_gp+0xfffee728>
2002dca4:	020000c4 	movi	r8,3
2002dca8:	40801136 	bltu	r8,r2,2002dcf0 <memchr+0x8c>
2002dcac:	10000c26 	beq	r2,zero,2002dce0 <memchr+0x7c>
2002dcb0:	20c00003 	ldbu	r3,0(r4)
2002dcb4:	29403fcc 	andi	r5,r5,255
2002dcb8:	28c00b26 	beq	r5,r3,2002dce8 <memchr+0x84>
2002dcbc:	20c00044 	addi	r3,r4,1
2002dcc0:	39803fcc 	andi	r6,r7,255
2002dcc4:	2089883a 	add	r4,r4,r2
2002dcc8:	00000306 	br	2002dcd8 <memchr+0x74>
2002dccc:	18c00044 	addi	r3,r3,1
2002dcd0:	197fffc3 	ldbu	r5,-1(r3)
2002dcd4:	31400526 	beq	r6,r5,2002dcec <memchr+0x88>
2002dcd8:	1805883a 	mov	r2,r3
2002dcdc:	20fffb1e 	bne	r4,r3,2002dccc <_gp+0xfffee76c>
2002dce0:	0005883a 	mov	r2,zero
2002dce4:	f800283a 	ret
2002dce8:	2005883a 	mov	r2,r4
2002dcec:	f800283a 	ret
2002dcf0:	28c03fcc 	andi	r3,r5,255
2002dcf4:	1812923a 	slli	r9,r3,8
2002dcf8:	02ffbff4 	movhi	r11,65279
2002dcfc:	02a02074 	movhi	r10,32897
2002dd00:	48d2b03a 	or	r9,r9,r3
2002dd04:	4806943a 	slli	r3,r9,16
2002dd08:	5affbfc4 	addi	r11,r11,-257
2002dd0c:	52a02004 	addi	r10,r10,-32640
2002dd10:	48d2b03a 	or	r9,r9,r3
2002dd14:	20c00017 	ldw	r3,0(r4)
2002dd18:	48c6f03a 	xor	r3,r9,r3
2002dd1c:	1acd883a 	add	r6,r3,r11
2002dd20:	00c6303a 	nor	r3,zero,r3
2002dd24:	30c6703a 	and	r3,r6,r3
2002dd28:	1a86703a 	and	r3,r3,r10
2002dd2c:	183fe01e 	bne	r3,zero,2002dcb0 <_gp+0xfffee750>
2002dd30:	10bfff04 	addi	r2,r2,-4
2002dd34:	21000104 	addi	r4,r4,4
2002dd38:	40bff636 	bltu	r8,r2,2002dd14 <_gp+0xfffee7b4>
2002dd3c:	003fdb06 	br	2002dcac <_gp+0xfffee74c>
2002dd40:	3005883a 	mov	r2,r6
2002dd44:	003fd706 	br	2002dca4 <_gp+0xfffee744>

2002dd48 <memmove>:
2002dd48:	2005883a 	mov	r2,r4
2002dd4c:	29000b2e 	bgeu	r5,r4,2002dd7c <memmove+0x34>
2002dd50:	298f883a 	add	r7,r5,r6
2002dd54:	21c0092e 	bgeu	r4,r7,2002dd7c <memmove+0x34>
2002dd58:	2187883a 	add	r3,r4,r6
2002dd5c:	198bc83a 	sub	r5,r3,r6
2002dd60:	30004826 	beq	r6,zero,2002de84 <memmove+0x13c>
2002dd64:	39ffffc4 	addi	r7,r7,-1
2002dd68:	39000003 	ldbu	r4,0(r7)
2002dd6c:	18ffffc4 	addi	r3,r3,-1
2002dd70:	19000005 	stb	r4,0(r3)
2002dd74:	28fffb1e 	bne	r5,r3,2002dd64 <_gp+0xfffee804>
2002dd78:	f800283a 	ret
2002dd7c:	00c003c4 	movi	r3,15
2002dd80:	1980412e 	bgeu	r3,r6,2002de88 <memmove+0x140>
2002dd84:	2886b03a 	or	r3,r5,r2
2002dd88:	18c000cc 	andi	r3,r3,3
2002dd8c:	1800401e 	bne	r3,zero,2002de90 <memmove+0x148>
2002dd90:	33fffc04 	addi	r15,r6,-16
2002dd94:	781ed13a 	srli	r15,r15,4
2002dd98:	28c00104 	addi	r3,r5,4
2002dd9c:	13400104 	addi	r13,r2,4
2002dda0:	781c913a 	slli	r14,r15,4
2002dda4:	2b000204 	addi	r12,r5,8
2002dda8:	12c00204 	addi	r11,r2,8
2002ddac:	73800504 	addi	r14,r14,20
2002ddb0:	2a800304 	addi	r10,r5,12
2002ddb4:	12400304 	addi	r9,r2,12
2002ddb8:	2b9d883a 	add	r14,r5,r14
2002ddbc:	2811883a 	mov	r8,r5
2002ddc0:	100f883a 	mov	r7,r2
2002ddc4:	41000017 	ldw	r4,0(r8)
2002ddc8:	39c00404 	addi	r7,r7,16
2002ddcc:	18c00404 	addi	r3,r3,16
2002ddd0:	393ffc15 	stw	r4,-16(r7)
2002ddd4:	193ffc17 	ldw	r4,-16(r3)
2002ddd8:	6b400404 	addi	r13,r13,16
2002dddc:	5ac00404 	addi	r11,r11,16
2002dde0:	693ffc15 	stw	r4,-16(r13)
2002dde4:	61000017 	ldw	r4,0(r12)
2002dde8:	4a400404 	addi	r9,r9,16
2002ddec:	42000404 	addi	r8,r8,16
2002ddf0:	593ffc15 	stw	r4,-16(r11)
2002ddf4:	51000017 	ldw	r4,0(r10)
2002ddf8:	63000404 	addi	r12,r12,16
2002ddfc:	52800404 	addi	r10,r10,16
2002de00:	493ffc15 	stw	r4,-16(r9)
2002de04:	1bbfef1e 	bne	r3,r14,2002ddc4 <_gp+0xfffee864>
2002de08:	79000044 	addi	r4,r15,1
2002de0c:	2008913a 	slli	r4,r4,4
2002de10:	328003cc 	andi	r10,r6,15
2002de14:	02c000c4 	movi	r11,3
2002de18:	1107883a 	add	r3,r2,r4
2002de1c:	290b883a 	add	r5,r5,r4
2002de20:	5a801e2e 	bgeu	r11,r10,2002de9c <memmove+0x154>
2002de24:	1813883a 	mov	r9,r3
2002de28:	2811883a 	mov	r8,r5
2002de2c:	500f883a 	mov	r7,r10
2002de30:	41000017 	ldw	r4,0(r8)
2002de34:	4a400104 	addi	r9,r9,4
2002de38:	39ffff04 	addi	r7,r7,-4
2002de3c:	493fff15 	stw	r4,-4(r9)
2002de40:	42000104 	addi	r8,r8,4
2002de44:	59fffa36 	bltu	r11,r7,2002de30 <_gp+0xfffee8d0>
2002de48:	513fff04 	addi	r4,r10,-4
2002de4c:	2008d0ba 	srli	r4,r4,2
2002de50:	318000cc 	andi	r6,r6,3
2002de54:	21000044 	addi	r4,r4,1
2002de58:	2109883a 	add	r4,r4,r4
2002de5c:	2109883a 	add	r4,r4,r4
2002de60:	1907883a 	add	r3,r3,r4
2002de64:	290b883a 	add	r5,r5,r4
2002de68:	30000b26 	beq	r6,zero,2002de98 <memmove+0x150>
2002de6c:	198d883a 	add	r6,r3,r6
2002de70:	29c00003 	ldbu	r7,0(r5)
2002de74:	18c00044 	addi	r3,r3,1
2002de78:	29400044 	addi	r5,r5,1
2002de7c:	19ffffc5 	stb	r7,-1(r3)
2002de80:	19bffb1e 	bne	r3,r6,2002de70 <_gp+0xfffee910>
2002de84:	f800283a 	ret
2002de88:	1007883a 	mov	r3,r2
2002de8c:	003ff606 	br	2002de68 <_gp+0xfffee908>
2002de90:	1007883a 	mov	r3,r2
2002de94:	003ff506 	br	2002de6c <_gp+0xfffee90c>
2002de98:	f800283a 	ret
2002de9c:	500d883a 	mov	r6,r10
2002dea0:	003ff106 	br	2002de68 <_gp+0xfffee908>

2002dea4 <_Balloc>:
2002dea4:	20801317 	ldw	r2,76(r4)
2002dea8:	defffc04 	addi	sp,sp,-16
2002deac:	dc400115 	stw	r17,4(sp)
2002deb0:	dc000015 	stw	r16,0(sp)
2002deb4:	dfc00315 	stw	ra,12(sp)
2002deb8:	dc800215 	stw	r18,8(sp)
2002debc:	2023883a 	mov	r17,r4
2002dec0:	2821883a 	mov	r16,r5
2002dec4:	10000f26 	beq	r2,zero,2002df04 <_Balloc+0x60>
2002dec8:	8407883a 	add	r3,r16,r16
2002decc:	18c7883a 	add	r3,r3,r3
2002ded0:	10c7883a 	add	r3,r2,r3
2002ded4:	18800017 	ldw	r2,0(r3)
2002ded8:	10001126 	beq	r2,zero,2002df20 <_Balloc+0x7c>
2002dedc:	11000017 	ldw	r4,0(r2)
2002dee0:	19000015 	stw	r4,0(r3)
2002dee4:	10000415 	stw	zero,16(r2)
2002dee8:	10000315 	stw	zero,12(r2)
2002deec:	dfc00317 	ldw	ra,12(sp)
2002def0:	dc800217 	ldw	r18,8(sp)
2002def4:	dc400117 	ldw	r17,4(sp)
2002def8:	dc000017 	ldw	r16,0(sp)
2002defc:	dec00404 	addi	sp,sp,16
2002df00:	f800283a 	ret
2002df04:	01800844 	movi	r6,33
2002df08:	01400104 	movi	r5,4
2002df0c:	0026ee80 	call	20026ee8 <_calloc_r>
2002df10:	88801315 	stw	r2,76(r17)
2002df14:	103fec1e 	bne	r2,zero,2002dec8 <_gp+0xfffee968>
2002df18:	0005883a 	mov	r2,zero
2002df1c:	003ff306 	br	2002deec <_gp+0xfffee98c>
2002df20:	01400044 	movi	r5,1
2002df24:	2c24983a 	sll	r18,r5,r16
2002df28:	8809883a 	mov	r4,r17
2002df2c:	91800144 	addi	r6,r18,5
2002df30:	318d883a 	add	r6,r6,r6
2002df34:	318d883a 	add	r6,r6,r6
2002df38:	0026ee80 	call	20026ee8 <_calloc_r>
2002df3c:	103ff626 	beq	r2,zero,2002df18 <_gp+0xfffee9b8>
2002df40:	14000115 	stw	r16,4(r2)
2002df44:	14800215 	stw	r18,8(r2)
2002df48:	003fe606 	br	2002dee4 <_gp+0xfffee984>

2002df4c <_Bfree>:
2002df4c:	28000826 	beq	r5,zero,2002df70 <_Bfree+0x24>
2002df50:	28c00117 	ldw	r3,4(r5)
2002df54:	20801317 	ldw	r2,76(r4)
2002df58:	18c7883a 	add	r3,r3,r3
2002df5c:	18c7883a 	add	r3,r3,r3
2002df60:	10c5883a 	add	r2,r2,r3
2002df64:	10c00017 	ldw	r3,0(r2)
2002df68:	28c00015 	stw	r3,0(r5)
2002df6c:	11400015 	stw	r5,0(r2)
2002df70:	f800283a 	ret

2002df74 <__multadd>:
2002df74:	defffa04 	addi	sp,sp,-24
2002df78:	dc800315 	stw	r18,12(sp)
2002df7c:	dc400215 	stw	r17,8(sp)
2002df80:	dc000115 	stw	r16,4(sp)
2002df84:	2823883a 	mov	r17,r5
2002df88:	2c000417 	ldw	r16,16(r5)
2002df8c:	dfc00515 	stw	ra,20(sp)
2002df90:	dcc00415 	stw	r19,16(sp)
2002df94:	2025883a 	mov	r18,r4
2002df98:	29400504 	addi	r5,r5,20
2002df9c:	0011883a 	mov	r8,zero
2002dfa0:	28c00017 	ldw	r3,0(r5)
2002dfa4:	29400104 	addi	r5,r5,4
2002dfa8:	42000044 	addi	r8,r8,1
2002dfac:	18bfffcc 	andi	r2,r3,65535
2002dfb0:	1185383a 	mul	r2,r2,r6
2002dfb4:	1806d43a 	srli	r3,r3,16
2002dfb8:	11cf883a 	add	r7,r2,r7
2002dfbc:	3808d43a 	srli	r4,r7,16
2002dfc0:	1987383a 	mul	r3,r3,r6
2002dfc4:	38bfffcc 	andi	r2,r7,65535
2002dfc8:	1907883a 	add	r3,r3,r4
2002dfcc:	1808943a 	slli	r4,r3,16
2002dfd0:	180ed43a 	srli	r7,r3,16
2002dfd4:	2085883a 	add	r2,r4,r2
2002dfd8:	28bfff15 	stw	r2,-4(r5)
2002dfdc:	443ff016 	blt	r8,r16,2002dfa0 <_gp+0xfffeea40>
2002dfe0:	38000926 	beq	r7,zero,2002e008 <__multadd+0x94>
2002dfe4:	88800217 	ldw	r2,8(r17)
2002dfe8:	80800f0e 	bge	r16,r2,2002e028 <__multadd+0xb4>
2002dfec:	80800144 	addi	r2,r16,5
2002dff0:	1085883a 	add	r2,r2,r2
2002dff4:	1085883a 	add	r2,r2,r2
2002dff8:	8885883a 	add	r2,r17,r2
2002dffc:	11c00015 	stw	r7,0(r2)
2002e000:	84000044 	addi	r16,r16,1
2002e004:	8c000415 	stw	r16,16(r17)
2002e008:	8805883a 	mov	r2,r17
2002e00c:	dfc00517 	ldw	ra,20(sp)
2002e010:	dcc00417 	ldw	r19,16(sp)
2002e014:	dc800317 	ldw	r18,12(sp)
2002e018:	dc400217 	ldw	r17,8(sp)
2002e01c:	dc000117 	ldw	r16,4(sp)
2002e020:	dec00604 	addi	sp,sp,24
2002e024:	f800283a 	ret
2002e028:	89400117 	ldw	r5,4(r17)
2002e02c:	9009883a 	mov	r4,r18
2002e030:	d9c00015 	stw	r7,0(sp)
2002e034:	29400044 	addi	r5,r5,1
2002e038:	002dea40 	call	2002dea4 <_Balloc>
2002e03c:	89800417 	ldw	r6,16(r17)
2002e040:	89400304 	addi	r5,r17,12
2002e044:	11000304 	addi	r4,r2,12
2002e048:	31800084 	addi	r6,r6,2
2002e04c:	318d883a 	add	r6,r6,r6
2002e050:	318d883a 	add	r6,r6,r6
2002e054:	1027883a 	mov	r19,r2
2002e058:	00290a40 	call	200290a4 <memcpy>
2002e05c:	d9c00017 	ldw	r7,0(sp)
2002e060:	88000a26 	beq	r17,zero,2002e08c <__multadd+0x118>
2002e064:	88c00117 	ldw	r3,4(r17)
2002e068:	90801317 	ldw	r2,76(r18)
2002e06c:	18c7883a 	add	r3,r3,r3
2002e070:	18c7883a 	add	r3,r3,r3
2002e074:	10c5883a 	add	r2,r2,r3
2002e078:	10c00017 	ldw	r3,0(r2)
2002e07c:	88c00015 	stw	r3,0(r17)
2002e080:	14400015 	stw	r17,0(r2)
2002e084:	9823883a 	mov	r17,r19
2002e088:	003fd806 	br	2002dfec <_gp+0xfffeea8c>
2002e08c:	9823883a 	mov	r17,r19
2002e090:	003fd606 	br	2002dfec <_gp+0xfffeea8c>

2002e094 <__s2b>:
2002e094:	defff904 	addi	sp,sp,-28
2002e098:	dc400115 	stw	r17,4(sp)
2002e09c:	dc000015 	stw	r16,0(sp)
2002e0a0:	2023883a 	mov	r17,r4
2002e0a4:	2821883a 	mov	r16,r5
2002e0a8:	39000204 	addi	r4,r7,8
2002e0ac:	01400244 	movi	r5,9
2002e0b0:	dcc00315 	stw	r19,12(sp)
2002e0b4:	dc800215 	stw	r18,8(sp)
2002e0b8:	dfc00615 	stw	ra,24(sp)
2002e0bc:	dd400515 	stw	r21,20(sp)
2002e0c0:	dd000415 	stw	r20,16(sp)
2002e0c4:	3825883a 	mov	r18,r7
2002e0c8:	3027883a 	mov	r19,r6
2002e0cc:	00247680 	call	20024768 <__divsi3>
2002e0d0:	00c00044 	movi	r3,1
2002e0d4:	000b883a 	mov	r5,zero
2002e0d8:	1880030e 	bge	r3,r2,2002e0e8 <__s2b+0x54>
2002e0dc:	18c7883a 	add	r3,r3,r3
2002e0e0:	29400044 	addi	r5,r5,1
2002e0e4:	18bffd16 	blt	r3,r2,2002e0dc <_gp+0xfffeeb7c>
2002e0e8:	8809883a 	mov	r4,r17
2002e0ec:	002dea40 	call	2002dea4 <_Balloc>
2002e0f0:	d8c00717 	ldw	r3,28(sp)
2002e0f4:	10c00515 	stw	r3,20(r2)
2002e0f8:	00c00044 	movi	r3,1
2002e0fc:	10c00415 	stw	r3,16(r2)
2002e100:	00c00244 	movi	r3,9
2002e104:	1cc0210e 	bge	r3,r19,2002e18c <__s2b+0xf8>
2002e108:	80eb883a 	add	r21,r16,r3
2002e10c:	a829883a 	mov	r20,r21
2002e110:	84e1883a 	add	r16,r16,r19
2002e114:	a1c00007 	ldb	r7,0(r20)
2002e118:	01800284 	movi	r6,10
2002e11c:	a5000044 	addi	r20,r20,1
2002e120:	100b883a 	mov	r5,r2
2002e124:	39fff404 	addi	r7,r7,-48
2002e128:	8809883a 	mov	r4,r17
2002e12c:	002df740 	call	2002df74 <__multadd>
2002e130:	a43ff81e 	bne	r20,r16,2002e114 <_gp+0xfffeebb4>
2002e134:	ace1883a 	add	r16,r21,r19
2002e138:	843ffe04 	addi	r16,r16,-8
2002e13c:	9c800a0e 	bge	r19,r18,2002e168 <__s2b+0xd4>
2002e140:	94e5c83a 	sub	r18,r18,r19
2002e144:	84a5883a 	add	r18,r16,r18
2002e148:	81c00007 	ldb	r7,0(r16)
2002e14c:	01800284 	movi	r6,10
2002e150:	84000044 	addi	r16,r16,1
2002e154:	100b883a 	mov	r5,r2
2002e158:	39fff404 	addi	r7,r7,-48
2002e15c:	8809883a 	mov	r4,r17
2002e160:	002df740 	call	2002df74 <__multadd>
2002e164:	84bff81e 	bne	r16,r18,2002e148 <_gp+0xfffeebe8>
2002e168:	dfc00617 	ldw	ra,24(sp)
2002e16c:	dd400517 	ldw	r21,20(sp)
2002e170:	dd000417 	ldw	r20,16(sp)
2002e174:	dcc00317 	ldw	r19,12(sp)
2002e178:	dc800217 	ldw	r18,8(sp)
2002e17c:	dc400117 	ldw	r17,4(sp)
2002e180:	dc000017 	ldw	r16,0(sp)
2002e184:	dec00704 	addi	sp,sp,28
2002e188:	f800283a 	ret
2002e18c:	84000284 	addi	r16,r16,10
2002e190:	1827883a 	mov	r19,r3
2002e194:	003fe906 	br	2002e13c <_gp+0xfffeebdc>

2002e198 <__hi0bits>:
2002e198:	20bfffec 	andhi	r2,r4,65535
2002e19c:	1000141e 	bne	r2,zero,2002e1f0 <__hi0bits+0x58>
2002e1a0:	2008943a 	slli	r4,r4,16
2002e1a4:	00800404 	movi	r2,16
2002e1a8:	20ffc02c 	andhi	r3,r4,65280
2002e1ac:	1800021e 	bne	r3,zero,2002e1b8 <__hi0bits+0x20>
2002e1b0:	2008923a 	slli	r4,r4,8
2002e1b4:	10800204 	addi	r2,r2,8
2002e1b8:	20fc002c 	andhi	r3,r4,61440
2002e1bc:	1800021e 	bne	r3,zero,2002e1c8 <__hi0bits+0x30>
2002e1c0:	2008913a 	slli	r4,r4,4
2002e1c4:	10800104 	addi	r2,r2,4
2002e1c8:	20f0002c 	andhi	r3,r4,49152
2002e1cc:	1800031e 	bne	r3,zero,2002e1dc <__hi0bits+0x44>
2002e1d0:	2109883a 	add	r4,r4,r4
2002e1d4:	10800084 	addi	r2,r2,2
2002e1d8:	2109883a 	add	r4,r4,r4
2002e1dc:	20000316 	blt	r4,zero,2002e1ec <__hi0bits+0x54>
2002e1e0:	2110002c 	andhi	r4,r4,16384
2002e1e4:	2000041e 	bne	r4,zero,2002e1f8 <__hi0bits+0x60>
2002e1e8:	00800804 	movi	r2,32
2002e1ec:	f800283a 	ret
2002e1f0:	0005883a 	mov	r2,zero
2002e1f4:	003fec06 	br	2002e1a8 <_gp+0xfffeec48>
2002e1f8:	10800044 	addi	r2,r2,1
2002e1fc:	f800283a 	ret

2002e200 <__lo0bits>:
2002e200:	20c00017 	ldw	r3,0(r4)
2002e204:	188001cc 	andi	r2,r3,7
2002e208:	10000826 	beq	r2,zero,2002e22c <__lo0bits+0x2c>
2002e20c:	1880004c 	andi	r2,r3,1
2002e210:	1000211e 	bne	r2,zero,2002e298 <__lo0bits+0x98>
2002e214:	1880008c 	andi	r2,r3,2
2002e218:	1000211e 	bne	r2,zero,2002e2a0 <__lo0bits+0xa0>
2002e21c:	1806d0ba 	srli	r3,r3,2
2002e220:	00800084 	movi	r2,2
2002e224:	20c00015 	stw	r3,0(r4)
2002e228:	f800283a 	ret
2002e22c:	18bfffcc 	andi	r2,r3,65535
2002e230:	10001326 	beq	r2,zero,2002e280 <__lo0bits+0x80>
2002e234:	0005883a 	mov	r2,zero
2002e238:	19403fcc 	andi	r5,r3,255
2002e23c:	2800021e 	bne	r5,zero,2002e248 <__lo0bits+0x48>
2002e240:	1806d23a 	srli	r3,r3,8
2002e244:	10800204 	addi	r2,r2,8
2002e248:	194003cc 	andi	r5,r3,15
2002e24c:	2800021e 	bne	r5,zero,2002e258 <__lo0bits+0x58>
2002e250:	1806d13a 	srli	r3,r3,4
2002e254:	10800104 	addi	r2,r2,4
2002e258:	194000cc 	andi	r5,r3,3
2002e25c:	2800021e 	bne	r5,zero,2002e268 <__lo0bits+0x68>
2002e260:	1806d0ba 	srli	r3,r3,2
2002e264:	10800084 	addi	r2,r2,2
2002e268:	1940004c 	andi	r5,r3,1
2002e26c:	2800081e 	bne	r5,zero,2002e290 <__lo0bits+0x90>
2002e270:	1806d07a 	srli	r3,r3,1
2002e274:	1800051e 	bne	r3,zero,2002e28c <__lo0bits+0x8c>
2002e278:	00800804 	movi	r2,32
2002e27c:	f800283a 	ret
2002e280:	1806d43a 	srli	r3,r3,16
2002e284:	00800404 	movi	r2,16
2002e288:	003feb06 	br	2002e238 <_gp+0xfffeecd8>
2002e28c:	10800044 	addi	r2,r2,1
2002e290:	20c00015 	stw	r3,0(r4)
2002e294:	f800283a 	ret
2002e298:	0005883a 	mov	r2,zero
2002e29c:	f800283a 	ret
2002e2a0:	1806d07a 	srli	r3,r3,1
2002e2a4:	00800044 	movi	r2,1
2002e2a8:	20c00015 	stw	r3,0(r4)
2002e2ac:	f800283a 	ret

2002e2b0 <__i2b>:
2002e2b0:	defffd04 	addi	sp,sp,-12
2002e2b4:	dc000015 	stw	r16,0(sp)
2002e2b8:	04000044 	movi	r16,1
2002e2bc:	dc400115 	stw	r17,4(sp)
2002e2c0:	2823883a 	mov	r17,r5
2002e2c4:	800b883a 	mov	r5,r16
2002e2c8:	dfc00215 	stw	ra,8(sp)
2002e2cc:	002dea40 	call	2002dea4 <_Balloc>
2002e2d0:	14400515 	stw	r17,20(r2)
2002e2d4:	14000415 	stw	r16,16(r2)
2002e2d8:	dfc00217 	ldw	ra,8(sp)
2002e2dc:	dc400117 	ldw	r17,4(sp)
2002e2e0:	dc000017 	ldw	r16,0(sp)
2002e2e4:	dec00304 	addi	sp,sp,12
2002e2e8:	f800283a 	ret

2002e2ec <__multiply>:
2002e2ec:	defffa04 	addi	sp,sp,-24
2002e2f0:	dcc00315 	stw	r19,12(sp)
2002e2f4:	dc800215 	stw	r18,8(sp)
2002e2f8:	34c00417 	ldw	r19,16(r6)
2002e2fc:	2c800417 	ldw	r18,16(r5)
2002e300:	dd000415 	stw	r20,16(sp)
2002e304:	dc400115 	stw	r17,4(sp)
2002e308:	dfc00515 	stw	ra,20(sp)
2002e30c:	dc000015 	stw	r16,0(sp)
2002e310:	2829883a 	mov	r20,r5
2002e314:	3023883a 	mov	r17,r6
2002e318:	94c0050e 	bge	r18,r19,2002e330 <__multiply+0x44>
2002e31c:	9007883a 	mov	r3,r18
2002e320:	3029883a 	mov	r20,r6
2002e324:	9825883a 	mov	r18,r19
2002e328:	2823883a 	mov	r17,r5
2002e32c:	1827883a 	mov	r19,r3
2002e330:	a0800217 	ldw	r2,8(r20)
2002e334:	94e1883a 	add	r16,r18,r19
2002e338:	a1400117 	ldw	r5,4(r20)
2002e33c:	1400010e 	bge	r2,r16,2002e344 <__multiply+0x58>
2002e340:	29400044 	addi	r5,r5,1
2002e344:	002dea40 	call	2002dea4 <_Balloc>
2002e348:	8415883a 	add	r10,r16,r16
2002e34c:	12c00504 	addi	r11,r2,20
2002e350:	5295883a 	add	r10,r10,r10
2002e354:	5a95883a 	add	r10,r11,r10
2002e358:	5807883a 	mov	r3,r11
2002e35c:	5a80032e 	bgeu	r11,r10,2002e36c <__multiply+0x80>
2002e360:	18000015 	stw	zero,0(r3)
2002e364:	18c00104 	addi	r3,r3,4
2002e368:	1abffd36 	bltu	r3,r10,2002e360 <_gp+0xfffeee00>
2002e36c:	9ce7883a 	add	r19,r19,r19
2002e370:	94a5883a 	add	r18,r18,r18
2002e374:	89800504 	addi	r6,r17,20
2002e378:	9ce7883a 	add	r19,r19,r19
2002e37c:	a3400504 	addi	r13,r20,20
2002e380:	94a5883a 	add	r18,r18,r18
2002e384:	34d9883a 	add	r12,r6,r19
2002e388:	6c93883a 	add	r9,r13,r18
2002e38c:	3300422e 	bgeu	r6,r12,2002e498 <__multiply+0x1ac>
2002e390:	37c00017 	ldw	ra,0(r6)
2002e394:	fbffffcc 	andi	r15,ra,65535
2002e398:	78001b26 	beq	r15,zero,2002e408 <__multiply+0x11c>
2002e39c:	5811883a 	mov	r8,r11
2002e3a0:	681d883a 	mov	r14,r13
2002e3a4:	000f883a 	mov	r7,zero
2002e3a8:	71000017 	ldw	r4,0(r14)
2002e3ac:	40c00017 	ldw	r3,0(r8)
2002e3b0:	73800104 	addi	r14,r14,4
2002e3b4:	217fffcc 	andi	r5,r4,65535
2002e3b8:	2bcb383a 	mul	r5,r5,r15
2002e3bc:	2008d43a 	srli	r4,r4,16
2002e3c0:	1c7fffcc 	andi	r17,r3,65535
2002e3c4:	2c4b883a 	add	r5,r5,r17
2002e3c8:	29cb883a 	add	r5,r5,r7
2002e3cc:	23c9383a 	mul	r4,r4,r15
2002e3d0:	1806d43a 	srli	r3,r3,16
2002e3d4:	280ed43a 	srli	r7,r5,16
2002e3d8:	297fffcc 	andi	r5,r5,65535
2002e3dc:	20c7883a 	add	r3,r4,r3
2002e3e0:	19c7883a 	add	r3,r3,r7
2002e3e4:	1808943a 	slli	r4,r3,16
2002e3e8:	4023883a 	mov	r17,r8
2002e3ec:	180ed43a 	srli	r7,r3,16
2002e3f0:	214ab03a 	or	r5,r4,r5
2002e3f4:	41400015 	stw	r5,0(r8)
2002e3f8:	42000104 	addi	r8,r8,4
2002e3fc:	727fea36 	bltu	r14,r9,2002e3a8 <_gp+0xfffeee48>
2002e400:	89c00115 	stw	r7,4(r17)
2002e404:	37c00017 	ldw	ra,0(r6)
2002e408:	f83ed43a 	srli	ra,ra,16
2002e40c:	f8001f26 	beq	ra,zero,2002e48c <__multiply+0x1a0>
2002e410:	58c00017 	ldw	r3,0(r11)
2002e414:	681d883a 	mov	r14,r13
2002e418:	581f883a 	mov	r15,r11
2002e41c:	1811883a 	mov	r8,r3
2002e420:	5825883a 	mov	r18,r11
2002e424:	000f883a 	mov	r7,zero
2002e428:	00000106 	br	2002e430 <__multiply+0x144>
2002e42c:	8825883a 	mov	r18,r17
2002e430:	7140000b 	ldhu	r5,0(r14)
2002e434:	4010d43a 	srli	r8,r8,16
2002e438:	193fffcc 	andi	r4,r3,65535
2002e43c:	2fcb383a 	mul	r5,r5,ra
2002e440:	7bc00104 	addi	r15,r15,4
2002e444:	73800104 	addi	r14,r14,4
2002e448:	2a0b883a 	add	r5,r5,r8
2002e44c:	29cb883a 	add	r5,r5,r7
2002e450:	2806943a 	slli	r3,r5,16
2002e454:	94400104 	addi	r17,r18,4
2002e458:	280ad43a 	srli	r5,r5,16
2002e45c:	1908b03a 	or	r4,r3,r4
2002e460:	793fff15 	stw	r4,-4(r15)
2002e464:	70ffff17 	ldw	r3,-4(r14)
2002e468:	8a000017 	ldw	r8,0(r17)
2002e46c:	1806d43a 	srli	r3,r3,16
2002e470:	413fffcc 	andi	r4,r8,65535
2002e474:	1fc7383a 	mul	r3,r3,ra
2002e478:	1907883a 	add	r3,r3,r4
2002e47c:	1947883a 	add	r3,r3,r5
2002e480:	180ed43a 	srli	r7,r3,16
2002e484:	727fe936 	bltu	r14,r9,2002e42c <_gp+0xfffeeecc>
2002e488:	90c00115 	stw	r3,4(r18)
2002e48c:	31800104 	addi	r6,r6,4
2002e490:	5ac00104 	addi	r11,r11,4
2002e494:	333fbe36 	bltu	r6,r12,2002e390 <_gp+0xfffeee30>
2002e498:	0400090e 	bge	zero,r16,2002e4c0 <__multiply+0x1d4>
2002e49c:	50ffff17 	ldw	r3,-4(r10)
2002e4a0:	52bfff04 	addi	r10,r10,-4
2002e4a4:	18000326 	beq	r3,zero,2002e4b4 <__multiply+0x1c8>
2002e4a8:	00000506 	br	2002e4c0 <__multiply+0x1d4>
2002e4ac:	50c00017 	ldw	r3,0(r10)
2002e4b0:	1800031e 	bne	r3,zero,2002e4c0 <__multiply+0x1d4>
2002e4b4:	843fffc4 	addi	r16,r16,-1
2002e4b8:	52bfff04 	addi	r10,r10,-4
2002e4bc:	803ffb1e 	bne	r16,zero,2002e4ac <_gp+0xfffeef4c>
2002e4c0:	14000415 	stw	r16,16(r2)
2002e4c4:	dfc00517 	ldw	ra,20(sp)
2002e4c8:	dd000417 	ldw	r20,16(sp)
2002e4cc:	dcc00317 	ldw	r19,12(sp)
2002e4d0:	dc800217 	ldw	r18,8(sp)
2002e4d4:	dc400117 	ldw	r17,4(sp)
2002e4d8:	dc000017 	ldw	r16,0(sp)
2002e4dc:	dec00604 	addi	sp,sp,24
2002e4e0:	f800283a 	ret

2002e4e4 <__pow5mult>:
2002e4e4:	defffa04 	addi	sp,sp,-24
2002e4e8:	dcc00315 	stw	r19,12(sp)
2002e4ec:	dc000015 	stw	r16,0(sp)
2002e4f0:	dfc00515 	stw	ra,20(sp)
2002e4f4:	dd000415 	stw	r20,16(sp)
2002e4f8:	dc800215 	stw	r18,8(sp)
2002e4fc:	dc400115 	stw	r17,4(sp)
2002e500:	308000cc 	andi	r2,r6,3
2002e504:	3021883a 	mov	r16,r6
2002e508:	2027883a 	mov	r19,r4
2002e50c:	10002f1e 	bne	r2,zero,2002e5cc <__pow5mult+0xe8>
2002e510:	2825883a 	mov	r18,r5
2002e514:	8021d0ba 	srai	r16,r16,2
2002e518:	80001a26 	beq	r16,zero,2002e584 <__pow5mult+0xa0>
2002e51c:	9c401217 	ldw	r17,72(r19)
2002e520:	8800061e 	bne	r17,zero,2002e53c <__pow5mult+0x58>
2002e524:	00003406 	br	2002e5f8 <__pow5mult+0x114>
2002e528:	8021d07a 	srai	r16,r16,1
2002e52c:	80001526 	beq	r16,zero,2002e584 <__pow5mult+0xa0>
2002e530:	88800017 	ldw	r2,0(r17)
2002e534:	10001c26 	beq	r2,zero,2002e5a8 <__pow5mult+0xc4>
2002e538:	1023883a 	mov	r17,r2
2002e53c:	8080004c 	andi	r2,r16,1
2002e540:	103ff926 	beq	r2,zero,2002e528 <_gp+0xfffeefc8>
2002e544:	880d883a 	mov	r6,r17
2002e548:	900b883a 	mov	r5,r18
2002e54c:	9809883a 	mov	r4,r19
2002e550:	002e2ec0 	call	2002e2ec <__multiply>
2002e554:	90001b26 	beq	r18,zero,2002e5c4 <__pow5mult+0xe0>
2002e558:	91000117 	ldw	r4,4(r18)
2002e55c:	98c01317 	ldw	r3,76(r19)
2002e560:	8021d07a 	srai	r16,r16,1
2002e564:	2109883a 	add	r4,r4,r4
2002e568:	2109883a 	add	r4,r4,r4
2002e56c:	1907883a 	add	r3,r3,r4
2002e570:	19000017 	ldw	r4,0(r3)
2002e574:	91000015 	stw	r4,0(r18)
2002e578:	1c800015 	stw	r18,0(r3)
2002e57c:	1025883a 	mov	r18,r2
2002e580:	803feb1e 	bne	r16,zero,2002e530 <_gp+0xfffeefd0>
2002e584:	9005883a 	mov	r2,r18
2002e588:	dfc00517 	ldw	ra,20(sp)
2002e58c:	dd000417 	ldw	r20,16(sp)
2002e590:	dcc00317 	ldw	r19,12(sp)
2002e594:	dc800217 	ldw	r18,8(sp)
2002e598:	dc400117 	ldw	r17,4(sp)
2002e59c:	dc000017 	ldw	r16,0(sp)
2002e5a0:	dec00604 	addi	sp,sp,24
2002e5a4:	f800283a 	ret
2002e5a8:	880d883a 	mov	r6,r17
2002e5ac:	880b883a 	mov	r5,r17
2002e5b0:	9809883a 	mov	r4,r19
2002e5b4:	002e2ec0 	call	2002e2ec <__multiply>
2002e5b8:	88800015 	stw	r2,0(r17)
2002e5bc:	10000015 	stw	zero,0(r2)
2002e5c0:	003fdd06 	br	2002e538 <_gp+0xfffeefd8>
2002e5c4:	1025883a 	mov	r18,r2
2002e5c8:	003fd706 	br	2002e528 <_gp+0xfffeefc8>
2002e5cc:	10bfffc4 	addi	r2,r2,-1
2002e5d0:	1085883a 	add	r2,r2,r2
2002e5d4:	00c800f4 	movhi	r3,8195
2002e5d8:	18d64404 	addi	r3,r3,22800
2002e5dc:	1085883a 	add	r2,r2,r2
2002e5e0:	1885883a 	add	r2,r3,r2
2002e5e4:	11800017 	ldw	r6,0(r2)
2002e5e8:	000f883a 	mov	r7,zero
2002e5ec:	002df740 	call	2002df74 <__multadd>
2002e5f0:	1025883a 	mov	r18,r2
2002e5f4:	003fc706 	br	2002e514 <_gp+0xfffeefb4>
2002e5f8:	05000044 	movi	r20,1
2002e5fc:	a00b883a 	mov	r5,r20
2002e600:	9809883a 	mov	r4,r19
2002e604:	002dea40 	call	2002dea4 <_Balloc>
2002e608:	1023883a 	mov	r17,r2
2002e60c:	00809c44 	movi	r2,625
2002e610:	88800515 	stw	r2,20(r17)
2002e614:	8d000415 	stw	r20,16(r17)
2002e618:	9c401215 	stw	r17,72(r19)
2002e61c:	88000015 	stw	zero,0(r17)
2002e620:	003fc606 	br	2002e53c <_gp+0xfffeefdc>

2002e624 <__lshift>:
2002e624:	defff904 	addi	sp,sp,-28
2002e628:	dd400515 	stw	r21,20(sp)
2002e62c:	dcc00315 	stw	r19,12(sp)
2002e630:	302bd17a 	srai	r21,r6,5
2002e634:	2cc00417 	ldw	r19,16(r5)
2002e638:	28800217 	ldw	r2,8(r5)
2002e63c:	dd000415 	stw	r20,16(sp)
2002e640:	ace7883a 	add	r19,r21,r19
2002e644:	dc800215 	stw	r18,8(sp)
2002e648:	dc400115 	stw	r17,4(sp)
2002e64c:	dc000015 	stw	r16,0(sp)
2002e650:	dfc00615 	stw	ra,24(sp)
2002e654:	9c000044 	addi	r16,r19,1
2002e658:	2823883a 	mov	r17,r5
2002e65c:	3029883a 	mov	r20,r6
2002e660:	2025883a 	mov	r18,r4
2002e664:	29400117 	ldw	r5,4(r5)
2002e668:	1400030e 	bge	r2,r16,2002e678 <__lshift+0x54>
2002e66c:	1085883a 	add	r2,r2,r2
2002e670:	29400044 	addi	r5,r5,1
2002e674:	143ffd16 	blt	r2,r16,2002e66c <_gp+0xfffef10c>
2002e678:	9009883a 	mov	r4,r18
2002e67c:	002dea40 	call	2002dea4 <_Balloc>
2002e680:	10c00504 	addi	r3,r2,20
2002e684:	0540070e 	bge	zero,r21,2002e6a4 <__lshift+0x80>
2002e688:	ad6b883a 	add	r21,r21,r21
2002e68c:	ad6b883a 	add	r21,r21,r21
2002e690:	1809883a 	mov	r4,r3
2002e694:	1d47883a 	add	r3,r3,r21
2002e698:	20000015 	stw	zero,0(r4)
2002e69c:	21000104 	addi	r4,r4,4
2002e6a0:	193ffd1e 	bne	r3,r4,2002e698 <_gp+0xfffef138>
2002e6a4:	8a000417 	ldw	r8,16(r17)
2002e6a8:	89000504 	addi	r4,r17,20
2002e6ac:	a18007cc 	andi	r6,r20,31
2002e6b0:	4211883a 	add	r8,r8,r8
2002e6b4:	4211883a 	add	r8,r8,r8
2002e6b8:	2211883a 	add	r8,r4,r8
2002e6bc:	30002326 	beq	r6,zero,2002e74c <__lshift+0x128>
2002e6c0:	02400804 	movi	r9,32
2002e6c4:	4993c83a 	sub	r9,r9,r6
2002e6c8:	000b883a 	mov	r5,zero
2002e6cc:	21c00017 	ldw	r7,0(r4)
2002e6d0:	1815883a 	mov	r10,r3
2002e6d4:	18c00104 	addi	r3,r3,4
2002e6d8:	398e983a 	sll	r7,r7,r6
2002e6dc:	21000104 	addi	r4,r4,4
2002e6e0:	394ab03a 	or	r5,r7,r5
2002e6e4:	197fff15 	stw	r5,-4(r3)
2002e6e8:	217fff17 	ldw	r5,-4(r4)
2002e6ec:	2a4ad83a 	srl	r5,r5,r9
2002e6f0:	223ff636 	bltu	r4,r8,2002e6cc <_gp+0xfffef16c>
2002e6f4:	51400115 	stw	r5,4(r10)
2002e6f8:	28001a1e 	bne	r5,zero,2002e764 <__lshift+0x140>
2002e6fc:	843fffc4 	addi	r16,r16,-1
2002e700:	14000415 	stw	r16,16(r2)
2002e704:	88000826 	beq	r17,zero,2002e728 <__lshift+0x104>
2002e708:	89000117 	ldw	r4,4(r17)
2002e70c:	90c01317 	ldw	r3,76(r18)
2002e710:	2109883a 	add	r4,r4,r4
2002e714:	2109883a 	add	r4,r4,r4
2002e718:	1907883a 	add	r3,r3,r4
2002e71c:	19000017 	ldw	r4,0(r3)
2002e720:	89000015 	stw	r4,0(r17)
2002e724:	1c400015 	stw	r17,0(r3)
2002e728:	dfc00617 	ldw	ra,24(sp)
2002e72c:	dd400517 	ldw	r21,20(sp)
2002e730:	dd000417 	ldw	r20,16(sp)
2002e734:	dcc00317 	ldw	r19,12(sp)
2002e738:	dc800217 	ldw	r18,8(sp)
2002e73c:	dc400117 	ldw	r17,4(sp)
2002e740:	dc000017 	ldw	r16,0(sp)
2002e744:	dec00704 	addi	sp,sp,28
2002e748:	f800283a 	ret
2002e74c:	21400017 	ldw	r5,0(r4)
2002e750:	18c00104 	addi	r3,r3,4
2002e754:	21000104 	addi	r4,r4,4
2002e758:	197fff15 	stw	r5,-4(r3)
2002e75c:	223ffb36 	bltu	r4,r8,2002e74c <_gp+0xfffef1ec>
2002e760:	003fe606 	br	2002e6fc <_gp+0xfffef19c>
2002e764:	9c000084 	addi	r16,r19,2
2002e768:	003fe406 	br	2002e6fc <_gp+0xfffef19c>

2002e76c <__mcmp>:
2002e76c:	20800417 	ldw	r2,16(r4)
2002e770:	28c00417 	ldw	r3,16(r5)
2002e774:	10c5c83a 	sub	r2,r2,r3
2002e778:	1000111e 	bne	r2,zero,2002e7c0 <__mcmp+0x54>
2002e77c:	18c7883a 	add	r3,r3,r3
2002e780:	18c7883a 	add	r3,r3,r3
2002e784:	21000504 	addi	r4,r4,20
2002e788:	29400504 	addi	r5,r5,20
2002e78c:	20c5883a 	add	r2,r4,r3
2002e790:	28cb883a 	add	r5,r5,r3
2002e794:	00000106 	br	2002e79c <__mcmp+0x30>
2002e798:	20800a2e 	bgeu	r4,r2,2002e7c4 <__mcmp+0x58>
2002e79c:	10bfff04 	addi	r2,r2,-4
2002e7a0:	297fff04 	addi	r5,r5,-4
2002e7a4:	11800017 	ldw	r6,0(r2)
2002e7a8:	28c00017 	ldw	r3,0(r5)
2002e7ac:	30fffa26 	beq	r6,r3,2002e798 <_gp+0xfffef238>
2002e7b0:	30c00236 	bltu	r6,r3,2002e7bc <__mcmp+0x50>
2002e7b4:	00800044 	movi	r2,1
2002e7b8:	f800283a 	ret
2002e7bc:	00bfffc4 	movi	r2,-1
2002e7c0:	f800283a 	ret
2002e7c4:	0005883a 	mov	r2,zero
2002e7c8:	f800283a 	ret

2002e7cc <__mdiff>:
2002e7cc:	28c00417 	ldw	r3,16(r5)
2002e7d0:	30800417 	ldw	r2,16(r6)
2002e7d4:	defffa04 	addi	sp,sp,-24
2002e7d8:	dcc00315 	stw	r19,12(sp)
2002e7dc:	dc800215 	stw	r18,8(sp)
2002e7e0:	dfc00515 	stw	ra,20(sp)
2002e7e4:	dd000415 	stw	r20,16(sp)
2002e7e8:	dc400115 	stw	r17,4(sp)
2002e7ec:	dc000015 	stw	r16,0(sp)
2002e7f0:	1887c83a 	sub	r3,r3,r2
2002e7f4:	2825883a 	mov	r18,r5
2002e7f8:	3027883a 	mov	r19,r6
2002e7fc:	1800141e 	bne	r3,zero,2002e850 <__mdiff+0x84>
2002e800:	1085883a 	add	r2,r2,r2
2002e804:	1085883a 	add	r2,r2,r2
2002e808:	2a000504 	addi	r8,r5,20
2002e80c:	34000504 	addi	r16,r6,20
2002e810:	4087883a 	add	r3,r8,r2
2002e814:	8085883a 	add	r2,r16,r2
2002e818:	00000106 	br	2002e820 <__mdiff+0x54>
2002e81c:	40c0592e 	bgeu	r8,r3,2002e984 <__mdiff+0x1b8>
2002e820:	18ffff04 	addi	r3,r3,-4
2002e824:	10bfff04 	addi	r2,r2,-4
2002e828:	19c00017 	ldw	r7,0(r3)
2002e82c:	11400017 	ldw	r5,0(r2)
2002e830:	397ffa26 	beq	r7,r5,2002e81c <_gp+0xfffef2bc>
2002e834:	3940592e 	bgeu	r7,r5,2002e99c <__mdiff+0x1d0>
2002e838:	9005883a 	mov	r2,r18
2002e83c:	4023883a 	mov	r17,r8
2002e840:	9825883a 	mov	r18,r19
2002e844:	05000044 	movi	r20,1
2002e848:	1027883a 	mov	r19,r2
2002e84c:	00000406 	br	2002e860 <__mdiff+0x94>
2002e850:	18005616 	blt	r3,zero,2002e9ac <__mdiff+0x1e0>
2002e854:	34400504 	addi	r17,r6,20
2002e858:	2c000504 	addi	r16,r5,20
2002e85c:	0029883a 	mov	r20,zero
2002e860:	91400117 	ldw	r5,4(r18)
2002e864:	002dea40 	call	2002dea4 <_Balloc>
2002e868:	92400417 	ldw	r9,16(r18)
2002e86c:	9b000417 	ldw	r12,16(r19)
2002e870:	12c00504 	addi	r11,r2,20
2002e874:	4a51883a 	add	r8,r9,r9
2002e878:	6319883a 	add	r12,r12,r12
2002e87c:	4211883a 	add	r8,r8,r8
2002e880:	6319883a 	add	r12,r12,r12
2002e884:	15000315 	stw	r20,12(r2)
2002e888:	8211883a 	add	r8,r16,r8
2002e88c:	8b19883a 	add	r12,r17,r12
2002e890:	0007883a 	mov	r3,zero
2002e894:	81400017 	ldw	r5,0(r16)
2002e898:	89c00017 	ldw	r7,0(r17)
2002e89c:	59800104 	addi	r6,r11,4
2002e8a0:	293fffcc 	andi	r4,r5,65535
2002e8a4:	20c7883a 	add	r3,r4,r3
2002e8a8:	393fffcc 	andi	r4,r7,65535
2002e8ac:	1909c83a 	sub	r4,r3,r4
2002e8b0:	280ad43a 	srli	r5,r5,16
2002e8b4:	380ed43a 	srli	r7,r7,16
2002e8b8:	2007d43a 	srai	r3,r4,16
2002e8bc:	213fffcc 	andi	r4,r4,65535
2002e8c0:	29cbc83a 	sub	r5,r5,r7
2002e8c4:	28c7883a 	add	r3,r5,r3
2002e8c8:	180a943a 	slli	r5,r3,16
2002e8cc:	8c400104 	addi	r17,r17,4
2002e8d0:	84000104 	addi	r16,r16,4
2002e8d4:	2908b03a 	or	r4,r5,r4
2002e8d8:	59000015 	stw	r4,0(r11)
2002e8dc:	1807d43a 	srai	r3,r3,16
2002e8e0:	3015883a 	mov	r10,r6
2002e8e4:	3017883a 	mov	r11,r6
2002e8e8:	8b3fea36 	bltu	r17,r12,2002e894 <_gp+0xfffef334>
2002e8ec:	8200162e 	bgeu	r16,r8,2002e948 <__mdiff+0x17c>
2002e8f0:	8017883a 	mov	r11,r16
2002e8f4:	59400017 	ldw	r5,0(r11)
2002e8f8:	31800104 	addi	r6,r6,4
2002e8fc:	5ac00104 	addi	r11,r11,4
2002e900:	293fffcc 	andi	r4,r5,65535
2002e904:	20c7883a 	add	r3,r4,r3
2002e908:	280ed43a 	srli	r7,r5,16
2002e90c:	180bd43a 	srai	r5,r3,16
2002e910:	193fffcc 	andi	r4,r3,65535
2002e914:	3947883a 	add	r3,r7,r5
2002e918:	180a943a 	slli	r5,r3,16
2002e91c:	1807d43a 	srai	r3,r3,16
2002e920:	2908b03a 	or	r4,r5,r4
2002e924:	313fff15 	stw	r4,-4(r6)
2002e928:	5a3ff236 	bltu	r11,r8,2002e8f4 <_gp+0xfffef394>
2002e92c:	0406303a 	nor	r3,zero,r16
2002e930:	1a07883a 	add	r3,r3,r8
2002e934:	1806d0ba 	srli	r3,r3,2
2002e938:	18c00044 	addi	r3,r3,1
2002e93c:	18c7883a 	add	r3,r3,r3
2002e940:	18c7883a 	add	r3,r3,r3
2002e944:	50d5883a 	add	r10,r10,r3
2002e948:	50ffff04 	addi	r3,r10,-4
2002e94c:	2000041e 	bne	r4,zero,2002e960 <__mdiff+0x194>
2002e950:	18ffff04 	addi	r3,r3,-4
2002e954:	19000017 	ldw	r4,0(r3)
2002e958:	4a7fffc4 	addi	r9,r9,-1
2002e95c:	203ffc26 	beq	r4,zero,2002e950 <_gp+0xfffef3f0>
2002e960:	12400415 	stw	r9,16(r2)
2002e964:	dfc00517 	ldw	ra,20(sp)
2002e968:	dd000417 	ldw	r20,16(sp)
2002e96c:	dcc00317 	ldw	r19,12(sp)
2002e970:	dc800217 	ldw	r18,8(sp)
2002e974:	dc400117 	ldw	r17,4(sp)
2002e978:	dc000017 	ldw	r16,0(sp)
2002e97c:	dec00604 	addi	sp,sp,24
2002e980:	f800283a 	ret
2002e984:	000b883a 	mov	r5,zero
2002e988:	002dea40 	call	2002dea4 <_Balloc>
2002e98c:	00c00044 	movi	r3,1
2002e990:	10c00415 	stw	r3,16(r2)
2002e994:	10000515 	stw	zero,20(r2)
2002e998:	003ff206 	br	2002e964 <_gp+0xfffef404>
2002e99c:	8023883a 	mov	r17,r16
2002e9a0:	0029883a 	mov	r20,zero
2002e9a4:	4021883a 	mov	r16,r8
2002e9a8:	003fad06 	br	2002e860 <_gp+0xfffef300>
2002e9ac:	9005883a 	mov	r2,r18
2002e9b0:	94400504 	addi	r17,r18,20
2002e9b4:	9c000504 	addi	r16,r19,20
2002e9b8:	9825883a 	mov	r18,r19
2002e9bc:	05000044 	movi	r20,1
2002e9c0:	1027883a 	mov	r19,r2
2002e9c4:	003fa606 	br	2002e860 <_gp+0xfffef300>

2002e9c8 <__ulp>:
2002e9c8:	295ffc2c 	andhi	r5,r5,32752
2002e9cc:	00bf3034 	movhi	r2,64704
2002e9d0:	2887883a 	add	r3,r5,r2
2002e9d4:	00c0020e 	bge	zero,r3,2002e9e0 <__ulp+0x18>
2002e9d8:	0005883a 	mov	r2,zero
2002e9dc:	f800283a 	ret
2002e9e0:	00c7c83a 	sub	r3,zero,r3
2002e9e4:	1807d53a 	srai	r3,r3,20
2002e9e8:	008004c4 	movi	r2,19
2002e9ec:	10c00b0e 	bge	r2,r3,2002ea1c <__ulp+0x54>
2002e9f0:	18bffb04 	addi	r2,r3,-20
2002e9f4:	01000784 	movi	r4,30
2002e9f8:	0007883a 	mov	r3,zero
2002e9fc:	20800516 	blt	r4,r2,2002ea14 <__ulp+0x4c>
2002ea00:	010007c4 	movi	r4,31
2002ea04:	2089c83a 	sub	r4,r4,r2
2002ea08:	00800044 	movi	r2,1
2002ea0c:	1104983a 	sll	r2,r2,r4
2002ea10:	f800283a 	ret
2002ea14:	00800044 	movi	r2,1
2002ea18:	f800283a 	ret
2002ea1c:	01400234 	movhi	r5,8
2002ea20:	28c7d83a 	sra	r3,r5,r3
2002ea24:	0005883a 	mov	r2,zero
2002ea28:	f800283a 	ret

2002ea2c <__b2d>:
2002ea2c:	defffa04 	addi	sp,sp,-24
2002ea30:	dc000015 	stw	r16,0(sp)
2002ea34:	24000417 	ldw	r16,16(r4)
2002ea38:	dc400115 	stw	r17,4(sp)
2002ea3c:	24400504 	addi	r17,r4,20
2002ea40:	8421883a 	add	r16,r16,r16
2002ea44:	8421883a 	add	r16,r16,r16
2002ea48:	8c21883a 	add	r16,r17,r16
2002ea4c:	dc800215 	stw	r18,8(sp)
2002ea50:	84bfff17 	ldw	r18,-4(r16)
2002ea54:	dd000415 	stw	r20,16(sp)
2002ea58:	dcc00315 	stw	r19,12(sp)
2002ea5c:	9009883a 	mov	r4,r18
2002ea60:	2829883a 	mov	r20,r5
2002ea64:	dfc00515 	stw	ra,20(sp)
2002ea68:	002e1980 	call	2002e198 <__hi0bits>
2002ea6c:	00c00804 	movi	r3,32
2002ea70:	1889c83a 	sub	r4,r3,r2
2002ea74:	a1000015 	stw	r4,0(r20)
2002ea78:	01000284 	movi	r4,10
2002ea7c:	84ffff04 	addi	r19,r16,-4
2002ea80:	20801216 	blt	r4,r2,2002eacc <__b2d+0xa0>
2002ea84:	018002c4 	movi	r6,11
2002ea88:	308dc83a 	sub	r6,r6,r2
2002ea8c:	9186d83a 	srl	r3,r18,r6
2002ea90:	18cffc34 	orhi	r3,r3,16368
2002ea94:	8cc0212e 	bgeu	r17,r19,2002eb1c <__b2d+0xf0>
2002ea98:	813ffe17 	ldw	r4,-8(r16)
2002ea9c:	218cd83a 	srl	r6,r4,r6
2002eaa0:	10800544 	addi	r2,r2,21
2002eaa4:	9084983a 	sll	r2,r18,r2
2002eaa8:	1184b03a 	or	r2,r2,r6
2002eaac:	dfc00517 	ldw	ra,20(sp)
2002eab0:	dd000417 	ldw	r20,16(sp)
2002eab4:	dcc00317 	ldw	r19,12(sp)
2002eab8:	dc800217 	ldw	r18,8(sp)
2002eabc:	dc400117 	ldw	r17,4(sp)
2002eac0:	dc000017 	ldw	r16,0(sp)
2002eac4:	dec00604 	addi	sp,sp,24
2002eac8:	f800283a 	ret
2002eacc:	8cc00f2e 	bgeu	r17,r19,2002eb0c <__b2d+0xe0>
2002ead0:	117ffd44 	addi	r5,r2,-11
2002ead4:	80bffe17 	ldw	r2,-8(r16)
2002ead8:	28000e26 	beq	r5,zero,2002eb14 <__b2d+0xe8>
2002eadc:	1949c83a 	sub	r4,r3,r5
2002eae0:	9164983a 	sll	r18,r18,r5
2002eae4:	1106d83a 	srl	r3,r2,r4
2002eae8:	81bffe04 	addi	r6,r16,-8
2002eaec:	948ffc34 	orhi	r18,r18,16368
2002eaf0:	90c6b03a 	or	r3,r18,r3
2002eaf4:	89800e2e 	bgeu	r17,r6,2002eb30 <__b2d+0x104>
2002eaf8:	81bffd17 	ldw	r6,-12(r16)
2002eafc:	1144983a 	sll	r2,r2,r5
2002eb00:	310ad83a 	srl	r5,r6,r4
2002eb04:	2884b03a 	or	r2,r5,r2
2002eb08:	003fe806 	br	2002eaac <_gp+0xfffef54c>
2002eb0c:	10bffd44 	addi	r2,r2,-11
2002eb10:	1000041e 	bne	r2,zero,2002eb24 <__b2d+0xf8>
2002eb14:	90cffc34 	orhi	r3,r18,16368
2002eb18:	003fe406 	br	2002eaac <_gp+0xfffef54c>
2002eb1c:	000d883a 	mov	r6,zero
2002eb20:	003fdf06 	br	2002eaa0 <_gp+0xfffef540>
2002eb24:	90a4983a 	sll	r18,r18,r2
2002eb28:	0005883a 	mov	r2,zero
2002eb2c:	003ff906 	br	2002eb14 <_gp+0xfffef5b4>
2002eb30:	1144983a 	sll	r2,r2,r5
2002eb34:	003fdd06 	br	2002eaac <_gp+0xfffef54c>

2002eb38 <__d2b>:
2002eb38:	defff804 	addi	sp,sp,-32
2002eb3c:	dc000215 	stw	r16,8(sp)
2002eb40:	3021883a 	mov	r16,r6
2002eb44:	dc400315 	stw	r17,12(sp)
2002eb48:	8022907a 	slli	r17,r16,1
2002eb4c:	dd000615 	stw	r20,24(sp)
2002eb50:	2829883a 	mov	r20,r5
2002eb54:	01400044 	movi	r5,1
2002eb58:	dcc00515 	stw	r19,20(sp)
2002eb5c:	dc800415 	stw	r18,16(sp)
2002eb60:	dfc00715 	stw	ra,28(sp)
2002eb64:	3825883a 	mov	r18,r7
2002eb68:	8822d57a 	srli	r17,r17,21
2002eb6c:	002dea40 	call	2002dea4 <_Balloc>
2002eb70:	1027883a 	mov	r19,r2
2002eb74:	00800434 	movhi	r2,16
2002eb78:	10bfffc4 	addi	r2,r2,-1
2002eb7c:	808c703a 	and	r6,r16,r2
2002eb80:	88000126 	beq	r17,zero,2002eb88 <__d2b+0x50>
2002eb84:	31800434 	orhi	r6,r6,16
2002eb88:	d9800015 	stw	r6,0(sp)
2002eb8c:	a0002426 	beq	r20,zero,2002ec20 <__d2b+0xe8>
2002eb90:	d9000104 	addi	r4,sp,4
2002eb94:	dd000115 	stw	r20,4(sp)
2002eb98:	002e2000 	call	2002e200 <__lo0bits>
2002eb9c:	d8c00017 	ldw	r3,0(sp)
2002eba0:	10002f1e 	bne	r2,zero,2002ec60 <__d2b+0x128>
2002eba4:	d9000117 	ldw	r4,4(sp)
2002eba8:	99000515 	stw	r4,20(r19)
2002ebac:	1821003a 	cmpeq	r16,r3,zero
2002ebb0:	01000084 	movi	r4,2
2002ebb4:	2421c83a 	sub	r16,r4,r16
2002ebb8:	98c00615 	stw	r3,24(r19)
2002ebbc:	9c000415 	stw	r16,16(r19)
2002ebc0:	88001f1e 	bne	r17,zero,2002ec40 <__d2b+0x108>
2002ebc4:	10bef384 	addi	r2,r2,-1074
2002ebc8:	90800015 	stw	r2,0(r18)
2002ebcc:	00900034 	movhi	r2,16384
2002ebd0:	10bfffc4 	addi	r2,r2,-1
2002ebd4:	8085883a 	add	r2,r16,r2
2002ebd8:	1085883a 	add	r2,r2,r2
2002ebdc:	1085883a 	add	r2,r2,r2
2002ebe0:	9885883a 	add	r2,r19,r2
2002ebe4:	11000517 	ldw	r4,20(r2)
2002ebe8:	8020917a 	slli	r16,r16,5
2002ebec:	002e1980 	call	2002e198 <__hi0bits>
2002ebf0:	d8c00817 	ldw	r3,32(sp)
2002ebf4:	8085c83a 	sub	r2,r16,r2
2002ebf8:	18800015 	stw	r2,0(r3)
2002ebfc:	9805883a 	mov	r2,r19
2002ec00:	dfc00717 	ldw	ra,28(sp)
2002ec04:	dd000617 	ldw	r20,24(sp)
2002ec08:	dcc00517 	ldw	r19,20(sp)
2002ec0c:	dc800417 	ldw	r18,16(sp)
2002ec10:	dc400317 	ldw	r17,12(sp)
2002ec14:	dc000217 	ldw	r16,8(sp)
2002ec18:	dec00804 	addi	sp,sp,32
2002ec1c:	f800283a 	ret
2002ec20:	d809883a 	mov	r4,sp
2002ec24:	002e2000 	call	2002e200 <__lo0bits>
2002ec28:	d8c00017 	ldw	r3,0(sp)
2002ec2c:	04000044 	movi	r16,1
2002ec30:	9c000415 	stw	r16,16(r19)
2002ec34:	98c00515 	stw	r3,20(r19)
2002ec38:	10800804 	addi	r2,r2,32
2002ec3c:	883fe126 	beq	r17,zero,2002ebc4 <_gp+0xfffef664>
2002ec40:	00c00d44 	movi	r3,53
2002ec44:	8c7ef344 	addi	r17,r17,-1075
2002ec48:	88a3883a 	add	r17,r17,r2
2002ec4c:	1885c83a 	sub	r2,r3,r2
2002ec50:	d8c00817 	ldw	r3,32(sp)
2002ec54:	94400015 	stw	r17,0(r18)
2002ec58:	18800015 	stw	r2,0(r3)
2002ec5c:	003fe706 	br	2002ebfc <_gp+0xfffef69c>
2002ec60:	01000804 	movi	r4,32
2002ec64:	2089c83a 	sub	r4,r4,r2
2002ec68:	1908983a 	sll	r4,r3,r4
2002ec6c:	d9400117 	ldw	r5,4(sp)
2002ec70:	1886d83a 	srl	r3,r3,r2
2002ec74:	2148b03a 	or	r4,r4,r5
2002ec78:	99000515 	stw	r4,20(r19)
2002ec7c:	d8c00015 	stw	r3,0(sp)
2002ec80:	003fca06 	br	2002ebac <_gp+0xfffef64c>

2002ec84 <__ratio>:
2002ec84:	defff904 	addi	sp,sp,-28
2002ec88:	dc400315 	stw	r17,12(sp)
2002ec8c:	2823883a 	mov	r17,r5
2002ec90:	d9400104 	addi	r5,sp,4
2002ec94:	dfc00615 	stw	ra,24(sp)
2002ec98:	dcc00515 	stw	r19,20(sp)
2002ec9c:	dc800415 	stw	r18,16(sp)
2002eca0:	2027883a 	mov	r19,r4
2002eca4:	dc000215 	stw	r16,8(sp)
2002eca8:	002ea2c0 	call	2002ea2c <__b2d>
2002ecac:	d80b883a 	mov	r5,sp
2002ecb0:	8809883a 	mov	r4,r17
2002ecb4:	1025883a 	mov	r18,r2
2002ecb8:	1821883a 	mov	r16,r3
2002ecbc:	002ea2c0 	call	2002ea2c <__b2d>
2002ecc0:	8a000417 	ldw	r8,16(r17)
2002ecc4:	99000417 	ldw	r4,16(r19)
2002ecc8:	d9400117 	ldw	r5,4(sp)
2002eccc:	2209c83a 	sub	r4,r4,r8
2002ecd0:	2010917a 	slli	r8,r4,5
2002ecd4:	d9000017 	ldw	r4,0(sp)
2002ecd8:	2909c83a 	sub	r4,r5,r4
2002ecdc:	4109883a 	add	r4,r8,r4
2002ece0:	01000e0e 	bge	zero,r4,2002ed1c <__ratio+0x98>
2002ece4:	2008953a 	slli	r4,r4,20
2002ece8:	2421883a 	add	r16,r4,r16
2002ecec:	100d883a 	mov	r6,r2
2002ecf0:	180f883a 	mov	r7,r3
2002ecf4:	9009883a 	mov	r4,r18
2002ecf8:	800b883a 	mov	r5,r16
2002ecfc:	00251c80 	call	200251c8 <__divdf3>
2002ed00:	dfc00617 	ldw	ra,24(sp)
2002ed04:	dcc00517 	ldw	r19,20(sp)
2002ed08:	dc800417 	ldw	r18,16(sp)
2002ed0c:	dc400317 	ldw	r17,12(sp)
2002ed10:	dc000217 	ldw	r16,8(sp)
2002ed14:	dec00704 	addi	sp,sp,28
2002ed18:	f800283a 	ret
2002ed1c:	2008953a 	slli	r4,r4,20
2002ed20:	1907c83a 	sub	r3,r3,r4
2002ed24:	003ff106 	br	2002ecec <_gp+0xfffef78c>

2002ed28 <_mprec_log10>:
2002ed28:	defffe04 	addi	sp,sp,-8
2002ed2c:	dc000015 	stw	r16,0(sp)
2002ed30:	dfc00115 	stw	ra,4(sp)
2002ed34:	008005c4 	movi	r2,23
2002ed38:	2021883a 	mov	r16,r4
2002ed3c:	11000d0e 	bge	r2,r4,2002ed74 <_mprec_log10+0x4c>
2002ed40:	0005883a 	mov	r2,zero
2002ed44:	00cffc34 	movhi	r3,16368
2002ed48:	843fffc4 	addi	r16,r16,-1
2002ed4c:	000d883a 	mov	r6,zero
2002ed50:	01d00934 	movhi	r7,16420
2002ed54:	1009883a 	mov	r4,r2
2002ed58:	180b883a 	mov	r5,r3
2002ed5c:	0025c800 	call	20025c80 <__muldf3>
2002ed60:	803ff91e 	bne	r16,zero,2002ed48 <_gp+0xfffef7e8>
2002ed64:	dfc00117 	ldw	ra,4(sp)
2002ed68:	dc000017 	ldw	r16,0(sp)
2002ed6c:	dec00204 	addi	sp,sp,8
2002ed70:	f800283a 	ret
2002ed74:	202090fa 	slli	r16,r4,3
2002ed78:	008800f4 	movhi	r2,8195
2002ed7c:	10965b04 	addi	r2,r2,22892
2002ed80:	1421883a 	add	r16,r2,r16
2002ed84:	80800017 	ldw	r2,0(r16)
2002ed88:	80c00117 	ldw	r3,4(r16)
2002ed8c:	dfc00117 	ldw	ra,4(sp)
2002ed90:	dc000017 	ldw	r16,0(sp)
2002ed94:	dec00204 	addi	sp,sp,8
2002ed98:	f800283a 	ret

2002ed9c <__copybits>:
2002ed9c:	297fffc4 	addi	r5,r5,-1
2002eda0:	280fd17a 	srai	r7,r5,5
2002eda4:	30c00417 	ldw	r3,16(r6)
2002eda8:	30800504 	addi	r2,r6,20
2002edac:	39c00044 	addi	r7,r7,1
2002edb0:	18c7883a 	add	r3,r3,r3
2002edb4:	39cf883a 	add	r7,r7,r7
2002edb8:	18c7883a 	add	r3,r3,r3
2002edbc:	39cf883a 	add	r7,r7,r7
2002edc0:	10c7883a 	add	r3,r2,r3
2002edc4:	21cf883a 	add	r7,r4,r7
2002edc8:	10c00d2e 	bgeu	r2,r3,2002ee00 <__copybits+0x64>
2002edcc:	200b883a 	mov	r5,r4
2002edd0:	12000017 	ldw	r8,0(r2)
2002edd4:	29400104 	addi	r5,r5,4
2002edd8:	10800104 	addi	r2,r2,4
2002eddc:	2a3fff15 	stw	r8,-4(r5)
2002ede0:	10fffb36 	bltu	r2,r3,2002edd0 <_gp+0xfffef870>
2002ede4:	1985c83a 	sub	r2,r3,r6
2002ede8:	10bffac4 	addi	r2,r2,-21
2002edec:	1004d0ba 	srli	r2,r2,2
2002edf0:	10800044 	addi	r2,r2,1
2002edf4:	1085883a 	add	r2,r2,r2
2002edf8:	1085883a 	add	r2,r2,r2
2002edfc:	2089883a 	add	r4,r4,r2
2002ee00:	21c0032e 	bgeu	r4,r7,2002ee10 <__copybits+0x74>
2002ee04:	20000015 	stw	zero,0(r4)
2002ee08:	21000104 	addi	r4,r4,4
2002ee0c:	21fffd36 	bltu	r4,r7,2002ee04 <_gp+0xfffef8a4>
2002ee10:	f800283a 	ret

2002ee14 <__any_on>:
2002ee14:	20c00417 	ldw	r3,16(r4)
2002ee18:	2805d17a 	srai	r2,r5,5
2002ee1c:	21000504 	addi	r4,r4,20
2002ee20:	18800d0e 	bge	r3,r2,2002ee58 <__any_on+0x44>
2002ee24:	18c7883a 	add	r3,r3,r3
2002ee28:	18c7883a 	add	r3,r3,r3
2002ee2c:	20c7883a 	add	r3,r4,r3
2002ee30:	20c0192e 	bgeu	r4,r3,2002ee98 <__any_on+0x84>
2002ee34:	18bfff17 	ldw	r2,-4(r3)
2002ee38:	18ffff04 	addi	r3,r3,-4
2002ee3c:	1000041e 	bne	r2,zero,2002ee50 <__any_on+0x3c>
2002ee40:	20c0142e 	bgeu	r4,r3,2002ee94 <__any_on+0x80>
2002ee44:	18ffff04 	addi	r3,r3,-4
2002ee48:	19400017 	ldw	r5,0(r3)
2002ee4c:	283ffc26 	beq	r5,zero,2002ee40 <_gp+0xfffef8e0>
2002ee50:	00800044 	movi	r2,1
2002ee54:	f800283a 	ret
2002ee58:	10c00a0e 	bge	r2,r3,2002ee84 <__any_on+0x70>
2002ee5c:	1085883a 	add	r2,r2,r2
2002ee60:	1085883a 	add	r2,r2,r2
2002ee64:	294007cc 	andi	r5,r5,31
2002ee68:	2087883a 	add	r3,r4,r2
2002ee6c:	283ff026 	beq	r5,zero,2002ee30 <_gp+0xfffef8d0>
2002ee70:	19800017 	ldw	r6,0(r3)
2002ee74:	3144d83a 	srl	r2,r6,r5
2002ee78:	114a983a 	sll	r5,r2,r5
2002ee7c:	317ff41e 	bne	r6,r5,2002ee50 <_gp+0xfffef8f0>
2002ee80:	003feb06 	br	2002ee30 <_gp+0xfffef8d0>
2002ee84:	1085883a 	add	r2,r2,r2
2002ee88:	1085883a 	add	r2,r2,r2
2002ee8c:	2087883a 	add	r3,r4,r2
2002ee90:	003fe706 	br	2002ee30 <_gp+0xfffef8d0>
2002ee94:	f800283a 	ret
2002ee98:	0005883a 	mov	r2,zero
2002ee9c:	f800283a 	ret

2002eea0 <_read_r>:
2002eea0:	defffd04 	addi	sp,sp,-12
2002eea4:	2805883a 	mov	r2,r5
2002eea8:	dc000015 	stw	r16,0(sp)
2002eeac:	04080134 	movhi	r16,8196
2002eeb0:	dc400115 	stw	r17,4(sp)
2002eeb4:	300b883a 	mov	r5,r6
2002eeb8:	84245304 	addi	r16,r16,-28340
2002eebc:	2023883a 	mov	r17,r4
2002eec0:	380d883a 	mov	r6,r7
2002eec4:	1009883a 	mov	r4,r2
2002eec8:	dfc00215 	stw	ra,8(sp)
2002eecc:	80000015 	stw	zero,0(r16)
2002eed0:	0032b700 	call	20032b70 <read>
2002eed4:	00ffffc4 	movi	r3,-1
2002eed8:	10c00526 	beq	r2,r3,2002eef0 <_read_r+0x50>
2002eedc:	dfc00217 	ldw	ra,8(sp)
2002eee0:	dc400117 	ldw	r17,4(sp)
2002eee4:	dc000017 	ldw	r16,0(sp)
2002eee8:	dec00304 	addi	sp,sp,12
2002eeec:	f800283a 	ret
2002eef0:	80c00017 	ldw	r3,0(r16)
2002eef4:	183ff926 	beq	r3,zero,2002eedc <_gp+0xfffef97c>
2002eef8:	88c00015 	stw	r3,0(r17)
2002eefc:	003ff706 	br	2002eedc <_gp+0xfffef97c>

2002ef00 <_realloc_r>:
2002ef00:	defff604 	addi	sp,sp,-40
2002ef04:	dc800215 	stw	r18,8(sp)
2002ef08:	dfc00915 	stw	ra,36(sp)
2002ef0c:	df000815 	stw	fp,32(sp)
2002ef10:	ddc00715 	stw	r23,28(sp)
2002ef14:	dd800615 	stw	r22,24(sp)
2002ef18:	dd400515 	stw	r21,20(sp)
2002ef1c:	dd000415 	stw	r20,16(sp)
2002ef20:	dcc00315 	stw	r19,12(sp)
2002ef24:	dc400115 	stw	r17,4(sp)
2002ef28:	dc000015 	stw	r16,0(sp)
2002ef2c:	3025883a 	mov	r18,r6
2002ef30:	2800b726 	beq	r5,zero,2002f210 <_realloc_r+0x310>
2002ef34:	282b883a 	mov	r21,r5
2002ef38:	2029883a 	mov	r20,r4
2002ef3c:	003285c0 	call	2003285c <__malloc_lock>
2002ef40:	a8bfff17 	ldw	r2,-4(r21)
2002ef44:	043fff04 	movi	r16,-4
2002ef48:	90c002c4 	addi	r3,r18,11
2002ef4c:	01000584 	movi	r4,22
2002ef50:	acfffe04 	addi	r19,r21,-8
2002ef54:	1420703a 	and	r16,r2,r16
2002ef58:	20c0332e 	bgeu	r4,r3,2002f028 <_realloc_r+0x128>
2002ef5c:	047ffe04 	movi	r17,-8
2002ef60:	1c62703a 	and	r17,r3,r17
2002ef64:	8807883a 	mov	r3,r17
2002ef68:	88005816 	blt	r17,zero,2002f0cc <_realloc_r+0x1cc>
2002ef6c:	8c805736 	bltu	r17,r18,2002f0cc <_realloc_r+0x1cc>
2002ef70:	80c0300e 	bge	r16,r3,2002f034 <_realloc_r+0x134>
2002ef74:	070800f4 	movhi	fp,8195
2002ef78:	e717ac04 	addi	fp,fp,24240
2002ef7c:	e1c00217 	ldw	r7,8(fp)
2002ef80:	9c09883a 	add	r4,r19,r16
2002ef84:	22000117 	ldw	r8,4(r4)
2002ef88:	21c06326 	beq	r4,r7,2002f118 <_realloc_r+0x218>
2002ef8c:	017fff84 	movi	r5,-2
2002ef90:	414a703a 	and	r5,r8,r5
2002ef94:	214b883a 	add	r5,r4,r5
2002ef98:	29800117 	ldw	r6,4(r5)
2002ef9c:	3180004c 	andi	r6,r6,1
2002efa0:	30003f26 	beq	r6,zero,2002f0a0 <_realloc_r+0x1a0>
2002efa4:	1080004c 	andi	r2,r2,1
2002efa8:	10008326 	beq	r2,zero,2002f1b8 <_realloc_r+0x2b8>
2002efac:	900b883a 	mov	r5,r18
2002efb0:	a009883a 	mov	r4,r20
2002efb4:	00288980 	call	20028898 <_malloc_r>
2002efb8:	1025883a 	mov	r18,r2
2002efbc:	10011e26 	beq	r2,zero,2002f438 <_realloc_r+0x538>
2002efc0:	a93fff17 	ldw	r4,-4(r21)
2002efc4:	10fffe04 	addi	r3,r2,-8
2002efc8:	00bfff84 	movi	r2,-2
2002efcc:	2084703a 	and	r2,r4,r2
2002efd0:	9885883a 	add	r2,r19,r2
2002efd4:	1880ee26 	beq	r3,r2,2002f390 <_realloc_r+0x490>
2002efd8:	81bfff04 	addi	r6,r16,-4
2002efdc:	00800904 	movi	r2,36
2002efe0:	1180b836 	bltu	r2,r6,2002f2c4 <_realloc_r+0x3c4>
2002efe4:	00c004c4 	movi	r3,19
2002efe8:	19809636 	bltu	r3,r6,2002f244 <_realloc_r+0x344>
2002efec:	9005883a 	mov	r2,r18
2002eff0:	a807883a 	mov	r3,r21
2002eff4:	19000017 	ldw	r4,0(r3)
2002eff8:	11000015 	stw	r4,0(r2)
2002effc:	19000117 	ldw	r4,4(r3)
2002f000:	11000115 	stw	r4,4(r2)
2002f004:	18c00217 	ldw	r3,8(r3)
2002f008:	10c00215 	stw	r3,8(r2)
2002f00c:	a80b883a 	mov	r5,r21
2002f010:	a009883a 	mov	r4,r20
2002f014:	0027c400 	call	20027c40 <_free_r>
2002f018:	a009883a 	mov	r4,r20
2002f01c:	00328800 	call	20032880 <__malloc_unlock>
2002f020:	9005883a 	mov	r2,r18
2002f024:	00001206 	br	2002f070 <_realloc_r+0x170>
2002f028:	00c00404 	movi	r3,16
2002f02c:	1823883a 	mov	r17,r3
2002f030:	003fce06 	br	2002ef6c <_gp+0xfffefa0c>
2002f034:	a825883a 	mov	r18,r21
2002f038:	8445c83a 	sub	r2,r16,r17
2002f03c:	00c003c4 	movi	r3,15
2002f040:	18802636 	bltu	r3,r2,2002f0dc <_realloc_r+0x1dc>
2002f044:	99800117 	ldw	r6,4(r19)
2002f048:	9c07883a 	add	r3,r19,r16
2002f04c:	3180004c 	andi	r6,r6,1
2002f050:	3420b03a 	or	r16,r6,r16
2002f054:	9c000115 	stw	r16,4(r19)
2002f058:	18800117 	ldw	r2,4(r3)
2002f05c:	10800054 	ori	r2,r2,1
2002f060:	18800115 	stw	r2,4(r3)
2002f064:	a009883a 	mov	r4,r20
2002f068:	00328800 	call	20032880 <__malloc_unlock>
2002f06c:	9005883a 	mov	r2,r18
2002f070:	dfc00917 	ldw	ra,36(sp)
2002f074:	df000817 	ldw	fp,32(sp)
2002f078:	ddc00717 	ldw	r23,28(sp)
2002f07c:	dd800617 	ldw	r22,24(sp)
2002f080:	dd400517 	ldw	r21,20(sp)
2002f084:	dd000417 	ldw	r20,16(sp)
2002f088:	dcc00317 	ldw	r19,12(sp)
2002f08c:	dc800217 	ldw	r18,8(sp)
2002f090:	dc400117 	ldw	r17,4(sp)
2002f094:	dc000017 	ldw	r16,0(sp)
2002f098:	dec00a04 	addi	sp,sp,40
2002f09c:	f800283a 	ret
2002f0a0:	017fff04 	movi	r5,-4
2002f0a4:	414a703a 	and	r5,r8,r5
2002f0a8:	814d883a 	add	r6,r16,r5
2002f0ac:	30c01f16 	blt	r6,r3,2002f12c <_realloc_r+0x22c>
2002f0b0:	20800317 	ldw	r2,12(r4)
2002f0b4:	20c00217 	ldw	r3,8(r4)
2002f0b8:	a825883a 	mov	r18,r21
2002f0bc:	3021883a 	mov	r16,r6
2002f0c0:	18800315 	stw	r2,12(r3)
2002f0c4:	10c00215 	stw	r3,8(r2)
2002f0c8:	003fdb06 	br	2002f038 <_gp+0xfffefad8>
2002f0cc:	00800304 	movi	r2,12
2002f0d0:	a0800015 	stw	r2,0(r20)
2002f0d4:	0005883a 	mov	r2,zero
2002f0d8:	003fe506 	br	2002f070 <_gp+0xfffefb10>
2002f0dc:	98c00117 	ldw	r3,4(r19)
2002f0e0:	9c4b883a 	add	r5,r19,r17
2002f0e4:	11000054 	ori	r4,r2,1
2002f0e8:	18c0004c 	andi	r3,r3,1
2002f0ec:	1c62b03a 	or	r17,r3,r17
2002f0f0:	9c400115 	stw	r17,4(r19)
2002f0f4:	29000115 	stw	r4,4(r5)
2002f0f8:	2885883a 	add	r2,r5,r2
2002f0fc:	10c00117 	ldw	r3,4(r2)
2002f100:	29400204 	addi	r5,r5,8
2002f104:	a009883a 	mov	r4,r20
2002f108:	18c00054 	ori	r3,r3,1
2002f10c:	10c00115 	stw	r3,4(r2)
2002f110:	0027c400 	call	20027c40 <_free_r>
2002f114:	003fd306 	br	2002f064 <_gp+0xfffefb04>
2002f118:	017fff04 	movi	r5,-4
2002f11c:	414a703a 	and	r5,r8,r5
2002f120:	89800404 	addi	r6,r17,16
2002f124:	8151883a 	add	r8,r16,r5
2002f128:	4180590e 	bge	r8,r6,2002f290 <_realloc_r+0x390>
2002f12c:	1080004c 	andi	r2,r2,1
2002f130:	103f9e1e 	bne	r2,zero,2002efac <_gp+0xfffefa4c>
2002f134:	adbffe17 	ldw	r22,-8(r21)
2002f138:	00bfff04 	movi	r2,-4
2002f13c:	9dadc83a 	sub	r22,r19,r22
2002f140:	b1800117 	ldw	r6,4(r22)
2002f144:	3084703a 	and	r2,r6,r2
2002f148:	20002026 	beq	r4,zero,2002f1cc <_realloc_r+0x2cc>
2002f14c:	80af883a 	add	r23,r16,r2
2002f150:	b96f883a 	add	r23,r23,r5
2002f154:	21c05f26 	beq	r4,r7,2002f2d4 <_realloc_r+0x3d4>
2002f158:	b8c01c16 	blt	r23,r3,2002f1cc <_realloc_r+0x2cc>
2002f15c:	20800317 	ldw	r2,12(r4)
2002f160:	20c00217 	ldw	r3,8(r4)
2002f164:	81bfff04 	addi	r6,r16,-4
2002f168:	01000904 	movi	r4,36
2002f16c:	18800315 	stw	r2,12(r3)
2002f170:	10c00215 	stw	r3,8(r2)
2002f174:	b0c00217 	ldw	r3,8(r22)
2002f178:	b0800317 	ldw	r2,12(r22)
2002f17c:	b4800204 	addi	r18,r22,8
2002f180:	18800315 	stw	r2,12(r3)
2002f184:	10c00215 	stw	r3,8(r2)
2002f188:	21801b36 	bltu	r4,r6,2002f1f8 <_realloc_r+0x2f8>
2002f18c:	008004c4 	movi	r2,19
2002f190:	1180352e 	bgeu	r2,r6,2002f268 <_realloc_r+0x368>
2002f194:	a8800017 	ldw	r2,0(r21)
2002f198:	b0800215 	stw	r2,8(r22)
2002f19c:	a8800117 	ldw	r2,4(r21)
2002f1a0:	b0800315 	stw	r2,12(r22)
2002f1a4:	008006c4 	movi	r2,27
2002f1a8:	11807f36 	bltu	r2,r6,2002f3a8 <_realloc_r+0x4a8>
2002f1ac:	b0800404 	addi	r2,r22,16
2002f1b0:	ad400204 	addi	r21,r21,8
2002f1b4:	00002d06 	br	2002f26c <_realloc_r+0x36c>
2002f1b8:	adbffe17 	ldw	r22,-8(r21)
2002f1bc:	00bfff04 	movi	r2,-4
2002f1c0:	9dadc83a 	sub	r22,r19,r22
2002f1c4:	b1000117 	ldw	r4,4(r22)
2002f1c8:	2084703a 	and	r2,r4,r2
2002f1cc:	b03f7726 	beq	r22,zero,2002efac <_gp+0xfffefa4c>
2002f1d0:	80af883a 	add	r23,r16,r2
2002f1d4:	b8ff7516 	blt	r23,r3,2002efac <_gp+0xfffefa4c>
2002f1d8:	b0800317 	ldw	r2,12(r22)
2002f1dc:	b0c00217 	ldw	r3,8(r22)
2002f1e0:	81bfff04 	addi	r6,r16,-4
2002f1e4:	01000904 	movi	r4,36
2002f1e8:	18800315 	stw	r2,12(r3)
2002f1ec:	10c00215 	stw	r3,8(r2)
2002f1f0:	b4800204 	addi	r18,r22,8
2002f1f4:	21bfe52e 	bgeu	r4,r6,2002f18c <_gp+0xfffefc2c>
2002f1f8:	a80b883a 	mov	r5,r21
2002f1fc:	9009883a 	mov	r4,r18
2002f200:	002dd480 	call	2002dd48 <memmove>
2002f204:	b821883a 	mov	r16,r23
2002f208:	b027883a 	mov	r19,r22
2002f20c:	003f8a06 	br	2002f038 <_gp+0xfffefad8>
2002f210:	300b883a 	mov	r5,r6
2002f214:	dfc00917 	ldw	ra,36(sp)
2002f218:	df000817 	ldw	fp,32(sp)
2002f21c:	ddc00717 	ldw	r23,28(sp)
2002f220:	dd800617 	ldw	r22,24(sp)
2002f224:	dd400517 	ldw	r21,20(sp)
2002f228:	dd000417 	ldw	r20,16(sp)
2002f22c:	dcc00317 	ldw	r19,12(sp)
2002f230:	dc800217 	ldw	r18,8(sp)
2002f234:	dc400117 	ldw	r17,4(sp)
2002f238:	dc000017 	ldw	r16,0(sp)
2002f23c:	dec00a04 	addi	sp,sp,40
2002f240:	00288981 	jmpi	20028898 <_malloc_r>
2002f244:	a8c00017 	ldw	r3,0(r21)
2002f248:	90c00015 	stw	r3,0(r18)
2002f24c:	a8c00117 	ldw	r3,4(r21)
2002f250:	90c00115 	stw	r3,4(r18)
2002f254:	00c006c4 	movi	r3,27
2002f258:	19804536 	bltu	r3,r6,2002f370 <_realloc_r+0x470>
2002f25c:	90800204 	addi	r2,r18,8
2002f260:	a8c00204 	addi	r3,r21,8
2002f264:	003f6306 	br	2002eff4 <_gp+0xfffefa94>
2002f268:	9005883a 	mov	r2,r18
2002f26c:	a8c00017 	ldw	r3,0(r21)
2002f270:	b821883a 	mov	r16,r23
2002f274:	b027883a 	mov	r19,r22
2002f278:	10c00015 	stw	r3,0(r2)
2002f27c:	a8c00117 	ldw	r3,4(r21)
2002f280:	10c00115 	stw	r3,4(r2)
2002f284:	a8c00217 	ldw	r3,8(r21)
2002f288:	10c00215 	stw	r3,8(r2)
2002f28c:	003f6a06 	br	2002f038 <_gp+0xfffefad8>
2002f290:	9c67883a 	add	r19,r19,r17
2002f294:	4445c83a 	sub	r2,r8,r17
2002f298:	e4c00215 	stw	r19,8(fp)
2002f29c:	10800054 	ori	r2,r2,1
2002f2a0:	98800115 	stw	r2,4(r19)
2002f2a4:	a8bfff17 	ldw	r2,-4(r21)
2002f2a8:	a009883a 	mov	r4,r20
2002f2ac:	1080004c 	andi	r2,r2,1
2002f2b0:	1462b03a 	or	r17,r2,r17
2002f2b4:	ac7fff15 	stw	r17,-4(r21)
2002f2b8:	00328800 	call	20032880 <__malloc_unlock>
2002f2bc:	a805883a 	mov	r2,r21
2002f2c0:	003f6b06 	br	2002f070 <_gp+0xfffefb10>
2002f2c4:	a80b883a 	mov	r5,r21
2002f2c8:	9009883a 	mov	r4,r18
2002f2cc:	002dd480 	call	2002dd48 <memmove>
2002f2d0:	003f4e06 	br	2002f00c <_gp+0xfffefaac>
2002f2d4:	89000404 	addi	r4,r17,16
2002f2d8:	b93fbc16 	blt	r23,r4,2002f1cc <_gp+0xfffefc6c>
2002f2dc:	b0800317 	ldw	r2,12(r22)
2002f2e0:	b0c00217 	ldw	r3,8(r22)
2002f2e4:	81bfff04 	addi	r6,r16,-4
2002f2e8:	01000904 	movi	r4,36
2002f2ec:	18800315 	stw	r2,12(r3)
2002f2f0:	10c00215 	stw	r3,8(r2)
2002f2f4:	b4800204 	addi	r18,r22,8
2002f2f8:	21804336 	bltu	r4,r6,2002f408 <_realloc_r+0x508>
2002f2fc:	008004c4 	movi	r2,19
2002f300:	11803f2e 	bgeu	r2,r6,2002f400 <_realloc_r+0x500>
2002f304:	a8800017 	ldw	r2,0(r21)
2002f308:	b0800215 	stw	r2,8(r22)
2002f30c:	a8800117 	ldw	r2,4(r21)
2002f310:	b0800315 	stw	r2,12(r22)
2002f314:	008006c4 	movi	r2,27
2002f318:	11803f36 	bltu	r2,r6,2002f418 <_realloc_r+0x518>
2002f31c:	b0800404 	addi	r2,r22,16
2002f320:	ad400204 	addi	r21,r21,8
2002f324:	a8c00017 	ldw	r3,0(r21)
2002f328:	10c00015 	stw	r3,0(r2)
2002f32c:	a8c00117 	ldw	r3,4(r21)
2002f330:	10c00115 	stw	r3,4(r2)
2002f334:	a8c00217 	ldw	r3,8(r21)
2002f338:	10c00215 	stw	r3,8(r2)
2002f33c:	b447883a 	add	r3,r22,r17
2002f340:	bc45c83a 	sub	r2,r23,r17
2002f344:	e0c00215 	stw	r3,8(fp)
2002f348:	10800054 	ori	r2,r2,1
2002f34c:	18800115 	stw	r2,4(r3)
2002f350:	b0800117 	ldw	r2,4(r22)
2002f354:	a009883a 	mov	r4,r20
2002f358:	1080004c 	andi	r2,r2,1
2002f35c:	1462b03a 	or	r17,r2,r17
2002f360:	b4400115 	stw	r17,4(r22)
2002f364:	00328800 	call	20032880 <__malloc_unlock>
2002f368:	9005883a 	mov	r2,r18
2002f36c:	003f4006 	br	2002f070 <_gp+0xfffefb10>
2002f370:	a8c00217 	ldw	r3,8(r21)
2002f374:	90c00215 	stw	r3,8(r18)
2002f378:	a8c00317 	ldw	r3,12(r21)
2002f37c:	90c00315 	stw	r3,12(r18)
2002f380:	30801126 	beq	r6,r2,2002f3c8 <_realloc_r+0x4c8>
2002f384:	90800404 	addi	r2,r18,16
2002f388:	a8c00404 	addi	r3,r21,16
2002f38c:	003f1906 	br	2002eff4 <_gp+0xfffefa94>
2002f390:	90ffff17 	ldw	r3,-4(r18)
2002f394:	00bfff04 	movi	r2,-4
2002f398:	a825883a 	mov	r18,r21
2002f39c:	1884703a 	and	r2,r3,r2
2002f3a0:	80a1883a 	add	r16,r16,r2
2002f3a4:	003f2406 	br	2002f038 <_gp+0xfffefad8>
2002f3a8:	a8800217 	ldw	r2,8(r21)
2002f3ac:	b0800415 	stw	r2,16(r22)
2002f3b0:	a8800317 	ldw	r2,12(r21)
2002f3b4:	b0800515 	stw	r2,20(r22)
2002f3b8:	31000a26 	beq	r6,r4,2002f3e4 <_realloc_r+0x4e4>
2002f3bc:	b0800604 	addi	r2,r22,24
2002f3c0:	ad400404 	addi	r21,r21,16
2002f3c4:	003fa906 	br	2002f26c <_gp+0xfffefd0c>
2002f3c8:	a9000417 	ldw	r4,16(r21)
2002f3cc:	90800604 	addi	r2,r18,24
2002f3d0:	a8c00604 	addi	r3,r21,24
2002f3d4:	91000415 	stw	r4,16(r18)
2002f3d8:	a9000517 	ldw	r4,20(r21)
2002f3dc:	91000515 	stw	r4,20(r18)
2002f3e0:	003f0406 	br	2002eff4 <_gp+0xfffefa94>
2002f3e4:	a8c00417 	ldw	r3,16(r21)
2002f3e8:	ad400604 	addi	r21,r21,24
2002f3ec:	b0800804 	addi	r2,r22,32
2002f3f0:	b0c00615 	stw	r3,24(r22)
2002f3f4:	a8ffff17 	ldw	r3,-4(r21)
2002f3f8:	b0c00715 	stw	r3,28(r22)
2002f3fc:	003f9b06 	br	2002f26c <_gp+0xfffefd0c>
2002f400:	9005883a 	mov	r2,r18
2002f404:	003fc706 	br	2002f324 <_gp+0xfffefdc4>
2002f408:	a80b883a 	mov	r5,r21
2002f40c:	9009883a 	mov	r4,r18
2002f410:	002dd480 	call	2002dd48 <memmove>
2002f414:	003fc906 	br	2002f33c <_gp+0xfffefddc>
2002f418:	a8800217 	ldw	r2,8(r21)
2002f41c:	b0800415 	stw	r2,16(r22)
2002f420:	a8800317 	ldw	r2,12(r21)
2002f424:	b0800515 	stw	r2,20(r22)
2002f428:	31000726 	beq	r6,r4,2002f448 <_realloc_r+0x548>
2002f42c:	b0800604 	addi	r2,r22,24
2002f430:	ad400404 	addi	r21,r21,16
2002f434:	003fbb06 	br	2002f324 <_gp+0xfffefdc4>
2002f438:	a009883a 	mov	r4,r20
2002f43c:	00328800 	call	20032880 <__malloc_unlock>
2002f440:	0005883a 	mov	r2,zero
2002f444:	003f0a06 	br	2002f070 <_gp+0xfffefb10>
2002f448:	a8c00417 	ldw	r3,16(r21)
2002f44c:	ad400604 	addi	r21,r21,24
2002f450:	b0800804 	addi	r2,r22,32
2002f454:	b0c00615 	stw	r3,24(r22)
2002f458:	a8ffff17 	ldw	r3,-4(r21)
2002f45c:	b0c00715 	stw	r3,28(r22)
2002f460:	003fb006 	br	2002f324 <_gp+0xfffefdc4>

2002f464 <__fpclassifyd>:
2002f464:	00a00034 	movhi	r2,32768
2002f468:	10bfffc4 	addi	r2,r2,-1
2002f46c:	2884703a 	and	r2,r5,r2
2002f470:	10000726 	beq	r2,zero,2002f490 <__fpclassifyd+0x2c>
2002f474:	00fffc34 	movhi	r3,65520
2002f478:	019ff834 	movhi	r6,32736
2002f47c:	28c7883a 	add	r3,r5,r3
2002f480:	31bfffc4 	addi	r6,r6,-1
2002f484:	30c00536 	bltu	r6,r3,2002f49c <__fpclassifyd+0x38>
2002f488:	00800104 	movi	r2,4
2002f48c:	f800283a 	ret
2002f490:	2000021e 	bne	r4,zero,2002f49c <__fpclassifyd+0x38>
2002f494:	00800084 	movi	r2,2
2002f498:	f800283a 	ret
2002f49c:	00dffc34 	movhi	r3,32752
2002f4a0:	019ff834 	movhi	r6,32736
2002f4a4:	28cb883a 	add	r5,r5,r3
2002f4a8:	31bfffc4 	addi	r6,r6,-1
2002f4ac:	317ff62e 	bgeu	r6,r5,2002f488 <_gp+0xfffeff28>
2002f4b0:	01400434 	movhi	r5,16
2002f4b4:	297fffc4 	addi	r5,r5,-1
2002f4b8:	28800236 	bltu	r5,r2,2002f4c4 <__fpclassifyd+0x60>
2002f4bc:	008000c4 	movi	r2,3
2002f4c0:	f800283a 	ret
2002f4c4:	10c00226 	beq	r2,r3,2002f4d0 <__fpclassifyd+0x6c>
2002f4c8:	0005883a 	mov	r2,zero
2002f4cc:	f800283a 	ret
2002f4d0:	2005003a 	cmpeq	r2,r4,zero
2002f4d4:	f800283a 	ret

2002f4d8 <_init_signal_r>:
2002f4d8:	2080b717 	ldw	r2,732(r4)
2002f4dc:	10000226 	beq	r2,zero,2002f4e8 <_init_signal_r+0x10>
2002f4e0:	0005883a 	mov	r2,zero
2002f4e4:	f800283a 	ret
2002f4e8:	defffe04 	addi	sp,sp,-8
2002f4ec:	01402004 	movi	r5,128
2002f4f0:	dc000015 	stw	r16,0(sp)
2002f4f4:	dfc00115 	stw	ra,4(sp)
2002f4f8:	2021883a 	mov	r16,r4
2002f4fc:	00288980 	call	20028898 <_malloc_r>
2002f500:	8080b715 	stw	r2,732(r16)
2002f504:	10000d26 	beq	r2,zero,2002f53c <_init_signal_r+0x64>
2002f508:	0007883a 	mov	r3,zero
2002f50c:	01002004 	movi	r4,128
2002f510:	00000106 	br	2002f518 <_init_signal_r+0x40>
2002f514:	8080b717 	ldw	r2,732(r16)
2002f518:	10c5883a 	add	r2,r2,r3
2002f51c:	10000015 	stw	zero,0(r2)
2002f520:	18c00104 	addi	r3,r3,4
2002f524:	193ffb1e 	bne	r3,r4,2002f514 <_gp+0xfffeffb4>
2002f528:	0005883a 	mov	r2,zero
2002f52c:	dfc00117 	ldw	ra,4(sp)
2002f530:	dc000017 	ldw	r16,0(sp)
2002f534:	dec00204 	addi	sp,sp,8
2002f538:	f800283a 	ret
2002f53c:	00bfffc4 	movi	r2,-1
2002f540:	003ffa06 	br	2002f52c <_gp+0xfffeffcc>

2002f544 <_signal_r>:
2002f544:	00c007c4 	movi	r3,31
2002f548:	19401536 	bltu	r3,r5,2002f5a0 <_signal_r+0x5c>
2002f54c:	2080b717 	ldw	r2,732(r4)
2002f550:	defffc04 	addi	sp,sp,-16
2002f554:	dc800215 	stw	r18,8(sp)
2002f558:	dc400115 	stw	r17,4(sp)
2002f55c:	dc000015 	stw	r16,0(sp)
2002f560:	dfc00315 	stw	ra,12(sp)
2002f564:	3023883a 	mov	r17,r6
2002f568:	2021883a 	mov	r16,r4
2002f56c:	2825883a 	mov	r18,r5
2002f570:	10000f26 	beq	r2,zero,2002f5b0 <_signal_r+0x6c>
2002f574:	948b883a 	add	r5,r18,r18
2002f578:	294b883a 	add	r5,r5,r5
2002f57c:	114b883a 	add	r5,r2,r5
2002f580:	28800017 	ldw	r2,0(r5)
2002f584:	2c400015 	stw	r17,0(r5)
2002f588:	dfc00317 	ldw	ra,12(sp)
2002f58c:	dc800217 	ldw	r18,8(sp)
2002f590:	dc400117 	ldw	r17,4(sp)
2002f594:	dc000017 	ldw	r16,0(sp)
2002f598:	dec00404 	addi	sp,sp,16
2002f59c:	f800283a 	ret
2002f5a0:	00c00584 	movi	r3,22
2002f5a4:	20c00015 	stw	r3,0(r4)
2002f5a8:	00bfffc4 	movi	r2,-1
2002f5ac:	f800283a 	ret
2002f5b0:	002f4d80 	call	2002f4d8 <_init_signal_r>
2002f5b4:	1000021e 	bne	r2,zero,2002f5c0 <_signal_r+0x7c>
2002f5b8:	8080b717 	ldw	r2,732(r16)
2002f5bc:	003fed06 	br	2002f574 <_gp+0xffff0014>
2002f5c0:	00bfffc4 	movi	r2,-1
2002f5c4:	003ff006 	br	2002f588 <_gp+0xffff0028>

2002f5c8 <_raise_r>:
2002f5c8:	008007c4 	movi	r2,31
2002f5cc:	11402936 	bltu	r2,r5,2002f674 <_raise_r+0xac>
2002f5d0:	20c0b717 	ldw	r3,732(r4)
2002f5d4:	defffd04 	addi	sp,sp,-12
2002f5d8:	dc400115 	stw	r17,4(sp)
2002f5dc:	dc000015 	stw	r16,0(sp)
2002f5e0:	dfc00215 	stw	ra,8(sp)
2002f5e4:	2021883a 	mov	r16,r4
2002f5e8:	2823883a 	mov	r17,r5
2002f5ec:	18001726 	beq	r3,zero,2002f64c <_raise_r+0x84>
2002f5f0:	2945883a 	add	r2,r5,r5
2002f5f4:	1085883a 	add	r2,r2,r2
2002f5f8:	1887883a 	add	r3,r3,r2
2002f5fc:	19800017 	ldw	r6,0(r3)
2002f600:	30001226 	beq	r6,zero,2002f64c <_raise_r+0x84>
2002f604:	00800044 	movi	r2,1
2002f608:	30800e26 	beq	r6,r2,2002f644 <_raise_r+0x7c>
2002f60c:	013fffc4 	movi	r4,-1
2002f610:	31000926 	beq	r6,r4,2002f638 <_raise_r+0x70>
2002f614:	18000015 	stw	zero,0(r3)
2002f618:	2809883a 	mov	r4,r5
2002f61c:	303ee83a 	callr	r6
2002f620:	0005883a 	mov	r2,zero
2002f624:	dfc00217 	ldw	ra,8(sp)
2002f628:	dc400117 	ldw	r17,4(sp)
2002f62c:	dc000017 	ldw	r16,0(sp)
2002f630:	dec00304 	addi	sp,sp,12
2002f634:	f800283a 	ret
2002f638:	00c00584 	movi	r3,22
2002f63c:	80c00015 	stw	r3,0(r16)
2002f640:	003ff806 	br	2002f624 <_gp+0xffff00c4>
2002f644:	0005883a 	mov	r2,zero
2002f648:	003ff606 	br	2002f624 <_gp+0xffff00c4>
2002f64c:	8009883a 	mov	r4,r16
2002f650:	002f7d80 	call	2002f7d8 <_getpid_r>
2002f654:	880d883a 	mov	r6,r17
2002f658:	100b883a 	mov	r5,r2
2002f65c:	8009883a 	mov	r4,r16
2002f660:	dfc00217 	ldw	ra,8(sp)
2002f664:	dc400117 	ldw	r17,4(sp)
2002f668:	dc000017 	ldw	r16,0(sp)
2002f66c:	dec00304 	addi	sp,sp,12
2002f670:	002f77c1 	jmpi	2002f77c <_kill_r>
2002f674:	00800584 	movi	r2,22
2002f678:	20800015 	stw	r2,0(r4)
2002f67c:	00bfffc4 	movi	r2,-1
2002f680:	f800283a 	ret

2002f684 <__sigtramp_r>:
2002f684:	008007c4 	movi	r2,31
2002f688:	11402436 	bltu	r2,r5,2002f71c <__sigtramp_r+0x98>
2002f68c:	20c0b717 	ldw	r3,732(r4)
2002f690:	defffd04 	addi	sp,sp,-12
2002f694:	dc400115 	stw	r17,4(sp)
2002f698:	dc000015 	stw	r16,0(sp)
2002f69c:	dfc00215 	stw	ra,8(sp)
2002f6a0:	2021883a 	mov	r16,r4
2002f6a4:	2823883a 	mov	r17,r5
2002f6a8:	18001826 	beq	r3,zero,2002f70c <__sigtramp_r+0x88>
2002f6ac:	8c45883a 	add	r2,r17,r17
2002f6b0:	1085883a 	add	r2,r2,r2
2002f6b4:	1885883a 	add	r2,r3,r2
2002f6b8:	10c00017 	ldw	r3,0(r2)
2002f6bc:	18001126 	beq	r3,zero,2002f704 <__sigtramp_r+0x80>
2002f6c0:	013fffc4 	movi	r4,-1
2002f6c4:	19000d26 	beq	r3,r4,2002f6fc <__sigtramp_r+0x78>
2002f6c8:	01000044 	movi	r4,1
2002f6cc:	19000926 	beq	r3,r4,2002f6f4 <__sigtramp_r+0x70>
2002f6d0:	10000015 	stw	zero,0(r2)
2002f6d4:	8809883a 	mov	r4,r17
2002f6d8:	183ee83a 	callr	r3
2002f6dc:	0005883a 	mov	r2,zero
2002f6e0:	dfc00217 	ldw	ra,8(sp)
2002f6e4:	dc400117 	ldw	r17,4(sp)
2002f6e8:	dc000017 	ldw	r16,0(sp)
2002f6ec:	dec00304 	addi	sp,sp,12
2002f6f0:	f800283a 	ret
2002f6f4:	008000c4 	movi	r2,3
2002f6f8:	003ff906 	br	2002f6e0 <_gp+0xffff0180>
2002f6fc:	00800084 	movi	r2,2
2002f700:	003ff706 	br	2002f6e0 <_gp+0xffff0180>
2002f704:	00800044 	movi	r2,1
2002f708:	003ff506 	br	2002f6e0 <_gp+0xffff0180>
2002f70c:	002f4d80 	call	2002f4d8 <_init_signal_r>
2002f710:	1000041e 	bne	r2,zero,2002f724 <__sigtramp_r+0xa0>
2002f714:	80c0b717 	ldw	r3,732(r16)
2002f718:	003fe406 	br	2002f6ac <_gp+0xffff014c>
2002f71c:	00bfffc4 	movi	r2,-1
2002f720:	f800283a 	ret
2002f724:	00bfffc4 	movi	r2,-1
2002f728:	003fed06 	br	2002f6e0 <_gp+0xffff0180>

2002f72c <raise>:
2002f72c:	008800f4 	movhi	r2,8195
2002f730:	109d5a04 	addi	r2,r2,30056
2002f734:	200b883a 	mov	r5,r4
2002f738:	11000017 	ldw	r4,0(r2)
2002f73c:	002f5c81 	jmpi	2002f5c8 <_raise_r>

2002f740 <signal>:
2002f740:	008800f4 	movhi	r2,8195
2002f744:	109d5a04 	addi	r2,r2,30056
2002f748:	280d883a 	mov	r6,r5
2002f74c:	200b883a 	mov	r5,r4
2002f750:	11000017 	ldw	r4,0(r2)
2002f754:	002f5441 	jmpi	2002f544 <_signal_r>

2002f758 <_init_signal>:
2002f758:	008800f4 	movhi	r2,8195
2002f75c:	109d5a04 	addi	r2,r2,30056
2002f760:	11000017 	ldw	r4,0(r2)
2002f764:	002f4d81 	jmpi	2002f4d8 <_init_signal_r>

2002f768 <__sigtramp>:
2002f768:	008800f4 	movhi	r2,8195
2002f76c:	109d5a04 	addi	r2,r2,30056
2002f770:	200b883a 	mov	r5,r4
2002f774:	11000017 	ldw	r4,0(r2)
2002f778:	002f6841 	jmpi	2002f684 <__sigtramp_r>

2002f77c <_kill_r>:
2002f77c:	defffd04 	addi	sp,sp,-12
2002f780:	2805883a 	mov	r2,r5
2002f784:	dc000015 	stw	r16,0(sp)
2002f788:	04080134 	movhi	r16,8196
2002f78c:	dc400115 	stw	r17,4(sp)
2002f790:	84245304 	addi	r16,r16,-28340
2002f794:	2023883a 	mov	r17,r4
2002f798:	300b883a 	mov	r5,r6
2002f79c:	1009883a 	mov	r4,r2
2002f7a0:	dfc00215 	stw	ra,8(sp)
2002f7a4:	80000015 	stw	zero,0(r16)
2002f7a8:	00324b40 	call	200324b4 <kill>
2002f7ac:	00ffffc4 	movi	r3,-1
2002f7b0:	10c00526 	beq	r2,r3,2002f7c8 <_kill_r+0x4c>
2002f7b4:	dfc00217 	ldw	ra,8(sp)
2002f7b8:	dc400117 	ldw	r17,4(sp)
2002f7bc:	dc000017 	ldw	r16,0(sp)
2002f7c0:	dec00304 	addi	sp,sp,12
2002f7c4:	f800283a 	ret
2002f7c8:	80c00017 	ldw	r3,0(r16)
2002f7cc:	183ff926 	beq	r3,zero,2002f7b4 <_gp+0xffff0254>
2002f7d0:	88c00015 	stw	r3,0(r17)
2002f7d4:	003ff706 	br	2002f7b4 <_gp+0xffff0254>

2002f7d8 <_getpid_r>:
2002f7d8:	00323781 	jmpi	20032378 <getpid>

2002f7dc <strcmp>:
2002f7dc:	2144b03a 	or	r2,r4,r5
2002f7e0:	108000cc 	andi	r2,r2,3
2002f7e4:	1000171e 	bne	r2,zero,2002f844 <strcmp+0x68>
2002f7e8:	20800017 	ldw	r2,0(r4)
2002f7ec:	28c00017 	ldw	r3,0(r5)
2002f7f0:	10c0141e 	bne	r2,r3,2002f844 <strcmp+0x68>
2002f7f4:	027fbff4 	movhi	r9,65279
2002f7f8:	4a7fbfc4 	addi	r9,r9,-257
2002f7fc:	0086303a 	nor	r3,zero,r2
2002f800:	02202074 	movhi	r8,32897
2002f804:	1245883a 	add	r2,r2,r9
2002f808:	42202004 	addi	r8,r8,-32640
2002f80c:	10c4703a 	and	r2,r2,r3
2002f810:	1204703a 	and	r2,r2,r8
2002f814:	10000226 	beq	r2,zero,2002f820 <strcmp+0x44>
2002f818:	00002306 	br	2002f8a8 <strcmp+0xcc>
2002f81c:	1000221e 	bne	r2,zero,2002f8a8 <strcmp+0xcc>
2002f820:	21000104 	addi	r4,r4,4
2002f824:	20c00017 	ldw	r3,0(r4)
2002f828:	29400104 	addi	r5,r5,4
2002f82c:	29800017 	ldw	r6,0(r5)
2002f830:	1a4f883a 	add	r7,r3,r9
2002f834:	00c4303a 	nor	r2,zero,r3
2002f838:	3884703a 	and	r2,r7,r2
2002f83c:	1204703a 	and	r2,r2,r8
2002f840:	19bff626 	beq	r3,r6,2002f81c <_gp+0xffff02bc>
2002f844:	20800003 	ldbu	r2,0(r4)
2002f848:	10c03fcc 	andi	r3,r2,255
2002f84c:	18c0201c 	xori	r3,r3,128
2002f850:	18ffe004 	addi	r3,r3,-128
2002f854:	18000c26 	beq	r3,zero,2002f888 <strcmp+0xac>
2002f858:	29800007 	ldb	r6,0(r5)
2002f85c:	19800326 	beq	r3,r6,2002f86c <strcmp+0x90>
2002f860:	00001306 	br	2002f8b0 <strcmp+0xd4>
2002f864:	29800007 	ldb	r6,0(r5)
2002f868:	11800b1e 	bne	r2,r6,2002f898 <strcmp+0xbc>
2002f86c:	21000044 	addi	r4,r4,1
2002f870:	20c00003 	ldbu	r3,0(r4)
2002f874:	29400044 	addi	r5,r5,1
2002f878:	18803fcc 	andi	r2,r3,255
2002f87c:	1080201c 	xori	r2,r2,128
2002f880:	10bfe004 	addi	r2,r2,-128
2002f884:	103ff71e 	bne	r2,zero,2002f864 <_gp+0xffff0304>
2002f888:	0007883a 	mov	r3,zero
2002f88c:	28800003 	ldbu	r2,0(r5)
2002f890:	1885c83a 	sub	r2,r3,r2
2002f894:	f800283a 	ret
2002f898:	28800003 	ldbu	r2,0(r5)
2002f89c:	18c03fcc 	andi	r3,r3,255
2002f8a0:	1885c83a 	sub	r2,r3,r2
2002f8a4:	f800283a 	ret
2002f8a8:	0005883a 	mov	r2,zero
2002f8ac:	f800283a 	ret
2002f8b0:	10c03fcc 	andi	r3,r2,255
2002f8b4:	003ff506 	br	2002f88c <_gp+0xffff032c>

2002f8b8 <strlen>:
2002f8b8:	208000cc 	andi	r2,r4,3
2002f8bc:	10002026 	beq	r2,zero,2002f940 <strlen+0x88>
2002f8c0:	20800007 	ldb	r2,0(r4)
2002f8c4:	10002026 	beq	r2,zero,2002f948 <strlen+0x90>
2002f8c8:	2005883a 	mov	r2,r4
2002f8cc:	00000206 	br	2002f8d8 <strlen+0x20>
2002f8d0:	10c00007 	ldb	r3,0(r2)
2002f8d4:	18001826 	beq	r3,zero,2002f938 <strlen+0x80>
2002f8d8:	10800044 	addi	r2,r2,1
2002f8dc:	10c000cc 	andi	r3,r2,3
2002f8e0:	183ffb1e 	bne	r3,zero,2002f8d0 <_gp+0xffff0370>
2002f8e4:	10c00017 	ldw	r3,0(r2)
2002f8e8:	01ffbff4 	movhi	r7,65279
2002f8ec:	39ffbfc4 	addi	r7,r7,-257
2002f8f0:	00ca303a 	nor	r5,zero,r3
2002f8f4:	01a02074 	movhi	r6,32897
2002f8f8:	19c7883a 	add	r3,r3,r7
2002f8fc:	31a02004 	addi	r6,r6,-32640
2002f900:	1946703a 	and	r3,r3,r5
2002f904:	1986703a 	and	r3,r3,r6
2002f908:	1800091e 	bne	r3,zero,2002f930 <strlen+0x78>
2002f90c:	10800104 	addi	r2,r2,4
2002f910:	10c00017 	ldw	r3,0(r2)
2002f914:	19cb883a 	add	r5,r3,r7
2002f918:	00c6303a 	nor	r3,zero,r3
2002f91c:	28c6703a 	and	r3,r5,r3
2002f920:	1986703a 	and	r3,r3,r6
2002f924:	183ff926 	beq	r3,zero,2002f90c <_gp+0xffff03ac>
2002f928:	00000106 	br	2002f930 <strlen+0x78>
2002f92c:	10800044 	addi	r2,r2,1
2002f930:	10c00007 	ldb	r3,0(r2)
2002f934:	183ffd1e 	bne	r3,zero,2002f92c <_gp+0xffff03cc>
2002f938:	1105c83a 	sub	r2,r2,r4
2002f93c:	f800283a 	ret
2002f940:	2005883a 	mov	r2,r4
2002f944:	003fe706 	br	2002f8e4 <_gp+0xffff0384>
2002f948:	0005883a 	mov	r2,zero
2002f94c:	f800283a 	ret

2002f950 <__sprint_r.part.0>:
2002f950:	28801917 	ldw	r2,100(r5)
2002f954:	defff604 	addi	sp,sp,-40
2002f958:	dd400515 	stw	r21,20(sp)
2002f95c:	dfc00915 	stw	ra,36(sp)
2002f960:	df000815 	stw	fp,32(sp)
2002f964:	ddc00715 	stw	r23,28(sp)
2002f968:	dd800615 	stw	r22,24(sp)
2002f96c:	dd000415 	stw	r20,16(sp)
2002f970:	dcc00315 	stw	r19,12(sp)
2002f974:	dc800215 	stw	r18,8(sp)
2002f978:	dc400115 	stw	r17,4(sp)
2002f97c:	dc000015 	stw	r16,0(sp)
2002f980:	1088000c 	andi	r2,r2,8192
2002f984:	302b883a 	mov	r21,r6
2002f988:	10002e26 	beq	r2,zero,2002fa44 <__sprint_r.part.0+0xf4>
2002f98c:	30800217 	ldw	r2,8(r6)
2002f990:	35800017 	ldw	r22,0(r6)
2002f994:	10002926 	beq	r2,zero,2002fa3c <__sprint_r.part.0+0xec>
2002f998:	2827883a 	mov	r19,r5
2002f99c:	2029883a 	mov	r20,r4
2002f9a0:	b5c00104 	addi	r23,r22,4
2002f9a4:	04bfffc4 	movi	r18,-1
2002f9a8:	bc400017 	ldw	r17,0(r23)
2002f9ac:	b4000017 	ldw	r16,0(r22)
2002f9b0:	0039883a 	mov	fp,zero
2002f9b4:	8822d0ba 	srli	r17,r17,2
2002f9b8:	8800031e 	bne	r17,zero,2002f9c8 <__sprint_r.part.0+0x78>
2002f9bc:	00001806 	br	2002fa20 <__sprint_r.part.0+0xd0>
2002f9c0:	84000104 	addi	r16,r16,4
2002f9c4:	8f001526 	beq	r17,fp,2002fa1c <__sprint_r.part.0+0xcc>
2002f9c8:	81400017 	ldw	r5,0(r16)
2002f9cc:	980d883a 	mov	r6,r19
2002f9d0:	a009883a 	mov	r4,r20
2002f9d4:	00310fc0 	call	200310fc <_fputwc_r>
2002f9d8:	e7000044 	addi	fp,fp,1
2002f9dc:	14bff81e 	bne	r2,r18,2002f9c0 <_gp+0xffff0460>
2002f9e0:	9005883a 	mov	r2,r18
2002f9e4:	a8000215 	stw	zero,8(r21)
2002f9e8:	a8000115 	stw	zero,4(r21)
2002f9ec:	dfc00917 	ldw	ra,36(sp)
2002f9f0:	df000817 	ldw	fp,32(sp)
2002f9f4:	ddc00717 	ldw	r23,28(sp)
2002f9f8:	dd800617 	ldw	r22,24(sp)
2002f9fc:	dd400517 	ldw	r21,20(sp)
2002fa00:	dd000417 	ldw	r20,16(sp)
2002fa04:	dcc00317 	ldw	r19,12(sp)
2002fa08:	dc800217 	ldw	r18,8(sp)
2002fa0c:	dc400117 	ldw	r17,4(sp)
2002fa10:	dc000017 	ldw	r16,0(sp)
2002fa14:	dec00a04 	addi	sp,sp,40
2002fa18:	f800283a 	ret
2002fa1c:	a8800217 	ldw	r2,8(r21)
2002fa20:	8c63883a 	add	r17,r17,r17
2002fa24:	8c63883a 	add	r17,r17,r17
2002fa28:	1445c83a 	sub	r2,r2,r17
2002fa2c:	a8800215 	stw	r2,8(r21)
2002fa30:	b5800204 	addi	r22,r22,8
2002fa34:	bdc00204 	addi	r23,r23,8
2002fa38:	103fdb1e 	bne	r2,zero,2002f9a8 <_gp+0xffff0448>
2002fa3c:	0005883a 	mov	r2,zero
2002fa40:	003fe806 	br	2002f9e4 <_gp+0xffff0484>
2002fa44:	002d6180 	call	2002d618 <__sfvwrite_r>
2002fa48:	003fe606 	br	2002f9e4 <_gp+0xffff0484>

2002fa4c <__sprint_r>:
2002fa4c:	30c00217 	ldw	r3,8(r6)
2002fa50:	18000126 	beq	r3,zero,2002fa58 <__sprint_r+0xc>
2002fa54:	002f9501 	jmpi	2002f950 <__sprint_r.part.0>
2002fa58:	30000115 	stw	zero,4(r6)
2002fa5c:	0005883a 	mov	r2,zero
2002fa60:	f800283a 	ret

2002fa64 <___vfiprintf_internal_r>:
2002fa64:	deffc904 	addi	sp,sp,-220
2002fa68:	df003515 	stw	fp,212(sp)
2002fa6c:	dd003115 	stw	r20,196(sp)
2002fa70:	dfc03615 	stw	ra,216(sp)
2002fa74:	ddc03415 	stw	r23,208(sp)
2002fa78:	dd803315 	stw	r22,204(sp)
2002fa7c:	dd403215 	stw	r21,200(sp)
2002fa80:	dcc03015 	stw	r19,192(sp)
2002fa84:	dc802f15 	stw	r18,188(sp)
2002fa88:	dc402e15 	stw	r17,184(sp)
2002fa8c:	dc002d15 	stw	r16,180(sp)
2002fa90:	d9002015 	stw	r4,128(sp)
2002fa94:	d9c02215 	stw	r7,136(sp)
2002fa98:	2829883a 	mov	r20,r5
2002fa9c:	3039883a 	mov	fp,r6
2002faa0:	20000226 	beq	r4,zero,2002faac <___vfiprintf_internal_r+0x48>
2002faa4:	20800e17 	ldw	r2,56(r4)
2002faa8:	1000cf26 	beq	r2,zero,2002fde8 <___vfiprintf_internal_r+0x384>
2002faac:	a080030b 	ldhu	r2,12(r20)
2002fab0:	10c8000c 	andi	r3,r2,8192
2002fab4:	1800061e 	bne	r3,zero,2002fad0 <___vfiprintf_internal_r+0x6c>
2002fab8:	a1001917 	ldw	r4,100(r20)
2002fabc:	00f7ffc4 	movi	r3,-8193
2002fac0:	10880014 	ori	r2,r2,8192
2002fac4:	20c6703a 	and	r3,r4,r3
2002fac8:	a080030d 	sth	r2,12(r20)
2002facc:	a0c01915 	stw	r3,100(r20)
2002fad0:	10c0020c 	andi	r3,r2,8
2002fad4:	1800a926 	beq	r3,zero,2002fd7c <___vfiprintf_internal_r+0x318>
2002fad8:	a0c00417 	ldw	r3,16(r20)
2002fadc:	1800a726 	beq	r3,zero,2002fd7c <___vfiprintf_internal_r+0x318>
2002fae0:	1080068c 	andi	r2,r2,26
2002fae4:	00c00284 	movi	r3,10
2002fae8:	10c0ac26 	beq	r2,r3,2002fd9c <___vfiprintf_internal_r+0x338>
2002faec:	da801a04 	addi	r10,sp,104
2002faf0:	da801e15 	stw	r10,120(sp)
2002faf4:	d8801e17 	ldw	r2,120(sp)
2002faf8:	da8019c4 	addi	r10,sp,103
2002fafc:	058800f4 	movhi	r22,8195
2002fb00:	05c800f4 	movhi	r23,8195
2002fb04:	da801f15 	stw	r10,124(sp)
2002fb08:	1295c83a 	sub	r10,r2,r10
2002fb0c:	b5969104 	addi	r22,r22,23108
2002fb10:	bdd68d04 	addi	r23,r23,23092
2002fb14:	dec01a15 	stw	sp,104(sp)
2002fb18:	d8001c15 	stw	zero,112(sp)
2002fb1c:	d8001b15 	stw	zero,108(sp)
2002fb20:	d8002615 	stw	zero,152(sp)
2002fb24:	d8002315 	stw	zero,140(sp)
2002fb28:	da802715 	stw	r10,156(sp)
2002fb2c:	d811883a 	mov	r8,sp
2002fb30:	dd002115 	stw	r20,132(sp)
2002fb34:	e021883a 	mov	r16,fp
2002fb38:	80800007 	ldb	r2,0(r16)
2002fb3c:	1003ea26 	beq	r2,zero,20030ae8 <___vfiprintf_internal_r+0x1084>
2002fb40:	00c00944 	movi	r3,37
2002fb44:	8025883a 	mov	r18,r16
2002fb48:	10c0021e 	bne	r2,r3,2002fb54 <___vfiprintf_internal_r+0xf0>
2002fb4c:	00001606 	br	2002fba8 <___vfiprintf_internal_r+0x144>
2002fb50:	10c00326 	beq	r2,r3,2002fb60 <___vfiprintf_internal_r+0xfc>
2002fb54:	94800044 	addi	r18,r18,1
2002fb58:	90800007 	ldb	r2,0(r18)
2002fb5c:	103ffc1e 	bne	r2,zero,2002fb50 <_gp+0xffff05f0>
2002fb60:	9423c83a 	sub	r17,r18,r16
2002fb64:	88001026 	beq	r17,zero,2002fba8 <___vfiprintf_internal_r+0x144>
2002fb68:	d8c01c17 	ldw	r3,112(sp)
2002fb6c:	d8801b17 	ldw	r2,108(sp)
2002fb70:	44000015 	stw	r16,0(r8)
2002fb74:	88c7883a 	add	r3,r17,r3
2002fb78:	10800044 	addi	r2,r2,1
2002fb7c:	44400115 	stw	r17,4(r8)
2002fb80:	d8c01c15 	stw	r3,112(sp)
2002fb84:	d8801b15 	stw	r2,108(sp)
2002fb88:	010001c4 	movi	r4,7
2002fb8c:	2080760e 	bge	r4,r2,2002fd68 <___vfiprintf_internal_r+0x304>
2002fb90:	1803821e 	bne	r3,zero,2003099c <___vfiprintf_internal_r+0xf38>
2002fb94:	da802317 	ldw	r10,140(sp)
2002fb98:	d8001b15 	stw	zero,108(sp)
2002fb9c:	d811883a 	mov	r8,sp
2002fba0:	5455883a 	add	r10,r10,r17
2002fba4:	da802315 	stw	r10,140(sp)
2002fba8:	90800007 	ldb	r2,0(r18)
2002fbac:	10044626 	beq	r2,zero,20030cc8 <___vfiprintf_internal_r+0x1264>
2002fbb0:	90c00047 	ldb	r3,1(r18)
2002fbb4:	94000044 	addi	r16,r18,1
2002fbb8:	d8001d85 	stb	zero,118(sp)
2002fbbc:	0009883a 	mov	r4,zero
2002fbc0:	000f883a 	mov	r7,zero
2002fbc4:	027fffc4 	movi	r9,-1
2002fbc8:	0023883a 	mov	r17,zero
2002fbcc:	0029883a 	mov	r20,zero
2002fbd0:	01401604 	movi	r5,88
2002fbd4:	01800244 	movi	r6,9
2002fbd8:	03400a84 	movi	r13,42
2002fbdc:	03001b04 	movi	r12,108
2002fbe0:	84000044 	addi	r16,r16,1
2002fbe4:	18bff804 	addi	r2,r3,-32
2002fbe8:	28827336 	bltu	r5,r2,200305b8 <___vfiprintf_internal_r+0xb54>
2002fbec:	100490ba 	slli	r2,r2,2
2002fbf0:	028800f4 	movhi	r10,8195
2002fbf4:	52bf0104 	addi	r10,r10,-1020
2002fbf8:	1285883a 	add	r2,r2,r10
2002fbfc:	10800017 	ldw	r2,0(r2)
2002fc00:	1000683a 	jmp	r2
2002fc04:	200302ec 	andhi	zero,r4,3083
2002fc08:	200305b8 	rdprs	zero,r4,3094
2002fc0c:	200305b8 	rdprs	zero,r4,3094
2002fc10:	2003030c 	andi	zero,r4,3084
2002fc14:	200305b8 	rdprs	zero,r4,3094
2002fc18:	200305b8 	rdprs	zero,r4,3094
2002fc1c:	200305b8 	rdprs	zero,r4,3094
2002fc20:	200305b8 	rdprs	zero,r4,3094
2002fc24:	200305b8 	rdprs	zero,r4,3094
2002fc28:	200305b8 	rdprs	zero,r4,3094
2002fc2c:	200304f4 	orhi	zero,r4,3091
2002fc30:	20030510 	cmplti	zero,r4,3092
2002fc34:	200305b8 	rdprs	zero,r4,3094
2002fc38:	2002fdf8 	rdprs	zero,r4,3063
2002fc3c:	20030520 	cmpeqi	zero,r4,3092
2002fc40:	200305b8 	rdprs	zero,r4,3094
2002fc44:	20030318 	cmpnei	zero,r4,3084
2002fc48:	20030324 	muli	zero,r4,3084
2002fc4c:	20030324 	muli	zero,r4,3084
2002fc50:	20030324 	muli	zero,r4,3084
2002fc54:	20030324 	muli	zero,r4,3084
2002fc58:	20030324 	muli	zero,r4,3084
2002fc5c:	20030324 	muli	zero,r4,3084
2002fc60:	20030324 	muli	zero,r4,3084
2002fc64:	20030324 	muli	zero,r4,3084
2002fc68:	20030324 	muli	zero,r4,3084
2002fc6c:	200305b8 	rdprs	zero,r4,3094
2002fc70:	200305b8 	rdprs	zero,r4,3094
2002fc74:	200305b8 	rdprs	zero,r4,3094
2002fc78:	200305b8 	rdprs	zero,r4,3094
2002fc7c:	200305b8 	rdprs	zero,r4,3094
2002fc80:	200305b8 	rdprs	zero,r4,3094
2002fc84:	200305b8 	rdprs	zero,r4,3094
2002fc88:	200305b8 	rdprs	zero,r4,3094
2002fc8c:	200305b8 	rdprs	zero,r4,3094
2002fc90:	200305b8 	rdprs	zero,r4,3094
2002fc94:	20030350 	cmplti	zero,r4,3085
2002fc98:	200305b8 	rdprs	zero,r4,3094
2002fc9c:	200305b8 	rdprs	zero,r4,3094
2002fca0:	200305b8 	rdprs	zero,r4,3094
2002fca4:	200305b8 	rdprs	zero,r4,3094
2002fca8:	200305b8 	rdprs	zero,r4,3094
2002fcac:	200305b8 	rdprs	zero,r4,3094
2002fcb0:	200305b8 	rdprs	zero,r4,3094
2002fcb4:	200305b8 	rdprs	zero,r4,3094
2002fcb8:	200305b8 	rdprs	zero,r4,3094
2002fcbc:	200305b8 	rdprs	zero,r4,3094
2002fcc0:	20030388 	cmpgei	zero,r4,3086
2002fcc4:	200305b8 	rdprs	zero,r4,3094
2002fcc8:	200305b8 	rdprs	zero,r4,3094
2002fccc:	200305b8 	rdprs	zero,r4,3094
2002fcd0:	200305b8 	rdprs	zero,r4,3094
2002fcd4:	200305b8 	rdprs	zero,r4,3094
2002fcd8:	200303e0 	cmpeqi	zero,r4,3087
2002fcdc:	200305b8 	rdprs	zero,r4,3094
2002fce0:	200305b8 	rdprs	zero,r4,3094
2002fce4:	20030450 	cmplti	zero,r4,3089
2002fce8:	200305b8 	rdprs	zero,r4,3094
2002fcec:	200305b8 	rdprs	zero,r4,3094
2002fcf0:	200305b8 	rdprs	zero,r4,3094
2002fcf4:	200305b8 	rdprs	zero,r4,3094
2002fcf8:	200305b8 	rdprs	zero,r4,3094
2002fcfc:	200305b8 	rdprs	zero,r4,3094
2002fd00:	200305b8 	rdprs	zero,r4,3094
2002fd04:	200305b8 	rdprs	zero,r4,3094
2002fd08:	200305b8 	rdprs	zero,r4,3094
2002fd0c:	200305b8 	rdprs	zero,r4,3094
2002fd10:	200301fc 	xorhi	zero,r4,3079
2002fd14:	20030228 	cmpgeui	zero,r4,3080
2002fd18:	200305b8 	rdprs	zero,r4,3094
2002fd1c:	200305b8 	rdprs	zero,r4,3094
2002fd20:	200305b8 	rdprs	zero,r4,3094
2002fd24:	20030560 	cmpeqi	zero,r4,3093
2002fd28:	20030228 	cmpgeui	zero,r4,3080
2002fd2c:	200305b8 	rdprs	zero,r4,3094
2002fd30:	200305b8 	rdprs	zero,r4,3094
2002fd34:	200300bc 	xorhi	zero,r4,3074
2002fd38:	200305b8 	rdprs	zero,r4,3094
2002fd3c:	200300cc 	andi	zero,r4,3075
2002fd40:	20030108 	cmpgei	zero,r4,3076
2002fd44:	2002fe04 	addi	zero,r4,3064
2002fd48:	200300b0 	cmpltui	zero,r4,3074
2002fd4c:	200305b8 	rdprs	zero,r4,3094
2002fd50:	2003048c 	andi	zero,r4,3090
2002fd54:	200305b8 	rdprs	zero,r4,3094
2002fd58:	200304e4 	muli	zero,r4,3091
2002fd5c:	200305b8 	rdprs	zero,r4,3094
2002fd60:	200305b8 	rdprs	zero,r4,3094
2002fd64:	200301a8 	cmpgeui	zero,r4,3078
2002fd68:	42000204 	addi	r8,r8,8
2002fd6c:	da802317 	ldw	r10,140(sp)
2002fd70:	5455883a 	add	r10,r10,r17
2002fd74:	da802315 	stw	r10,140(sp)
2002fd78:	003f8b06 	br	2002fba8 <_gp+0xffff0648>
2002fd7c:	d9002017 	ldw	r4,128(sp)
2002fd80:	a00b883a 	mov	r5,r20
2002fd84:	002bb240 	call	2002bb24 <__swsetup_r>
2002fd88:	1003b11e 	bne	r2,zero,20030c50 <___vfiprintf_internal_r+0x11ec>
2002fd8c:	a080030b 	ldhu	r2,12(r20)
2002fd90:	00c00284 	movi	r3,10
2002fd94:	1080068c 	andi	r2,r2,26
2002fd98:	10ff541e 	bne	r2,r3,2002faec <_gp+0xffff058c>
2002fd9c:	a080038f 	ldh	r2,14(r20)
2002fda0:	103f5216 	blt	r2,zero,2002faec <_gp+0xffff058c>
2002fda4:	d9c02217 	ldw	r7,136(sp)
2002fda8:	d9002017 	ldw	r4,128(sp)
2002fdac:	e00d883a 	mov	r6,fp
2002fdb0:	a00b883a 	mov	r5,r20
2002fdb4:	0030edc0 	call	20030edc <__sbprintf>
2002fdb8:	dfc03617 	ldw	ra,216(sp)
2002fdbc:	df003517 	ldw	fp,212(sp)
2002fdc0:	ddc03417 	ldw	r23,208(sp)
2002fdc4:	dd803317 	ldw	r22,204(sp)
2002fdc8:	dd403217 	ldw	r21,200(sp)
2002fdcc:	dd003117 	ldw	r20,196(sp)
2002fdd0:	dcc03017 	ldw	r19,192(sp)
2002fdd4:	dc802f17 	ldw	r18,188(sp)
2002fdd8:	dc402e17 	ldw	r17,184(sp)
2002fddc:	dc002d17 	ldw	r16,180(sp)
2002fde0:	dec03704 	addi	sp,sp,220
2002fde4:	f800283a 	ret
2002fde8:	00276b80 	call	200276b8 <__sinit>
2002fdec:	003f2f06 	br	2002faac <_gp+0xffff054c>
2002fdf0:	0463c83a 	sub	r17,zero,r17
2002fdf4:	d8802215 	stw	r2,136(sp)
2002fdf8:	a5000114 	ori	r20,r20,4
2002fdfc:	80c00007 	ldb	r3,0(r16)
2002fe00:	003f7706 	br	2002fbe0 <_gp+0xffff0680>
2002fe04:	00800c04 	movi	r2,48
2002fe08:	da802217 	ldw	r10,136(sp)
2002fe0c:	d8801d05 	stb	r2,116(sp)
2002fe10:	00801e04 	movi	r2,120
2002fe14:	d8801d45 	stb	r2,117(sp)
2002fe18:	d8001d85 	stb	zero,118(sp)
2002fe1c:	50c00104 	addi	r3,r10,4
2002fe20:	54800017 	ldw	r18,0(r10)
2002fe24:	0027883a 	mov	r19,zero
2002fe28:	a0800094 	ori	r2,r20,2
2002fe2c:	48030b16 	blt	r9,zero,20030a5c <___vfiprintf_internal_r+0xff8>
2002fe30:	00bfdfc4 	movi	r2,-129
2002fe34:	a096703a 	and	r11,r20,r2
2002fe38:	d8c02215 	stw	r3,136(sp)
2002fe3c:	5d000094 	ori	r20,r11,2
2002fe40:	90032b1e 	bne	r18,zero,20030af0 <___vfiprintf_internal_r+0x108c>
2002fe44:	008800f4 	movhi	r2,8195
2002fe48:	10962d04 	addi	r2,r2,22708
2002fe4c:	d8802615 	stw	r2,152(sp)
2002fe50:	0039883a 	mov	fp,zero
2002fe54:	48017b1e 	bne	r9,zero,20030444 <___vfiprintf_internal_r+0x9e0>
2002fe58:	0013883a 	mov	r9,zero
2002fe5c:	0027883a 	mov	r19,zero
2002fe60:	dd401a04 	addi	r21,sp,104
2002fe64:	4825883a 	mov	r18,r9
2002fe68:	4cc0010e 	bge	r9,r19,2002fe70 <___vfiprintf_internal_r+0x40c>
2002fe6c:	9825883a 	mov	r18,r19
2002fe70:	e7003fcc 	andi	fp,fp,255
2002fe74:	e700201c 	xori	fp,fp,128
2002fe78:	e73fe004 	addi	fp,fp,-128
2002fe7c:	e0000126 	beq	fp,zero,2002fe84 <___vfiprintf_internal_r+0x420>
2002fe80:	94800044 	addi	r18,r18,1
2002fe84:	a380008c 	andi	r14,r20,2
2002fe88:	70000126 	beq	r14,zero,2002fe90 <___vfiprintf_internal_r+0x42c>
2002fe8c:	94800084 	addi	r18,r18,2
2002fe90:	a700210c 	andi	fp,r20,132
2002fe94:	e001df1e 	bne	fp,zero,20030614 <___vfiprintf_internal_r+0xbb0>
2002fe98:	8c87c83a 	sub	r3,r17,r18
2002fe9c:	00c1dd0e 	bge	zero,r3,20030614 <___vfiprintf_internal_r+0xbb0>
2002fea0:	01c00404 	movi	r7,16
2002fea4:	d8801c17 	ldw	r2,112(sp)
2002fea8:	38c3ad0e 	bge	r7,r3,20030d60 <___vfiprintf_internal_r+0x12fc>
2002feac:	028800f4 	movhi	r10,8195
2002feb0:	52969104 	addi	r10,r10,23108
2002feb4:	dc002915 	stw	r16,164(sp)
2002feb8:	d9801b17 	ldw	r6,108(sp)
2002febc:	da802415 	stw	r10,144(sp)
2002fec0:	03c001c4 	movi	r15,7
2002fec4:	da402515 	stw	r9,148(sp)
2002fec8:	db802815 	stw	r14,160(sp)
2002fecc:	1821883a 	mov	r16,r3
2002fed0:	00000506 	br	2002fee8 <___vfiprintf_internal_r+0x484>
2002fed4:	31400084 	addi	r5,r6,2
2002fed8:	42000204 	addi	r8,r8,8
2002fedc:	200d883a 	mov	r6,r4
2002fee0:	843ffc04 	addi	r16,r16,-16
2002fee4:	3c000d0e 	bge	r7,r16,2002ff1c <___vfiprintf_internal_r+0x4b8>
2002fee8:	10800404 	addi	r2,r2,16
2002feec:	31000044 	addi	r4,r6,1
2002fef0:	45800015 	stw	r22,0(r8)
2002fef4:	41c00115 	stw	r7,4(r8)
2002fef8:	d8801c15 	stw	r2,112(sp)
2002fefc:	d9001b15 	stw	r4,108(sp)
2002ff00:	793ff40e 	bge	r15,r4,2002fed4 <_gp+0xffff0974>
2002ff04:	1001b51e 	bne	r2,zero,200305dc <___vfiprintf_internal_r+0xb78>
2002ff08:	843ffc04 	addi	r16,r16,-16
2002ff0c:	000d883a 	mov	r6,zero
2002ff10:	01400044 	movi	r5,1
2002ff14:	d811883a 	mov	r8,sp
2002ff18:	3c3ff316 	blt	r7,r16,2002fee8 <_gp+0xffff0988>
2002ff1c:	8007883a 	mov	r3,r16
2002ff20:	da402517 	ldw	r9,148(sp)
2002ff24:	db802817 	ldw	r14,160(sp)
2002ff28:	dc002917 	ldw	r16,164(sp)
2002ff2c:	da802417 	ldw	r10,144(sp)
2002ff30:	1885883a 	add	r2,r3,r2
2002ff34:	40c00115 	stw	r3,4(r8)
2002ff38:	42800015 	stw	r10,0(r8)
2002ff3c:	d8801c15 	stw	r2,112(sp)
2002ff40:	d9401b15 	stw	r5,108(sp)
2002ff44:	00c001c4 	movi	r3,7
2002ff48:	19426016 	blt	r3,r5,200308cc <___vfiprintf_internal_r+0xe68>
2002ff4c:	d8c01d87 	ldb	r3,118(sp)
2002ff50:	42000204 	addi	r8,r8,8
2002ff54:	29000044 	addi	r4,r5,1
2002ff58:	1801b31e 	bne	r3,zero,20030628 <___vfiprintf_internal_r+0xbc4>
2002ff5c:	7001c026 	beq	r14,zero,20030660 <___vfiprintf_internal_r+0xbfc>
2002ff60:	d8c01d04 	addi	r3,sp,116
2002ff64:	10800084 	addi	r2,r2,2
2002ff68:	40c00015 	stw	r3,0(r8)
2002ff6c:	00c00084 	movi	r3,2
2002ff70:	40c00115 	stw	r3,4(r8)
2002ff74:	d8801c15 	stw	r2,112(sp)
2002ff78:	d9001b15 	stw	r4,108(sp)
2002ff7c:	00c001c4 	movi	r3,7
2002ff80:	1902650e 	bge	r3,r4,20030918 <___vfiprintf_internal_r+0xeb4>
2002ff84:	10029a1e 	bne	r2,zero,200309f0 <___vfiprintf_internal_r+0xf8c>
2002ff88:	00c02004 	movi	r3,128
2002ff8c:	01000044 	movi	r4,1
2002ff90:	000b883a 	mov	r5,zero
2002ff94:	d811883a 	mov	r8,sp
2002ff98:	e0c1b31e 	bne	fp,r3,20030668 <___vfiprintf_internal_r+0xc04>
2002ff9c:	8cb9c83a 	sub	fp,r17,r18
2002ffa0:	0701b10e 	bge	zero,fp,20030668 <___vfiprintf_internal_r+0xc04>
2002ffa4:	01c00404 	movi	r7,16
2002ffa8:	3f03890e 	bge	r7,fp,20030dd0 <___vfiprintf_internal_r+0x136c>
2002ffac:	00c800f4 	movhi	r3,8195
2002ffb0:	18d68d04 	addi	r3,r3,23092
2002ffb4:	d8c02415 	stw	r3,144(sp)
2002ffb8:	8007883a 	mov	r3,r16
2002ffbc:	034001c4 	movi	r13,7
2002ffc0:	e021883a 	mov	r16,fp
2002ffc4:	da402515 	stw	r9,148(sp)
2002ffc8:	1839883a 	mov	fp,r3
2002ffcc:	00000506 	br	2002ffe4 <___vfiprintf_internal_r+0x580>
2002ffd0:	29800084 	addi	r6,r5,2
2002ffd4:	42000204 	addi	r8,r8,8
2002ffd8:	180b883a 	mov	r5,r3
2002ffdc:	843ffc04 	addi	r16,r16,-16
2002ffe0:	3c000d0e 	bge	r7,r16,20030018 <___vfiprintf_internal_r+0x5b4>
2002ffe4:	10800404 	addi	r2,r2,16
2002ffe8:	28c00044 	addi	r3,r5,1
2002ffec:	45c00015 	stw	r23,0(r8)
2002fff0:	41c00115 	stw	r7,4(r8)
2002fff4:	d8801c15 	stw	r2,112(sp)
2002fff8:	d8c01b15 	stw	r3,108(sp)
2002fffc:	68fff40e 	bge	r13,r3,2002ffd0 <_gp+0xffff0a70>
20030000:	1002241e 	bne	r2,zero,20030894 <___vfiprintf_internal_r+0xe30>
20030004:	843ffc04 	addi	r16,r16,-16
20030008:	01800044 	movi	r6,1
2003000c:	000b883a 	mov	r5,zero
20030010:	d811883a 	mov	r8,sp
20030014:	3c3ff316 	blt	r7,r16,2002ffe4 <_gp+0xffff0a84>
20030018:	da402517 	ldw	r9,148(sp)
2003001c:	e007883a 	mov	r3,fp
20030020:	8039883a 	mov	fp,r16
20030024:	1821883a 	mov	r16,r3
20030028:	d8c02417 	ldw	r3,144(sp)
2003002c:	1705883a 	add	r2,r2,fp
20030030:	47000115 	stw	fp,4(r8)
20030034:	40c00015 	stw	r3,0(r8)
20030038:	d8801c15 	stw	r2,112(sp)
2003003c:	d9801b15 	stw	r6,108(sp)
20030040:	00c001c4 	movi	r3,7
20030044:	19827616 	blt	r3,r6,20030a20 <___vfiprintf_internal_r+0xfbc>
20030048:	4cf9c83a 	sub	fp,r9,r19
2003004c:	42000204 	addi	r8,r8,8
20030050:	31000044 	addi	r4,r6,1
20030054:	300b883a 	mov	r5,r6
20030058:	07018516 	blt	zero,fp,20030670 <___vfiprintf_internal_r+0xc0c>
2003005c:	9885883a 	add	r2,r19,r2
20030060:	45400015 	stw	r21,0(r8)
20030064:	44c00115 	stw	r19,4(r8)
20030068:	d8801c15 	stw	r2,112(sp)
2003006c:	d9001b15 	stw	r4,108(sp)
20030070:	00c001c4 	movi	r3,7
20030074:	1901dd0e 	bge	r3,r4,200307ec <___vfiprintf_internal_r+0xd88>
20030078:	1002401e 	bne	r2,zero,2003097c <___vfiprintf_internal_r+0xf18>
2003007c:	d8001b15 	stw	zero,108(sp)
20030080:	a2c0010c 	andi	r11,r20,4
20030084:	58000226 	beq	r11,zero,20030090 <___vfiprintf_internal_r+0x62c>
20030088:	8ca7c83a 	sub	r19,r17,r18
2003008c:	04c2f216 	blt	zero,r19,20030c58 <___vfiprintf_internal_r+0x11f4>
20030090:	8c80010e 	bge	r17,r18,20030098 <___vfiprintf_internal_r+0x634>
20030094:	9023883a 	mov	r17,r18
20030098:	da802317 	ldw	r10,140(sp)
2003009c:	5455883a 	add	r10,r10,r17
200300a0:	da802315 	stw	r10,140(sp)
200300a4:	d8001b15 	stw	zero,108(sp)
200300a8:	d811883a 	mov	r8,sp
200300ac:	003ea206 	br	2002fb38 <_gp+0xffff05d8>
200300b0:	a5000814 	ori	r20,r20,32
200300b4:	80c00007 	ldb	r3,0(r16)
200300b8:	003ec906 	br	2002fbe0 <_gp+0xffff0680>
200300bc:	80c00007 	ldb	r3,0(r16)
200300c0:	1b030926 	beq	r3,r12,20030ce8 <___vfiprintf_internal_r+0x1284>
200300c4:	a5000414 	ori	r20,r20,16
200300c8:	003ec506 	br	2002fbe0 <_gp+0xffff0680>
200300cc:	21003fcc 	andi	r4,r4,255
200300d0:	20035e1e 	bne	r4,zero,20030e4c <___vfiprintf_internal_r+0x13e8>
200300d4:	a080080c 	andi	r2,r20,32
200300d8:	1002a526 	beq	r2,zero,20030b70 <___vfiprintf_internal_r+0x110c>
200300dc:	da802217 	ldw	r10,136(sp)
200300e0:	50800017 	ldw	r2,0(r10)
200300e4:	da802317 	ldw	r10,140(sp)
200300e8:	5007d7fa 	srai	r3,r10,31
200300ec:	da802217 	ldw	r10,136(sp)
200300f0:	10c00115 	stw	r3,4(r2)
200300f4:	52800104 	addi	r10,r10,4
200300f8:	da802215 	stw	r10,136(sp)
200300fc:	da802317 	ldw	r10,140(sp)
20030100:	12800015 	stw	r10,0(r2)
20030104:	003e8c06 	br	2002fb38 <_gp+0xffff05d8>
20030108:	21003fcc 	andi	r4,r4,255
2003010c:	2003511e 	bne	r4,zero,20030e54 <___vfiprintf_internal_r+0x13f0>
20030110:	a080080c 	andi	r2,r20,32
20030114:	1000a126 	beq	r2,zero,2003039c <___vfiprintf_internal_r+0x938>
20030118:	da802217 	ldw	r10,136(sp)
2003011c:	d8001d85 	stb	zero,118(sp)
20030120:	50800204 	addi	r2,r10,8
20030124:	54800017 	ldw	r18,0(r10)
20030128:	54c00117 	ldw	r19,4(r10)
2003012c:	4802b416 	blt	r9,zero,20030c00 <___vfiprintf_internal_r+0x119c>
20030130:	013fdfc4 	movi	r4,-129
20030134:	94c6b03a 	or	r3,r18,r19
20030138:	d8802215 	stw	r2,136(sp)
2003013c:	a128703a 	and	r20,r20,r4
20030140:	1800a226 	beq	r3,zero,200303cc <___vfiprintf_internal_r+0x968>
20030144:	0039883a 	mov	fp,zero
20030148:	dd401a04 	addi	r21,sp,104
2003014c:	9006d0fa 	srli	r3,r18,3
20030150:	9808977a 	slli	r4,r19,29
20030154:	9826d0fa 	srli	r19,r19,3
20030158:	948001cc 	andi	r18,r18,7
2003015c:	90800c04 	addi	r2,r18,48
20030160:	ad7fffc4 	addi	r21,r21,-1
20030164:	20e4b03a 	or	r18,r4,r3
20030168:	a8800005 	stb	r2,0(r21)
2003016c:	94c6b03a 	or	r3,r18,r19
20030170:	183ff61e 	bne	r3,zero,2003014c <_gp+0xffff0bec>
20030174:	a0c0004c 	andi	r3,r20,1
20030178:	18005926 	beq	r3,zero,200302e0 <___vfiprintf_internal_r+0x87c>
2003017c:	10803fcc 	andi	r2,r2,255
20030180:	1080201c 	xori	r2,r2,128
20030184:	10bfe004 	addi	r2,r2,-128
20030188:	00c00c04 	movi	r3,48
2003018c:	10c05426 	beq	r2,r3,200302e0 <___vfiprintf_internal_r+0x87c>
20030190:	da801e17 	ldw	r10,120(sp)
20030194:	a8bfffc4 	addi	r2,r21,-1
20030198:	a8ffffc5 	stb	r3,-1(r21)
2003019c:	50a7c83a 	sub	r19,r10,r2
200301a0:	102b883a 	mov	r21,r2
200301a4:	003f2f06 	br	2002fe64 <_gp+0xffff0904>
200301a8:	21003fcc 	andi	r4,r4,255
200301ac:	2003421e 	bne	r4,zero,20030eb8 <___vfiprintf_internal_r+0x1454>
200301b0:	008800f4 	movhi	r2,8195
200301b4:	10962d04 	addi	r2,r2,22708
200301b8:	d8802615 	stw	r2,152(sp)
200301bc:	a080080c 	andi	r2,r20,32
200301c0:	1000aa26 	beq	r2,zero,2003046c <___vfiprintf_internal_r+0xa08>
200301c4:	da802217 	ldw	r10,136(sp)
200301c8:	54800017 	ldw	r18,0(r10)
200301cc:	54c00117 	ldw	r19,4(r10)
200301d0:	52800204 	addi	r10,r10,8
200301d4:	da802215 	stw	r10,136(sp)
200301d8:	a080004c 	andi	r2,r20,1
200301dc:	1001d226 	beq	r2,zero,20030928 <___vfiprintf_internal_r+0xec4>
200301e0:	94c4b03a 	or	r2,r18,r19
200301e4:	1002351e 	bne	r2,zero,20030abc <___vfiprintf_internal_r+0x1058>
200301e8:	d8001d85 	stb	zero,118(sp)
200301ec:	48022216 	blt	r9,zero,20030a78 <___vfiprintf_internal_r+0x1014>
200301f0:	00bfdfc4 	movi	r2,-129
200301f4:	a0a8703a 	and	r20,r20,r2
200301f8:	003f1506 	br	2002fe50 <_gp+0xffff08f0>
200301fc:	da802217 	ldw	r10,136(sp)
20030200:	04800044 	movi	r18,1
20030204:	d8001d85 	stb	zero,118(sp)
20030208:	50800017 	ldw	r2,0(r10)
2003020c:	52800104 	addi	r10,r10,4
20030210:	da802215 	stw	r10,136(sp)
20030214:	d8801005 	stb	r2,64(sp)
20030218:	9027883a 	mov	r19,r18
2003021c:	dd401004 	addi	r21,sp,64
20030220:	0013883a 	mov	r9,zero
20030224:	003f1706 	br	2002fe84 <_gp+0xffff0924>
20030228:	21003fcc 	andi	r4,r4,255
2003022c:	2003201e 	bne	r4,zero,20030eb0 <___vfiprintf_internal_r+0x144c>
20030230:	a080080c 	andi	r2,r20,32
20030234:	10004b26 	beq	r2,zero,20030364 <___vfiprintf_internal_r+0x900>
20030238:	da802217 	ldw	r10,136(sp)
2003023c:	50800117 	ldw	r2,4(r10)
20030240:	54800017 	ldw	r18,0(r10)
20030244:	52800204 	addi	r10,r10,8
20030248:	da802215 	stw	r10,136(sp)
2003024c:	1027883a 	mov	r19,r2
20030250:	10022c16 	blt	r2,zero,20030b04 <___vfiprintf_internal_r+0x10a0>
20030254:	df001d83 	ldbu	fp,118(sp)
20030258:	48007216 	blt	r9,zero,20030424 <___vfiprintf_internal_r+0x9c0>
2003025c:	00ffdfc4 	movi	r3,-129
20030260:	94c4b03a 	or	r2,r18,r19
20030264:	a0e8703a 	and	r20,r20,r3
20030268:	1000cc26 	beq	r2,zero,2003059c <___vfiprintf_internal_r+0xb38>
2003026c:	98021026 	beq	r19,zero,20030ab0 <___vfiprintf_internal_r+0x104c>
20030270:	dc402415 	stw	r17,144(sp)
20030274:	dc002515 	stw	r16,148(sp)
20030278:	9823883a 	mov	r17,r19
2003027c:	9021883a 	mov	r16,r18
20030280:	dd401a04 	addi	r21,sp,104
20030284:	4825883a 	mov	r18,r9
20030288:	4027883a 	mov	r19,r8
2003028c:	8009883a 	mov	r4,r16
20030290:	880b883a 	mov	r5,r17
20030294:	01800284 	movi	r6,10
20030298:	000f883a 	mov	r7,zero
2003029c:	0031ab80 	call	20031ab8 <__umoddi3>
200302a0:	10800c04 	addi	r2,r2,48
200302a4:	ad7fffc4 	addi	r21,r21,-1
200302a8:	8009883a 	mov	r4,r16
200302ac:	880b883a 	mov	r5,r17
200302b0:	a8800005 	stb	r2,0(r21)
200302b4:	01800284 	movi	r6,10
200302b8:	000f883a 	mov	r7,zero
200302bc:	00315400 	call	20031540 <__udivdi3>
200302c0:	1021883a 	mov	r16,r2
200302c4:	10c4b03a 	or	r2,r2,r3
200302c8:	1823883a 	mov	r17,r3
200302cc:	103fef1e 	bne	r2,zero,2003028c <_gp+0xffff0d2c>
200302d0:	dc402417 	ldw	r17,144(sp)
200302d4:	dc002517 	ldw	r16,148(sp)
200302d8:	9013883a 	mov	r9,r18
200302dc:	9811883a 	mov	r8,r19
200302e0:	da801e17 	ldw	r10,120(sp)
200302e4:	5567c83a 	sub	r19,r10,r21
200302e8:	003ede06 	br	2002fe64 <_gp+0xffff0904>
200302ec:	38803fcc 	andi	r2,r7,255
200302f0:	1080201c 	xori	r2,r2,128
200302f4:	10bfe004 	addi	r2,r2,-128
200302f8:	1002371e 	bne	r2,zero,20030bd8 <___vfiprintf_internal_r+0x1174>
200302fc:	01000044 	movi	r4,1
20030300:	01c00804 	movi	r7,32
20030304:	80c00007 	ldb	r3,0(r16)
20030308:	003e3506 	br	2002fbe0 <_gp+0xffff0680>
2003030c:	a5000054 	ori	r20,r20,1
20030310:	80c00007 	ldb	r3,0(r16)
20030314:	003e3206 	br	2002fbe0 <_gp+0xffff0680>
20030318:	a5002014 	ori	r20,r20,128
2003031c:	80c00007 	ldb	r3,0(r16)
20030320:	003e2f06 	br	2002fbe0 <_gp+0xffff0680>
20030324:	8015883a 	mov	r10,r16
20030328:	0023883a 	mov	r17,zero
2003032c:	18bff404 	addi	r2,r3,-48
20030330:	50c00007 	ldb	r3,0(r10)
20030334:	8c4002a4 	muli	r17,r17,10
20030338:	84000044 	addi	r16,r16,1
2003033c:	8015883a 	mov	r10,r16
20030340:	1463883a 	add	r17,r2,r17
20030344:	18bff404 	addi	r2,r3,-48
20030348:	30bff92e 	bgeu	r6,r2,20030330 <_gp+0xffff0dd0>
2003034c:	003e2506 	br	2002fbe4 <_gp+0xffff0684>
20030350:	21003fcc 	andi	r4,r4,255
20030354:	2002d41e 	bne	r4,zero,20030ea8 <___vfiprintf_internal_r+0x1444>
20030358:	a5000414 	ori	r20,r20,16
2003035c:	a080080c 	andi	r2,r20,32
20030360:	103fb51e 	bne	r2,zero,20030238 <_gp+0xffff0cd8>
20030364:	a080040c 	andi	r2,r20,16
20030368:	1001f826 	beq	r2,zero,20030b4c <___vfiprintf_internal_r+0x10e8>
2003036c:	da802217 	ldw	r10,136(sp)
20030370:	54800017 	ldw	r18,0(r10)
20030374:	52800104 	addi	r10,r10,4
20030378:	da802215 	stw	r10,136(sp)
2003037c:	9027d7fa 	srai	r19,r18,31
20030380:	9805883a 	mov	r2,r19
20030384:	003fb206 	br	20030250 <_gp+0xffff0cf0>
20030388:	21003fcc 	andi	r4,r4,255
2003038c:	2002c41e 	bne	r4,zero,20030ea0 <___vfiprintf_internal_r+0x143c>
20030390:	a5000414 	ori	r20,r20,16
20030394:	a080080c 	andi	r2,r20,32
20030398:	103f5f1e 	bne	r2,zero,20030118 <_gp+0xffff0bb8>
2003039c:	a080040c 	andi	r2,r20,16
200303a0:	10020f26 	beq	r2,zero,20030be0 <___vfiprintf_internal_r+0x117c>
200303a4:	da802217 	ldw	r10,136(sp)
200303a8:	d8001d85 	stb	zero,118(sp)
200303ac:	0027883a 	mov	r19,zero
200303b0:	50800104 	addi	r2,r10,4
200303b4:	54800017 	ldw	r18,0(r10)
200303b8:	48021116 	blt	r9,zero,20030c00 <___vfiprintf_internal_r+0x119c>
200303bc:	00ffdfc4 	movi	r3,-129
200303c0:	d8802215 	stw	r2,136(sp)
200303c4:	a0e8703a 	and	r20,r20,r3
200303c8:	903f5e1e 	bne	r18,zero,20030144 <_gp+0xffff0be4>
200303cc:	0039883a 	mov	fp,zero
200303d0:	4802a626 	beq	r9,zero,20030e6c <___vfiprintf_internal_r+0x1408>
200303d4:	0025883a 	mov	r18,zero
200303d8:	0027883a 	mov	r19,zero
200303dc:	003f5a06 	br	20030148 <_gp+0xffff0be8>
200303e0:	21003fcc 	andi	r4,r4,255
200303e4:	20029f1e 	bne	r4,zero,20030e64 <___vfiprintf_internal_r+0x1400>
200303e8:	a5000414 	ori	r20,r20,16
200303ec:	a080080c 	andi	r2,r20,32
200303f0:	10005e1e 	bne	r2,zero,2003056c <___vfiprintf_internal_r+0xb08>
200303f4:	a080040c 	andi	r2,r20,16
200303f8:	1001a21e 	bne	r2,zero,20030a84 <___vfiprintf_internal_r+0x1020>
200303fc:	a080100c 	andi	r2,r20,64
20030400:	d8001d85 	stb	zero,118(sp)
20030404:	da802217 	ldw	r10,136(sp)
20030408:	1002231e 	bne	r2,zero,20030c98 <___vfiprintf_internal_r+0x1234>
2003040c:	50800104 	addi	r2,r10,4
20030410:	54800017 	ldw	r18,0(r10)
20030414:	0027883a 	mov	r19,zero
20030418:	4801a00e 	bge	r9,zero,20030a9c <___vfiprintf_internal_r+0x1038>
2003041c:	d8802215 	stw	r2,136(sp)
20030420:	0039883a 	mov	fp,zero
20030424:	94c4b03a 	or	r2,r18,r19
20030428:	103f901e 	bne	r2,zero,2003026c <_gp+0xffff0d0c>
2003042c:	00800044 	movi	r2,1
20030430:	10803fcc 	andi	r2,r2,255
20030434:	00c00044 	movi	r3,1
20030438:	10c05926 	beq	r2,r3,200305a0 <___vfiprintf_internal_r+0xb3c>
2003043c:	00c00084 	movi	r3,2
20030440:	10ffe41e 	bne	r2,r3,200303d4 <_gp+0xffff0e74>
20030444:	0025883a 	mov	r18,zero
20030448:	0027883a 	mov	r19,zero
2003044c:	00013d06 	br	20030944 <___vfiprintf_internal_r+0xee0>
20030450:	21003fcc 	andi	r4,r4,255
20030454:	2002811e 	bne	r4,zero,20030e5c <___vfiprintf_internal_r+0x13f8>
20030458:	008800f4 	movhi	r2,8195
2003045c:	10962804 	addi	r2,r2,22688
20030460:	d8802615 	stw	r2,152(sp)
20030464:	a080080c 	andi	r2,r20,32
20030468:	103f561e 	bne	r2,zero,200301c4 <_gp+0xffff0c64>
2003046c:	a080040c 	andi	r2,r20,16
20030470:	1001d126 	beq	r2,zero,20030bb8 <___vfiprintf_internal_r+0x1154>
20030474:	da802217 	ldw	r10,136(sp)
20030478:	0027883a 	mov	r19,zero
2003047c:	54800017 	ldw	r18,0(r10)
20030480:	52800104 	addi	r10,r10,4
20030484:	da802215 	stw	r10,136(sp)
20030488:	003f5306 	br	200301d8 <_gp+0xffff0c78>
2003048c:	da802217 	ldw	r10,136(sp)
20030490:	d8001d85 	stb	zero,118(sp)
20030494:	55400017 	ldw	r21,0(r10)
20030498:	50c00104 	addi	r3,r10,4
2003049c:	a8024226 	beq	r21,zero,20030da8 <___vfiprintf_internal_r+0x1344>
200304a0:	48021816 	blt	r9,zero,20030d04 <___vfiprintf_internal_r+0x12a0>
200304a4:	480d883a 	mov	r6,r9
200304a8:	000b883a 	mov	r5,zero
200304ac:	a809883a 	mov	r4,r21
200304b0:	d8c02a15 	stw	r3,168(sp)
200304b4:	da002b15 	stw	r8,172(sp)
200304b8:	da402c15 	stw	r9,176(sp)
200304bc:	002dc640 	call	2002dc64 <memchr>
200304c0:	d8c02a17 	ldw	r3,168(sp)
200304c4:	da002b17 	ldw	r8,172(sp)
200304c8:	da402c17 	ldw	r9,176(sp)
200304cc:	10024826 	beq	r2,zero,20030df0 <___vfiprintf_internal_r+0x138c>
200304d0:	1567c83a 	sub	r19,r2,r21
200304d4:	df001d83 	ldbu	fp,118(sp)
200304d8:	d8c02215 	stw	r3,136(sp)
200304dc:	0013883a 	mov	r9,zero
200304e0:	003e6006 	br	2002fe64 <_gp+0xffff0904>
200304e4:	21003fcc 	andi	r4,r4,255
200304e8:	203fc026 	beq	r4,zero,200303ec <_gp+0xffff0e8c>
200304ec:	d9c01d85 	stb	r7,118(sp)
200304f0:	003fbe06 	br	200303ec <_gp+0xffff0e8c>
200304f4:	da802217 	ldw	r10,136(sp)
200304f8:	54400017 	ldw	r17,0(r10)
200304fc:	50800104 	addi	r2,r10,4
20030500:	883e3b16 	blt	r17,zero,2002fdf0 <_gp+0xffff0890>
20030504:	d8802215 	stw	r2,136(sp)
20030508:	80c00007 	ldb	r3,0(r16)
2003050c:	003db406 	br	2002fbe0 <_gp+0xffff0680>
20030510:	01000044 	movi	r4,1
20030514:	01c00ac4 	movi	r7,43
20030518:	80c00007 	ldb	r3,0(r16)
2003051c:	003db006 	br	2002fbe0 <_gp+0xffff0680>
20030520:	80c00007 	ldb	r3,0(r16)
20030524:	82800044 	addi	r10,r16,1
20030528:	1b423c26 	beq	r3,r13,20030e1c <___vfiprintf_internal_r+0x13b8>
2003052c:	18bff404 	addi	r2,r3,-48
20030530:	0013883a 	mov	r9,zero
20030534:	30822b36 	bltu	r6,r2,20030de4 <___vfiprintf_internal_r+0x1380>
20030538:	50c00007 	ldb	r3,0(r10)
2003053c:	4a4002a4 	muli	r9,r9,10
20030540:	54000044 	addi	r16,r10,1
20030544:	8015883a 	mov	r10,r16
20030548:	4893883a 	add	r9,r9,r2
2003054c:	18bff404 	addi	r2,r3,-48
20030550:	30bff92e 	bgeu	r6,r2,20030538 <_gp+0xffff0fd8>
20030554:	483da30e 	bge	r9,zero,2002fbe4 <_gp+0xffff0684>
20030558:	027fffc4 	movi	r9,-1
2003055c:	003da106 	br	2002fbe4 <_gp+0xffff0684>
20030560:	a5001014 	ori	r20,r20,64
20030564:	80c00007 	ldb	r3,0(r16)
20030568:	003d9d06 	br	2002fbe0 <_gp+0xffff0680>
2003056c:	da802217 	ldw	r10,136(sp)
20030570:	d8001d85 	stb	zero,118(sp)
20030574:	50c00204 	addi	r3,r10,8
20030578:	54800017 	ldw	r18,0(r10)
2003057c:	54c00117 	ldw	r19,4(r10)
20030580:	4801ca16 	blt	r9,zero,20030cac <___vfiprintf_internal_r+0x1248>
20030584:	013fdfc4 	movi	r4,-129
20030588:	94c4b03a 	or	r2,r18,r19
2003058c:	d8c02215 	stw	r3,136(sp)
20030590:	a128703a 	and	r20,r20,r4
20030594:	0039883a 	mov	fp,zero
20030598:	103f341e 	bne	r2,zero,2003026c <_gp+0xffff0d0c>
2003059c:	483e2e26 	beq	r9,zero,2002fe58 <_gp+0xffff08f8>
200305a0:	0025883a 	mov	r18,zero
200305a4:	94800c04 	addi	r18,r18,48
200305a8:	dc8019c5 	stb	r18,103(sp)
200305ac:	dcc02717 	ldw	r19,156(sp)
200305b0:	dd4019c4 	addi	r21,sp,103
200305b4:	003e2b06 	br	2002fe64 <_gp+0xffff0904>
200305b8:	21003fcc 	andi	r4,r4,255
200305bc:	2002361e 	bne	r4,zero,20030e98 <___vfiprintf_internal_r+0x1434>
200305c0:	1801c126 	beq	r3,zero,20030cc8 <___vfiprintf_internal_r+0x1264>
200305c4:	04800044 	movi	r18,1
200305c8:	d8c01005 	stb	r3,64(sp)
200305cc:	d8001d85 	stb	zero,118(sp)
200305d0:	9027883a 	mov	r19,r18
200305d4:	dd401004 	addi	r21,sp,64
200305d8:	003f1106 	br	20030220 <_gp+0xffff0cc0>
200305dc:	d9402117 	ldw	r5,132(sp)
200305e0:	d9002017 	ldw	r4,128(sp)
200305e4:	d9801a04 	addi	r6,sp,104
200305e8:	d9c02b15 	stw	r7,172(sp)
200305ec:	dbc02a15 	stw	r15,168(sp)
200305f0:	002f9500 	call	2002f950 <__sprint_r.part.0>
200305f4:	d9c02b17 	ldw	r7,172(sp)
200305f8:	dbc02a17 	ldw	r15,168(sp)
200305fc:	10006d1e 	bne	r2,zero,200307b4 <___vfiprintf_internal_r+0xd50>
20030600:	d9801b17 	ldw	r6,108(sp)
20030604:	d8801c17 	ldw	r2,112(sp)
20030608:	d811883a 	mov	r8,sp
2003060c:	31400044 	addi	r5,r6,1
20030610:	003e3306 	br	2002fee0 <_gp+0xffff0980>
20030614:	d9401b17 	ldw	r5,108(sp)
20030618:	d8801c17 	ldw	r2,112(sp)
2003061c:	29000044 	addi	r4,r5,1
20030620:	d8c01d87 	ldb	r3,118(sp)
20030624:	183e4d26 	beq	r3,zero,2002ff5c <_gp+0xffff09fc>
20030628:	00c00044 	movi	r3,1
2003062c:	d9401d84 	addi	r5,sp,118
20030630:	10c5883a 	add	r2,r2,r3
20030634:	41400015 	stw	r5,0(r8)
20030638:	40c00115 	stw	r3,4(r8)
2003063c:	d8801c15 	stw	r2,112(sp)
20030640:	d9001b15 	stw	r4,108(sp)
20030644:	014001c4 	movi	r5,7
20030648:	2900a90e 	bge	r5,r4,200308f0 <___vfiprintf_internal_r+0xe8c>
2003064c:	1000da1e 	bne	r2,zero,200309b8 <___vfiprintf_internal_r+0xf54>
20030650:	7000ab1e 	bne	r14,zero,20030900 <___vfiprintf_internal_r+0xe9c>
20030654:	000b883a 	mov	r5,zero
20030658:	1809883a 	mov	r4,r3
2003065c:	d811883a 	mov	r8,sp
20030660:	00c02004 	movi	r3,128
20030664:	e0fe4d26 	beq	fp,r3,2002ff9c <_gp+0xffff0a3c>
20030668:	4cf9c83a 	sub	fp,r9,r19
2003066c:	073e7b0e 	bge	zero,fp,2003005c <_gp+0xffff0afc>
20030670:	01c00404 	movi	r7,16
20030674:	3f01900e 	bge	r7,fp,20030cb8 <___vfiprintf_internal_r+0x1254>
20030678:	00c800f4 	movhi	r3,8195
2003067c:	18d68d04 	addi	r3,r3,23092
20030680:	d8c02415 	stw	r3,144(sp)
20030684:	034001c4 	movi	r13,7
20030688:	00000506 	br	200306a0 <___vfiprintf_internal_r+0xc3c>
2003068c:	29000084 	addi	r4,r5,2
20030690:	42000204 	addi	r8,r8,8
20030694:	180b883a 	mov	r5,r3
20030698:	e73ffc04 	addi	fp,fp,-16
2003069c:	3f000d0e 	bge	r7,fp,200306d4 <___vfiprintf_internal_r+0xc70>
200306a0:	10800404 	addi	r2,r2,16
200306a4:	28c00044 	addi	r3,r5,1
200306a8:	45c00015 	stw	r23,0(r8)
200306ac:	41c00115 	stw	r7,4(r8)
200306b0:	d8801c15 	stw	r2,112(sp)
200306b4:	d8c01b15 	stw	r3,108(sp)
200306b8:	68fff40e 	bge	r13,r3,2003068c <_gp+0xffff112c>
200306bc:	1000101e 	bne	r2,zero,20030700 <___vfiprintf_internal_r+0xc9c>
200306c0:	e73ffc04 	addi	fp,fp,-16
200306c4:	01000044 	movi	r4,1
200306c8:	000b883a 	mov	r5,zero
200306cc:	d811883a 	mov	r8,sp
200306d0:	3f3ff316 	blt	r7,fp,200306a0 <_gp+0xffff1140>
200306d4:	da802417 	ldw	r10,144(sp)
200306d8:	1705883a 	add	r2,r2,fp
200306dc:	47000115 	stw	fp,4(r8)
200306e0:	42800015 	stw	r10,0(r8)
200306e4:	d8801c15 	stw	r2,112(sp)
200306e8:	d9001b15 	stw	r4,108(sp)
200306ec:	00c001c4 	movi	r3,7
200306f0:	19003616 	blt	r3,r4,200307cc <___vfiprintf_internal_r+0xd68>
200306f4:	42000204 	addi	r8,r8,8
200306f8:	21000044 	addi	r4,r4,1
200306fc:	003e5706 	br	2003005c <_gp+0xffff0afc>
20030700:	d9402117 	ldw	r5,132(sp)
20030704:	d9002017 	ldw	r4,128(sp)
20030708:	d9801a04 	addi	r6,sp,104
2003070c:	d9c02b15 	stw	r7,172(sp)
20030710:	db402a15 	stw	r13,168(sp)
20030714:	002f9500 	call	2002f950 <__sprint_r.part.0>
20030718:	d9c02b17 	ldw	r7,172(sp)
2003071c:	db402a17 	ldw	r13,168(sp)
20030720:	1000241e 	bne	r2,zero,200307b4 <___vfiprintf_internal_r+0xd50>
20030724:	d9401b17 	ldw	r5,108(sp)
20030728:	d8801c17 	ldw	r2,112(sp)
2003072c:	d811883a 	mov	r8,sp
20030730:	29000044 	addi	r4,r5,1
20030734:	003fd806 	br	20030698 <_gp+0xffff1138>
20030738:	d9401b17 	ldw	r5,108(sp)
2003073c:	00c800f4 	movhi	r3,8195
20030740:	18d69104 	addi	r3,r3,23108
20030744:	d8c02415 	stw	r3,144(sp)
20030748:	29400044 	addi	r5,r5,1
2003074c:	d8c02417 	ldw	r3,144(sp)
20030750:	14c5883a 	add	r2,r2,r19
20030754:	44c00115 	stw	r19,4(r8)
20030758:	40c00015 	stw	r3,0(r8)
2003075c:	d8801c15 	stw	r2,112(sp)
20030760:	d9401b15 	stw	r5,108(sp)
20030764:	00c001c4 	movi	r3,7
20030768:	1940070e 	bge	r3,r5,20030788 <___vfiprintf_internal_r+0xd24>
2003076c:	103e4826 	beq	r2,zero,20030090 <_gp+0xffff0b30>
20030770:	d9402117 	ldw	r5,132(sp)
20030774:	d9002017 	ldw	r4,128(sp)
20030778:	d9801a04 	addi	r6,sp,104
2003077c:	002f9500 	call	2002f950 <__sprint_r.part.0>
20030780:	10000c1e 	bne	r2,zero,200307b4 <___vfiprintf_internal_r+0xd50>
20030784:	d8801c17 	ldw	r2,112(sp)
20030788:	8c80010e 	bge	r17,r18,20030790 <___vfiprintf_internal_r+0xd2c>
2003078c:	9023883a 	mov	r17,r18
20030790:	da802317 	ldw	r10,140(sp)
20030794:	5455883a 	add	r10,r10,r17
20030798:	da802315 	stw	r10,140(sp)
2003079c:	103e4126 	beq	r2,zero,200300a4 <_gp+0xffff0b44>
200307a0:	d9402117 	ldw	r5,132(sp)
200307a4:	d9002017 	ldw	r4,128(sp)
200307a8:	d9801a04 	addi	r6,sp,104
200307ac:	002f9500 	call	2002f950 <__sprint_r.part.0>
200307b0:	103e3c26 	beq	r2,zero,200300a4 <_gp+0xffff0b44>
200307b4:	dd002117 	ldw	r20,132(sp)
200307b8:	a080030b 	ldhu	r2,12(r20)
200307bc:	1080100c 	andi	r2,r2,64
200307c0:	1001231e 	bne	r2,zero,20030c50 <___vfiprintf_internal_r+0x11ec>
200307c4:	d8802317 	ldw	r2,140(sp)
200307c8:	003d7b06 	br	2002fdb8 <_gp+0xffff0858>
200307cc:	1000991e 	bne	r2,zero,20030a34 <___vfiprintf_internal_r+0xfd0>
200307d0:	00c00044 	movi	r3,1
200307d4:	9805883a 	mov	r2,r19
200307d8:	dd400015 	stw	r21,0(sp)
200307dc:	dcc00115 	stw	r19,4(sp)
200307e0:	dcc01c15 	stw	r19,112(sp)
200307e4:	d8c01b15 	stw	r3,108(sp)
200307e8:	d811883a 	mov	r8,sp
200307ec:	42000204 	addi	r8,r8,8
200307f0:	a2c0010c 	andi	r11,r20,4
200307f4:	583fe426 	beq	r11,zero,20030788 <_gp+0xffff1228>
200307f8:	8ca7c83a 	sub	r19,r17,r18
200307fc:	04ffe20e 	bge	zero,r19,20030788 <_gp+0xffff1228>
20030800:	01c00404 	movi	r7,16
20030804:	3cffcc0e 	bge	r7,r19,20030738 <_gp+0xffff11d8>
20030808:	028800f4 	movhi	r10,8195
2003080c:	52969104 	addi	r10,r10,23108
20030810:	d9001b17 	ldw	r4,108(sp)
20030814:	da802415 	stw	r10,144(sp)
20030818:	382b883a 	mov	r21,r7
2003081c:	050001c4 	movi	r20,7
20030820:	df002017 	ldw	fp,128(sp)
20030824:	00000506 	br	2003083c <___vfiprintf_internal_r+0xdd8>
20030828:	21400084 	addi	r5,r4,2
2003082c:	42000204 	addi	r8,r8,8
20030830:	1809883a 	mov	r4,r3
20030834:	9cfffc04 	addi	r19,r19,-16
20030838:	acffc40e 	bge	r21,r19,2003074c <_gp+0xffff11ec>
2003083c:	10800404 	addi	r2,r2,16
20030840:	20c00044 	addi	r3,r4,1
20030844:	45800015 	stw	r22,0(r8)
20030848:	45400115 	stw	r21,4(r8)
2003084c:	d8801c15 	stw	r2,112(sp)
20030850:	d8c01b15 	stw	r3,108(sp)
20030854:	a0fff40e 	bge	r20,r3,20030828 <_gp+0xffff12c8>
20030858:	1000041e 	bne	r2,zero,2003086c <___vfiprintf_internal_r+0xe08>
2003085c:	01400044 	movi	r5,1
20030860:	0009883a 	mov	r4,zero
20030864:	d811883a 	mov	r8,sp
20030868:	003ff206 	br	20030834 <_gp+0xffff12d4>
2003086c:	d9402117 	ldw	r5,132(sp)
20030870:	d9801a04 	addi	r6,sp,104
20030874:	e009883a 	mov	r4,fp
20030878:	002f9500 	call	2002f950 <__sprint_r.part.0>
2003087c:	103fcd1e 	bne	r2,zero,200307b4 <_gp+0xffff1254>
20030880:	d9001b17 	ldw	r4,108(sp)
20030884:	d8801c17 	ldw	r2,112(sp)
20030888:	d811883a 	mov	r8,sp
2003088c:	21400044 	addi	r5,r4,1
20030890:	003fe806 	br	20030834 <_gp+0xffff12d4>
20030894:	d9402117 	ldw	r5,132(sp)
20030898:	d9002017 	ldw	r4,128(sp)
2003089c:	d9801a04 	addi	r6,sp,104
200308a0:	d9c02b15 	stw	r7,172(sp)
200308a4:	db402a15 	stw	r13,168(sp)
200308a8:	002f9500 	call	2002f950 <__sprint_r.part.0>
200308ac:	d9c02b17 	ldw	r7,172(sp)
200308b0:	db402a17 	ldw	r13,168(sp)
200308b4:	103fbf1e 	bne	r2,zero,200307b4 <_gp+0xffff1254>
200308b8:	d9401b17 	ldw	r5,108(sp)
200308bc:	d8801c17 	ldw	r2,112(sp)
200308c0:	d811883a 	mov	r8,sp
200308c4:	29800044 	addi	r6,r5,1
200308c8:	003dc406 	br	2002ffdc <_gp+0xffff0a7c>
200308cc:	1000d21e 	bne	r2,zero,20030c18 <___vfiprintf_internal_r+0x11b4>
200308d0:	d8c01d87 	ldb	r3,118(sp)
200308d4:	18009526 	beq	r3,zero,20030b2c <___vfiprintf_internal_r+0x10c8>
200308d8:	00800044 	movi	r2,1
200308dc:	d8c01d84 	addi	r3,sp,118
200308e0:	1009883a 	mov	r4,r2
200308e4:	d8c00015 	stw	r3,0(sp)
200308e8:	d8800115 	stw	r2,4(sp)
200308ec:	d811883a 	mov	r8,sp
200308f0:	200b883a 	mov	r5,r4
200308f4:	42000204 	addi	r8,r8,8
200308f8:	21000044 	addi	r4,r4,1
200308fc:	003d9706 	br	2002ff5c <_gp+0xffff09fc>
20030900:	d9001d04 	addi	r4,sp,116
20030904:	00800084 	movi	r2,2
20030908:	d9000015 	stw	r4,0(sp)
2003090c:	d8800115 	stw	r2,4(sp)
20030910:	1809883a 	mov	r4,r3
20030914:	d811883a 	mov	r8,sp
20030918:	200b883a 	mov	r5,r4
2003091c:	42000204 	addi	r8,r8,8
20030920:	21000044 	addi	r4,r4,1
20030924:	003f4e06 	br	20030660 <_gp+0xffff1100>
20030928:	d8001d85 	stb	zero,118(sp)
2003092c:	48005016 	blt	r9,zero,20030a70 <___vfiprintf_internal_r+0x100c>
20030930:	00ffdfc4 	movi	r3,-129
20030934:	94c4b03a 	or	r2,r18,r19
20030938:	a0e8703a 	and	r20,r20,r3
2003093c:	103d4426 	beq	r2,zero,2002fe50 <_gp+0xffff08f0>
20030940:	0039883a 	mov	fp,zero
20030944:	d9002617 	ldw	r4,152(sp)
20030948:	dd401a04 	addi	r21,sp,104
2003094c:	908003cc 	andi	r2,r18,15
20030950:	9806973a 	slli	r3,r19,28
20030954:	2085883a 	add	r2,r4,r2
20030958:	9024d13a 	srli	r18,r18,4
2003095c:	10800003 	ldbu	r2,0(r2)
20030960:	9826d13a 	srli	r19,r19,4
20030964:	ad7fffc4 	addi	r21,r21,-1
20030968:	1ca4b03a 	or	r18,r3,r18
2003096c:	a8800005 	stb	r2,0(r21)
20030970:	94c4b03a 	or	r2,r18,r19
20030974:	103ff51e 	bne	r2,zero,2003094c <_gp+0xffff13ec>
20030978:	003e5906 	br	200302e0 <_gp+0xffff0d80>
2003097c:	d9402117 	ldw	r5,132(sp)
20030980:	d9002017 	ldw	r4,128(sp)
20030984:	d9801a04 	addi	r6,sp,104
20030988:	002f9500 	call	2002f950 <__sprint_r.part.0>
2003098c:	103f891e 	bne	r2,zero,200307b4 <_gp+0xffff1254>
20030990:	d8801c17 	ldw	r2,112(sp)
20030994:	d811883a 	mov	r8,sp
20030998:	003f9506 	br	200307f0 <_gp+0xffff1290>
2003099c:	d9402117 	ldw	r5,132(sp)
200309a0:	d9002017 	ldw	r4,128(sp)
200309a4:	d9801a04 	addi	r6,sp,104
200309a8:	002f9500 	call	2002f950 <__sprint_r.part.0>
200309ac:	103f811e 	bne	r2,zero,200307b4 <_gp+0xffff1254>
200309b0:	d811883a 	mov	r8,sp
200309b4:	003ced06 	br	2002fd6c <_gp+0xffff080c>
200309b8:	d9402117 	ldw	r5,132(sp)
200309bc:	d9002017 	ldw	r4,128(sp)
200309c0:	d9801a04 	addi	r6,sp,104
200309c4:	da402c15 	stw	r9,176(sp)
200309c8:	db802a15 	stw	r14,168(sp)
200309cc:	002f9500 	call	2002f950 <__sprint_r.part.0>
200309d0:	da402c17 	ldw	r9,176(sp)
200309d4:	db802a17 	ldw	r14,168(sp)
200309d8:	103f761e 	bne	r2,zero,200307b4 <_gp+0xffff1254>
200309dc:	d9401b17 	ldw	r5,108(sp)
200309e0:	d8801c17 	ldw	r2,112(sp)
200309e4:	d811883a 	mov	r8,sp
200309e8:	29000044 	addi	r4,r5,1
200309ec:	003d5b06 	br	2002ff5c <_gp+0xffff09fc>
200309f0:	d9402117 	ldw	r5,132(sp)
200309f4:	d9002017 	ldw	r4,128(sp)
200309f8:	d9801a04 	addi	r6,sp,104
200309fc:	da402c15 	stw	r9,176(sp)
20030a00:	002f9500 	call	2002f950 <__sprint_r.part.0>
20030a04:	da402c17 	ldw	r9,176(sp)
20030a08:	103f6a1e 	bne	r2,zero,200307b4 <_gp+0xffff1254>
20030a0c:	d9401b17 	ldw	r5,108(sp)
20030a10:	d8801c17 	ldw	r2,112(sp)
20030a14:	d811883a 	mov	r8,sp
20030a18:	29000044 	addi	r4,r5,1
20030a1c:	003f1006 	br	20030660 <_gp+0xffff1100>
20030a20:	1000c31e 	bne	r2,zero,20030d30 <___vfiprintf_internal_r+0x12cc>
20030a24:	01000044 	movi	r4,1
20030a28:	000b883a 	mov	r5,zero
20030a2c:	d811883a 	mov	r8,sp
20030a30:	003f0d06 	br	20030668 <_gp+0xffff1108>
20030a34:	d9402117 	ldw	r5,132(sp)
20030a38:	d9002017 	ldw	r4,128(sp)
20030a3c:	d9801a04 	addi	r6,sp,104
20030a40:	002f9500 	call	2002f950 <__sprint_r.part.0>
20030a44:	103f5b1e 	bne	r2,zero,200307b4 <_gp+0xffff1254>
20030a48:	d9001b17 	ldw	r4,108(sp)
20030a4c:	d8801c17 	ldw	r2,112(sp)
20030a50:	d811883a 	mov	r8,sp
20030a54:	21000044 	addi	r4,r4,1
20030a58:	003d8006 	br	2003005c <_gp+0xffff0afc>
20030a5c:	010800f4 	movhi	r4,8195
20030a60:	21162d04 	addi	r4,r4,22708
20030a64:	d9002615 	stw	r4,152(sp)
20030a68:	d8c02215 	stw	r3,136(sp)
20030a6c:	1029883a 	mov	r20,r2
20030a70:	94c4b03a 	or	r2,r18,r19
20030a74:	103fb21e 	bne	r2,zero,20030940 <_gp+0xffff13e0>
20030a78:	0039883a 	mov	fp,zero
20030a7c:	00800084 	movi	r2,2
20030a80:	003e6b06 	br	20030430 <_gp+0xffff0ed0>
20030a84:	da802217 	ldw	r10,136(sp)
20030a88:	d8001d85 	stb	zero,118(sp)
20030a8c:	0027883a 	mov	r19,zero
20030a90:	50800104 	addi	r2,r10,4
20030a94:	54800017 	ldw	r18,0(r10)
20030a98:	483e6016 	blt	r9,zero,2003041c <_gp+0xffff0ebc>
20030a9c:	00ffdfc4 	movi	r3,-129
20030aa0:	d8802215 	stw	r2,136(sp)
20030aa4:	a0e8703a 	and	r20,r20,r3
20030aa8:	0039883a 	mov	fp,zero
20030aac:	903ebb26 	beq	r18,zero,2003059c <_gp+0xffff103c>
20030ab0:	00800244 	movi	r2,9
20030ab4:	14bdee36 	bltu	r2,r18,20030270 <_gp+0xffff0d10>
20030ab8:	003eba06 	br	200305a4 <_gp+0xffff1044>
20030abc:	00800c04 	movi	r2,48
20030ac0:	d8c01d45 	stb	r3,117(sp)
20030ac4:	d8801d05 	stb	r2,116(sp)
20030ac8:	d8001d85 	stb	zero,118(sp)
20030acc:	a0c00094 	ori	r3,r20,2
20030ad0:	4800a916 	blt	r9,zero,20030d78 <___vfiprintf_internal_r+0x1314>
20030ad4:	00bfdfc4 	movi	r2,-129
20030ad8:	a096703a 	and	r11,r20,r2
20030adc:	5d000094 	ori	r20,r11,2
20030ae0:	0039883a 	mov	fp,zero
20030ae4:	003f9706 	br	20030944 <_gp+0xffff13e4>
20030ae8:	8025883a 	mov	r18,r16
20030aec:	003c2e06 	br	2002fba8 <_gp+0xffff0648>
20030af0:	008800f4 	movhi	r2,8195
20030af4:	10962d04 	addi	r2,r2,22708
20030af8:	0039883a 	mov	fp,zero
20030afc:	d8802615 	stw	r2,152(sp)
20030b00:	003f9006 	br	20030944 <_gp+0xffff13e4>
20030b04:	04a5c83a 	sub	r18,zero,r18
20030b08:	07000b44 	movi	fp,45
20030b0c:	9004c03a 	cmpne	r2,r18,zero
20030b10:	04e7c83a 	sub	r19,zero,r19
20030b14:	df001d85 	stb	fp,118(sp)
20030b18:	98a7c83a 	sub	r19,r19,r2
20030b1c:	48009f16 	blt	r9,zero,20030d9c <___vfiprintf_internal_r+0x1338>
20030b20:	00bfdfc4 	movi	r2,-129
20030b24:	a0a8703a 	and	r20,r20,r2
20030b28:	003dd006 	br	2003026c <_gp+0xffff0d0c>
20030b2c:	70004c26 	beq	r14,zero,20030c60 <___vfiprintf_internal_r+0x11fc>
20030b30:	00800084 	movi	r2,2
20030b34:	d8c01d04 	addi	r3,sp,116
20030b38:	d8c00015 	stw	r3,0(sp)
20030b3c:	d8800115 	stw	r2,4(sp)
20030b40:	01000044 	movi	r4,1
20030b44:	d811883a 	mov	r8,sp
20030b48:	003f7306 	br	20030918 <_gp+0xffff13b8>
20030b4c:	a080100c 	andi	r2,r20,64
20030b50:	da802217 	ldw	r10,136(sp)
20030b54:	103e0626 	beq	r2,zero,20030370 <_gp+0xffff0e10>
20030b58:	5480000f 	ldh	r18,0(r10)
20030b5c:	52800104 	addi	r10,r10,4
20030b60:	da802215 	stw	r10,136(sp)
20030b64:	9027d7fa 	srai	r19,r18,31
20030b68:	9805883a 	mov	r2,r19
20030b6c:	003db806 	br	20030250 <_gp+0xffff0cf0>
20030b70:	a080040c 	andi	r2,r20,16
20030b74:	1000091e 	bne	r2,zero,20030b9c <___vfiprintf_internal_r+0x1138>
20030b78:	a2c0100c 	andi	r11,r20,64
20030b7c:	58000726 	beq	r11,zero,20030b9c <___vfiprintf_internal_r+0x1138>
20030b80:	da802217 	ldw	r10,136(sp)
20030b84:	50800017 	ldw	r2,0(r10)
20030b88:	52800104 	addi	r10,r10,4
20030b8c:	da802215 	stw	r10,136(sp)
20030b90:	da802317 	ldw	r10,140(sp)
20030b94:	1280000d 	sth	r10,0(r2)
20030b98:	003be706 	br	2002fb38 <_gp+0xffff05d8>
20030b9c:	da802217 	ldw	r10,136(sp)
20030ba0:	50800017 	ldw	r2,0(r10)
20030ba4:	52800104 	addi	r10,r10,4
20030ba8:	da802215 	stw	r10,136(sp)
20030bac:	da802317 	ldw	r10,140(sp)
20030bb0:	12800015 	stw	r10,0(r2)
20030bb4:	003be006 	br	2002fb38 <_gp+0xffff05d8>
20030bb8:	a080100c 	andi	r2,r20,64
20030bbc:	da802217 	ldw	r10,136(sp)
20030bc0:	10003026 	beq	r2,zero,20030c84 <___vfiprintf_internal_r+0x1220>
20030bc4:	5480000b 	ldhu	r18,0(r10)
20030bc8:	52800104 	addi	r10,r10,4
20030bcc:	0027883a 	mov	r19,zero
20030bd0:	da802215 	stw	r10,136(sp)
20030bd4:	003d8006 	br	200301d8 <_gp+0xffff0c78>
20030bd8:	80c00007 	ldb	r3,0(r16)
20030bdc:	003c0006 	br	2002fbe0 <_gp+0xffff0680>
20030be0:	a080100c 	andi	r2,r20,64
20030be4:	d8001d85 	stb	zero,118(sp)
20030be8:	da802217 	ldw	r10,136(sp)
20030bec:	1000201e 	bne	r2,zero,20030c70 <___vfiprintf_internal_r+0x120c>
20030bf0:	50800104 	addi	r2,r10,4
20030bf4:	54800017 	ldw	r18,0(r10)
20030bf8:	0027883a 	mov	r19,zero
20030bfc:	483def0e 	bge	r9,zero,200303bc <_gp+0xffff0e5c>
20030c00:	94c6b03a 	or	r3,r18,r19
20030c04:	d8802215 	stw	r2,136(sp)
20030c08:	183d4e1e 	bne	r3,zero,20030144 <_gp+0xffff0be4>
20030c0c:	0039883a 	mov	fp,zero
20030c10:	0005883a 	mov	r2,zero
20030c14:	003e0606 	br	20030430 <_gp+0xffff0ed0>
20030c18:	d9402117 	ldw	r5,132(sp)
20030c1c:	d9002017 	ldw	r4,128(sp)
20030c20:	d9801a04 	addi	r6,sp,104
20030c24:	da402c15 	stw	r9,176(sp)
20030c28:	db802a15 	stw	r14,168(sp)
20030c2c:	002f9500 	call	2002f950 <__sprint_r.part.0>
20030c30:	da402c17 	ldw	r9,176(sp)
20030c34:	db802a17 	ldw	r14,168(sp)
20030c38:	103ede1e 	bne	r2,zero,200307b4 <_gp+0xffff1254>
20030c3c:	d9401b17 	ldw	r5,108(sp)
20030c40:	d8801c17 	ldw	r2,112(sp)
20030c44:	d811883a 	mov	r8,sp
20030c48:	29000044 	addi	r4,r5,1
20030c4c:	003e7406 	br	20030620 <_gp+0xffff10c0>
20030c50:	00bfffc4 	movi	r2,-1
20030c54:	003c5806 	br	2002fdb8 <_gp+0xffff0858>
20030c58:	d811883a 	mov	r8,sp
20030c5c:	003ee806 	br	20030800 <_gp+0xffff12a0>
20030c60:	000b883a 	mov	r5,zero
20030c64:	01000044 	movi	r4,1
20030c68:	d811883a 	mov	r8,sp
20030c6c:	003e7c06 	br	20030660 <_gp+0xffff1100>
20030c70:	50800104 	addi	r2,r10,4
20030c74:	5480000b 	ldhu	r18,0(r10)
20030c78:	0027883a 	mov	r19,zero
20030c7c:	483dcf0e 	bge	r9,zero,200303bc <_gp+0xffff0e5c>
20030c80:	003fdf06 	br	20030c00 <_gp+0xffff16a0>
20030c84:	54800017 	ldw	r18,0(r10)
20030c88:	52800104 	addi	r10,r10,4
20030c8c:	0027883a 	mov	r19,zero
20030c90:	da802215 	stw	r10,136(sp)
20030c94:	003d5006 	br	200301d8 <_gp+0xffff0c78>
20030c98:	50800104 	addi	r2,r10,4
20030c9c:	5480000b 	ldhu	r18,0(r10)
20030ca0:	0027883a 	mov	r19,zero
20030ca4:	483f7d0e 	bge	r9,zero,20030a9c <_gp+0xffff153c>
20030ca8:	003ddc06 	br	2003041c <_gp+0xffff0ebc>
20030cac:	d8c02215 	stw	r3,136(sp)
20030cb0:	0039883a 	mov	fp,zero
20030cb4:	003ddb06 	br	20030424 <_gp+0xffff0ec4>
20030cb8:	028800f4 	movhi	r10,8195
20030cbc:	52968d04 	addi	r10,r10,23092
20030cc0:	da802415 	stw	r10,144(sp)
20030cc4:	003e8306 	br	200306d4 <_gp+0xffff1174>
20030cc8:	d8801c17 	ldw	r2,112(sp)
20030ccc:	dd002117 	ldw	r20,132(sp)
20030cd0:	103eb926 	beq	r2,zero,200307b8 <_gp+0xffff1258>
20030cd4:	d9002017 	ldw	r4,128(sp)
20030cd8:	d9801a04 	addi	r6,sp,104
20030cdc:	a00b883a 	mov	r5,r20
20030ce0:	002f9500 	call	2002f950 <__sprint_r.part.0>
20030ce4:	003eb406 	br	200307b8 <_gp+0xffff1258>
20030ce8:	80c00043 	ldbu	r3,1(r16)
20030cec:	a5000814 	ori	r20,r20,32
20030cf0:	84000044 	addi	r16,r16,1
20030cf4:	18c03fcc 	andi	r3,r3,255
20030cf8:	18c0201c 	xori	r3,r3,128
20030cfc:	18ffe004 	addi	r3,r3,-128
20030d00:	003bb706 	br	2002fbe0 <_gp+0xffff0680>
20030d04:	a809883a 	mov	r4,r21
20030d08:	d8c02a15 	stw	r3,168(sp)
20030d0c:	da002b15 	stw	r8,172(sp)
20030d10:	002f8b80 	call	2002f8b8 <strlen>
20030d14:	d8c02a17 	ldw	r3,168(sp)
20030d18:	1027883a 	mov	r19,r2
20030d1c:	df001d83 	ldbu	fp,118(sp)
20030d20:	d8c02215 	stw	r3,136(sp)
20030d24:	0013883a 	mov	r9,zero
20030d28:	da002b17 	ldw	r8,172(sp)
20030d2c:	003c4d06 	br	2002fe64 <_gp+0xffff0904>
20030d30:	d9402117 	ldw	r5,132(sp)
20030d34:	d9002017 	ldw	r4,128(sp)
20030d38:	d9801a04 	addi	r6,sp,104
20030d3c:	da402c15 	stw	r9,176(sp)
20030d40:	002f9500 	call	2002f950 <__sprint_r.part.0>
20030d44:	da402c17 	ldw	r9,176(sp)
20030d48:	103e9a1e 	bne	r2,zero,200307b4 <_gp+0xffff1254>
20030d4c:	d9401b17 	ldw	r5,108(sp)
20030d50:	d8801c17 	ldw	r2,112(sp)
20030d54:	d811883a 	mov	r8,sp
20030d58:	29000044 	addi	r4,r5,1
20030d5c:	003e4206 	br	20030668 <_gp+0xffff1108>
20030d60:	d9401b17 	ldw	r5,108(sp)
20030d64:	010800f4 	movhi	r4,8195
20030d68:	21169104 	addi	r4,r4,23108
20030d6c:	d9002415 	stw	r4,144(sp)
20030d70:	29400044 	addi	r5,r5,1
20030d74:	003c6d06 	br	2002ff2c <_gp+0xffff09cc>
20030d78:	0039883a 	mov	fp,zero
20030d7c:	00800084 	movi	r2,2
20030d80:	10803fcc 	andi	r2,r2,255
20030d84:	01000044 	movi	r4,1
20030d88:	11001e26 	beq	r2,r4,20030e04 <___vfiprintf_internal_r+0x13a0>
20030d8c:	01000084 	movi	r4,2
20030d90:	11001e1e 	bne	r2,r4,20030e0c <___vfiprintf_internal_r+0x13a8>
20030d94:	1829883a 	mov	r20,r3
20030d98:	003eea06 	br	20030944 <_gp+0xffff13e4>
20030d9c:	a007883a 	mov	r3,r20
20030da0:	00800044 	movi	r2,1
20030da4:	003ff606 	br	20030d80 <_gp+0xffff1820>
20030da8:	00800184 	movi	r2,6
20030dac:	1240012e 	bgeu	r2,r9,20030db4 <___vfiprintf_internal_r+0x1350>
20030db0:	1013883a 	mov	r9,r2
20030db4:	4827883a 	mov	r19,r9
20030db8:	4825883a 	mov	r18,r9
20030dbc:	48001516 	blt	r9,zero,20030e14 <___vfiprintf_internal_r+0x13b0>
20030dc0:	054800f4 	movhi	r21,8195
20030dc4:	d8c02215 	stw	r3,136(sp)
20030dc8:	ad563204 	addi	r21,r21,22728
20030dcc:	003d1406 	br	20030220 <_gp+0xffff0cc0>
20030dd0:	028800f4 	movhi	r10,8195
20030dd4:	52968d04 	addi	r10,r10,23092
20030dd8:	da802415 	stw	r10,144(sp)
20030ddc:	200d883a 	mov	r6,r4
20030de0:	003c9106 	br	20030028 <_gp+0xffff0ac8>
20030de4:	5021883a 	mov	r16,r10
20030de8:	0013883a 	mov	r9,zero
20030dec:	003b7d06 	br	2002fbe4 <_gp+0xffff0684>
20030df0:	4827883a 	mov	r19,r9
20030df4:	df001d83 	ldbu	fp,118(sp)
20030df8:	d8c02215 	stw	r3,136(sp)
20030dfc:	0013883a 	mov	r9,zero
20030e00:	003c1806 	br	2002fe64 <_gp+0xffff0904>
20030e04:	1829883a 	mov	r20,r3
20030e08:	003d1806 	br	2003026c <_gp+0xffff0d0c>
20030e0c:	1829883a 	mov	r20,r3
20030e10:	003ccd06 	br	20030148 <_gp+0xffff0be8>
20030e14:	0025883a 	mov	r18,zero
20030e18:	003fe906 	br	20030dc0 <_gp+0xffff1860>
20030e1c:	d8802217 	ldw	r2,136(sp)
20030e20:	80c00043 	ldbu	r3,1(r16)
20030e24:	5021883a 	mov	r16,r10
20030e28:	12400017 	ldw	r9,0(r2)
20030e2c:	10800104 	addi	r2,r2,4
20030e30:	d8802215 	stw	r2,136(sp)
20030e34:	483faf0e 	bge	r9,zero,20030cf4 <_gp+0xffff1794>
20030e38:	18c03fcc 	andi	r3,r3,255
20030e3c:	18c0201c 	xori	r3,r3,128
20030e40:	027fffc4 	movi	r9,-1
20030e44:	18ffe004 	addi	r3,r3,-128
20030e48:	003b6506 	br	2002fbe0 <_gp+0xffff0680>
20030e4c:	d9c01d85 	stb	r7,118(sp)
20030e50:	003ca006 	br	200300d4 <_gp+0xffff0b74>
20030e54:	d9c01d85 	stb	r7,118(sp)
20030e58:	003cad06 	br	20030110 <_gp+0xffff0bb0>
20030e5c:	d9c01d85 	stb	r7,118(sp)
20030e60:	003d7d06 	br	20030458 <_gp+0xffff0ef8>
20030e64:	d9c01d85 	stb	r7,118(sp)
20030e68:	003d5f06 	br	200303e8 <_gp+0xffff0e88>
20030e6c:	a080004c 	andi	r2,r20,1
20030e70:	0039883a 	mov	fp,zero
20030e74:	10000526 	beq	r2,zero,20030e8c <___vfiprintf_internal_r+0x1428>
20030e78:	00800c04 	movi	r2,48
20030e7c:	d88019c5 	stb	r2,103(sp)
20030e80:	dcc02717 	ldw	r19,156(sp)
20030e84:	dd4019c4 	addi	r21,sp,103
20030e88:	003bf606 	br	2002fe64 <_gp+0xffff0904>
20030e8c:	0027883a 	mov	r19,zero
20030e90:	dd401a04 	addi	r21,sp,104
20030e94:	003bf306 	br	2002fe64 <_gp+0xffff0904>
20030e98:	d9c01d85 	stb	r7,118(sp)
20030e9c:	003dc806 	br	200305c0 <_gp+0xffff1060>
20030ea0:	d9c01d85 	stb	r7,118(sp)
20030ea4:	003d3a06 	br	20030390 <_gp+0xffff0e30>
20030ea8:	d9c01d85 	stb	r7,118(sp)
20030eac:	003d2a06 	br	20030358 <_gp+0xffff0df8>
20030eb0:	d9c01d85 	stb	r7,118(sp)
20030eb4:	003cde06 	br	20030230 <_gp+0xffff0cd0>
20030eb8:	d9c01d85 	stb	r7,118(sp)
20030ebc:	003cbc06 	br	200301b0 <_gp+0xffff0c50>

20030ec0 <__vfiprintf_internal>:
20030ec0:	008800f4 	movhi	r2,8195
20030ec4:	109d5a04 	addi	r2,r2,30056
20030ec8:	300f883a 	mov	r7,r6
20030ecc:	280d883a 	mov	r6,r5
20030ed0:	200b883a 	mov	r5,r4
20030ed4:	11000017 	ldw	r4,0(r2)
20030ed8:	002fa641 	jmpi	2002fa64 <___vfiprintf_internal_r>

20030edc <__sbprintf>:
20030edc:	2880030b 	ldhu	r2,12(r5)
20030ee0:	2ac01917 	ldw	r11,100(r5)
20030ee4:	2a80038b 	ldhu	r10,14(r5)
20030ee8:	2a400717 	ldw	r9,28(r5)
20030eec:	2a000917 	ldw	r8,36(r5)
20030ef0:	defee204 	addi	sp,sp,-1144
20030ef4:	00c10004 	movi	r3,1024
20030ef8:	dc011a15 	stw	r16,1128(sp)
20030efc:	10bfff4c 	andi	r2,r2,65533
20030f00:	2821883a 	mov	r16,r5
20030f04:	d8cb883a 	add	r5,sp,r3
20030f08:	dc811c15 	stw	r18,1136(sp)
20030f0c:	dc411b15 	stw	r17,1132(sp)
20030f10:	dfc11d15 	stw	ra,1140(sp)
20030f14:	2025883a 	mov	r18,r4
20030f18:	d881030d 	sth	r2,1036(sp)
20030f1c:	dac11915 	stw	r11,1124(sp)
20030f20:	da81038d 	sth	r10,1038(sp)
20030f24:	da410715 	stw	r9,1052(sp)
20030f28:	da010915 	stw	r8,1060(sp)
20030f2c:	dec10015 	stw	sp,1024(sp)
20030f30:	dec10415 	stw	sp,1040(sp)
20030f34:	d8c10215 	stw	r3,1032(sp)
20030f38:	d8c10515 	stw	r3,1044(sp)
20030f3c:	d8010615 	stw	zero,1048(sp)
20030f40:	002fa640 	call	2002fa64 <___vfiprintf_internal_r>
20030f44:	1023883a 	mov	r17,r2
20030f48:	10000416 	blt	r2,zero,20030f5c <__sbprintf+0x80>
20030f4c:	d9410004 	addi	r5,sp,1024
20030f50:	9009883a 	mov	r4,r18
20030f54:	00272dc0 	call	200272dc <_fflush_r>
20030f58:	10000d1e 	bne	r2,zero,20030f90 <__sbprintf+0xb4>
20030f5c:	d881030b 	ldhu	r2,1036(sp)
20030f60:	1080100c 	andi	r2,r2,64
20030f64:	10000326 	beq	r2,zero,20030f74 <__sbprintf+0x98>
20030f68:	8080030b 	ldhu	r2,12(r16)
20030f6c:	10801014 	ori	r2,r2,64
20030f70:	8080030d 	sth	r2,12(r16)
20030f74:	8805883a 	mov	r2,r17
20030f78:	dfc11d17 	ldw	ra,1140(sp)
20030f7c:	dc811c17 	ldw	r18,1136(sp)
20030f80:	dc411b17 	ldw	r17,1132(sp)
20030f84:	dc011a17 	ldw	r16,1128(sp)
20030f88:	dec11e04 	addi	sp,sp,1144
20030f8c:	f800283a 	ret
20030f90:	047fffc4 	movi	r17,-1
20030f94:	003ff106 	br	20030f5c <_gp+0xffff19fc>

20030f98 <__fputwc>:
20030f98:	defff804 	addi	sp,sp,-32
20030f9c:	dcc00415 	stw	r19,16(sp)
20030fa0:	dc800315 	stw	r18,12(sp)
20030fa4:	dc000115 	stw	r16,4(sp)
20030fa8:	dfc00715 	stw	ra,28(sp)
20030fac:	dd400615 	stw	r21,24(sp)
20030fb0:	dd000515 	stw	r20,20(sp)
20030fb4:	dc400215 	stw	r17,8(sp)
20030fb8:	2027883a 	mov	r19,r4
20030fbc:	2825883a 	mov	r18,r5
20030fc0:	3021883a 	mov	r16,r6
20030fc4:	002dbb00 	call	2002dbb0 <__locale_mb_cur_max>
20030fc8:	00c00044 	movi	r3,1
20030fcc:	10c03e26 	beq	r2,r3,200310c8 <__fputwc+0x130>
20030fd0:	81c01704 	addi	r7,r16,92
20030fd4:	900d883a 	mov	r6,r18
20030fd8:	d80b883a 	mov	r5,sp
20030fdc:	9809883a 	mov	r4,r19
20030fe0:	00312f80 	call	200312f8 <_wcrtomb_r>
20030fe4:	1029883a 	mov	r20,r2
20030fe8:	00bfffc4 	movi	r2,-1
20030fec:	a0802026 	beq	r20,r2,20031070 <__fputwc+0xd8>
20030ff0:	d9400003 	ldbu	r5,0(sp)
20030ff4:	a0001c26 	beq	r20,zero,20031068 <__fputwc+0xd0>
20030ff8:	0023883a 	mov	r17,zero
20030ffc:	05400284 	movi	r21,10
20031000:	00000906 	br	20031028 <__fputwc+0x90>
20031004:	80800017 	ldw	r2,0(r16)
20031008:	11400005 	stb	r5,0(r2)
2003100c:	80c00017 	ldw	r3,0(r16)
20031010:	18c00044 	addi	r3,r3,1
20031014:	80c00015 	stw	r3,0(r16)
20031018:	8c400044 	addi	r17,r17,1
2003101c:	dc45883a 	add	r2,sp,r17
20031020:	8d00112e 	bgeu	r17,r20,20031068 <__fputwc+0xd0>
20031024:	11400003 	ldbu	r5,0(r2)
20031028:	80c00217 	ldw	r3,8(r16)
2003102c:	18ffffc4 	addi	r3,r3,-1
20031030:	80c00215 	stw	r3,8(r16)
20031034:	183ff30e 	bge	r3,zero,20031004 <_gp+0xffff1aa4>
20031038:	80800617 	ldw	r2,24(r16)
2003103c:	18801916 	blt	r3,r2,200310a4 <__fputwc+0x10c>
20031040:	80800017 	ldw	r2,0(r16)
20031044:	11400005 	stb	r5,0(r2)
20031048:	80800017 	ldw	r2,0(r16)
2003104c:	10c00003 	ldbu	r3,0(r2)
20031050:	10800044 	addi	r2,r2,1
20031054:	1d402326 	beq	r3,r21,200310e4 <__fputwc+0x14c>
20031058:	80800015 	stw	r2,0(r16)
2003105c:	8c400044 	addi	r17,r17,1
20031060:	dc45883a 	add	r2,sp,r17
20031064:	8d3fef36 	bltu	r17,r20,20031024 <_gp+0xffff1ac4>
20031068:	9005883a 	mov	r2,r18
2003106c:	00000406 	br	20031080 <__fputwc+0xe8>
20031070:	80c0030b 	ldhu	r3,12(r16)
20031074:	a005883a 	mov	r2,r20
20031078:	18c01014 	ori	r3,r3,64
2003107c:	80c0030d 	sth	r3,12(r16)
20031080:	dfc00717 	ldw	ra,28(sp)
20031084:	dd400617 	ldw	r21,24(sp)
20031088:	dd000517 	ldw	r20,20(sp)
2003108c:	dcc00417 	ldw	r19,16(sp)
20031090:	dc800317 	ldw	r18,12(sp)
20031094:	dc400217 	ldw	r17,8(sp)
20031098:	dc000117 	ldw	r16,4(sp)
2003109c:	dec00804 	addi	sp,sp,32
200310a0:	f800283a 	ret
200310a4:	800d883a 	mov	r6,r16
200310a8:	29403fcc 	andi	r5,r5,255
200310ac:	9809883a 	mov	r4,r19
200310b0:	00311a00 	call	200311a0 <__swbuf_r>
200310b4:	10bfffe0 	cmpeqi	r2,r2,-1
200310b8:	10803fcc 	andi	r2,r2,255
200310bc:	103fd626 	beq	r2,zero,20031018 <_gp+0xffff1ab8>
200310c0:	00bfffc4 	movi	r2,-1
200310c4:	003fee06 	br	20031080 <_gp+0xffff1b20>
200310c8:	90ffffc4 	addi	r3,r18,-1
200310cc:	01003f84 	movi	r4,254
200310d0:	20ffbf36 	bltu	r4,r3,20030fd0 <_gp+0xffff1a70>
200310d4:	900b883a 	mov	r5,r18
200310d8:	dc800005 	stb	r18,0(sp)
200310dc:	1029883a 	mov	r20,r2
200310e0:	003fc506 	br	20030ff8 <_gp+0xffff1a98>
200310e4:	800d883a 	mov	r6,r16
200310e8:	a80b883a 	mov	r5,r21
200310ec:	9809883a 	mov	r4,r19
200310f0:	00311a00 	call	200311a0 <__swbuf_r>
200310f4:	10bfffe0 	cmpeqi	r2,r2,-1
200310f8:	003fef06 	br	200310b8 <_gp+0xffff1b58>

200310fc <_fputwc_r>:
200310fc:	3080030b 	ldhu	r2,12(r6)
20031100:	10c8000c 	andi	r3,r2,8192
20031104:	1800051e 	bne	r3,zero,2003111c <_fputwc_r+0x20>
20031108:	30c01917 	ldw	r3,100(r6)
2003110c:	10880014 	ori	r2,r2,8192
20031110:	3080030d 	sth	r2,12(r6)
20031114:	18880014 	ori	r2,r3,8192
20031118:	30801915 	stw	r2,100(r6)
2003111c:	0030f981 	jmpi	20030f98 <__fputwc>

20031120 <fputwc>:
20031120:	008800f4 	movhi	r2,8195
20031124:	defffc04 	addi	sp,sp,-16
20031128:	109d5a04 	addi	r2,r2,30056
2003112c:	dc000115 	stw	r16,4(sp)
20031130:	14000017 	ldw	r16,0(r2)
20031134:	dc400215 	stw	r17,8(sp)
20031138:	dfc00315 	stw	ra,12(sp)
2003113c:	2023883a 	mov	r17,r4
20031140:	80000226 	beq	r16,zero,2003114c <fputwc+0x2c>
20031144:	80800e17 	ldw	r2,56(r16)
20031148:	10001026 	beq	r2,zero,2003118c <fputwc+0x6c>
2003114c:	2880030b 	ldhu	r2,12(r5)
20031150:	10c8000c 	andi	r3,r2,8192
20031154:	1800051e 	bne	r3,zero,2003116c <fputwc+0x4c>
20031158:	28c01917 	ldw	r3,100(r5)
2003115c:	10880014 	ori	r2,r2,8192
20031160:	2880030d 	sth	r2,12(r5)
20031164:	18880014 	ori	r2,r3,8192
20031168:	28801915 	stw	r2,100(r5)
2003116c:	280d883a 	mov	r6,r5
20031170:	8009883a 	mov	r4,r16
20031174:	880b883a 	mov	r5,r17
20031178:	dfc00317 	ldw	ra,12(sp)
2003117c:	dc400217 	ldw	r17,8(sp)
20031180:	dc000117 	ldw	r16,4(sp)
20031184:	dec00404 	addi	sp,sp,16
20031188:	0030f981 	jmpi	20030f98 <__fputwc>
2003118c:	8009883a 	mov	r4,r16
20031190:	d9400015 	stw	r5,0(sp)
20031194:	00276b80 	call	200276b8 <__sinit>
20031198:	d9400017 	ldw	r5,0(sp)
2003119c:	003feb06 	br	2003114c <_gp+0xffff1bec>

200311a0 <__swbuf_r>:
200311a0:	defffb04 	addi	sp,sp,-20
200311a4:	dcc00315 	stw	r19,12(sp)
200311a8:	dc800215 	stw	r18,8(sp)
200311ac:	dc000015 	stw	r16,0(sp)
200311b0:	dfc00415 	stw	ra,16(sp)
200311b4:	dc400115 	stw	r17,4(sp)
200311b8:	2025883a 	mov	r18,r4
200311bc:	2827883a 	mov	r19,r5
200311c0:	3021883a 	mov	r16,r6
200311c4:	20000226 	beq	r4,zero,200311d0 <__swbuf_r+0x30>
200311c8:	20800e17 	ldw	r2,56(r4)
200311cc:	10004226 	beq	r2,zero,200312d8 <__swbuf_r+0x138>
200311d0:	80800617 	ldw	r2,24(r16)
200311d4:	8100030b 	ldhu	r4,12(r16)
200311d8:	80800215 	stw	r2,8(r16)
200311dc:	2080020c 	andi	r2,r4,8
200311e0:	10003626 	beq	r2,zero,200312bc <__swbuf_r+0x11c>
200311e4:	80c00417 	ldw	r3,16(r16)
200311e8:	18003426 	beq	r3,zero,200312bc <__swbuf_r+0x11c>
200311ec:	2088000c 	andi	r2,r4,8192
200311f0:	9c403fcc 	andi	r17,r19,255
200311f4:	10001a26 	beq	r2,zero,20031260 <__swbuf_r+0xc0>
200311f8:	80800017 	ldw	r2,0(r16)
200311fc:	81000517 	ldw	r4,20(r16)
20031200:	10c7c83a 	sub	r3,r2,r3
20031204:	1900200e 	bge	r3,r4,20031288 <__swbuf_r+0xe8>
20031208:	18c00044 	addi	r3,r3,1
2003120c:	81000217 	ldw	r4,8(r16)
20031210:	11400044 	addi	r5,r2,1
20031214:	81400015 	stw	r5,0(r16)
20031218:	213fffc4 	addi	r4,r4,-1
2003121c:	81000215 	stw	r4,8(r16)
20031220:	14c00005 	stb	r19,0(r2)
20031224:	80800517 	ldw	r2,20(r16)
20031228:	10c01e26 	beq	r2,r3,200312a4 <__swbuf_r+0x104>
2003122c:	8080030b 	ldhu	r2,12(r16)
20031230:	1080004c 	andi	r2,r2,1
20031234:	10000226 	beq	r2,zero,20031240 <__swbuf_r+0xa0>
20031238:	00800284 	movi	r2,10
2003123c:	88801926 	beq	r17,r2,200312a4 <__swbuf_r+0x104>
20031240:	8805883a 	mov	r2,r17
20031244:	dfc00417 	ldw	ra,16(sp)
20031248:	dcc00317 	ldw	r19,12(sp)
2003124c:	dc800217 	ldw	r18,8(sp)
20031250:	dc400117 	ldw	r17,4(sp)
20031254:	dc000017 	ldw	r16,0(sp)
20031258:	dec00504 	addi	sp,sp,20
2003125c:	f800283a 	ret
20031260:	81401917 	ldw	r5,100(r16)
20031264:	00b7ffc4 	movi	r2,-8193
20031268:	21080014 	ori	r4,r4,8192
2003126c:	2884703a 	and	r2,r5,r2
20031270:	80801915 	stw	r2,100(r16)
20031274:	80800017 	ldw	r2,0(r16)
20031278:	8100030d 	sth	r4,12(r16)
2003127c:	81000517 	ldw	r4,20(r16)
20031280:	10c7c83a 	sub	r3,r2,r3
20031284:	193fe016 	blt	r3,r4,20031208 <_gp+0xffff1ca8>
20031288:	800b883a 	mov	r5,r16
2003128c:	9009883a 	mov	r4,r18
20031290:	00272dc0 	call	200272dc <_fflush_r>
20031294:	1000071e 	bne	r2,zero,200312b4 <__swbuf_r+0x114>
20031298:	80800017 	ldw	r2,0(r16)
2003129c:	00c00044 	movi	r3,1
200312a0:	003fda06 	br	2003120c <_gp+0xffff1cac>
200312a4:	800b883a 	mov	r5,r16
200312a8:	9009883a 	mov	r4,r18
200312ac:	00272dc0 	call	200272dc <_fflush_r>
200312b0:	103fe326 	beq	r2,zero,20031240 <_gp+0xffff1ce0>
200312b4:	00bfffc4 	movi	r2,-1
200312b8:	003fe206 	br	20031244 <_gp+0xffff1ce4>
200312bc:	800b883a 	mov	r5,r16
200312c0:	9009883a 	mov	r4,r18
200312c4:	002bb240 	call	2002bb24 <__swsetup_r>
200312c8:	103ffa1e 	bne	r2,zero,200312b4 <_gp+0xffff1d54>
200312cc:	8100030b 	ldhu	r4,12(r16)
200312d0:	80c00417 	ldw	r3,16(r16)
200312d4:	003fc506 	br	200311ec <_gp+0xffff1c8c>
200312d8:	00276b80 	call	200276b8 <__sinit>
200312dc:	003fbc06 	br	200311d0 <_gp+0xffff1c70>

200312e0 <__swbuf>:
200312e0:	008800f4 	movhi	r2,8195
200312e4:	109d5a04 	addi	r2,r2,30056
200312e8:	280d883a 	mov	r6,r5
200312ec:	200b883a 	mov	r5,r4
200312f0:	11000017 	ldw	r4,0(r2)
200312f4:	00311a01 	jmpi	200311a0 <__swbuf_r>

200312f8 <_wcrtomb_r>:
200312f8:	defff604 	addi	sp,sp,-40
200312fc:	008800f4 	movhi	r2,8195
20031300:	dc800815 	stw	r18,32(sp)
20031304:	dc400715 	stw	r17,28(sp)
20031308:	dc000615 	stw	r16,24(sp)
2003130c:	109d5e04 	addi	r2,r2,30072
20031310:	dfc00915 	stw	ra,36(sp)
20031314:	2021883a 	mov	r16,r4
20031318:	3823883a 	mov	r17,r7
2003131c:	14800017 	ldw	r18,0(r2)
20031320:	28001426 	beq	r5,zero,20031374 <_wcrtomb_r+0x7c>
20031324:	d9400415 	stw	r5,16(sp)
20031328:	d9800515 	stw	r6,20(sp)
2003132c:	002dba40 	call	2002dba4 <__locale_charset>
20031330:	d9800517 	ldw	r6,20(sp)
20031334:	d9400417 	ldw	r5,16(sp)
20031338:	100f883a 	mov	r7,r2
2003133c:	dc400015 	stw	r17,0(sp)
20031340:	8009883a 	mov	r4,r16
20031344:	903ee83a 	callr	r18
20031348:	00ffffc4 	movi	r3,-1
2003134c:	10c0031e 	bne	r2,r3,2003135c <_wcrtomb_r+0x64>
20031350:	88000015 	stw	zero,0(r17)
20031354:	00c02284 	movi	r3,138
20031358:	80c00015 	stw	r3,0(r16)
2003135c:	dfc00917 	ldw	ra,36(sp)
20031360:	dc800817 	ldw	r18,32(sp)
20031364:	dc400717 	ldw	r17,28(sp)
20031368:	dc000617 	ldw	r16,24(sp)
2003136c:	dec00a04 	addi	sp,sp,40
20031370:	f800283a 	ret
20031374:	002dba40 	call	2002dba4 <__locale_charset>
20031378:	100f883a 	mov	r7,r2
2003137c:	dc400015 	stw	r17,0(sp)
20031380:	000d883a 	mov	r6,zero
20031384:	d9400104 	addi	r5,sp,4
20031388:	8009883a 	mov	r4,r16
2003138c:	903ee83a 	callr	r18
20031390:	003fed06 	br	20031348 <_gp+0xffff1de8>

20031394 <wcrtomb>:
20031394:	defff604 	addi	sp,sp,-40
20031398:	008800f4 	movhi	r2,8195
2003139c:	dc800615 	stw	r18,24(sp)
200313a0:	dc400515 	stw	r17,20(sp)
200313a4:	109d5a04 	addi	r2,r2,30056
200313a8:	dfc00915 	stw	ra,36(sp)
200313ac:	dd000815 	stw	r20,32(sp)
200313b0:	dcc00715 	stw	r19,28(sp)
200313b4:	dc000415 	stw	r16,16(sp)
200313b8:	3025883a 	mov	r18,r6
200313bc:	14400017 	ldw	r17,0(r2)
200313c0:	20001926 	beq	r4,zero,20031428 <wcrtomb+0x94>
200313c4:	008800f4 	movhi	r2,8195
200313c8:	109d5e04 	addi	r2,r2,30072
200313cc:	15000017 	ldw	r20,0(r2)
200313d0:	2021883a 	mov	r16,r4
200313d4:	2827883a 	mov	r19,r5
200313d8:	002dba40 	call	2002dba4 <__locale_charset>
200313dc:	100f883a 	mov	r7,r2
200313e0:	dc800015 	stw	r18,0(sp)
200313e4:	980d883a 	mov	r6,r19
200313e8:	800b883a 	mov	r5,r16
200313ec:	8809883a 	mov	r4,r17
200313f0:	a03ee83a 	callr	r20
200313f4:	00ffffc4 	movi	r3,-1
200313f8:	10c0031e 	bne	r2,r3,20031408 <wcrtomb+0x74>
200313fc:	90000015 	stw	zero,0(r18)
20031400:	00c02284 	movi	r3,138
20031404:	88c00015 	stw	r3,0(r17)
20031408:	dfc00917 	ldw	ra,36(sp)
2003140c:	dd000817 	ldw	r20,32(sp)
20031410:	dcc00717 	ldw	r19,28(sp)
20031414:	dc800617 	ldw	r18,24(sp)
20031418:	dc400517 	ldw	r17,20(sp)
2003141c:	dc000417 	ldw	r16,16(sp)
20031420:	dec00a04 	addi	sp,sp,40
20031424:	f800283a 	ret
20031428:	008800f4 	movhi	r2,8195
2003142c:	109d5e04 	addi	r2,r2,30072
20031430:	14000017 	ldw	r16,0(r2)
20031434:	002dba40 	call	2002dba4 <__locale_charset>
20031438:	100f883a 	mov	r7,r2
2003143c:	dc800015 	stw	r18,0(sp)
20031440:	000d883a 	mov	r6,zero
20031444:	d9400104 	addi	r5,sp,4
20031448:	8809883a 	mov	r4,r17
2003144c:	803ee83a 	callr	r16
20031450:	003fe806 	br	200313f4 <_gp+0xffff1e94>

20031454 <__ascii_wctomb>:
20031454:	28000526 	beq	r5,zero,2003146c <__ascii_wctomb+0x18>
20031458:	00803fc4 	movi	r2,255
2003145c:	11800536 	bltu	r2,r6,20031474 <__ascii_wctomb+0x20>
20031460:	29800005 	stb	r6,0(r5)
20031464:	00800044 	movi	r2,1
20031468:	f800283a 	ret
2003146c:	0005883a 	mov	r2,zero
20031470:	f800283a 	ret
20031474:	00802284 	movi	r2,138
20031478:	20800015 	stw	r2,0(r4)
2003147c:	00bfffc4 	movi	r2,-1
20031480:	f800283a 	ret

20031484 <_wctomb_r>:
20031484:	008800f4 	movhi	r2,8195
20031488:	defff904 	addi	sp,sp,-28
2003148c:	109d5e04 	addi	r2,r2,30072
20031490:	dfc00615 	stw	ra,24(sp)
20031494:	dc400515 	stw	r17,20(sp)
20031498:	dc000415 	stw	r16,16(sp)
2003149c:	3823883a 	mov	r17,r7
200314a0:	14000017 	ldw	r16,0(r2)
200314a4:	d9000115 	stw	r4,4(sp)
200314a8:	d9400215 	stw	r5,8(sp)
200314ac:	d9800315 	stw	r6,12(sp)
200314b0:	002dba40 	call	2002dba4 <__locale_charset>
200314b4:	d9800317 	ldw	r6,12(sp)
200314b8:	d9400217 	ldw	r5,8(sp)
200314bc:	d9000117 	ldw	r4,4(sp)
200314c0:	100f883a 	mov	r7,r2
200314c4:	dc400015 	stw	r17,0(sp)
200314c8:	803ee83a 	callr	r16
200314cc:	dfc00617 	ldw	ra,24(sp)
200314d0:	dc400517 	ldw	r17,20(sp)
200314d4:	dc000417 	ldw	r16,16(sp)
200314d8:	dec00704 	addi	sp,sp,28
200314dc:	f800283a 	ret

200314e0 <__muldi3>:
200314e0:	223fffcc 	andi	r8,r4,65535
200314e4:	2006d43a 	srli	r3,r4,16
200314e8:	32bfffcc 	andi	r10,r6,65535
200314ec:	3012d43a 	srli	r9,r6,16
200314f0:	4297383a 	mul	r11,r8,r10
200314f4:	1a95383a 	mul	r10,r3,r10
200314f8:	4251383a 	mul	r8,r8,r9
200314fc:	5804d43a 	srli	r2,r11,16
20031500:	4291883a 	add	r8,r8,r10
20031504:	1205883a 	add	r2,r2,r8
20031508:	1a51383a 	mul	r8,r3,r9
2003150c:	1280022e 	bgeu	r2,r10,20031518 <__muldi3+0x38>
20031510:	00c00074 	movhi	r3,1
20031514:	40d1883a 	add	r8,r8,r3
20031518:	1006d43a 	srli	r3,r2,16
2003151c:	21cf383a 	mul	r7,r4,r7
20031520:	314b383a 	mul	r5,r6,r5
20031524:	1004943a 	slli	r2,r2,16
20031528:	1a11883a 	add	r8,r3,r8
2003152c:	5affffcc 	andi	r11,r11,65535
20031530:	3947883a 	add	r3,r7,r5
20031534:	12c5883a 	add	r2,r2,r11
20031538:	1a07883a 	add	r3,r3,r8
2003153c:	f800283a 	ret

20031540 <__udivdi3>:
20031540:	defff504 	addi	sp,sp,-44
20031544:	dcc00415 	stw	r19,16(sp)
20031548:	dc000115 	stw	r16,4(sp)
2003154c:	dfc00a15 	stw	ra,40(sp)
20031550:	df000915 	stw	fp,36(sp)
20031554:	ddc00815 	stw	r23,32(sp)
20031558:	dd800715 	stw	r22,28(sp)
2003155c:	dd400615 	stw	r21,24(sp)
20031560:	dd000515 	stw	r20,20(sp)
20031564:	dc800315 	stw	r18,12(sp)
20031568:	dc400215 	stw	r17,8(sp)
2003156c:	2027883a 	mov	r19,r4
20031570:	2821883a 	mov	r16,r5
20031574:	3800411e 	bne	r7,zero,2003167c <__udivdi3+0x13c>
20031578:	3023883a 	mov	r17,r6
2003157c:	2025883a 	mov	r18,r4
20031580:	2980522e 	bgeu	r5,r6,200316cc <__udivdi3+0x18c>
20031584:	00bfffd4 	movui	r2,65535
20031588:	282d883a 	mov	r22,r5
2003158c:	1180a836 	bltu	r2,r6,20031830 <__udivdi3+0x2f0>
20031590:	00803fc4 	movi	r2,255
20031594:	1185803a 	cmpltu	r2,r2,r6
20031598:	100490fa 	slli	r2,r2,3
2003159c:	3086d83a 	srl	r3,r6,r2
200315a0:	010800f4 	movhi	r4,8195
200315a4:	2115d304 	addi	r4,r4,22348
200315a8:	20c7883a 	add	r3,r4,r3
200315ac:	18c00003 	ldbu	r3,0(r3)
200315b0:	1885883a 	add	r2,r3,r2
200315b4:	00c00804 	movi	r3,32
200315b8:	1887c83a 	sub	r3,r3,r2
200315bc:	18000526 	beq	r3,zero,200315d4 <__udivdi3+0x94>
200315c0:	80e0983a 	sll	r16,r16,r3
200315c4:	9884d83a 	srl	r2,r19,r2
200315c8:	30e2983a 	sll	r17,r6,r3
200315cc:	98e4983a 	sll	r18,r19,r3
200315d0:	142cb03a 	or	r22,r2,r16
200315d4:	882ad43a 	srli	r21,r17,16
200315d8:	b009883a 	mov	r4,r22
200315dc:	8d3fffcc 	andi	r20,r17,65535
200315e0:	a80b883a 	mov	r5,r21
200315e4:	00248c40 	call	200248c4 <__umodsi3>
200315e8:	b009883a 	mov	r4,r22
200315ec:	a80b883a 	mov	r5,r21
200315f0:	1027883a 	mov	r19,r2
200315f4:	00248600 	call	20024860 <__udivsi3>
200315f8:	102d883a 	mov	r22,r2
200315fc:	9826943a 	slli	r19,r19,16
20031600:	9004d43a 	srli	r2,r18,16
20031604:	a5a1383a 	mul	r16,r20,r22
20031608:	14c4b03a 	or	r2,r2,r19
2003160c:	1400052e 	bgeu	r2,r16,20031624 <__udivdi3+0xe4>
20031610:	1445883a 	add	r2,r2,r17
20031614:	b0ffffc4 	addi	r3,r22,-1
20031618:	14400136 	bltu	r2,r17,20031620 <__udivdi3+0xe0>
2003161c:	14012336 	bltu	r2,r16,20031aac <__udivdi3+0x56c>
20031620:	182d883a 	mov	r22,r3
20031624:	1421c83a 	sub	r16,r2,r16
20031628:	a80b883a 	mov	r5,r21
2003162c:	8009883a 	mov	r4,r16
20031630:	00248c40 	call	200248c4 <__umodsi3>
20031634:	1027883a 	mov	r19,r2
20031638:	a80b883a 	mov	r5,r21
2003163c:	8009883a 	mov	r4,r16
20031640:	00248600 	call	20024860 <__udivsi3>
20031644:	9826943a 	slli	r19,r19,16
20031648:	a0a9383a 	mul	r20,r20,r2
2003164c:	94bfffcc 	andi	r18,r18,65535
20031650:	94e4b03a 	or	r18,r18,r19
20031654:	9500052e 	bgeu	r18,r20,2003166c <__udivdi3+0x12c>
20031658:	8ca5883a 	add	r18,r17,r18
2003165c:	10ffffc4 	addi	r3,r2,-1
20031660:	9440f136 	bltu	r18,r17,20031a28 <__udivdi3+0x4e8>
20031664:	9500f02e 	bgeu	r18,r20,20031a28 <__udivdi3+0x4e8>
20031668:	10bfff84 	addi	r2,r2,-2
2003166c:	b00c943a 	slli	r6,r22,16
20031670:	0007883a 	mov	r3,zero
20031674:	3084b03a 	or	r2,r6,r2
20031678:	00005906 	br	200317e0 <__udivdi3+0x2a0>
2003167c:	29c05636 	bltu	r5,r7,200317d8 <__udivdi3+0x298>
20031680:	00bfffd4 	movui	r2,65535
20031684:	11c0622e 	bgeu	r2,r7,20031810 <__udivdi3+0x2d0>
20031688:	00804034 	movhi	r2,256
2003168c:	10bfffc4 	addi	r2,r2,-1
20031690:	11c0ee36 	bltu	r2,r7,20031a4c <__udivdi3+0x50c>
20031694:	00800404 	movi	r2,16
20031698:	3886d83a 	srl	r3,r7,r2
2003169c:	010800f4 	movhi	r4,8195
200316a0:	2115d304 	addi	r4,r4,22348
200316a4:	20c7883a 	add	r3,r4,r3
200316a8:	18c00003 	ldbu	r3,0(r3)
200316ac:	05400804 	movi	r21,32
200316b0:	1885883a 	add	r2,r3,r2
200316b4:	a8abc83a 	sub	r21,r21,r2
200316b8:	a800621e 	bne	r21,zero,20031844 <__udivdi3+0x304>
200316bc:	3c00e936 	bltu	r7,r16,20031a64 <__udivdi3+0x524>
200316c0:	9985403a 	cmpgeu	r2,r19,r6
200316c4:	0007883a 	mov	r3,zero
200316c8:	00004506 	br	200317e0 <__udivdi3+0x2a0>
200316cc:	3000041e 	bne	r6,zero,200316e0 <__udivdi3+0x1a0>
200316d0:	000b883a 	mov	r5,zero
200316d4:	01000044 	movi	r4,1
200316d8:	00248600 	call	20024860 <__udivsi3>
200316dc:	1023883a 	mov	r17,r2
200316e0:	00bfffd4 	movui	r2,65535
200316e4:	14404e2e 	bgeu	r2,r17,20031820 <__udivdi3+0x2e0>
200316e8:	00804034 	movhi	r2,256
200316ec:	10bfffc4 	addi	r2,r2,-1
200316f0:	1440d836 	bltu	r2,r17,20031a54 <__udivdi3+0x514>
200316f4:	00800404 	movi	r2,16
200316f8:	8886d83a 	srl	r3,r17,r2
200316fc:	010800f4 	movhi	r4,8195
20031700:	2115d304 	addi	r4,r4,22348
20031704:	20c7883a 	add	r3,r4,r3
20031708:	18c00003 	ldbu	r3,0(r3)
2003170c:	1885883a 	add	r2,r3,r2
20031710:	00c00804 	movi	r3,32
20031714:	1887c83a 	sub	r3,r3,r2
20031718:	18008f1e 	bne	r3,zero,20031958 <__udivdi3+0x418>
2003171c:	882ad43a 	srli	r21,r17,16
20031720:	8461c83a 	sub	r16,r16,r17
20031724:	8d3fffcc 	andi	r20,r17,65535
20031728:	00c00044 	movi	r3,1
2003172c:	8009883a 	mov	r4,r16
20031730:	a80b883a 	mov	r5,r21
20031734:	d8c00015 	stw	r3,0(sp)
20031738:	00248c40 	call	200248c4 <__umodsi3>
2003173c:	8009883a 	mov	r4,r16
20031740:	a80b883a 	mov	r5,r21
20031744:	1027883a 	mov	r19,r2
20031748:	00248600 	call	20024860 <__udivsi3>
2003174c:	9826943a 	slli	r19,r19,16
20031750:	9008d43a 	srli	r4,r18,16
20031754:	1521383a 	mul	r16,r2,r20
20031758:	102d883a 	mov	r22,r2
2003175c:	24c8b03a 	or	r4,r4,r19
20031760:	d8c00017 	ldw	r3,0(sp)
20031764:	2400052e 	bgeu	r4,r16,2003177c <__udivdi3+0x23c>
20031768:	2449883a 	add	r4,r4,r17
2003176c:	b0bfffc4 	addi	r2,r22,-1
20031770:	24400136 	bltu	r4,r17,20031778 <__udivdi3+0x238>
20031774:	2400ca36 	bltu	r4,r16,20031aa0 <__udivdi3+0x560>
20031778:	102d883a 	mov	r22,r2
2003177c:	2421c83a 	sub	r16,r4,r16
20031780:	a80b883a 	mov	r5,r21
20031784:	8009883a 	mov	r4,r16
20031788:	d8c00015 	stw	r3,0(sp)
2003178c:	00248c40 	call	200248c4 <__umodsi3>
20031790:	1027883a 	mov	r19,r2
20031794:	a80b883a 	mov	r5,r21
20031798:	8009883a 	mov	r4,r16
2003179c:	00248600 	call	20024860 <__udivsi3>
200317a0:	9826943a 	slli	r19,r19,16
200317a4:	1529383a 	mul	r20,r2,r20
200317a8:	94bfffcc 	andi	r18,r18,65535
200317ac:	94e4b03a 	or	r18,r18,r19
200317b0:	d8c00017 	ldw	r3,0(sp)
200317b4:	9500052e 	bgeu	r18,r20,200317cc <__udivdi3+0x28c>
200317b8:	8ca5883a 	add	r18,r17,r18
200317bc:	113fffc4 	addi	r4,r2,-1
200317c0:	94409736 	bltu	r18,r17,20031a20 <__udivdi3+0x4e0>
200317c4:	9500962e 	bgeu	r18,r20,20031a20 <__udivdi3+0x4e0>
200317c8:	10bfff84 	addi	r2,r2,-2
200317cc:	b00c943a 	slli	r6,r22,16
200317d0:	3084b03a 	or	r2,r6,r2
200317d4:	00000206 	br	200317e0 <__udivdi3+0x2a0>
200317d8:	0007883a 	mov	r3,zero
200317dc:	0005883a 	mov	r2,zero
200317e0:	dfc00a17 	ldw	ra,40(sp)
200317e4:	df000917 	ldw	fp,36(sp)
200317e8:	ddc00817 	ldw	r23,32(sp)
200317ec:	dd800717 	ldw	r22,28(sp)
200317f0:	dd400617 	ldw	r21,24(sp)
200317f4:	dd000517 	ldw	r20,20(sp)
200317f8:	dcc00417 	ldw	r19,16(sp)
200317fc:	dc800317 	ldw	r18,12(sp)
20031800:	dc400217 	ldw	r17,8(sp)
20031804:	dc000117 	ldw	r16,4(sp)
20031808:	dec00b04 	addi	sp,sp,44
2003180c:	f800283a 	ret
20031810:	00803fc4 	movi	r2,255
20031814:	11c5803a 	cmpltu	r2,r2,r7
20031818:	100490fa 	slli	r2,r2,3
2003181c:	003f9e06 	br	20031698 <_gp+0xffff2138>
20031820:	00803fc4 	movi	r2,255
20031824:	1445803a 	cmpltu	r2,r2,r17
20031828:	100490fa 	slli	r2,r2,3
2003182c:	003fb206 	br	200316f8 <_gp+0xffff2198>
20031830:	00804034 	movhi	r2,256
20031834:	10bfffc4 	addi	r2,r2,-1
20031838:	11808836 	bltu	r2,r6,20031a5c <__udivdi3+0x51c>
2003183c:	00800404 	movi	r2,16
20031840:	003f5606 	br	2003159c <_gp+0xffff203c>
20031844:	30aed83a 	srl	r23,r6,r2
20031848:	3d4e983a 	sll	r7,r7,r21
2003184c:	80acd83a 	srl	r22,r16,r2
20031850:	9884d83a 	srl	r2,r19,r2
20031854:	3deeb03a 	or	r23,r7,r23
20031858:	b824d43a 	srli	r18,r23,16
2003185c:	8560983a 	sll	r16,r16,r21
20031860:	b009883a 	mov	r4,r22
20031864:	900b883a 	mov	r5,r18
20031868:	3568983a 	sll	r20,r6,r21
2003186c:	1420b03a 	or	r16,r2,r16
20031870:	00248c40 	call	200248c4 <__umodsi3>
20031874:	b009883a 	mov	r4,r22
20031878:	900b883a 	mov	r5,r18
2003187c:	1023883a 	mov	r17,r2
20031880:	00248600 	call	20024860 <__udivsi3>
20031884:	8808943a 	slli	r4,r17,16
20031888:	bf3fffcc 	andi	fp,r23,65535
2003188c:	8006d43a 	srli	r3,r16,16
20031890:	e0a3383a 	mul	r17,fp,r2
20031894:	100d883a 	mov	r6,r2
20031898:	1906b03a 	or	r3,r3,r4
2003189c:	1c40042e 	bgeu	r3,r17,200318b0 <__udivdi3+0x370>
200318a0:	1dc7883a 	add	r3,r3,r23
200318a4:	10bfffc4 	addi	r2,r2,-1
200318a8:	1dc0752e 	bgeu	r3,r23,20031a80 <__udivdi3+0x540>
200318ac:	100d883a 	mov	r6,r2
200318b0:	1c63c83a 	sub	r17,r3,r17
200318b4:	900b883a 	mov	r5,r18
200318b8:	8809883a 	mov	r4,r17
200318bc:	d9800015 	stw	r6,0(sp)
200318c0:	00248c40 	call	200248c4 <__umodsi3>
200318c4:	102d883a 	mov	r22,r2
200318c8:	8809883a 	mov	r4,r17
200318cc:	900b883a 	mov	r5,r18
200318d0:	00248600 	call	20024860 <__udivsi3>
200318d4:	b02c943a 	slli	r22,r22,16
200318d8:	e089383a 	mul	r4,fp,r2
200318dc:	843fffcc 	andi	r16,r16,65535
200318e0:	85a0b03a 	or	r16,r16,r22
200318e4:	d9800017 	ldw	r6,0(sp)
200318e8:	8100042e 	bgeu	r16,r4,200318fc <__udivdi3+0x3bc>
200318ec:	85e1883a 	add	r16,r16,r23
200318f0:	10ffffc4 	addi	r3,r2,-1
200318f4:	85c05e2e 	bgeu	r16,r23,20031a70 <__udivdi3+0x530>
200318f8:	1805883a 	mov	r2,r3
200318fc:	300c943a 	slli	r6,r6,16
20031900:	a17fffcc 	andi	r5,r20,65535
20031904:	a028d43a 	srli	r20,r20,16
20031908:	3084b03a 	or	r2,r6,r2
2003190c:	10ffffcc 	andi	r3,r2,65535
20031910:	100cd43a 	srli	r6,r2,16
20031914:	194f383a 	mul	r7,r3,r5
20031918:	1d07383a 	mul	r3,r3,r20
2003191c:	314b383a 	mul	r5,r6,r5
20031920:	3810d43a 	srli	r8,r7,16
20031924:	8121c83a 	sub	r16,r16,r4
20031928:	1947883a 	add	r3,r3,r5
2003192c:	40c7883a 	add	r3,r8,r3
20031930:	350d383a 	mul	r6,r6,r20
20031934:	1940022e 	bgeu	r3,r5,20031940 <__udivdi3+0x400>
20031938:	01000074 	movhi	r4,1
2003193c:	310d883a 	add	r6,r6,r4
20031940:	1828d43a 	srli	r20,r3,16
20031944:	a18d883a 	add	r6,r20,r6
20031948:	81803e36 	bltu	r16,r6,20031a44 <__udivdi3+0x504>
2003194c:	81803826 	beq	r16,r6,20031a30 <__udivdi3+0x4f0>
20031950:	0007883a 	mov	r3,zero
20031954:	003fa206 	br	200317e0 <_gp+0xffff2280>
20031958:	88e2983a 	sll	r17,r17,r3
2003195c:	80a8d83a 	srl	r20,r16,r2
20031960:	80e0983a 	sll	r16,r16,r3
20031964:	882ad43a 	srli	r21,r17,16
20031968:	9884d83a 	srl	r2,r19,r2
2003196c:	a009883a 	mov	r4,r20
20031970:	a80b883a 	mov	r5,r21
20031974:	142eb03a 	or	r23,r2,r16
20031978:	98e4983a 	sll	r18,r19,r3
2003197c:	00248c40 	call	200248c4 <__umodsi3>
20031980:	a009883a 	mov	r4,r20
20031984:	a80b883a 	mov	r5,r21
20031988:	1021883a 	mov	r16,r2
2003198c:	00248600 	call	20024860 <__udivsi3>
20031990:	1039883a 	mov	fp,r2
20031994:	8d3fffcc 	andi	r20,r17,65535
20031998:	8020943a 	slli	r16,r16,16
2003199c:	b804d43a 	srli	r2,r23,16
200319a0:	a72d383a 	mul	r22,r20,fp
200319a4:	1404b03a 	or	r2,r2,r16
200319a8:	1580062e 	bgeu	r2,r22,200319c4 <__udivdi3+0x484>
200319ac:	1445883a 	add	r2,r2,r17
200319b0:	e0ffffc4 	addi	r3,fp,-1
200319b4:	14403836 	bltu	r2,r17,20031a98 <__udivdi3+0x558>
200319b8:	1580372e 	bgeu	r2,r22,20031a98 <__udivdi3+0x558>
200319bc:	e73fff84 	addi	fp,fp,-2
200319c0:	1445883a 	add	r2,r2,r17
200319c4:	15adc83a 	sub	r22,r2,r22
200319c8:	a80b883a 	mov	r5,r21
200319cc:	b009883a 	mov	r4,r22
200319d0:	00248c40 	call	200248c4 <__umodsi3>
200319d4:	1027883a 	mov	r19,r2
200319d8:	b009883a 	mov	r4,r22
200319dc:	a80b883a 	mov	r5,r21
200319e0:	00248600 	call	20024860 <__udivsi3>
200319e4:	9826943a 	slli	r19,r19,16
200319e8:	a0a1383a 	mul	r16,r20,r2
200319ec:	b93fffcc 	andi	r4,r23,65535
200319f0:	24c8b03a 	or	r4,r4,r19
200319f4:	2400062e 	bgeu	r4,r16,20031a10 <__udivdi3+0x4d0>
200319f8:	2449883a 	add	r4,r4,r17
200319fc:	10ffffc4 	addi	r3,r2,-1
20031a00:	24402336 	bltu	r4,r17,20031a90 <__udivdi3+0x550>
20031a04:	2400222e 	bgeu	r4,r16,20031a90 <__udivdi3+0x550>
20031a08:	10bfff84 	addi	r2,r2,-2
20031a0c:	2449883a 	add	r4,r4,r17
20031a10:	e038943a 	slli	fp,fp,16
20031a14:	2421c83a 	sub	r16,r4,r16
20031a18:	e086b03a 	or	r3,fp,r2
20031a1c:	003f4306 	br	2003172c <_gp+0xffff21cc>
20031a20:	2005883a 	mov	r2,r4
20031a24:	003f6906 	br	200317cc <_gp+0xffff226c>
20031a28:	1805883a 	mov	r2,r3
20031a2c:	003f0f06 	br	2003166c <_gp+0xffff210c>
20031a30:	1806943a 	slli	r3,r3,16
20031a34:	9d66983a 	sll	r19,r19,r21
20031a38:	39ffffcc 	andi	r7,r7,65535
20031a3c:	19c7883a 	add	r3,r3,r7
20031a40:	98ffc32e 	bgeu	r19,r3,20031950 <_gp+0xffff23f0>
20031a44:	10bfffc4 	addi	r2,r2,-1
20031a48:	003fc106 	br	20031950 <_gp+0xffff23f0>
20031a4c:	00800604 	movi	r2,24
20031a50:	003f1106 	br	20031698 <_gp+0xffff2138>
20031a54:	00800604 	movi	r2,24
20031a58:	003f2706 	br	200316f8 <_gp+0xffff2198>
20031a5c:	00800604 	movi	r2,24
20031a60:	003ece06 	br	2003159c <_gp+0xffff203c>
20031a64:	0007883a 	mov	r3,zero
20031a68:	00800044 	movi	r2,1
20031a6c:	003f5c06 	br	200317e0 <_gp+0xffff2280>
20031a70:	813fa12e 	bgeu	r16,r4,200318f8 <_gp+0xffff2398>
20031a74:	10bfff84 	addi	r2,r2,-2
20031a78:	85e1883a 	add	r16,r16,r23
20031a7c:	003f9f06 	br	200318fc <_gp+0xffff239c>
20031a80:	1c7f8a2e 	bgeu	r3,r17,200318ac <_gp+0xffff234c>
20031a84:	31bfff84 	addi	r6,r6,-2
20031a88:	1dc7883a 	add	r3,r3,r23
20031a8c:	003f8806 	br	200318b0 <_gp+0xffff2350>
20031a90:	1805883a 	mov	r2,r3
20031a94:	003fde06 	br	20031a10 <_gp+0xffff24b0>
20031a98:	1839883a 	mov	fp,r3
20031a9c:	003fc906 	br	200319c4 <_gp+0xffff2464>
20031aa0:	b5bfff84 	addi	r22,r22,-2
20031aa4:	2449883a 	add	r4,r4,r17
20031aa8:	003f3406 	br	2003177c <_gp+0xffff221c>
20031aac:	b5bfff84 	addi	r22,r22,-2
20031ab0:	1445883a 	add	r2,r2,r17
20031ab4:	003edb06 	br	20031624 <_gp+0xffff20c4>

20031ab8 <__umoddi3>:
20031ab8:	defff404 	addi	sp,sp,-48
20031abc:	df000a15 	stw	fp,40(sp)
20031ac0:	dc400315 	stw	r17,12(sp)
20031ac4:	dc000215 	stw	r16,8(sp)
20031ac8:	dfc00b15 	stw	ra,44(sp)
20031acc:	ddc00915 	stw	r23,36(sp)
20031ad0:	dd800815 	stw	r22,32(sp)
20031ad4:	dd400715 	stw	r21,28(sp)
20031ad8:	dd000615 	stw	r20,24(sp)
20031adc:	dcc00515 	stw	r19,20(sp)
20031ae0:	dc800415 	stw	r18,16(sp)
20031ae4:	2021883a 	mov	r16,r4
20031ae8:	2823883a 	mov	r17,r5
20031aec:	2839883a 	mov	fp,r5
20031af0:	38003c1e 	bne	r7,zero,20031be4 <__umoddi3+0x12c>
20031af4:	3027883a 	mov	r19,r6
20031af8:	2029883a 	mov	r20,r4
20031afc:	2980512e 	bgeu	r5,r6,20031c44 <__umoddi3+0x18c>
20031b00:	00bfffd4 	movui	r2,65535
20031b04:	11809a36 	bltu	r2,r6,20031d70 <__umoddi3+0x2b8>
20031b08:	01003fc4 	movi	r4,255
20031b0c:	2189803a 	cmpltu	r4,r4,r6
20031b10:	200890fa 	slli	r4,r4,3
20031b14:	3104d83a 	srl	r2,r6,r4
20031b18:	00c800f4 	movhi	r3,8195
20031b1c:	18d5d304 	addi	r3,r3,22348
20031b20:	1885883a 	add	r2,r3,r2
20031b24:	10c00003 	ldbu	r3,0(r2)
20031b28:	00800804 	movi	r2,32
20031b2c:	1909883a 	add	r4,r3,r4
20031b30:	1125c83a 	sub	r18,r2,r4
20031b34:	90000526 	beq	r18,zero,20031b4c <__umoddi3+0x94>
20031b38:	8ca2983a 	sll	r17,r17,r18
20031b3c:	8108d83a 	srl	r4,r16,r4
20031b40:	34a6983a 	sll	r19,r6,r18
20031b44:	84a8983a 	sll	r20,r16,r18
20031b48:	2478b03a 	or	fp,r4,r17
20031b4c:	982ed43a 	srli	r23,r19,16
20031b50:	e009883a 	mov	r4,fp
20031b54:	9dbfffcc 	andi	r22,r19,65535
20031b58:	b80b883a 	mov	r5,r23
20031b5c:	00248c40 	call	200248c4 <__umodsi3>
20031b60:	e009883a 	mov	r4,fp
20031b64:	b80b883a 	mov	r5,r23
20031b68:	102b883a 	mov	r21,r2
20031b6c:	00248600 	call	20024860 <__udivsi3>
20031b70:	a806943a 	slli	r3,r21,16
20031b74:	a008d43a 	srli	r4,r20,16
20031b78:	b085383a 	mul	r2,r22,r2
20031b7c:	20c8b03a 	or	r4,r4,r3
20031b80:	2080032e 	bgeu	r4,r2,20031b90 <__umoddi3+0xd8>
20031b84:	24c9883a 	add	r4,r4,r19
20031b88:	24c00136 	bltu	r4,r19,20031b90 <__umoddi3+0xd8>
20031b8c:	20811036 	bltu	r4,r2,20031fd0 <__umoddi3+0x518>
20031b90:	20abc83a 	sub	r21,r4,r2
20031b94:	b80b883a 	mov	r5,r23
20031b98:	a809883a 	mov	r4,r21
20031b9c:	00248c40 	call	200248c4 <__umodsi3>
20031ba0:	1023883a 	mov	r17,r2
20031ba4:	b80b883a 	mov	r5,r23
20031ba8:	a809883a 	mov	r4,r21
20031bac:	00248600 	call	20024860 <__udivsi3>
20031bb0:	8822943a 	slli	r17,r17,16
20031bb4:	b085383a 	mul	r2,r22,r2
20031bb8:	a0ffffcc 	andi	r3,r20,65535
20031bbc:	1c46b03a 	or	r3,r3,r17
20031bc0:	1880042e 	bgeu	r3,r2,20031bd4 <__umoddi3+0x11c>
20031bc4:	1cc7883a 	add	r3,r3,r19
20031bc8:	1cc00236 	bltu	r3,r19,20031bd4 <__umoddi3+0x11c>
20031bcc:	1880012e 	bgeu	r3,r2,20031bd4 <__umoddi3+0x11c>
20031bd0:	1cc7883a 	add	r3,r3,r19
20031bd4:	1885c83a 	sub	r2,r3,r2
20031bd8:	1484d83a 	srl	r2,r2,r18
20031bdc:	0007883a 	mov	r3,zero
20031be0:	00004f06 	br	20031d20 <__umoddi3+0x268>
20031be4:	29c04c36 	bltu	r5,r7,20031d18 <__umoddi3+0x260>
20031be8:	00bfffd4 	movui	r2,65535
20031bec:	11c0582e 	bgeu	r2,r7,20031d50 <__umoddi3+0x298>
20031bf0:	00804034 	movhi	r2,256
20031bf4:	10bfffc4 	addi	r2,r2,-1
20031bf8:	11c0e736 	bltu	r2,r7,20031f98 <__umoddi3+0x4e0>
20031bfc:	01000404 	movi	r4,16
20031c00:	3904d83a 	srl	r2,r7,r4
20031c04:	00c800f4 	movhi	r3,8195
20031c08:	18d5d304 	addi	r3,r3,22348
20031c0c:	1885883a 	add	r2,r3,r2
20031c10:	14c00003 	ldbu	r19,0(r2)
20031c14:	00c00804 	movi	r3,32
20031c18:	9927883a 	add	r19,r19,r4
20031c1c:	1ce9c83a 	sub	r20,r3,r19
20031c20:	a000581e 	bne	r20,zero,20031d84 <__umoddi3+0x2cc>
20031c24:	3c400136 	bltu	r7,r17,20031c2c <__umoddi3+0x174>
20031c28:	8180eb36 	bltu	r16,r6,20031fd8 <__umoddi3+0x520>
20031c2c:	8185c83a 	sub	r2,r16,r6
20031c30:	89e3c83a 	sub	r17,r17,r7
20031c34:	8089803a 	cmpltu	r4,r16,r2
20031c38:	8939c83a 	sub	fp,r17,r4
20031c3c:	e007883a 	mov	r3,fp
20031c40:	00003706 	br	20031d20 <__umoddi3+0x268>
20031c44:	3000041e 	bne	r6,zero,20031c58 <__umoddi3+0x1a0>
20031c48:	000b883a 	mov	r5,zero
20031c4c:	01000044 	movi	r4,1
20031c50:	00248600 	call	20024860 <__udivsi3>
20031c54:	1027883a 	mov	r19,r2
20031c58:	00bfffd4 	movui	r2,65535
20031c5c:	14c0402e 	bgeu	r2,r19,20031d60 <__umoddi3+0x2a8>
20031c60:	00804034 	movhi	r2,256
20031c64:	10bfffc4 	addi	r2,r2,-1
20031c68:	14c0cd36 	bltu	r2,r19,20031fa0 <__umoddi3+0x4e8>
20031c6c:	00800404 	movi	r2,16
20031c70:	9886d83a 	srl	r3,r19,r2
20031c74:	010800f4 	movhi	r4,8195
20031c78:	2115d304 	addi	r4,r4,22348
20031c7c:	20c7883a 	add	r3,r4,r3
20031c80:	18c00003 	ldbu	r3,0(r3)
20031c84:	1887883a 	add	r3,r3,r2
20031c88:	00800804 	movi	r2,32
20031c8c:	10e5c83a 	sub	r18,r2,r3
20031c90:	9000901e 	bne	r18,zero,20031ed4 <__umoddi3+0x41c>
20031c94:	982cd43a 	srli	r22,r19,16
20031c98:	8ce3c83a 	sub	r17,r17,r19
20031c9c:	9d7fffcc 	andi	r21,r19,65535
20031ca0:	b00b883a 	mov	r5,r22
20031ca4:	8809883a 	mov	r4,r17
20031ca8:	00248c40 	call	200248c4 <__umodsi3>
20031cac:	8809883a 	mov	r4,r17
20031cb0:	b00b883a 	mov	r5,r22
20031cb4:	1021883a 	mov	r16,r2
20031cb8:	00248600 	call	20024860 <__udivsi3>
20031cbc:	8006943a 	slli	r3,r16,16
20031cc0:	a008d43a 	srli	r4,r20,16
20031cc4:	1545383a 	mul	r2,r2,r21
20031cc8:	20c8b03a 	or	r4,r4,r3
20031ccc:	2080042e 	bgeu	r4,r2,20031ce0 <__umoddi3+0x228>
20031cd0:	24c9883a 	add	r4,r4,r19
20031cd4:	24c00236 	bltu	r4,r19,20031ce0 <__umoddi3+0x228>
20031cd8:	2080012e 	bgeu	r4,r2,20031ce0 <__umoddi3+0x228>
20031cdc:	24c9883a 	add	r4,r4,r19
20031ce0:	20a1c83a 	sub	r16,r4,r2
20031ce4:	b00b883a 	mov	r5,r22
20031ce8:	8009883a 	mov	r4,r16
20031cec:	00248c40 	call	200248c4 <__umodsi3>
20031cf0:	1023883a 	mov	r17,r2
20031cf4:	b00b883a 	mov	r5,r22
20031cf8:	8009883a 	mov	r4,r16
20031cfc:	00248600 	call	20024860 <__udivsi3>
20031d00:	8822943a 	slli	r17,r17,16
20031d04:	1545383a 	mul	r2,r2,r21
20031d08:	a53fffcc 	andi	r20,r20,65535
20031d0c:	a446b03a 	or	r3,r20,r17
20031d10:	18bfb02e 	bgeu	r3,r2,20031bd4 <_gp+0xffff2674>
20031d14:	003fab06 	br	20031bc4 <_gp+0xffff2664>
20031d18:	2005883a 	mov	r2,r4
20031d1c:	2807883a 	mov	r3,r5
20031d20:	dfc00b17 	ldw	ra,44(sp)
20031d24:	df000a17 	ldw	fp,40(sp)
20031d28:	ddc00917 	ldw	r23,36(sp)
20031d2c:	dd800817 	ldw	r22,32(sp)
20031d30:	dd400717 	ldw	r21,28(sp)
20031d34:	dd000617 	ldw	r20,24(sp)
20031d38:	dcc00517 	ldw	r19,20(sp)
20031d3c:	dc800417 	ldw	r18,16(sp)
20031d40:	dc400317 	ldw	r17,12(sp)
20031d44:	dc000217 	ldw	r16,8(sp)
20031d48:	dec00c04 	addi	sp,sp,48
20031d4c:	f800283a 	ret
20031d50:	04c03fc4 	movi	r19,255
20031d54:	99c9803a 	cmpltu	r4,r19,r7
20031d58:	200890fa 	slli	r4,r4,3
20031d5c:	003fa806 	br	20031c00 <_gp+0xffff26a0>
20031d60:	00803fc4 	movi	r2,255
20031d64:	14c5803a 	cmpltu	r2,r2,r19
20031d68:	100490fa 	slli	r2,r2,3
20031d6c:	003fc006 	br	20031c70 <_gp+0xffff2710>
20031d70:	00804034 	movhi	r2,256
20031d74:	10bfffc4 	addi	r2,r2,-1
20031d78:	11808b36 	bltu	r2,r6,20031fa8 <__umoddi3+0x4f0>
20031d7c:	01000404 	movi	r4,16
20031d80:	003f6406 	br	20031b14 <_gp+0xffff25b4>
20031d84:	34c4d83a 	srl	r2,r6,r19
20031d88:	3d0e983a 	sll	r7,r7,r20
20031d8c:	8cf8d83a 	srl	fp,r17,r19
20031d90:	8d10983a 	sll	r8,r17,r20
20031d94:	38aab03a 	or	r21,r7,r2
20031d98:	a82cd43a 	srli	r22,r21,16
20031d9c:	84e2d83a 	srl	r17,r16,r19
20031da0:	e009883a 	mov	r4,fp
20031da4:	b00b883a 	mov	r5,r22
20031da8:	8a22b03a 	or	r17,r17,r8
20031dac:	3524983a 	sll	r18,r6,r20
20031db0:	00248c40 	call	200248c4 <__umodsi3>
20031db4:	e009883a 	mov	r4,fp
20031db8:	b00b883a 	mov	r5,r22
20031dbc:	102f883a 	mov	r23,r2
20031dc0:	00248600 	call	20024860 <__udivsi3>
20031dc4:	100d883a 	mov	r6,r2
20031dc8:	b808943a 	slli	r4,r23,16
20031dcc:	aa3fffcc 	andi	r8,r21,65535
20031dd0:	8804d43a 	srli	r2,r17,16
20031dd4:	41af383a 	mul	r23,r8,r6
20031dd8:	8520983a 	sll	r16,r16,r20
20031ddc:	1104b03a 	or	r2,r2,r4
20031de0:	15c0042e 	bgeu	r2,r23,20031df4 <__umoddi3+0x33c>
20031de4:	1545883a 	add	r2,r2,r21
20031de8:	30ffffc4 	addi	r3,r6,-1
20031dec:	1540742e 	bgeu	r2,r21,20031fc0 <__umoddi3+0x508>
20031df0:	180d883a 	mov	r6,r3
20031df4:	15efc83a 	sub	r23,r2,r23
20031df8:	b00b883a 	mov	r5,r22
20031dfc:	b809883a 	mov	r4,r23
20031e00:	d9800115 	stw	r6,4(sp)
20031e04:	da000015 	stw	r8,0(sp)
20031e08:	00248c40 	call	200248c4 <__umodsi3>
20031e0c:	b00b883a 	mov	r5,r22
20031e10:	b809883a 	mov	r4,r23
20031e14:	1039883a 	mov	fp,r2
20031e18:	00248600 	call	20024860 <__udivsi3>
20031e1c:	da000017 	ldw	r8,0(sp)
20031e20:	e038943a 	slli	fp,fp,16
20031e24:	100b883a 	mov	r5,r2
20031e28:	4089383a 	mul	r4,r8,r2
20031e2c:	8a3fffcc 	andi	r8,r17,65535
20031e30:	4710b03a 	or	r8,r8,fp
20031e34:	d9800117 	ldw	r6,4(sp)
20031e38:	4100042e 	bgeu	r8,r4,20031e4c <__umoddi3+0x394>
20031e3c:	4551883a 	add	r8,r8,r21
20031e40:	10bfffc4 	addi	r2,r2,-1
20031e44:	45405a2e 	bgeu	r8,r21,20031fb0 <__umoddi3+0x4f8>
20031e48:	100b883a 	mov	r5,r2
20031e4c:	300c943a 	slli	r6,r6,16
20031e50:	91ffffcc 	andi	r7,r18,65535
20031e54:	9004d43a 	srli	r2,r18,16
20031e58:	314cb03a 	or	r6,r6,r5
20031e5c:	317fffcc 	andi	r5,r6,65535
20031e60:	300cd43a 	srli	r6,r6,16
20031e64:	29d3383a 	mul	r9,r5,r7
20031e68:	288b383a 	mul	r5,r5,r2
20031e6c:	31cf383a 	mul	r7,r6,r7
20031e70:	4806d43a 	srli	r3,r9,16
20031e74:	4111c83a 	sub	r8,r8,r4
20031e78:	29cb883a 	add	r5,r5,r7
20031e7c:	194b883a 	add	r5,r3,r5
20031e80:	3085383a 	mul	r2,r6,r2
20031e84:	29c0022e 	bgeu	r5,r7,20031e90 <__umoddi3+0x3d8>
20031e88:	00c00074 	movhi	r3,1
20031e8c:	10c5883a 	add	r2,r2,r3
20031e90:	2808d43a 	srli	r4,r5,16
20031e94:	280a943a 	slli	r5,r5,16
20031e98:	4a7fffcc 	andi	r9,r9,65535
20031e9c:	2085883a 	add	r2,r4,r2
20031ea0:	2a4b883a 	add	r5,r5,r9
20031ea4:	40803636 	bltu	r8,r2,20031f80 <__umoddi3+0x4c8>
20031ea8:	40804d26 	beq	r8,r2,20031fe0 <__umoddi3+0x528>
20031eac:	4089c83a 	sub	r4,r8,r2
20031eb0:	280f883a 	mov	r7,r5
20031eb4:	81cfc83a 	sub	r7,r16,r7
20031eb8:	81c7803a 	cmpltu	r3,r16,r7
20031ebc:	20c7c83a 	sub	r3,r4,r3
20031ec0:	1cc4983a 	sll	r2,r3,r19
20031ec4:	3d0ed83a 	srl	r7,r7,r20
20031ec8:	1d06d83a 	srl	r3,r3,r20
20031ecc:	11c4b03a 	or	r2,r2,r7
20031ed0:	003f9306 	br	20031d20 <_gp+0xffff27c0>
20031ed4:	9ca6983a 	sll	r19,r19,r18
20031ed8:	88e8d83a 	srl	r20,r17,r3
20031edc:	80c4d83a 	srl	r2,r16,r3
20031ee0:	982cd43a 	srli	r22,r19,16
20031ee4:	8ca2983a 	sll	r17,r17,r18
20031ee8:	a009883a 	mov	r4,r20
20031eec:	b00b883a 	mov	r5,r22
20031ef0:	1478b03a 	or	fp,r2,r17
20031ef4:	00248c40 	call	200248c4 <__umodsi3>
20031ef8:	a009883a 	mov	r4,r20
20031efc:	b00b883a 	mov	r5,r22
20031f00:	1023883a 	mov	r17,r2
20031f04:	00248600 	call	20024860 <__udivsi3>
20031f08:	9d7fffcc 	andi	r21,r19,65535
20031f0c:	880a943a 	slli	r5,r17,16
20031f10:	e008d43a 	srli	r4,fp,16
20031f14:	a885383a 	mul	r2,r21,r2
20031f18:	84a8983a 	sll	r20,r16,r18
20031f1c:	2148b03a 	or	r4,r4,r5
20031f20:	2080042e 	bgeu	r4,r2,20031f34 <__umoddi3+0x47c>
20031f24:	24c9883a 	add	r4,r4,r19
20031f28:	24c00236 	bltu	r4,r19,20031f34 <__umoddi3+0x47c>
20031f2c:	2080012e 	bgeu	r4,r2,20031f34 <__umoddi3+0x47c>
20031f30:	24c9883a 	add	r4,r4,r19
20031f34:	20a3c83a 	sub	r17,r4,r2
20031f38:	b00b883a 	mov	r5,r22
20031f3c:	8809883a 	mov	r4,r17
20031f40:	00248c40 	call	200248c4 <__umodsi3>
20031f44:	102f883a 	mov	r23,r2
20031f48:	8809883a 	mov	r4,r17
20031f4c:	b00b883a 	mov	r5,r22
20031f50:	00248600 	call	20024860 <__udivsi3>
20031f54:	b82e943a 	slli	r23,r23,16
20031f58:	a885383a 	mul	r2,r21,r2
20031f5c:	e13fffcc 	andi	r4,fp,65535
20031f60:	25c8b03a 	or	r4,r4,r23
20031f64:	2080042e 	bgeu	r4,r2,20031f78 <__umoddi3+0x4c0>
20031f68:	24c9883a 	add	r4,r4,r19
20031f6c:	24c00236 	bltu	r4,r19,20031f78 <__umoddi3+0x4c0>
20031f70:	2080012e 	bgeu	r4,r2,20031f78 <__umoddi3+0x4c0>
20031f74:	24c9883a 	add	r4,r4,r19
20031f78:	20a3c83a 	sub	r17,r4,r2
20031f7c:	003f4806 	br	20031ca0 <_gp+0xffff2740>
20031f80:	2c8fc83a 	sub	r7,r5,r18
20031f84:	1545c83a 	sub	r2,r2,r21
20031f88:	29cb803a 	cmpltu	r5,r5,r7
20031f8c:	1145c83a 	sub	r2,r2,r5
20031f90:	4089c83a 	sub	r4,r8,r2
20031f94:	003fc706 	br	20031eb4 <_gp+0xffff2954>
20031f98:	01000604 	movi	r4,24
20031f9c:	003f1806 	br	20031c00 <_gp+0xffff26a0>
20031fa0:	00800604 	movi	r2,24
20031fa4:	003f3206 	br	20031c70 <_gp+0xffff2710>
20031fa8:	01000604 	movi	r4,24
20031fac:	003ed906 	br	20031b14 <_gp+0xffff25b4>
20031fb0:	413fa52e 	bgeu	r8,r4,20031e48 <_gp+0xffff28e8>
20031fb4:	297fff84 	addi	r5,r5,-2
20031fb8:	4551883a 	add	r8,r8,r21
20031fbc:	003fa306 	br	20031e4c <_gp+0xffff28ec>
20031fc0:	15ff8b2e 	bgeu	r2,r23,20031df0 <_gp+0xffff2890>
20031fc4:	31bfff84 	addi	r6,r6,-2
20031fc8:	1545883a 	add	r2,r2,r21
20031fcc:	003f8906 	br	20031df4 <_gp+0xffff2894>
20031fd0:	24c9883a 	add	r4,r4,r19
20031fd4:	003eee06 	br	20031b90 <_gp+0xffff2630>
20031fd8:	8005883a 	mov	r2,r16
20031fdc:	003f1706 	br	20031c3c <_gp+0xffff26dc>
20031fe0:	817fe736 	bltu	r16,r5,20031f80 <_gp+0xffff2a20>
20031fe4:	280f883a 	mov	r7,r5
20031fe8:	0009883a 	mov	r4,zero
20031fec:	003fb106 	br	20031eb4 <_gp+0xffff2954>

20031ff0 <__eqdf2>:
20031ff0:	2804d53a 	srli	r2,r5,20
20031ff4:	3806d53a 	srli	r3,r7,20
20031ff8:	02000434 	movhi	r8,16
20031ffc:	423fffc4 	addi	r8,r8,-1
20032000:	1081ffcc 	andi	r2,r2,2047
20032004:	0281ffc4 	movi	r10,2047
20032008:	2a12703a 	and	r9,r5,r8
2003200c:	18c1ffcc 	andi	r3,r3,2047
20032010:	3a10703a 	and	r8,r7,r8
20032014:	280ad7fa 	srli	r5,r5,31
20032018:	380ed7fa 	srli	r7,r7,31
2003201c:	12801026 	beq	r2,r10,20032060 <__eqdf2+0x70>
20032020:	0281ffc4 	movi	r10,2047
20032024:	1a800a26 	beq	r3,r10,20032050 <__eqdf2+0x60>
20032028:	10c00226 	beq	r2,r3,20032034 <__eqdf2+0x44>
2003202c:	00800044 	movi	r2,1
20032030:	f800283a 	ret
20032034:	4a3ffd1e 	bne	r9,r8,2003202c <_gp+0xffff2acc>
20032038:	21bffc1e 	bne	r4,r6,2003202c <_gp+0xffff2acc>
2003203c:	29c00c26 	beq	r5,r7,20032070 <__eqdf2+0x80>
20032040:	103ffa1e 	bne	r2,zero,2003202c <_gp+0xffff2acc>
20032044:	2244b03a 	or	r2,r4,r9
20032048:	1004c03a 	cmpne	r2,r2,zero
2003204c:	f800283a 	ret
20032050:	3214b03a 	or	r10,r6,r8
20032054:	503ff426 	beq	r10,zero,20032028 <_gp+0xffff2ac8>
20032058:	00800044 	movi	r2,1
2003205c:	f800283a 	ret
20032060:	2254b03a 	or	r10,r4,r9
20032064:	503fee26 	beq	r10,zero,20032020 <_gp+0xffff2ac0>
20032068:	00800044 	movi	r2,1
2003206c:	f800283a 	ret
20032070:	0005883a 	mov	r2,zero
20032074:	f800283a 	ret

20032078 <__floatunsidf>:
20032078:	defffe04 	addi	sp,sp,-8
2003207c:	dc000015 	stw	r16,0(sp)
20032080:	dfc00115 	stw	ra,4(sp)
20032084:	2021883a 	mov	r16,r4
20032088:	20002226 	beq	r4,zero,20032114 <__floatunsidf+0x9c>
2003208c:	0026df00 	call	20026df0 <__clzsi2>
20032090:	01010784 	movi	r4,1054
20032094:	2089c83a 	sub	r4,r4,r2
20032098:	01810cc4 	movi	r6,1075
2003209c:	310dc83a 	sub	r6,r6,r4
200320a0:	00c007c4 	movi	r3,31
200320a4:	1980120e 	bge	r3,r6,200320f0 <__floatunsidf+0x78>
200320a8:	00c104c4 	movi	r3,1043
200320ac:	1907c83a 	sub	r3,r3,r4
200320b0:	80ca983a 	sll	r5,r16,r3
200320b4:	00800434 	movhi	r2,16
200320b8:	10bfffc4 	addi	r2,r2,-1
200320bc:	2101ffcc 	andi	r4,r4,2047
200320c0:	0021883a 	mov	r16,zero
200320c4:	288a703a 	and	r5,r5,r2
200320c8:	2008953a 	slli	r4,r4,20
200320cc:	00c00434 	movhi	r3,16
200320d0:	18ffffc4 	addi	r3,r3,-1
200320d4:	28c6703a 	and	r3,r5,r3
200320d8:	8005883a 	mov	r2,r16
200320dc:	1906b03a 	or	r3,r3,r4
200320e0:	dfc00117 	ldw	ra,4(sp)
200320e4:	dc000017 	ldw	r16,0(sp)
200320e8:	dec00204 	addi	sp,sp,8
200320ec:	f800283a 	ret
200320f0:	00c002c4 	movi	r3,11
200320f4:	188bc83a 	sub	r5,r3,r2
200320f8:	814ad83a 	srl	r5,r16,r5
200320fc:	00c00434 	movhi	r3,16
20032100:	18ffffc4 	addi	r3,r3,-1
20032104:	81a0983a 	sll	r16,r16,r6
20032108:	2101ffcc 	andi	r4,r4,2047
2003210c:	28ca703a 	and	r5,r5,r3
20032110:	003fed06 	br	200320c8 <_gp+0xffff2b68>
20032114:	0009883a 	mov	r4,zero
20032118:	000b883a 	mov	r5,zero
2003211c:	003fea06 	br	200320c8 <_gp+0xffff2b68>

20032120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20032120:	defffe04 	addi	sp,sp,-8
20032124:	dfc00115 	stw	ra,4(sp)
20032128:	df000015 	stw	fp,0(sp)
2003212c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20032130:	d0a00c17 	ldw	r2,-32720(gp)
20032134:	10000326 	beq	r2,zero,20032144 <alt_get_errno+0x24>
20032138:	d0a00c17 	ldw	r2,-32720(gp)
2003213c:	103ee83a 	callr	r2
20032140:	00000106 	br	20032148 <alt_get_errno+0x28>
20032144:	d0a6fb04 	addi	r2,gp,-25620
}
20032148:	e037883a 	mov	sp,fp
2003214c:	dfc00117 	ldw	ra,4(sp)
20032150:	df000017 	ldw	fp,0(sp)
20032154:	dec00204 	addi	sp,sp,8
20032158:	f800283a 	ret

2003215c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
2003215c:	defffb04 	addi	sp,sp,-20
20032160:	dfc00415 	stw	ra,16(sp)
20032164:	df000315 	stw	fp,12(sp)
20032168:	df000304 	addi	fp,sp,12
2003216c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
20032170:	e0bfff17 	ldw	r2,-4(fp)
20032174:	10000616 	blt	r2,zero,20032190 <close+0x34>
20032178:	e0bfff17 	ldw	r2,-4(fp)
2003217c:	10c00324 	muli	r3,r2,12
20032180:	008800f4 	movhi	r2,8195
20032184:	1098d604 	addi	r2,r2,25432
20032188:	1885883a 	add	r2,r3,r2
2003218c:	00000106 	br	20032194 <close+0x38>
20032190:	0005883a 	mov	r2,zero
20032194:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
20032198:	e0bffd17 	ldw	r2,-12(fp)
2003219c:	10001926 	beq	r2,zero,20032204 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
200321a0:	e0bffd17 	ldw	r2,-12(fp)
200321a4:	10800017 	ldw	r2,0(r2)
200321a8:	10800417 	ldw	r2,16(r2)
200321ac:	10000626 	beq	r2,zero,200321c8 <close+0x6c>
200321b0:	e0bffd17 	ldw	r2,-12(fp)
200321b4:	10800017 	ldw	r2,0(r2)
200321b8:	10800417 	ldw	r2,16(r2)
200321bc:	e13ffd17 	ldw	r4,-12(fp)
200321c0:	103ee83a 	callr	r2
200321c4:	00000106 	br	200321cc <close+0x70>
200321c8:	0005883a 	mov	r2,zero
200321cc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
200321d0:	e13fff17 	ldw	r4,-4(fp)
200321d4:	0032c6c0 	call	20032c6c <alt_release_fd>
    if (rval < 0)
200321d8:	e0bffe17 	ldw	r2,-8(fp)
200321dc:	1000070e 	bge	r2,zero,200321fc <close+0xa0>
    {
      ALT_ERRNO = -rval;
200321e0:	00321200 	call	20032120 <alt_get_errno>
200321e4:	1007883a 	mov	r3,r2
200321e8:	e0bffe17 	ldw	r2,-8(fp)
200321ec:	0085c83a 	sub	r2,zero,r2
200321f0:	18800015 	stw	r2,0(r3)
      return -1;
200321f4:	00bfffc4 	movi	r2,-1
200321f8:	00000706 	br	20032218 <close+0xbc>
    }
    return 0;
200321fc:	0005883a 	mov	r2,zero
20032200:	00000506 	br	20032218 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
20032204:	00321200 	call	20032120 <alt_get_errno>
20032208:	1007883a 	mov	r3,r2
2003220c:	00801444 	movi	r2,81
20032210:	18800015 	stw	r2,0(r3)
    return -1;
20032214:	00bfffc4 	movi	r2,-1
  }
}
20032218:	e037883a 	mov	sp,fp
2003221c:	dfc00117 	ldw	ra,4(sp)
20032220:	df000017 	ldw	fp,0(sp)
20032224:	dec00204 	addi	sp,sp,8
20032228:	f800283a 	ret

2003222c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
2003222c:	defffc04 	addi	sp,sp,-16
20032230:	df000315 	stw	fp,12(sp)
20032234:	df000304 	addi	fp,sp,12
20032238:	e13ffd15 	stw	r4,-12(fp)
2003223c:	e17ffe15 	stw	r5,-8(fp)
20032240:	e1bfff15 	stw	r6,-4(fp)
  return len;
20032244:	e0bfff17 	ldw	r2,-4(fp)
}
20032248:	e037883a 	mov	sp,fp
2003224c:	df000017 	ldw	fp,0(sp)
20032250:	dec00104 	addi	sp,sp,4
20032254:	f800283a 	ret

20032258 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
20032258:	defffd04 	addi	sp,sp,-12
2003225c:	df000215 	stw	fp,8(sp)
20032260:	df000204 	addi	fp,sp,8
20032264:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
20032268:	0001883a 	nop
2003226c:	e0bfff17 	ldw	r2,-4(fp)
20032270:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
20032274:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
20032278:	10000226 	beq	r2,zero,20032284 <_exit+0x2c>
    ALT_SIM_FAIL();
2003227c:	002af070 	cmpltui	zero,zero,43969
20032280:	00000106 	br	20032288 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
20032284:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
20032288:	003fff06 	br	20032288 <_gp+0xffff2d28>

2003228c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2003228c:	defffe04 	addi	sp,sp,-8
20032290:	dfc00115 	stw	ra,4(sp)
20032294:	df000015 	stw	fp,0(sp)
20032298:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2003229c:	d0a00c17 	ldw	r2,-32720(gp)
200322a0:	10000326 	beq	r2,zero,200322b0 <alt_get_errno+0x24>
200322a4:	d0a00c17 	ldw	r2,-32720(gp)
200322a8:	103ee83a 	callr	r2
200322ac:	00000106 	br	200322b4 <alt_get_errno+0x28>
200322b0:	d0a6fb04 	addi	r2,gp,-25620
}
200322b4:	e037883a 	mov	sp,fp
200322b8:	dfc00117 	ldw	ra,4(sp)
200322bc:	df000017 	ldw	fp,0(sp)
200322c0:	dec00204 	addi	sp,sp,8
200322c4:	f800283a 	ret

200322c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
200322c8:	defffb04 	addi	sp,sp,-20
200322cc:	dfc00415 	stw	ra,16(sp)
200322d0:	df000315 	stw	fp,12(sp)
200322d4:	df000304 	addi	fp,sp,12
200322d8:	e13ffe15 	stw	r4,-8(fp)
200322dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200322e0:	e0bffe17 	ldw	r2,-8(fp)
200322e4:	10000616 	blt	r2,zero,20032300 <fstat+0x38>
200322e8:	e0bffe17 	ldw	r2,-8(fp)
200322ec:	10c00324 	muli	r3,r2,12
200322f0:	008800f4 	movhi	r2,8195
200322f4:	1098d604 	addi	r2,r2,25432
200322f8:	1885883a 	add	r2,r3,r2
200322fc:	00000106 	br	20032304 <fstat+0x3c>
20032300:	0005883a 	mov	r2,zero
20032304:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
20032308:	e0bffd17 	ldw	r2,-12(fp)
2003230c:	10001026 	beq	r2,zero,20032350 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
20032310:	e0bffd17 	ldw	r2,-12(fp)
20032314:	10800017 	ldw	r2,0(r2)
20032318:	10800817 	ldw	r2,32(r2)
2003231c:	10000726 	beq	r2,zero,2003233c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
20032320:	e0bffd17 	ldw	r2,-12(fp)
20032324:	10800017 	ldw	r2,0(r2)
20032328:	10800817 	ldw	r2,32(r2)
2003232c:	e17fff17 	ldw	r5,-4(fp)
20032330:	e13ffd17 	ldw	r4,-12(fp)
20032334:	103ee83a 	callr	r2
20032338:	00000a06 	br	20032364 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2003233c:	e0bfff17 	ldw	r2,-4(fp)
20032340:	00c80004 	movi	r3,8192
20032344:	10c00115 	stw	r3,4(r2)
      return 0;
20032348:	0005883a 	mov	r2,zero
2003234c:	00000506 	br	20032364 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20032350:	003228c0 	call	2003228c <alt_get_errno>
20032354:	1007883a 	mov	r3,r2
20032358:	00801444 	movi	r2,81
2003235c:	18800015 	stw	r2,0(r3)
    return -1;
20032360:	00bfffc4 	movi	r2,-1
  }
}
20032364:	e037883a 	mov	sp,fp
20032368:	dfc00117 	ldw	ra,4(sp)
2003236c:	df000017 	ldw	fp,0(sp)
20032370:	dec00204 	addi	sp,sp,8
20032374:	f800283a 	ret

20032378 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
20032378:	deffff04 	addi	sp,sp,-4
2003237c:	df000015 	stw	fp,0(sp)
20032380:	d839883a 	mov	fp,sp
  return 0;
20032384:	0005883a 	mov	r2,zero
}
20032388:	e037883a 	mov	sp,fp
2003238c:	df000017 	ldw	fp,0(sp)
20032390:	dec00104 	addi	sp,sp,4
20032394:	f800283a 	ret

20032398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20032398:	defffe04 	addi	sp,sp,-8
2003239c:	dfc00115 	stw	ra,4(sp)
200323a0:	df000015 	stw	fp,0(sp)
200323a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200323a8:	d0a00c17 	ldw	r2,-32720(gp)
200323ac:	10000326 	beq	r2,zero,200323bc <alt_get_errno+0x24>
200323b0:	d0a00c17 	ldw	r2,-32720(gp)
200323b4:	103ee83a 	callr	r2
200323b8:	00000106 	br	200323c0 <alt_get_errno+0x28>
200323bc:	d0a6fb04 	addi	r2,gp,-25620
}
200323c0:	e037883a 	mov	sp,fp
200323c4:	dfc00117 	ldw	ra,4(sp)
200323c8:	df000017 	ldw	fp,0(sp)
200323cc:	dec00204 	addi	sp,sp,8
200323d0:	f800283a 	ret

200323d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
200323d4:	deffed04 	addi	sp,sp,-76
200323d8:	dfc01215 	stw	ra,72(sp)
200323dc:	df001115 	stw	fp,68(sp)
200323e0:	df001104 	addi	fp,sp,68
200323e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200323e8:	e0bfff17 	ldw	r2,-4(fp)
200323ec:	10000616 	blt	r2,zero,20032408 <isatty+0x34>
200323f0:	e0bfff17 	ldw	r2,-4(fp)
200323f4:	10c00324 	muli	r3,r2,12
200323f8:	008800f4 	movhi	r2,8195
200323fc:	1098d604 	addi	r2,r2,25432
20032400:	1885883a 	add	r2,r3,r2
20032404:	00000106 	br	2003240c <isatty+0x38>
20032408:	0005883a 	mov	r2,zero
2003240c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
20032410:	e0bfef17 	ldw	r2,-68(fp)
20032414:	10000e26 	beq	r2,zero,20032450 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
20032418:	e0bfef17 	ldw	r2,-68(fp)
2003241c:	10800017 	ldw	r2,0(r2)
20032420:	10800817 	ldw	r2,32(r2)
20032424:	1000021e 	bne	r2,zero,20032430 <isatty+0x5c>
    {
      return 1;
20032428:	00800044 	movi	r2,1
2003242c:	00000d06 	br	20032464 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
20032430:	e0bff004 	addi	r2,fp,-64
20032434:	100b883a 	mov	r5,r2
20032438:	e13fff17 	ldw	r4,-4(fp)
2003243c:	00322c80 	call	200322c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
20032440:	e0bff117 	ldw	r2,-60(fp)
20032444:	10880020 	cmpeqi	r2,r2,8192
20032448:	10803fcc 	andi	r2,r2,255
2003244c:	00000506 	br	20032464 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20032450:	00323980 	call	20032398 <alt_get_errno>
20032454:	1007883a 	mov	r3,r2
20032458:	00801444 	movi	r2,81
2003245c:	18800015 	stw	r2,0(r3)
    return 0;
20032460:	0005883a 	mov	r2,zero
  }
}
20032464:	e037883a 	mov	sp,fp
20032468:	dfc00117 	ldw	ra,4(sp)
2003246c:	df000017 	ldw	fp,0(sp)
20032470:	dec00204 	addi	sp,sp,8
20032474:	f800283a 	ret

20032478 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20032478:	defffe04 	addi	sp,sp,-8
2003247c:	dfc00115 	stw	ra,4(sp)
20032480:	df000015 	stw	fp,0(sp)
20032484:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20032488:	d0a00c17 	ldw	r2,-32720(gp)
2003248c:	10000326 	beq	r2,zero,2003249c <alt_get_errno+0x24>
20032490:	d0a00c17 	ldw	r2,-32720(gp)
20032494:	103ee83a 	callr	r2
20032498:	00000106 	br	200324a0 <alt_get_errno+0x28>
2003249c:	d0a6fb04 	addi	r2,gp,-25620
}
200324a0:	e037883a 	mov	sp,fp
200324a4:	dfc00117 	ldw	ra,4(sp)
200324a8:	df000017 	ldw	fp,0(sp)
200324ac:	dec00204 	addi	sp,sp,8
200324b0:	f800283a 	ret

200324b4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
200324b4:	defffb04 	addi	sp,sp,-20
200324b8:	dfc00415 	stw	ra,16(sp)
200324bc:	df000315 	stw	fp,12(sp)
200324c0:	df000304 	addi	fp,sp,12
200324c4:	e13ffe15 	stw	r4,-8(fp)
200324c8:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
200324cc:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
200324d0:	e0bffe17 	ldw	r2,-8(fp)
200324d4:	00802f16 	blt	zero,r2,20032594 <kill+0xe0>
  {
    switch (sig)
200324d8:	e0bfff17 	ldw	r2,-4(fp)
200324dc:	10800828 	cmpgeui	r2,r2,32
200324e0:	1000291e 	bne	r2,zero,20032588 <kill+0xd4>
200324e4:	e0bfff17 	ldw	r2,-4(fp)
200324e8:	100690ba 	slli	r3,r2,2
200324ec:	008800f4 	movhi	r2,8195
200324f0:	10894004 	addi	r2,r2,9472
200324f4:	1885883a 	add	r2,r3,r2
200324f8:	10800017 	ldw	r2,0(r2)
200324fc:	1000683a 	jmp	r2
20032500:	200325a8 	cmpgeui	zero,r4,3222
20032504:	20032588 	cmpgei	zero,r4,3222
20032508:	20032588 	cmpgei	zero,r4,3222
2003250c:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032510:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032514:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032518:	20032580 	call	22003258 <_gp+0x1fc3cf8>
2003251c:	20032588 	cmpgei	zero,r4,3222
20032520:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032524:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032528:	20032580 	call	22003258 <_gp+0x1fc3cf8>
2003252c:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032530:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032534:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032538:	20032580 	call	22003258 <_gp+0x1fc3cf8>
2003253c:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032540:	200325a8 	cmpgeui	zero,r4,3222
20032544:	20032588 	cmpgei	zero,r4,3222
20032548:	20032588 	cmpgei	zero,r4,3222
2003254c:	20032588 	cmpgei	zero,r4,3222
20032550:	200325a8 	cmpgeui	zero,r4,3222
20032554:	20032588 	cmpgei	zero,r4,3222
20032558:	20032588 	cmpgei	zero,r4,3222
2003255c:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032560:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032564:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032568:	20032580 	call	22003258 <_gp+0x1fc3cf8>
2003256c:	20032580 	call	22003258 <_gp+0x1fc3cf8>
20032570:	20032588 	cmpgei	zero,r4,3222
20032574:	20032588 	cmpgei	zero,r4,3222
20032578:	20032580 	call	22003258 <_gp+0x1fc3cf8>
2003257c:	20032580 	call	22003258 <_gp+0x1fc3cf8>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
20032580:	0009883a 	mov	r4,zero
20032584:	00322580 	call	20032258 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
20032588:	00800584 	movi	r2,22
2003258c:	e0bffd15 	stw	r2,-12(fp)
20032590:	00000606 	br	200325ac <kill+0xf8>
    }
  }

  else if (pid > 0)
20032594:	e0bffe17 	ldw	r2,-8(fp)
20032598:	0080040e 	bge	zero,r2,200325ac <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
2003259c:	008000c4 	movi	r2,3
200325a0:	e0bffd15 	stw	r2,-12(fp)
200325a4:	00000106 	br	200325ac <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
200325a8:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
200325ac:	e0bffd17 	ldw	r2,-12(fp)
200325b0:	10000626 	beq	r2,zero,200325cc <kill+0x118>
  {
    ALT_ERRNO = status;
200325b4:	00324780 	call	20032478 <alt_get_errno>
200325b8:	1007883a 	mov	r3,r2
200325bc:	e0bffd17 	ldw	r2,-12(fp)
200325c0:	18800015 	stw	r2,0(r3)
    return -1;
200325c4:	00bfffc4 	movi	r2,-1
200325c8:	00000106 	br	200325d0 <kill+0x11c>
  }

  return 0;
200325cc:	0005883a 	mov	r2,zero
}
200325d0:	e037883a 	mov	sp,fp
200325d4:	dfc00117 	ldw	ra,4(sp)
200325d8:	df000017 	ldw	fp,0(sp)
200325dc:	dec00204 	addi	sp,sp,8
200325e0:	f800283a 	ret

200325e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
200325e4:	defffc04 	addi	sp,sp,-16
200325e8:	df000315 	stw	fp,12(sp)
200325ec:	df000304 	addi	fp,sp,12
200325f0:	e13ffd15 	stw	r4,-12(fp)
200325f4:	e17ffe15 	stw	r5,-8(fp)
200325f8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
200325fc:	e0fffe17 	ldw	r3,-8(fp)
20032600:	e0bffd17 	ldw	r2,-12(fp)
20032604:	18800c26 	beq	r3,r2,20032638 <alt_load_section+0x54>
  {
    while( to != end )
20032608:	00000806 	br	2003262c <alt_load_section+0x48>
    {
      *to++ = *from++;
2003260c:	e0bffe17 	ldw	r2,-8(fp)
20032610:	10c00104 	addi	r3,r2,4
20032614:	e0fffe15 	stw	r3,-8(fp)
20032618:	e0fffd17 	ldw	r3,-12(fp)
2003261c:	19000104 	addi	r4,r3,4
20032620:	e13ffd15 	stw	r4,-12(fp)
20032624:	18c00017 	ldw	r3,0(r3)
20032628:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
2003262c:	e0fffe17 	ldw	r3,-8(fp)
20032630:	e0bfff17 	ldw	r2,-4(fp)
20032634:	18bff51e 	bne	r3,r2,2003260c <_gp+0xffff30ac>
    {
      *to++ = *from++;
    }
  }
}
20032638:	0001883a 	nop
2003263c:	e037883a 	mov	sp,fp
20032640:	df000017 	ldw	fp,0(sp)
20032644:	dec00104 	addi	sp,sp,4
20032648:	f800283a 	ret

2003264c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
2003264c:	defffe04 	addi	sp,sp,-8
20032650:	dfc00115 	stw	ra,4(sp)
20032654:	df000015 	stw	fp,0(sp)
20032658:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
2003265c:	018800f4 	movhi	r6,8195
20032660:	319d7b04 	addi	r6,r6,30188
20032664:	014800f4 	movhi	r5,8195
20032668:	2956a304 	addi	r5,r5,23180
2003266c:	010800f4 	movhi	r4,8195
20032670:	211d7b04 	addi	r4,r4,30188
20032674:	00325e40 	call	200325e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
20032678:	018800b4 	movhi	r6,8194
2003267c:	31807004 	addi	r6,r6,448
20032680:	014800b4 	movhi	r5,8194
20032684:	29400804 	addi	r5,r5,32
20032688:	010800b4 	movhi	r4,8194
2003268c:	21000804 	addi	r4,r4,32
20032690:	00325e40 	call	200325e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
20032694:	018800f4 	movhi	r6,8195
20032698:	3196a304 	addi	r6,r6,23180
2003269c:	014800f4 	movhi	r5,8195
200326a0:	2953f004 	addi	r5,r5,20416
200326a4:	010800f4 	movhi	r4,8195
200326a8:	2113f004 	addi	r4,r4,20416
200326ac:	00325e40 	call	200325e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
200326b0:	003409c0 	call	2003409c <alt_dcache_flush_all>
  alt_icache_flush_all();
200326b4:	00345400 	call	20034540 <alt_icache_flush_all>
}
200326b8:	0001883a 	nop
200326bc:	e037883a 	mov	sp,fp
200326c0:	dfc00117 	ldw	ra,4(sp)
200326c4:	df000017 	ldw	fp,0(sp)
200326c8:	dec00204 	addi	sp,sp,8
200326cc:	f800283a 	ret

200326d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200326d0:	defffe04 	addi	sp,sp,-8
200326d4:	dfc00115 	stw	ra,4(sp)
200326d8:	df000015 	stw	fp,0(sp)
200326dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200326e0:	d0a00c17 	ldw	r2,-32720(gp)
200326e4:	10000326 	beq	r2,zero,200326f4 <alt_get_errno+0x24>
200326e8:	d0a00c17 	ldw	r2,-32720(gp)
200326ec:	103ee83a 	callr	r2
200326f0:	00000106 	br	200326f8 <alt_get_errno+0x28>
200326f4:	d0a6fb04 	addi	r2,gp,-25620
}
200326f8:	e037883a 	mov	sp,fp
200326fc:	dfc00117 	ldw	ra,4(sp)
20032700:	df000017 	ldw	fp,0(sp)
20032704:	dec00204 	addi	sp,sp,8
20032708:	f800283a 	ret

2003270c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
2003270c:	defff904 	addi	sp,sp,-28
20032710:	dfc00615 	stw	ra,24(sp)
20032714:	df000515 	stw	fp,20(sp)
20032718:	df000504 	addi	fp,sp,20
2003271c:	e13ffd15 	stw	r4,-12(fp)
20032720:	e17ffe15 	stw	r5,-8(fp)
20032724:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
20032728:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2003272c:	e0bffd17 	ldw	r2,-12(fp)
20032730:	10000616 	blt	r2,zero,2003274c <lseek+0x40>
20032734:	e0bffd17 	ldw	r2,-12(fp)
20032738:	10c00324 	muli	r3,r2,12
2003273c:	008800f4 	movhi	r2,8195
20032740:	1098d604 	addi	r2,r2,25432
20032744:	1885883a 	add	r2,r3,r2
20032748:	00000106 	br	20032750 <lseek+0x44>
2003274c:	0005883a 	mov	r2,zero
20032750:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
20032754:	e0bffc17 	ldw	r2,-16(fp)
20032758:	10001026 	beq	r2,zero,2003279c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
2003275c:	e0bffc17 	ldw	r2,-16(fp)
20032760:	10800017 	ldw	r2,0(r2)
20032764:	10800717 	ldw	r2,28(r2)
20032768:	10000926 	beq	r2,zero,20032790 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
2003276c:	e0bffc17 	ldw	r2,-16(fp)
20032770:	10800017 	ldw	r2,0(r2)
20032774:	10800717 	ldw	r2,28(r2)
20032778:	e1bfff17 	ldw	r6,-4(fp)
2003277c:	e17ffe17 	ldw	r5,-8(fp)
20032780:	e13ffc17 	ldw	r4,-16(fp)
20032784:	103ee83a 	callr	r2
20032788:	e0bffb15 	stw	r2,-20(fp)
2003278c:	00000506 	br	200327a4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
20032790:	00bfde84 	movi	r2,-134
20032794:	e0bffb15 	stw	r2,-20(fp)
20032798:	00000206 	br	200327a4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
2003279c:	00bfebc4 	movi	r2,-81
200327a0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
200327a4:	e0bffb17 	ldw	r2,-20(fp)
200327a8:	1000070e 	bge	r2,zero,200327c8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
200327ac:	00326d00 	call	200326d0 <alt_get_errno>
200327b0:	1007883a 	mov	r3,r2
200327b4:	e0bffb17 	ldw	r2,-20(fp)
200327b8:	0085c83a 	sub	r2,zero,r2
200327bc:	18800015 	stw	r2,0(r3)
    rc = -1;
200327c0:	00bfffc4 	movi	r2,-1
200327c4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
200327c8:	e0bffb17 	ldw	r2,-20(fp)
}
200327cc:	e037883a 	mov	sp,fp
200327d0:	dfc00117 	ldw	ra,4(sp)
200327d4:	df000017 	ldw	fp,0(sp)
200327d8:	dec00204 	addi	sp,sp,8
200327dc:	f800283a 	ret

200327e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
200327e0:	defffd04 	addi	sp,sp,-12
200327e4:	dfc00215 	stw	ra,8(sp)
200327e8:	df000115 	stw	fp,4(sp)
200327ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
200327f0:	0009883a 	mov	r4,zero
200327f4:	0032ee80 	call	20032ee8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
200327f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
200327fc:	0032f200 	call	20032f20 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
20032800:	018800f4 	movhi	r6,8195
20032804:	31969804 	addi	r6,r6,23136
20032808:	014800f4 	movhi	r5,8195
2003280c:	29569804 	addi	r5,r5,23136
20032810:	010800f4 	movhi	r4,8195
20032814:	21169804 	addi	r4,r4,23136
20032818:	00348d80 	call	200348d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
2003281c:	00341c40 	call	200341c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
20032820:	010800f4 	movhi	r4,8195
20032824:	21108904 	addi	r4,r4,16932
20032828:	0034bac0 	call	20034bac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
2003282c:	d0a70217 	ldw	r2,-25592(gp)
20032830:	d0e70317 	ldw	r3,-25588(gp)
20032834:	d1270417 	ldw	r4,-25584(gp)
20032838:	200d883a 	mov	r6,r4
2003283c:	180b883a 	mov	r5,r3
20032840:	1009883a 	mov	r4,r2
20032844:	00237240 	call	20023724 <main>
20032848:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
2003284c:	01000044 	movi	r4,1
20032850:	003215c0 	call	2003215c <close>
  exit (result);
20032854:	e13fff17 	ldw	r4,-4(fp)
20032858:	0034bc00 	call	20034bc0 <exit>

2003285c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
2003285c:	defffe04 	addi	sp,sp,-8
20032860:	df000115 	stw	fp,4(sp)
20032864:	df000104 	addi	fp,sp,4
20032868:	e13fff15 	stw	r4,-4(fp)
}
2003286c:	0001883a 	nop
20032870:	e037883a 	mov	sp,fp
20032874:	df000017 	ldw	fp,0(sp)
20032878:	dec00104 	addi	sp,sp,4
2003287c:	f800283a 	ret

20032880 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
20032880:	defffe04 	addi	sp,sp,-8
20032884:	df000115 	stw	fp,4(sp)
20032888:	df000104 	addi	fp,sp,4
2003288c:	e13fff15 	stw	r4,-4(fp)
}
20032890:	0001883a 	nop
20032894:	e037883a 	mov	sp,fp
20032898:	df000017 	ldw	fp,0(sp)
2003289c:	dec00104 	addi	sp,sp,4
200328a0:	f800283a 	ret

200328a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200328a4:	defffe04 	addi	sp,sp,-8
200328a8:	dfc00115 	stw	ra,4(sp)
200328ac:	df000015 	stw	fp,0(sp)
200328b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200328b4:	d0a00c17 	ldw	r2,-32720(gp)
200328b8:	10000326 	beq	r2,zero,200328c8 <alt_get_errno+0x24>
200328bc:	d0a00c17 	ldw	r2,-32720(gp)
200328c0:	103ee83a 	callr	r2
200328c4:	00000106 	br	200328cc <alt_get_errno+0x28>
200328c8:	d0a6fb04 	addi	r2,gp,-25620
}
200328cc:	e037883a 	mov	sp,fp
200328d0:	dfc00117 	ldw	ra,4(sp)
200328d4:	df000017 	ldw	fp,0(sp)
200328d8:	dec00204 	addi	sp,sp,8
200328dc:	f800283a 	ret

200328e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
200328e0:	defffd04 	addi	sp,sp,-12
200328e4:	df000215 	stw	fp,8(sp)
200328e8:	df000204 	addi	fp,sp,8
200328ec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
200328f0:	e0bfff17 	ldw	r2,-4(fp)
200328f4:	10800217 	ldw	r2,8(r2)
200328f8:	10d00034 	orhi	r3,r2,16384
200328fc:	e0bfff17 	ldw	r2,-4(fp)
20032900:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20032904:	e03ffe15 	stw	zero,-8(fp)
20032908:	00001d06 	br	20032980 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2003290c:	008800f4 	movhi	r2,8195
20032910:	1098d604 	addi	r2,r2,25432
20032914:	e0fffe17 	ldw	r3,-8(fp)
20032918:	18c00324 	muli	r3,r3,12
2003291c:	10c5883a 	add	r2,r2,r3
20032920:	10c00017 	ldw	r3,0(r2)
20032924:	e0bfff17 	ldw	r2,-4(fp)
20032928:	10800017 	ldw	r2,0(r2)
2003292c:	1880111e 	bne	r3,r2,20032974 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20032930:	008800f4 	movhi	r2,8195
20032934:	1098d604 	addi	r2,r2,25432
20032938:	e0fffe17 	ldw	r3,-8(fp)
2003293c:	18c00324 	muli	r3,r3,12
20032940:	10c5883a 	add	r2,r2,r3
20032944:	10800204 	addi	r2,r2,8
20032948:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2003294c:	1000090e 	bge	r2,zero,20032974 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
20032950:	e0bffe17 	ldw	r2,-8(fp)
20032954:	10c00324 	muli	r3,r2,12
20032958:	008800f4 	movhi	r2,8195
2003295c:	1098d604 	addi	r2,r2,25432
20032960:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20032964:	e0bfff17 	ldw	r2,-4(fp)
20032968:	18800226 	beq	r3,r2,20032974 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
2003296c:	00bffcc4 	movi	r2,-13
20032970:	00000806 	br	20032994 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20032974:	e0bffe17 	ldw	r2,-8(fp)
20032978:	10800044 	addi	r2,r2,1
2003297c:	e0bffe15 	stw	r2,-8(fp)
20032980:	d0a00b17 	ldw	r2,-32724(gp)
20032984:	1007883a 	mov	r3,r2
20032988:	e0bffe17 	ldw	r2,-8(fp)
2003298c:	18bfdf2e 	bgeu	r3,r2,2003290c <_gp+0xffff33ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
20032990:	0005883a 	mov	r2,zero
}
20032994:	e037883a 	mov	sp,fp
20032998:	df000017 	ldw	fp,0(sp)
2003299c:	dec00104 	addi	sp,sp,4
200329a0:	f800283a 	ret

200329a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
200329a4:	defff604 	addi	sp,sp,-40
200329a8:	dfc00915 	stw	ra,36(sp)
200329ac:	df000815 	stw	fp,32(sp)
200329b0:	df000804 	addi	fp,sp,32
200329b4:	e13ffd15 	stw	r4,-12(fp)
200329b8:	e17ffe15 	stw	r5,-8(fp)
200329bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
200329c0:	00bfffc4 	movi	r2,-1
200329c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
200329c8:	00bffb44 	movi	r2,-19
200329cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
200329d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
200329d4:	d1600904 	addi	r5,gp,-32732
200329d8:	e13ffd17 	ldw	r4,-12(fp)
200329dc:	00342840 	call	20034284 <alt_find_dev>
200329e0:	e0bff815 	stw	r2,-32(fp)
200329e4:	e0bff817 	ldw	r2,-32(fp)
200329e8:	1000051e 	bne	r2,zero,20032a00 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
200329ec:	e13ffd17 	ldw	r4,-12(fp)
200329f0:	00343140 	call	20034314 <alt_find_file>
200329f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
200329f8:	00800044 	movi	r2,1
200329fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
20032a00:	e0bff817 	ldw	r2,-32(fp)
20032a04:	10002926 	beq	r2,zero,20032aac <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
20032a08:	e13ff817 	ldw	r4,-32(fp)
20032a0c:	003449c0 	call	2003449c <alt_get_fd>
20032a10:	e0bff915 	stw	r2,-28(fp)
20032a14:	e0bff917 	ldw	r2,-28(fp)
20032a18:	1000030e 	bge	r2,zero,20032a28 <open+0x84>
    {
      status = index;
20032a1c:	e0bff917 	ldw	r2,-28(fp)
20032a20:	e0bffa15 	stw	r2,-24(fp)
20032a24:	00002306 	br	20032ab4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
20032a28:	e0bff917 	ldw	r2,-28(fp)
20032a2c:	10c00324 	muli	r3,r2,12
20032a30:	008800f4 	movhi	r2,8195
20032a34:	1098d604 	addi	r2,r2,25432
20032a38:	1885883a 	add	r2,r3,r2
20032a3c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20032a40:	e0fffe17 	ldw	r3,-8(fp)
20032a44:	00900034 	movhi	r2,16384
20032a48:	10bfffc4 	addi	r2,r2,-1
20032a4c:	1886703a 	and	r3,r3,r2
20032a50:	e0bffc17 	ldw	r2,-16(fp)
20032a54:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
20032a58:	e0bffb17 	ldw	r2,-20(fp)
20032a5c:	1000051e 	bne	r2,zero,20032a74 <open+0xd0>
20032a60:	e13ffc17 	ldw	r4,-16(fp)
20032a64:	00328e00 	call	200328e0 <alt_file_locked>
20032a68:	e0bffa15 	stw	r2,-24(fp)
20032a6c:	e0bffa17 	ldw	r2,-24(fp)
20032a70:	10001016 	blt	r2,zero,20032ab4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
20032a74:	e0bff817 	ldw	r2,-32(fp)
20032a78:	10800317 	ldw	r2,12(r2)
20032a7c:	10000826 	beq	r2,zero,20032aa0 <open+0xfc>
20032a80:	e0bff817 	ldw	r2,-32(fp)
20032a84:	10800317 	ldw	r2,12(r2)
20032a88:	e1ffff17 	ldw	r7,-4(fp)
20032a8c:	e1bffe17 	ldw	r6,-8(fp)
20032a90:	e17ffd17 	ldw	r5,-12(fp)
20032a94:	e13ffc17 	ldw	r4,-16(fp)
20032a98:	103ee83a 	callr	r2
20032a9c:	00000106 	br	20032aa4 <open+0x100>
20032aa0:	0005883a 	mov	r2,zero
20032aa4:	e0bffa15 	stw	r2,-24(fp)
20032aa8:	00000206 	br	20032ab4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
20032aac:	00bffb44 	movi	r2,-19
20032ab0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
20032ab4:	e0bffa17 	ldw	r2,-24(fp)
20032ab8:	1000090e 	bge	r2,zero,20032ae0 <open+0x13c>
  {
    alt_release_fd (index);  
20032abc:	e13ff917 	ldw	r4,-28(fp)
20032ac0:	0032c6c0 	call	20032c6c <alt_release_fd>
    ALT_ERRNO = -status;
20032ac4:	00328a40 	call	200328a4 <alt_get_errno>
20032ac8:	1007883a 	mov	r3,r2
20032acc:	e0bffa17 	ldw	r2,-24(fp)
20032ad0:	0085c83a 	sub	r2,zero,r2
20032ad4:	18800015 	stw	r2,0(r3)
    return -1;
20032ad8:	00bfffc4 	movi	r2,-1
20032adc:	00000106 	br	20032ae4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
20032ae0:	e0bff917 	ldw	r2,-28(fp)
}
20032ae4:	e037883a 	mov	sp,fp
20032ae8:	dfc00117 	ldw	ra,4(sp)
20032aec:	df000017 	ldw	fp,0(sp)
20032af0:	dec00204 	addi	sp,sp,8
20032af4:	f800283a 	ret

20032af8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
20032af8:	defffd04 	addi	sp,sp,-12
20032afc:	dfc00215 	stw	ra,8(sp)
20032b00:	df000115 	stw	fp,4(sp)
20032b04:	df000104 	addi	fp,sp,4
20032b08:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
20032b0c:	d0a00217 	ldw	r2,-32760(gp)
20032b10:	10800217 	ldw	r2,8(r2)
20032b14:	100b883a 	mov	r5,r2
20032b18:	e13fff17 	ldw	r4,-4(fp)
20032b1c:	0034c940 	call	20034c94 <fputs>
#endif
#endif
}
20032b20:	e037883a 	mov	sp,fp
20032b24:	dfc00117 	ldw	ra,4(sp)
20032b28:	df000017 	ldw	fp,0(sp)
20032b2c:	dec00204 	addi	sp,sp,8
20032b30:	f800283a 	ret

20032b34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20032b34:	defffe04 	addi	sp,sp,-8
20032b38:	dfc00115 	stw	ra,4(sp)
20032b3c:	df000015 	stw	fp,0(sp)
20032b40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20032b44:	d0a00c17 	ldw	r2,-32720(gp)
20032b48:	10000326 	beq	r2,zero,20032b58 <alt_get_errno+0x24>
20032b4c:	d0a00c17 	ldw	r2,-32720(gp)
20032b50:	103ee83a 	callr	r2
20032b54:	00000106 	br	20032b5c <alt_get_errno+0x28>
20032b58:	d0a6fb04 	addi	r2,gp,-25620
}
20032b5c:	e037883a 	mov	sp,fp
20032b60:	dfc00117 	ldw	ra,4(sp)
20032b64:	df000017 	ldw	fp,0(sp)
20032b68:	dec00204 	addi	sp,sp,8
20032b6c:	f800283a 	ret

20032b70 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
20032b70:	defff904 	addi	sp,sp,-28
20032b74:	dfc00615 	stw	ra,24(sp)
20032b78:	df000515 	stw	fp,20(sp)
20032b7c:	df000504 	addi	fp,sp,20
20032b80:	e13ffd15 	stw	r4,-12(fp)
20032b84:	e17ffe15 	stw	r5,-8(fp)
20032b88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20032b8c:	e0bffd17 	ldw	r2,-12(fp)
20032b90:	10000616 	blt	r2,zero,20032bac <read+0x3c>
20032b94:	e0bffd17 	ldw	r2,-12(fp)
20032b98:	10c00324 	muli	r3,r2,12
20032b9c:	008800f4 	movhi	r2,8195
20032ba0:	1098d604 	addi	r2,r2,25432
20032ba4:	1885883a 	add	r2,r3,r2
20032ba8:	00000106 	br	20032bb0 <read+0x40>
20032bac:	0005883a 	mov	r2,zero
20032bb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
20032bb4:	e0bffb17 	ldw	r2,-20(fp)
20032bb8:	10002226 	beq	r2,zero,20032c44 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20032bbc:	e0bffb17 	ldw	r2,-20(fp)
20032bc0:	10800217 	ldw	r2,8(r2)
20032bc4:	108000cc 	andi	r2,r2,3
20032bc8:	10800060 	cmpeqi	r2,r2,1
20032bcc:	1000181e 	bne	r2,zero,20032c30 <read+0xc0>
        (fd->dev->read))
20032bd0:	e0bffb17 	ldw	r2,-20(fp)
20032bd4:	10800017 	ldw	r2,0(r2)
20032bd8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20032bdc:	10001426 	beq	r2,zero,20032c30 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
20032be0:	e0bffb17 	ldw	r2,-20(fp)
20032be4:	10800017 	ldw	r2,0(r2)
20032be8:	10800517 	ldw	r2,20(r2)
20032bec:	e0ffff17 	ldw	r3,-4(fp)
20032bf0:	180d883a 	mov	r6,r3
20032bf4:	e17ffe17 	ldw	r5,-8(fp)
20032bf8:	e13ffb17 	ldw	r4,-20(fp)
20032bfc:	103ee83a 	callr	r2
20032c00:	e0bffc15 	stw	r2,-16(fp)
20032c04:	e0bffc17 	ldw	r2,-16(fp)
20032c08:	1000070e 	bge	r2,zero,20032c28 <read+0xb8>
        {
          ALT_ERRNO = -rval;
20032c0c:	0032b340 	call	20032b34 <alt_get_errno>
20032c10:	1007883a 	mov	r3,r2
20032c14:	e0bffc17 	ldw	r2,-16(fp)
20032c18:	0085c83a 	sub	r2,zero,r2
20032c1c:	18800015 	stw	r2,0(r3)
          return -1;
20032c20:	00bfffc4 	movi	r2,-1
20032c24:	00000c06 	br	20032c58 <read+0xe8>
        }
        return rval;
20032c28:	e0bffc17 	ldw	r2,-16(fp)
20032c2c:	00000a06 	br	20032c58 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
20032c30:	0032b340 	call	20032b34 <alt_get_errno>
20032c34:	1007883a 	mov	r3,r2
20032c38:	00800344 	movi	r2,13
20032c3c:	18800015 	stw	r2,0(r3)
20032c40:	00000406 	br	20032c54 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
20032c44:	0032b340 	call	20032b34 <alt_get_errno>
20032c48:	1007883a 	mov	r3,r2
20032c4c:	00801444 	movi	r2,81
20032c50:	18800015 	stw	r2,0(r3)
  }
  return -1;
20032c54:	00bfffc4 	movi	r2,-1
}
20032c58:	e037883a 	mov	sp,fp
20032c5c:	dfc00117 	ldw	ra,4(sp)
20032c60:	df000017 	ldw	fp,0(sp)
20032c64:	dec00204 	addi	sp,sp,8
20032c68:	f800283a 	ret

20032c6c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
20032c6c:	defffe04 	addi	sp,sp,-8
20032c70:	df000115 	stw	fp,4(sp)
20032c74:	df000104 	addi	fp,sp,4
20032c78:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
20032c7c:	e0bfff17 	ldw	r2,-4(fp)
20032c80:	108000d0 	cmplti	r2,r2,3
20032c84:	10000d1e 	bne	r2,zero,20032cbc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
20032c88:	008800f4 	movhi	r2,8195
20032c8c:	1098d604 	addi	r2,r2,25432
20032c90:	e0ffff17 	ldw	r3,-4(fp)
20032c94:	18c00324 	muli	r3,r3,12
20032c98:	10c5883a 	add	r2,r2,r3
20032c9c:	10800204 	addi	r2,r2,8
20032ca0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
20032ca4:	008800f4 	movhi	r2,8195
20032ca8:	1098d604 	addi	r2,r2,25432
20032cac:	e0ffff17 	ldw	r3,-4(fp)
20032cb0:	18c00324 	muli	r3,r3,12
20032cb4:	10c5883a 	add	r2,r2,r3
20032cb8:	10000015 	stw	zero,0(r2)
  }
}
20032cbc:	0001883a 	nop
20032cc0:	e037883a 	mov	sp,fp
20032cc4:	df000017 	ldw	fp,0(sp)
20032cc8:	dec00104 	addi	sp,sp,4
20032ccc:	f800283a 	ret

20032cd0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
20032cd0:	defff904 	addi	sp,sp,-28
20032cd4:	df000615 	stw	fp,24(sp)
20032cd8:	df000604 	addi	fp,sp,24
20032cdc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032ce0:	0005303a 	rdctl	r2,status
20032ce4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032ce8:	e0fffe17 	ldw	r3,-8(fp)
20032cec:	00bfff84 	movi	r2,-2
20032cf0:	1884703a 	and	r2,r3,r2
20032cf4:	1001703a 	wrctl	status,r2
  
  return context;
20032cf8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
20032cfc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
20032d00:	d0a00d17 	ldw	r2,-32716(gp)
20032d04:	10c000c4 	addi	r3,r2,3
20032d08:	00bfff04 	movi	r2,-4
20032d0c:	1884703a 	and	r2,r3,r2
20032d10:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
20032d14:	d0e00d17 	ldw	r3,-32716(gp)
20032d18:	e0bfff17 	ldw	r2,-4(fp)
20032d1c:	1887883a 	add	r3,r3,r2
20032d20:	00880134 	movhi	r2,8196
20032d24:	10bd0004 	addi	r2,r2,-3072
20032d28:	10c0062e 	bgeu	r2,r3,20032d44 <sbrk+0x74>
20032d2c:	e0bffb17 	ldw	r2,-20(fp)
20032d30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032d34:	e0bffa17 	ldw	r2,-24(fp)
20032d38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
20032d3c:	00bfffc4 	movi	r2,-1
20032d40:	00000b06 	br	20032d70 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
20032d44:	d0a00d17 	ldw	r2,-32716(gp)
20032d48:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
20032d4c:	d0e00d17 	ldw	r3,-32716(gp)
20032d50:	e0bfff17 	ldw	r2,-4(fp)
20032d54:	1885883a 	add	r2,r3,r2
20032d58:	d0a00d15 	stw	r2,-32716(gp)
20032d5c:	e0bffb17 	ldw	r2,-20(fp)
20032d60:	e0bffc15 	stw	r2,-16(fp)
20032d64:	e0bffc17 	ldw	r2,-16(fp)
20032d68:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
20032d6c:	e0bffd17 	ldw	r2,-12(fp)
} 
20032d70:	e037883a 	mov	sp,fp
20032d74:	df000017 	ldw	fp,0(sp)
20032d78:	dec00104 	addi	sp,sp,4
20032d7c:	f800283a 	ret

20032d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20032d80:	defffe04 	addi	sp,sp,-8
20032d84:	dfc00115 	stw	ra,4(sp)
20032d88:	df000015 	stw	fp,0(sp)
20032d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20032d90:	d0a00c17 	ldw	r2,-32720(gp)
20032d94:	10000326 	beq	r2,zero,20032da4 <alt_get_errno+0x24>
20032d98:	d0a00c17 	ldw	r2,-32720(gp)
20032d9c:	103ee83a 	callr	r2
20032da0:	00000106 	br	20032da8 <alt_get_errno+0x28>
20032da4:	d0a6fb04 	addi	r2,gp,-25620
}
20032da8:	e037883a 	mov	sp,fp
20032dac:	dfc00117 	ldw	ra,4(sp)
20032db0:	df000017 	ldw	fp,0(sp)
20032db4:	dec00204 	addi	sp,sp,8
20032db8:	f800283a 	ret

20032dbc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
20032dbc:	defff904 	addi	sp,sp,-28
20032dc0:	dfc00615 	stw	ra,24(sp)
20032dc4:	df000515 	stw	fp,20(sp)
20032dc8:	df000504 	addi	fp,sp,20
20032dcc:	e13ffd15 	stw	r4,-12(fp)
20032dd0:	e17ffe15 	stw	r5,-8(fp)
20032dd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20032dd8:	e0bffd17 	ldw	r2,-12(fp)
20032ddc:	10000616 	blt	r2,zero,20032df8 <write+0x3c>
20032de0:	e0bffd17 	ldw	r2,-12(fp)
20032de4:	10c00324 	muli	r3,r2,12
20032de8:	008800f4 	movhi	r2,8195
20032dec:	1098d604 	addi	r2,r2,25432
20032df0:	1885883a 	add	r2,r3,r2
20032df4:	00000106 	br	20032dfc <write+0x40>
20032df8:	0005883a 	mov	r2,zero
20032dfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
20032e00:	e0bffb17 	ldw	r2,-20(fp)
20032e04:	10002126 	beq	r2,zero,20032e8c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
20032e08:	e0bffb17 	ldw	r2,-20(fp)
20032e0c:	10800217 	ldw	r2,8(r2)
20032e10:	108000cc 	andi	r2,r2,3
20032e14:	10001826 	beq	r2,zero,20032e78 <write+0xbc>
20032e18:	e0bffb17 	ldw	r2,-20(fp)
20032e1c:	10800017 	ldw	r2,0(r2)
20032e20:	10800617 	ldw	r2,24(r2)
20032e24:	10001426 	beq	r2,zero,20032e78 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
20032e28:	e0bffb17 	ldw	r2,-20(fp)
20032e2c:	10800017 	ldw	r2,0(r2)
20032e30:	10800617 	ldw	r2,24(r2)
20032e34:	e0ffff17 	ldw	r3,-4(fp)
20032e38:	180d883a 	mov	r6,r3
20032e3c:	e17ffe17 	ldw	r5,-8(fp)
20032e40:	e13ffb17 	ldw	r4,-20(fp)
20032e44:	103ee83a 	callr	r2
20032e48:	e0bffc15 	stw	r2,-16(fp)
20032e4c:	e0bffc17 	ldw	r2,-16(fp)
20032e50:	1000070e 	bge	r2,zero,20032e70 <write+0xb4>
      {
        ALT_ERRNO = -rval;
20032e54:	0032d800 	call	20032d80 <alt_get_errno>
20032e58:	1007883a 	mov	r3,r2
20032e5c:	e0bffc17 	ldw	r2,-16(fp)
20032e60:	0085c83a 	sub	r2,zero,r2
20032e64:	18800015 	stw	r2,0(r3)
        return -1;
20032e68:	00bfffc4 	movi	r2,-1
20032e6c:	00000c06 	br	20032ea0 <write+0xe4>
      }
      return rval;
20032e70:	e0bffc17 	ldw	r2,-16(fp)
20032e74:	00000a06 	br	20032ea0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
20032e78:	0032d800 	call	20032d80 <alt_get_errno>
20032e7c:	1007883a 	mov	r3,r2
20032e80:	00800344 	movi	r2,13
20032e84:	18800015 	stw	r2,0(r3)
20032e88:	00000406 	br	20032e9c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
20032e8c:	0032d800 	call	20032d80 <alt_get_errno>
20032e90:	1007883a 	mov	r3,r2
20032e94:	00801444 	movi	r2,81
20032e98:	18800015 	stw	r2,0(r3)
  }
  return -1;
20032e9c:	00bfffc4 	movi	r2,-1
}
20032ea0:	e037883a 	mov	sp,fp
20032ea4:	dfc00117 	ldw	ra,4(sp)
20032ea8:	df000017 	ldw	fp,0(sp)
20032eac:	dec00204 	addi	sp,sp,8
20032eb0:	f800283a 	ret

20032eb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
20032eb4:	defffd04 	addi	sp,sp,-12
20032eb8:	dfc00215 	stw	ra,8(sp)
20032ebc:	df000115 	stw	fp,4(sp)
20032ec0:	df000104 	addi	fp,sp,4
20032ec4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
20032ec8:	d1600904 	addi	r5,gp,-32732
20032ecc:	e13fff17 	ldw	r4,-4(fp)
20032ed0:	00341200 	call	20034120 <alt_dev_llist_insert>
}
20032ed4:	e037883a 	mov	sp,fp
20032ed8:	dfc00117 	ldw	ra,4(sp)
20032edc:	df000017 	ldw	fp,0(sp)
20032ee0:	dec00204 	addi	sp,sp,8
20032ee4:	f800283a 	ret

20032ee8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
20032ee8:	defffd04 	addi	sp,sp,-12
20032eec:	dfc00215 	stw	ra,8(sp)
20032ef0:	df000115 	stw	fp,4(sp)
20032ef4:	df000104 	addi	fp,sp,4
20032ef8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
20032efc:	0034af80 	call	20034af8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
20032f00:	00800044 	movi	r2,1
20032f04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
20032f08:	0001883a 	nop
20032f0c:	e037883a 	mov	sp,fp
20032f10:	dfc00117 	ldw	ra,4(sp)
20032f14:	df000017 	ldw	fp,0(sp)
20032f18:	dec00204 	addi	sp,sp,8
20032f1c:	f800283a 	ret

20032f20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
20032f20:	defffe04 	addi	sp,sp,-8
20032f24:	dfc00115 	stw	ra,4(sp)
20032f28:	df000015 	stw	fp,0(sp)
20032f2c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
20032f30:	01c0fa04 	movi	r7,1000
20032f34:	000d883a 	mov	r6,zero
20032f38:	000b883a 	mov	r5,zero
20032f3c:	01080134 	movhi	r4,8196
20032f40:	21040004 	addi	r4,r4,4096
20032f44:	0033a700 	call	20033a70 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
20032f48:	01800044 	movi	r6,1
20032f4c:	000b883a 	mov	r5,zero
20032f50:	010800f4 	movhi	r4,8195
20032f54:	21194004 	addi	r4,r4,25856
20032f58:	00330f40 	call	200330f4 <altera_avalon_jtag_uart_init>
20032f5c:	010800f4 	movhi	r4,8195
20032f60:	21193604 	addi	r4,r4,25816
20032f64:	0032eb40 	call	20032eb4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
20032f68:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
20032f6c:	010800f4 	movhi	r4,8195
20032f70:	211d4e04 	addi	r4,r4,30008
20032f74:	003441c0 	call	2003441c <alt_fs_reg>
}
20032f78:	0001883a 	nop
20032f7c:	e037883a 	mov	sp,fp
20032f80:	dfc00117 	ldw	ra,4(sp)
20032f84:	df000017 	ldw	fp,0(sp)
20032f88:	dec00204 	addi	sp,sp,8
20032f8c:	f800283a 	ret

20032f90 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
20032f90:	defffa04 	addi	sp,sp,-24
20032f94:	dfc00515 	stw	ra,20(sp)
20032f98:	df000415 	stw	fp,16(sp)
20032f9c:	df000404 	addi	fp,sp,16
20032fa0:	e13ffd15 	stw	r4,-12(fp)
20032fa4:	e17ffe15 	stw	r5,-8(fp)
20032fa8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20032fac:	e0bffd17 	ldw	r2,-12(fp)
20032fb0:	10800017 	ldw	r2,0(r2)
20032fb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
20032fb8:	e0bffc17 	ldw	r2,-16(fp)
20032fbc:	10c00a04 	addi	r3,r2,40
20032fc0:	e0bffd17 	ldw	r2,-12(fp)
20032fc4:	10800217 	ldw	r2,8(r2)
20032fc8:	100f883a 	mov	r7,r2
20032fcc:	e1bfff17 	ldw	r6,-4(fp)
20032fd0:	e17ffe17 	ldw	r5,-8(fp)
20032fd4:	1809883a 	mov	r4,r3
20032fd8:	00335b80 	call	200335b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
20032fdc:	e037883a 	mov	sp,fp
20032fe0:	dfc00117 	ldw	ra,4(sp)
20032fe4:	df000017 	ldw	fp,0(sp)
20032fe8:	dec00204 	addi	sp,sp,8
20032fec:	f800283a 	ret

20032ff0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
20032ff0:	defffa04 	addi	sp,sp,-24
20032ff4:	dfc00515 	stw	ra,20(sp)
20032ff8:	df000415 	stw	fp,16(sp)
20032ffc:	df000404 	addi	fp,sp,16
20033000:	e13ffd15 	stw	r4,-12(fp)
20033004:	e17ffe15 	stw	r5,-8(fp)
20033008:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2003300c:	e0bffd17 	ldw	r2,-12(fp)
20033010:	10800017 	ldw	r2,0(r2)
20033014:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
20033018:	e0bffc17 	ldw	r2,-16(fp)
2003301c:	10c00a04 	addi	r3,r2,40
20033020:	e0bffd17 	ldw	r2,-12(fp)
20033024:	10800217 	ldw	r2,8(r2)
20033028:	100f883a 	mov	r7,r2
2003302c:	e1bfff17 	ldw	r6,-4(fp)
20033030:	e17ffe17 	ldw	r5,-8(fp)
20033034:	1809883a 	mov	r4,r3
20033038:	00337d40 	call	200337d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
2003303c:	e037883a 	mov	sp,fp
20033040:	dfc00117 	ldw	ra,4(sp)
20033044:	df000017 	ldw	fp,0(sp)
20033048:	dec00204 	addi	sp,sp,8
2003304c:	f800283a 	ret

20033050 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
20033050:	defffc04 	addi	sp,sp,-16
20033054:	dfc00315 	stw	ra,12(sp)
20033058:	df000215 	stw	fp,8(sp)
2003305c:	df000204 	addi	fp,sp,8
20033060:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20033064:	e0bfff17 	ldw	r2,-4(fp)
20033068:	10800017 	ldw	r2,0(r2)
2003306c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
20033070:	e0bffe17 	ldw	r2,-8(fp)
20033074:	10c00a04 	addi	r3,r2,40
20033078:	e0bfff17 	ldw	r2,-4(fp)
2003307c:	10800217 	ldw	r2,8(r2)
20033080:	100b883a 	mov	r5,r2
20033084:	1809883a 	mov	r4,r3
20033088:	00334600 	call	20033460 <altera_avalon_jtag_uart_close>
}
2003308c:	e037883a 	mov	sp,fp
20033090:	dfc00117 	ldw	ra,4(sp)
20033094:	df000017 	ldw	fp,0(sp)
20033098:	dec00204 	addi	sp,sp,8
2003309c:	f800283a 	ret

200330a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
200330a0:	defffa04 	addi	sp,sp,-24
200330a4:	dfc00515 	stw	ra,20(sp)
200330a8:	df000415 	stw	fp,16(sp)
200330ac:	df000404 	addi	fp,sp,16
200330b0:	e13ffd15 	stw	r4,-12(fp)
200330b4:	e17ffe15 	stw	r5,-8(fp)
200330b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
200330bc:	e0bffd17 	ldw	r2,-12(fp)
200330c0:	10800017 	ldw	r2,0(r2)
200330c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
200330c8:	e0bffc17 	ldw	r2,-16(fp)
200330cc:	10800a04 	addi	r2,r2,40
200330d0:	e1bfff17 	ldw	r6,-4(fp)
200330d4:	e17ffe17 	ldw	r5,-8(fp)
200330d8:	1009883a 	mov	r4,r2
200330dc:	00334c80 	call	200334c8 <altera_avalon_jtag_uart_ioctl>
}
200330e0:	e037883a 	mov	sp,fp
200330e4:	dfc00117 	ldw	ra,4(sp)
200330e8:	df000017 	ldw	fp,0(sp)
200330ec:	dec00204 	addi	sp,sp,8
200330f0:	f800283a 	ret

200330f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
200330f4:	defffa04 	addi	sp,sp,-24
200330f8:	dfc00515 	stw	ra,20(sp)
200330fc:	df000415 	stw	fp,16(sp)
20033100:	df000404 	addi	fp,sp,16
20033104:	e13ffd15 	stw	r4,-12(fp)
20033108:	e17ffe15 	stw	r5,-8(fp)
2003310c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20033110:	e0bffd17 	ldw	r2,-12(fp)
20033114:	00c00044 	movi	r3,1
20033118:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2003311c:	e0bffd17 	ldw	r2,-12(fp)
20033120:	10800017 	ldw	r2,0(r2)
20033124:	10800104 	addi	r2,r2,4
20033128:	1007883a 	mov	r3,r2
2003312c:	e0bffd17 	ldw	r2,-12(fp)
20033130:	10800817 	ldw	r2,32(r2)
20033134:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
20033138:	e0bffe17 	ldw	r2,-8(fp)
2003313c:	e0ffff17 	ldw	r3,-4(fp)
20033140:	d8000015 	stw	zero,0(sp)
20033144:	e1fffd17 	ldw	r7,-12(fp)
20033148:	018800f4 	movhi	r6,8195
2003314c:	318c6d04 	addi	r6,r6,12724
20033150:	180b883a 	mov	r5,r3
20033154:	1009883a 	mov	r4,r2
20033158:	00345740 	call	20034574 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
2003315c:	e0bffd17 	ldw	r2,-12(fp)
20033160:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
20033164:	e0bffd17 	ldw	r2,-12(fp)
20033168:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2003316c:	d0e70617 	ldw	r3,-25576(gp)
20033170:	e1fffd17 	ldw	r7,-12(fp)
20033174:	018800f4 	movhi	r6,8195
20033178:	318cf004 	addi	r6,r6,13248
2003317c:	180b883a 	mov	r5,r3
20033180:	1009883a 	mov	r4,r2
20033184:	0033f700 	call	20033f70 <alt_alarm_start>
20033188:	1000040e 	bge	r2,zero,2003319c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
2003318c:	e0fffd17 	ldw	r3,-12(fp)
20033190:	00a00034 	movhi	r2,32768
20033194:	10bfffc4 	addi	r2,r2,-1
20033198:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
2003319c:	0001883a 	nop
200331a0:	e037883a 	mov	sp,fp
200331a4:	dfc00117 	ldw	ra,4(sp)
200331a8:	df000017 	ldw	fp,0(sp)
200331ac:	dec00204 	addi	sp,sp,8
200331b0:	f800283a 	ret

200331b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
200331b4:	defff804 	addi	sp,sp,-32
200331b8:	df000715 	stw	fp,28(sp)
200331bc:	df000704 	addi	fp,sp,28
200331c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
200331c4:	e0bfff17 	ldw	r2,-4(fp)
200331c8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
200331cc:	e0bffb17 	ldw	r2,-20(fp)
200331d0:	10800017 	ldw	r2,0(r2)
200331d4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
200331d8:	e0bffc17 	ldw	r2,-16(fp)
200331dc:	10800104 	addi	r2,r2,4
200331e0:	10800037 	ldwio	r2,0(r2)
200331e4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
200331e8:	e0bffd17 	ldw	r2,-12(fp)
200331ec:	1080c00c 	andi	r2,r2,768
200331f0:	10006d26 	beq	r2,zero,200333a8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
200331f4:	e0bffd17 	ldw	r2,-12(fp)
200331f8:	1080400c 	andi	r2,r2,256
200331fc:	10003526 	beq	r2,zero,200332d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
20033200:	00800074 	movhi	r2,1
20033204:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20033208:	e0bffb17 	ldw	r2,-20(fp)
2003320c:	10800a17 	ldw	r2,40(r2)
20033210:	10800044 	addi	r2,r2,1
20033214:	1081ffcc 	andi	r2,r2,2047
20033218:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
2003321c:	e0bffb17 	ldw	r2,-20(fp)
20033220:	10c00b17 	ldw	r3,44(r2)
20033224:	e0bffe17 	ldw	r2,-8(fp)
20033228:	18801526 	beq	r3,r2,20033280 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
2003322c:	e0bffc17 	ldw	r2,-16(fp)
20033230:	10800037 	ldwio	r2,0(r2)
20033234:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
20033238:	e0bff917 	ldw	r2,-28(fp)
2003323c:	10a0000c 	andi	r2,r2,32768
20033240:	10001126 	beq	r2,zero,20033288 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
20033244:	e0bffb17 	ldw	r2,-20(fp)
20033248:	10800a17 	ldw	r2,40(r2)
2003324c:	e0fff917 	ldw	r3,-28(fp)
20033250:	1809883a 	mov	r4,r3
20033254:	e0fffb17 	ldw	r3,-20(fp)
20033258:	1885883a 	add	r2,r3,r2
2003325c:	10800e04 	addi	r2,r2,56
20033260:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20033264:	e0bffb17 	ldw	r2,-20(fp)
20033268:	10800a17 	ldw	r2,40(r2)
2003326c:	10800044 	addi	r2,r2,1
20033270:	10c1ffcc 	andi	r3,r2,2047
20033274:	e0bffb17 	ldw	r2,-20(fp)
20033278:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
2003327c:	003fe206 	br	20033208 <_gp+0xffff3ca8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
20033280:	0001883a 	nop
20033284:	00000106 	br	2003328c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
20033288:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
2003328c:	e0bff917 	ldw	r2,-28(fp)
20033290:	10bfffec 	andhi	r2,r2,65535
20033294:	10000f26 	beq	r2,zero,200332d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20033298:	e0bffb17 	ldw	r2,-20(fp)
2003329c:	10c00817 	ldw	r3,32(r2)
200332a0:	00bfff84 	movi	r2,-2
200332a4:	1886703a 	and	r3,r3,r2
200332a8:	e0bffb17 	ldw	r2,-20(fp)
200332ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
200332b0:	e0bffc17 	ldw	r2,-16(fp)
200332b4:	10800104 	addi	r2,r2,4
200332b8:	1007883a 	mov	r3,r2
200332bc:	e0bffb17 	ldw	r2,-20(fp)
200332c0:	10800817 	ldw	r2,32(r2)
200332c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
200332c8:	e0bffc17 	ldw	r2,-16(fp)
200332cc:	10800104 	addi	r2,r2,4
200332d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
200332d4:	e0bffd17 	ldw	r2,-12(fp)
200332d8:	1080800c 	andi	r2,r2,512
200332dc:	103fbe26 	beq	r2,zero,200331d8 <_gp+0xffff3c78>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
200332e0:	e0bffd17 	ldw	r2,-12(fp)
200332e4:	1004d43a 	srli	r2,r2,16
200332e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
200332ec:	00001406 	br	20033340 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
200332f0:	e0bffc17 	ldw	r2,-16(fp)
200332f4:	e0fffb17 	ldw	r3,-20(fp)
200332f8:	18c00d17 	ldw	r3,52(r3)
200332fc:	e13ffb17 	ldw	r4,-20(fp)
20033300:	20c7883a 	add	r3,r4,r3
20033304:	18c20e04 	addi	r3,r3,2104
20033308:	18c00003 	ldbu	r3,0(r3)
2003330c:	18c03fcc 	andi	r3,r3,255
20033310:	18c0201c 	xori	r3,r3,128
20033314:	18ffe004 	addi	r3,r3,-128
20033318:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2003331c:	e0bffb17 	ldw	r2,-20(fp)
20033320:	10800d17 	ldw	r2,52(r2)
20033324:	10800044 	addi	r2,r2,1
20033328:	10c1ffcc 	andi	r3,r2,2047
2003332c:	e0bffb17 	ldw	r2,-20(fp)
20033330:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
20033334:	e0bffa17 	ldw	r2,-24(fp)
20033338:	10bfffc4 	addi	r2,r2,-1
2003333c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
20033340:	e0bffa17 	ldw	r2,-24(fp)
20033344:	10000526 	beq	r2,zero,2003335c <altera_avalon_jtag_uart_irq+0x1a8>
20033348:	e0bffb17 	ldw	r2,-20(fp)
2003334c:	10c00d17 	ldw	r3,52(r2)
20033350:	e0bffb17 	ldw	r2,-20(fp)
20033354:	10800c17 	ldw	r2,48(r2)
20033358:	18bfe51e 	bne	r3,r2,200332f0 <_gp+0xffff3d90>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
2003335c:	e0bffa17 	ldw	r2,-24(fp)
20033360:	103f9d26 	beq	r2,zero,200331d8 <_gp+0xffff3c78>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20033364:	e0bffb17 	ldw	r2,-20(fp)
20033368:	10c00817 	ldw	r3,32(r2)
2003336c:	00bfff44 	movi	r2,-3
20033370:	1886703a 	and	r3,r3,r2
20033374:	e0bffb17 	ldw	r2,-20(fp)
20033378:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2003337c:	e0bffb17 	ldw	r2,-20(fp)
20033380:	10800017 	ldw	r2,0(r2)
20033384:	10800104 	addi	r2,r2,4
20033388:	1007883a 	mov	r3,r2
2003338c:	e0bffb17 	ldw	r2,-20(fp)
20033390:	10800817 	ldw	r2,32(r2)
20033394:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20033398:	e0bffc17 	ldw	r2,-16(fp)
2003339c:	10800104 	addi	r2,r2,4
200333a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
200333a4:	003f8c06 	br	200331d8 <_gp+0xffff3c78>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
200333a8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
200333ac:	0001883a 	nop
200333b0:	e037883a 	mov	sp,fp
200333b4:	df000017 	ldw	fp,0(sp)
200333b8:	dec00104 	addi	sp,sp,4
200333bc:	f800283a 	ret

200333c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
200333c0:	defff804 	addi	sp,sp,-32
200333c4:	df000715 	stw	fp,28(sp)
200333c8:	df000704 	addi	fp,sp,28
200333cc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
200333d0:	e0bffb17 	ldw	r2,-20(fp)
200333d4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
200333d8:	e0bff917 	ldw	r2,-28(fp)
200333dc:	10800017 	ldw	r2,0(r2)
200333e0:	10800104 	addi	r2,r2,4
200333e4:	10800037 	ldwio	r2,0(r2)
200333e8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
200333ec:	e0bffa17 	ldw	r2,-24(fp)
200333f0:	1081000c 	andi	r2,r2,1024
200333f4:	10000b26 	beq	r2,zero,20033424 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
200333f8:	e0bff917 	ldw	r2,-28(fp)
200333fc:	10800017 	ldw	r2,0(r2)
20033400:	10800104 	addi	r2,r2,4
20033404:	1007883a 	mov	r3,r2
20033408:	e0bff917 	ldw	r2,-28(fp)
2003340c:	10800817 	ldw	r2,32(r2)
20033410:	10810014 	ori	r2,r2,1024
20033414:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
20033418:	e0bff917 	ldw	r2,-28(fp)
2003341c:	10000915 	stw	zero,36(r2)
20033420:	00000a06 	br	2003344c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
20033424:	e0bff917 	ldw	r2,-28(fp)
20033428:	10c00917 	ldw	r3,36(r2)
2003342c:	00a00034 	movhi	r2,32768
20033430:	10bfff04 	addi	r2,r2,-4
20033434:	10c00536 	bltu	r2,r3,2003344c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
20033438:	e0bff917 	ldw	r2,-28(fp)
2003343c:	10800917 	ldw	r2,36(r2)
20033440:	10c00044 	addi	r3,r2,1
20033444:	e0bff917 	ldw	r2,-28(fp)
20033448:	10c00915 	stw	r3,36(r2)
2003344c:	d0a70617 	ldw	r2,-25576(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
20033450:	e037883a 	mov	sp,fp
20033454:	df000017 	ldw	fp,0(sp)
20033458:	dec00104 	addi	sp,sp,4
2003345c:	f800283a 	ret

20033460 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
20033460:	defffd04 	addi	sp,sp,-12
20033464:	df000215 	stw	fp,8(sp)
20033468:	df000204 	addi	fp,sp,8
2003346c:	e13ffe15 	stw	r4,-8(fp)
20033470:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20033474:	00000506 	br	2003348c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
20033478:	e0bfff17 	ldw	r2,-4(fp)
2003347c:	1090000c 	andi	r2,r2,16384
20033480:	10000226 	beq	r2,zero,2003348c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
20033484:	00bffd44 	movi	r2,-11
20033488:	00000b06 	br	200334b8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2003348c:	e0bffe17 	ldw	r2,-8(fp)
20033490:	10c00d17 	ldw	r3,52(r2)
20033494:	e0bffe17 	ldw	r2,-8(fp)
20033498:	10800c17 	ldw	r2,48(r2)
2003349c:	18800526 	beq	r3,r2,200334b4 <altera_avalon_jtag_uart_close+0x54>
200334a0:	e0bffe17 	ldw	r2,-8(fp)
200334a4:	10c00917 	ldw	r3,36(r2)
200334a8:	e0bffe17 	ldw	r2,-8(fp)
200334ac:	10800117 	ldw	r2,4(r2)
200334b0:	18bff136 	bltu	r3,r2,20033478 <_gp+0xffff3f18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
200334b4:	0005883a 	mov	r2,zero
}
200334b8:	e037883a 	mov	sp,fp
200334bc:	df000017 	ldw	fp,0(sp)
200334c0:	dec00104 	addi	sp,sp,4
200334c4:	f800283a 	ret

200334c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
200334c8:	defffa04 	addi	sp,sp,-24
200334cc:	df000515 	stw	fp,20(sp)
200334d0:	df000504 	addi	fp,sp,20
200334d4:	e13ffd15 	stw	r4,-12(fp)
200334d8:	e17ffe15 	stw	r5,-8(fp)
200334dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
200334e0:	00bff9c4 	movi	r2,-25
200334e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
200334e8:	e0bffe17 	ldw	r2,-8(fp)
200334ec:	10da8060 	cmpeqi	r3,r2,27137
200334f0:	1800031e 	bne	r3,zero,20033500 <altera_avalon_jtag_uart_ioctl+0x38>
200334f4:	109a80a0 	cmpeqi	r2,r2,27138
200334f8:	1000181e 	bne	r2,zero,2003355c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
200334fc:	00002906 	br	200335a4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
20033500:	e0bffd17 	ldw	r2,-12(fp)
20033504:	10c00117 	ldw	r3,4(r2)
20033508:	00a00034 	movhi	r2,32768
2003350c:	10bfffc4 	addi	r2,r2,-1
20033510:	18802126 	beq	r3,r2,20033598 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
20033514:	e0bfff17 	ldw	r2,-4(fp)
20033518:	10800017 	ldw	r2,0(r2)
2003351c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
20033520:	e0bffc17 	ldw	r2,-16(fp)
20033524:	10800090 	cmplti	r2,r2,2
20033528:	1000061e 	bne	r2,zero,20033544 <altera_avalon_jtag_uart_ioctl+0x7c>
2003352c:	e0fffc17 	ldw	r3,-16(fp)
20033530:	00a00034 	movhi	r2,32768
20033534:	10bfffc4 	addi	r2,r2,-1
20033538:	18800226 	beq	r3,r2,20033544 <altera_avalon_jtag_uart_ioctl+0x7c>
2003353c:	e0bffc17 	ldw	r2,-16(fp)
20033540:	00000206 	br	2003354c <altera_avalon_jtag_uart_ioctl+0x84>
20033544:	00a00034 	movhi	r2,32768
20033548:	10bfff84 	addi	r2,r2,-2
2003354c:	e0fffd17 	ldw	r3,-12(fp)
20033550:	18800115 	stw	r2,4(r3)
      rc = 0;
20033554:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20033558:	00000f06 	br	20033598 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
2003355c:	e0bffd17 	ldw	r2,-12(fp)
20033560:	10c00117 	ldw	r3,4(r2)
20033564:	00a00034 	movhi	r2,32768
20033568:	10bfffc4 	addi	r2,r2,-1
2003356c:	18800c26 	beq	r3,r2,200335a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
20033570:	e0bffd17 	ldw	r2,-12(fp)
20033574:	10c00917 	ldw	r3,36(r2)
20033578:	e0bffd17 	ldw	r2,-12(fp)
2003357c:	10800117 	ldw	r2,4(r2)
20033580:	1885803a 	cmpltu	r2,r3,r2
20033584:	10c03fcc 	andi	r3,r2,255
20033588:	e0bfff17 	ldw	r2,-4(fp)
2003358c:	10c00015 	stw	r3,0(r2)
      rc = 0;
20033590:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20033594:	00000206 	br	200335a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
20033598:	0001883a 	nop
2003359c:	00000106 	br	200335a4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
200335a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
200335a4:	e0bffb17 	ldw	r2,-20(fp)
}
200335a8:	e037883a 	mov	sp,fp
200335ac:	df000017 	ldw	fp,0(sp)
200335b0:	dec00104 	addi	sp,sp,4
200335b4:	f800283a 	ret

200335b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
200335b8:	defff304 	addi	sp,sp,-52
200335bc:	dfc00c15 	stw	ra,48(sp)
200335c0:	df000b15 	stw	fp,44(sp)
200335c4:	df000b04 	addi	fp,sp,44
200335c8:	e13ffc15 	stw	r4,-16(fp)
200335cc:	e17ffd15 	stw	r5,-12(fp)
200335d0:	e1bffe15 	stw	r6,-8(fp)
200335d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
200335d8:	e0bffd17 	ldw	r2,-12(fp)
200335dc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
200335e0:	00004706 	br	20033700 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
200335e4:	e0bffc17 	ldw	r2,-16(fp)
200335e8:	10800a17 	ldw	r2,40(r2)
200335ec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
200335f0:	e0bffc17 	ldw	r2,-16(fp)
200335f4:	10800b17 	ldw	r2,44(r2)
200335f8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
200335fc:	e0fff717 	ldw	r3,-36(fp)
20033600:	e0bff817 	ldw	r2,-32(fp)
20033604:	18800536 	bltu	r3,r2,2003361c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
20033608:	e0fff717 	ldw	r3,-36(fp)
2003360c:	e0bff817 	ldw	r2,-32(fp)
20033610:	1885c83a 	sub	r2,r3,r2
20033614:	e0bff615 	stw	r2,-40(fp)
20033618:	00000406 	br	2003362c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
2003361c:	00c20004 	movi	r3,2048
20033620:	e0bff817 	ldw	r2,-32(fp)
20033624:	1885c83a 	sub	r2,r3,r2
20033628:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2003362c:	e0bff617 	ldw	r2,-40(fp)
20033630:	10001e26 	beq	r2,zero,200336ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
20033634:	e0fffe17 	ldw	r3,-8(fp)
20033638:	e0bff617 	ldw	r2,-40(fp)
2003363c:	1880022e 	bgeu	r3,r2,20033648 <altera_avalon_jtag_uart_read+0x90>
        n = space;
20033640:	e0bffe17 	ldw	r2,-8(fp)
20033644:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
20033648:	e0bffc17 	ldw	r2,-16(fp)
2003364c:	10c00e04 	addi	r3,r2,56
20033650:	e0bff817 	ldw	r2,-32(fp)
20033654:	1885883a 	add	r2,r3,r2
20033658:	e1bff617 	ldw	r6,-40(fp)
2003365c:	100b883a 	mov	r5,r2
20033660:	e13ff517 	ldw	r4,-44(fp)
20033664:	00290a40 	call	200290a4 <memcpy>
      ptr   += n;
20033668:	e0fff517 	ldw	r3,-44(fp)
2003366c:	e0bff617 	ldw	r2,-40(fp)
20033670:	1885883a 	add	r2,r3,r2
20033674:	e0bff515 	stw	r2,-44(fp)
      space -= n;
20033678:	e0fffe17 	ldw	r3,-8(fp)
2003367c:	e0bff617 	ldw	r2,-40(fp)
20033680:	1885c83a 	sub	r2,r3,r2
20033684:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20033688:	e0fff817 	ldw	r3,-32(fp)
2003368c:	e0bff617 	ldw	r2,-40(fp)
20033690:	1885883a 	add	r2,r3,r2
20033694:	10c1ffcc 	andi	r3,r2,2047
20033698:	e0bffc17 	ldw	r2,-16(fp)
2003369c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
200336a0:	e0bffe17 	ldw	r2,-8(fp)
200336a4:	00bfcf16 	blt	zero,r2,200335e4 <_gp+0xffff4084>
200336a8:	00000106 	br	200336b0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
200336ac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
200336b0:	e0fff517 	ldw	r3,-44(fp)
200336b4:	e0bffd17 	ldw	r2,-12(fp)
200336b8:	1880141e 	bne	r3,r2,2003370c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
200336bc:	e0bfff17 	ldw	r2,-4(fp)
200336c0:	1090000c 	andi	r2,r2,16384
200336c4:	1000131e 	bne	r2,zero,20033714 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
200336c8:	0001883a 	nop
200336cc:	e0bffc17 	ldw	r2,-16(fp)
200336d0:	10c00a17 	ldw	r3,40(r2)
200336d4:	e0bff717 	ldw	r2,-36(fp)
200336d8:	1880051e 	bne	r3,r2,200336f0 <altera_avalon_jtag_uart_read+0x138>
200336dc:	e0bffc17 	ldw	r2,-16(fp)
200336e0:	10c00917 	ldw	r3,36(r2)
200336e4:	e0bffc17 	ldw	r2,-16(fp)
200336e8:	10800117 	ldw	r2,4(r2)
200336ec:	18bff736 	bltu	r3,r2,200336cc <_gp+0xffff416c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
200336f0:	e0bffc17 	ldw	r2,-16(fp)
200336f4:	10c00a17 	ldw	r3,40(r2)
200336f8:	e0bff717 	ldw	r2,-36(fp)
200336fc:	18800726 	beq	r3,r2,2003371c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
20033700:	e0bffe17 	ldw	r2,-8(fp)
20033704:	00bfb716 	blt	zero,r2,200335e4 <_gp+0xffff4084>
20033708:	00000506 	br	20033720 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
2003370c:	0001883a 	nop
20033710:	00000306 	br	20033720 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
20033714:	0001883a 	nop
20033718:	00000106 	br	20033720 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
2003371c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
20033720:	e0fff517 	ldw	r3,-44(fp)
20033724:	e0bffd17 	ldw	r2,-12(fp)
20033728:	18801826 	beq	r3,r2,2003378c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003372c:	0005303a 	rdctl	r2,status
20033730:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033734:	e0fffb17 	ldw	r3,-20(fp)
20033738:	00bfff84 	movi	r2,-2
2003373c:	1884703a 	and	r2,r3,r2
20033740:	1001703a 	wrctl	status,r2
  
  return context;
20033744:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
20033748:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2003374c:	e0bffc17 	ldw	r2,-16(fp)
20033750:	10800817 	ldw	r2,32(r2)
20033754:	10c00054 	ori	r3,r2,1
20033758:	e0bffc17 	ldw	r2,-16(fp)
2003375c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20033760:	e0bffc17 	ldw	r2,-16(fp)
20033764:	10800017 	ldw	r2,0(r2)
20033768:	10800104 	addi	r2,r2,4
2003376c:	1007883a 	mov	r3,r2
20033770:	e0bffc17 	ldw	r2,-16(fp)
20033774:	10800817 	ldw	r2,32(r2)
20033778:	18800035 	stwio	r2,0(r3)
2003377c:	e0bffa17 	ldw	r2,-24(fp)
20033780:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033784:	e0bff917 	ldw	r2,-28(fp)
20033788:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
2003378c:	e0fff517 	ldw	r3,-44(fp)
20033790:	e0bffd17 	ldw	r2,-12(fp)
20033794:	18800426 	beq	r3,r2,200337a8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
20033798:	e0fff517 	ldw	r3,-44(fp)
2003379c:	e0bffd17 	ldw	r2,-12(fp)
200337a0:	1885c83a 	sub	r2,r3,r2
200337a4:	00000606 	br	200337c0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
200337a8:	e0bfff17 	ldw	r2,-4(fp)
200337ac:	1090000c 	andi	r2,r2,16384
200337b0:	10000226 	beq	r2,zero,200337bc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
200337b4:	00bffd44 	movi	r2,-11
200337b8:	00000106 	br	200337c0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
200337bc:	00bffec4 	movi	r2,-5
}
200337c0:	e037883a 	mov	sp,fp
200337c4:	dfc00117 	ldw	ra,4(sp)
200337c8:	df000017 	ldw	fp,0(sp)
200337cc:	dec00204 	addi	sp,sp,8
200337d0:	f800283a 	ret

200337d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
200337d4:	defff304 	addi	sp,sp,-52
200337d8:	dfc00c15 	stw	ra,48(sp)
200337dc:	df000b15 	stw	fp,44(sp)
200337e0:	df000b04 	addi	fp,sp,44
200337e4:	e13ffc15 	stw	r4,-16(fp)
200337e8:	e17ffd15 	stw	r5,-12(fp)
200337ec:	e1bffe15 	stw	r6,-8(fp)
200337f0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
200337f4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
200337f8:	e0bffd17 	ldw	r2,-12(fp)
200337fc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
20033800:	00003706 	br	200338e0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
20033804:	e0bffc17 	ldw	r2,-16(fp)
20033808:	10800c17 	ldw	r2,48(r2)
2003380c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
20033810:	e0bffc17 	ldw	r2,-16(fp)
20033814:	10800d17 	ldw	r2,52(r2)
20033818:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
2003381c:	e0fff917 	ldw	r3,-28(fp)
20033820:	e0bff517 	ldw	r2,-44(fp)
20033824:	1880062e 	bgeu	r3,r2,20033840 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
20033828:	e0fff517 	ldw	r3,-44(fp)
2003382c:	e0bff917 	ldw	r2,-28(fp)
20033830:	1885c83a 	sub	r2,r3,r2
20033834:	10bfffc4 	addi	r2,r2,-1
20033838:	e0bff615 	stw	r2,-40(fp)
2003383c:	00000b06 	br	2003386c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
20033840:	e0bff517 	ldw	r2,-44(fp)
20033844:	10000526 	beq	r2,zero,2003385c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
20033848:	00c20004 	movi	r3,2048
2003384c:	e0bff917 	ldw	r2,-28(fp)
20033850:	1885c83a 	sub	r2,r3,r2
20033854:	e0bff615 	stw	r2,-40(fp)
20033858:	00000406 	br	2003386c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
2003385c:	00c1ffc4 	movi	r3,2047
20033860:	e0bff917 	ldw	r2,-28(fp)
20033864:	1885c83a 	sub	r2,r3,r2
20033868:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2003386c:	e0bff617 	ldw	r2,-40(fp)
20033870:	10001e26 	beq	r2,zero,200338ec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
20033874:	e0fffe17 	ldw	r3,-8(fp)
20033878:	e0bff617 	ldw	r2,-40(fp)
2003387c:	1880022e 	bgeu	r3,r2,20033888 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
20033880:	e0bffe17 	ldw	r2,-8(fp)
20033884:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
20033888:	e0bffc17 	ldw	r2,-16(fp)
2003388c:	10c20e04 	addi	r3,r2,2104
20033890:	e0bff917 	ldw	r2,-28(fp)
20033894:	1885883a 	add	r2,r3,r2
20033898:	e1bff617 	ldw	r6,-40(fp)
2003389c:	e17ffd17 	ldw	r5,-12(fp)
200338a0:	1009883a 	mov	r4,r2
200338a4:	00290a40 	call	200290a4 <memcpy>
      ptr   += n;
200338a8:	e0fffd17 	ldw	r3,-12(fp)
200338ac:	e0bff617 	ldw	r2,-40(fp)
200338b0:	1885883a 	add	r2,r3,r2
200338b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
200338b8:	e0fffe17 	ldw	r3,-8(fp)
200338bc:	e0bff617 	ldw	r2,-40(fp)
200338c0:	1885c83a 	sub	r2,r3,r2
200338c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200338c8:	e0fff917 	ldw	r3,-28(fp)
200338cc:	e0bff617 	ldw	r2,-40(fp)
200338d0:	1885883a 	add	r2,r3,r2
200338d4:	10c1ffcc 	andi	r3,r2,2047
200338d8:	e0bffc17 	ldw	r2,-16(fp)
200338dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
200338e0:	e0bffe17 	ldw	r2,-8(fp)
200338e4:	00bfc716 	blt	zero,r2,20033804 <_gp+0xffff42a4>
200338e8:	00000106 	br	200338f0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
200338ec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200338f0:	0005303a 	rdctl	r2,status
200338f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200338f8:	e0fffb17 	ldw	r3,-20(fp)
200338fc:	00bfff84 	movi	r2,-2
20033900:	1884703a 	and	r2,r3,r2
20033904:	1001703a 	wrctl	status,r2
  
  return context;
20033908:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
2003390c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20033910:	e0bffc17 	ldw	r2,-16(fp)
20033914:	10800817 	ldw	r2,32(r2)
20033918:	10c00094 	ori	r3,r2,2
2003391c:	e0bffc17 	ldw	r2,-16(fp)
20033920:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20033924:	e0bffc17 	ldw	r2,-16(fp)
20033928:	10800017 	ldw	r2,0(r2)
2003392c:	10800104 	addi	r2,r2,4
20033930:	1007883a 	mov	r3,r2
20033934:	e0bffc17 	ldw	r2,-16(fp)
20033938:	10800817 	ldw	r2,32(r2)
2003393c:	18800035 	stwio	r2,0(r3)
20033940:	e0bffa17 	ldw	r2,-24(fp)
20033944:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033948:	e0bff817 	ldw	r2,-32(fp)
2003394c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
20033950:	e0bffe17 	ldw	r2,-8(fp)
20033954:	0080100e 	bge	zero,r2,20033998 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
20033958:	e0bfff17 	ldw	r2,-4(fp)
2003395c:	1090000c 	andi	r2,r2,16384
20033960:	1000101e 	bne	r2,zero,200339a4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
20033964:	0001883a 	nop
20033968:	e0bffc17 	ldw	r2,-16(fp)
2003396c:	10c00d17 	ldw	r3,52(r2)
20033970:	e0bff517 	ldw	r2,-44(fp)
20033974:	1880051e 	bne	r3,r2,2003398c <altera_avalon_jtag_uart_write+0x1b8>
20033978:	e0bffc17 	ldw	r2,-16(fp)
2003397c:	10c00917 	ldw	r3,36(r2)
20033980:	e0bffc17 	ldw	r2,-16(fp)
20033984:	10800117 	ldw	r2,4(r2)
20033988:	18bff736 	bltu	r3,r2,20033968 <_gp+0xffff4408>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
2003398c:	e0bffc17 	ldw	r2,-16(fp)
20033990:	10800917 	ldw	r2,36(r2)
20033994:	1000051e 	bne	r2,zero,200339ac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
20033998:	e0bffe17 	ldw	r2,-8(fp)
2003399c:	00bfd016 	blt	zero,r2,200338e0 <_gp+0xffff4380>
200339a0:	00000306 	br	200339b0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
200339a4:	0001883a 	nop
200339a8:	00000106 	br	200339b0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
200339ac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
200339b0:	e0fffd17 	ldw	r3,-12(fp)
200339b4:	e0bff717 	ldw	r2,-36(fp)
200339b8:	18800426 	beq	r3,r2,200339cc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
200339bc:	e0fffd17 	ldw	r3,-12(fp)
200339c0:	e0bff717 	ldw	r2,-36(fp)
200339c4:	1885c83a 	sub	r2,r3,r2
200339c8:	00000606 	br	200339e4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
200339cc:	e0bfff17 	ldw	r2,-4(fp)
200339d0:	1090000c 	andi	r2,r2,16384
200339d4:	10000226 	beq	r2,zero,200339e0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
200339d8:	00bffd44 	movi	r2,-11
200339dc:	00000106 	br	200339e4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
200339e0:	00bffec4 	movi	r2,-5
}
200339e4:	e037883a 	mov	sp,fp
200339e8:	dfc00117 	ldw	ra,4(sp)
200339ec:	df000017 	ldw	fp,0(sp)
200339f0:	dec00204 	addi	sp,sp,8
200339f4:	f800283a 	ret

200339f8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
200339f8:	defffa04 	addi	sp,sp,-24
200339fc:	dfc00515 	stw	ra,20(sp)
20033a00:	df000415 	stw	fp,16(sp)
20033a04:	df000404 	addi	fp,sp,16
20033a08:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
20033a0c:	0007883a 	mov	r3,zero
20033a10:	e0bfff17 	ldw	r2,-4(fp)
20033a14:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
20033a18:	e0bfff17 	ldw	r2,-4(fp)
20033a1c:	10800104 	addi	r2,r2,4
20033a20:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033a24:	0005303a 	rdctl	r2,status
20033a28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033a2c:	e0fffd17 	ldw	r3,-12(fp)
20033a30:	00bfff84 	movi	r2,-2
20033a34:	1884703a 	and	r2,r3,r2
20033a38:	1001703a 	wrctl	status,r2
  
  return context;
20033a3c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
20033a40:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
20033a44:	00349f00 	call	200349f0 <alt_tick>
20033a48:	e0bffc17 	ldw	r2,-16(fp)
20033a4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033a50:	e0bffe17 	ldw	r2,-8(fp)
20033a54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
20033a58:	0001883a 	nop
20033a5c:	e037883a 	mov	sp,fp
20033a60:	dfc00117 	ldw	ra,4(sp)
20033a64:	df000017 	ldw	fp,0(sp)
20033a68:	dec00204 	addi	sp,sp,8
20033a6c:	f800283a 	ret

20033a70 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
20033a70:	defff804 	addi	sp,sp,-32
20033a74:	dfc00715 	stw	ra,28(sp)
20033a78:	df000615 	stw	fp,24(sp)
20033a7c:	df000604 	addi	fp,sp,24
20033a80:	e13ffc15 	stw	r4,-16(fp)
20033a84:	e17ffd15 	stw	r5,-12(fp)
20033a88:	e1bffe15 	stw	r6,-8(fp)
20033a8c:	e1ffff15 	stw	r7,-4(fp)
20033a90:	e0bfff17 	ldw	r2,-4(fp)
20033a94:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
20033a98:	d0a70617 	ldw	r2,-25576(gp)
20033a9c:	1000021e 	bne	r2,zero,20033aa8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
20033aa0:	e0bffb17 	ldw	r2,-20(fp)
20033aa4:	d0a70615 	stw	r2,-25576(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
20033aa8:	e0bffc17 	ldw	r2,-16(fp)
20033aac:	10800104 	addi	r2,r2,4
20033ab0:	00c001c4 	movi	r3,7
20033ab4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
20033ab8:	d8000015 	stw	zero,0(sp)
20033abc:	e1fffc17 	ldw	r7,-16(fp)
20033ac0:	018800f4 	movhi	r6,8195
20033ac4:	318e7e04 	addi	r6,r6,14840
20033ac8:	e17ffe17 	ldw	r5,-8(fp)
20033acc:	e13ffd17 	ldw	r4,-12(fp)
20033ad0:	00345740 	call	20034574 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
20033ad4:	0001883a 	nop
20033ad8:	e037883a 	mov	sp,fp
20033adc:	dfc00117 	ldw	ra,4(sp)
20033ae0:	df000017 	ldw	fp,0(sp)
20033ae4:	dec00204 	addi	sp,sp,8
20033ae8:	f800283a 	ret

20033aec <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
20033aec:	defff404 	addi	sp,sp,-48
20033af0:	df000b15 	stw	fp,44(sp)
20033af4:	df000b04 	addi	fp,sp,44
20033af8:	e13ffc15 	stw	r4,-16(fp)
20033afc:	e17ffd15 	stw	r5,-12(fp)
20033b00:	e1bffe15 	stw	r6,-8(fp)
20033b04:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
20033b08:	e0bffc17 	ldw	r2,-16(fp)
20033b0c:	10800017 	ldw	r2,0(r2)
20033b10:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
20033b14:	e0bff517 	ldw	r2,-44(fp)
20033b18:	10800217 	ldw	r2,8(r2)
20033b1c:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
20033b20:	e0bff617 	ldw	r2,-40(fp)
20033b24:	10bfffc4 	addi	r2,r2,-1
20033b28:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
20033b2c:	e0bffb17 	ldw	r2,-20(fp)
20033b30:	10800044 	addi	r2,r2,1
20033b34:	e0bffb15 	stw	r2,-20(fp)
20033b38:	e0bffb17 	ldw	r2,-20(fp)
20033b3c:	10800003 	ldbu	r2,0(r2)
20033b40:	10803fcc 	andi	r2,r2,255
20033b44:	1080201c 	xori	r2,r2,128
20033b48:	10bfe004 	addi	r2,r2,-128
20033b4c:	103ff71e 	bne	r2,zero,20033b2c <_gp+0xffff45cc>
    ;

  return ptr - string;
20033b50:	e0fffb17 	ldw	r3,-20(fp)
20033b54:	e0bff617 	ldw	r2,-40(fp)
20033b58:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
20033b5c:	10800044 	addi	r2,r2,1
20033b60:	1007883a 	mov	r3,r2
20033b64:	e0bffd17 	ldw	r2,-12(fp)
20033b68:	10c5883a 	add	r2,r2,r3
20033b6c:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
20033b70:	d0a00e04 	addi	r2,gp,-32712
20033b74:	1007883a 	mov	r3,r2
  r4 = (int)name;
20033b78:	e0bffd17 	ldw	r2,-12(fp)
20033b7c:	1009883a 	mov	r4,r2
  r5 = flags;
20033b80:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
20033b84:	e1bfff17 	ldw	r6,-4(fp)
20033b88:	e0bffd17 	ldw	r2,-12(fp)
20033b8c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
20033b90:	e0bff917 	ldw	r2,-28(fp)
20033b94:	10bfffc4 	addi	r2,r2,-1
20033b98:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
20033b9c:	e0bffa17 	ldw	r2,-24(fp)
20033ba0:	10800044 	addi	r2,r2,1
20033ba4:	e0bffa15 	stw	r2,-24(fp)
20033ba8:	e0bffa17 	ldw	r2,-24(fp)
20033bac:	10800003 	ldbu	r2,0(r2)
20033bb0:	10803fcc 	andi	r2,r2,255
20033bb4:	1080201c 	xori	r2,r2,128
20033bb8:	10bfe004 	addi	r2,r2,-128
20033bbc:	103ff71e 	bne	r2,zero,20033b9c <_gp+0xffff463c>
    ;

  return ptr - string;
20033bc0:	e1fffa17 	ldw	r7,-24(fp)
20033bc4:	e0bff917 	ldw	r2,-28(fp)
20033bc8:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
20033bcc:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
20033bd0:	003da07a 	break	1

  handle = (void *)r2;
20033bd4:	e0bff715 	stw	r2,-36(fp)
  error = r3;
20033bd8:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
20033bdc:	e0bff817 	ldw	r2,-32(fp)
20033be0:	1000031e 	bne	r2,zero,20033bf0 <alt_hostfs_open+0x104>
    fd->priv = handle;
20033be4:	e0bffc17 	ldw	r2,-16(fp)
20033be8:	e0fff717 	ldw	r3,-36(fp)
20033bec:	10c00115 	stw	r3,4(r2)

  return -error;
20033bf0:	e0bff817 	ldw	r2,-32(fp)
20033bf4:	0085c83a 	sub	r2,zero,r2
}
20033bf8:	e037883a 	mov	sp,fp
20033bfc:	df000017 	ldw	fp,0(sp)
20033c00:	dec00104 	addi	sp,sp,4
20033c04:	f800283a 	ret

20033c08 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
20033c08:	defffd04 	addi	sp,sp,-12
20033c0c:	df000215 	stw	fp,8(sp)
20033c10:	df000204 	addi	fp,sp,8
20033c14:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
20033c18:	d0a01104 	addi	r2,gp,-32700
20033c1c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
20033c20:	e0bfff17 	ldw	r2,-4(fp)
20033c24:	10800117 	ldw	r2,4(r2)
20033c28:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
20033c2c:	003da07a 	break	1

  error = r3;
20033c30:	e0fffe15 	stw	r3,-8(fp)

  return -error;
20033c34:	e0bffe17 	ldw	r2,-8(fp)
20033c38:	0085c83a 	sub	r2,zero,r2
}
20033c3c:	e037883a 	mov	sp,fp
20033c40:	df000017 	ldw	fp,0(sp)
20033c44:	dec00104 	addi	sp,sp,4
20033c48:	f800283a 	ret

20033c4c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
20033c4c:	defffa04 	addi	sp,sp,-24
20033c50:	df000515 	stw	fp,20(sp)
20033c54:	df000504 	addi	fp,sp,20
20033c58:	e13ffd15 	stw	r4,-12(fp)
20033c5c:	e17ffe15 	stw	r5,-8(fp)
20033c60:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
20033c64:	d0a01404 	addi	r2,gp,-32688
20033c68:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
20033c6c:	e0bffd17 	ldw	r2,-12(fp)
20033c70:	10800117 	ldw	r2,4(r2)
20033c74:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
20033c78:	e0bffe17 	ldw	r2,-8(fp)
20033c7c:	100b883a 	mov	r5,r2
  r6 = len;
20033c80:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
20033c84:	003da07a 	break	1

  rc = r2;
20033c88:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
20033c8c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
20033c90:	e0bffc17 	ldw	r2,-16(fp)
20033c94:	10000326 	beq	r2,zero,20033ca4 <alt_hostfs_read+0x58>
20033c98:	e0bffc17 	ldw	r2,-16(fp)
20033c9c:	0085c83a 	sub	r2,zero,r2
20033ca0:	00000106 	br	20033ca8 <alt_hostfs_read+0x5c>
20033ca4:	e0bffb17 	ldw	r2,-20(fp)
}
20033ca8:	e037883a 	mov	sp,fp
20033cac:	df000017 	ldw	fp,0(sp)
20033cb0:	dec00104 	addi	sp,sp,4
20033cb4:	f800283a 	ret

20033cb8 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
20033cb8:	defffa04 	addi	sp,sp,-24
20033cbc:	df000515 	stw	fp,20(sp)
20033cc0:	df000504 	addi	fp,sp,20
20033cc4:	e13ffd15 	stw	r4,-12(fp)
20033cc8:	e17ffe15 	stw	r5,-8(fp)
20033ccc:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
20033cd0:	d0a01704 	addi	r2,gp,-32676
20033cd4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
20033cd8:	e0bffd17 	ldw	r2,-12(fp)
20033cdc:	10800117 	ldw	r2,4(r2)
20033ce0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
20033ce4:	e0bffe17 	ldw	r2,-8(fp)
20033ce8:	100b883a 	mov	r5,r2
  r6 = len;
20033cec:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
20033cf0:	003da07a 	break	1

  rc = r2;
20033cf4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
20033cf8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
20033cfc:	e0bffc17 	ldw	r2,-16(fp)
20033d00:	10000326 	beq	r2,zero,20033d10 <alt_hostfs_write+0x58>
20033d04:	e0bffc17 	ldw	r2,-16(fp)
20033d08:	0085c83a 	sub	r2,zero,r2
20033d0c:	00000106 	br	20033d14 <alt_hostfs_write+0x5c>
20033d10:	e0bffb17 	ldw	r2,-20(fp)
}
20033d14:	e037883a 	mov	sp,fp
20033d18:	df000017 	ldw	fp,0(sp)
20033d1c:	dec00104 	addi	sp,sp,4
20033d20:	f800283a 	ret

20033d24 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
20033d24:	defffa04 	addi	sp,sp,-24
20033d28:	df000515 	stw	fp,20(sp)
20033d2c:	df000504 	addi	fp,sp,20
20033d30:	e13ffd15 	stw	r4,-12(fp)
20033d34:	e17ffe15 	stw	r5,-8(fp)
20033d38:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
20033d3c:	d0a01a04 	addi	r2,gp,-32664
20033d40:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
20033d44:	e0bffd17 	ldw	r2,-12(fp)
20033d48:	10800117 	ldw	r2,4(r2)
20033d4c:	1009883a 	mov	r4,r2
  r5 = ptr;
20033d50:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
20033d54:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
20033d58:	003da07a 	break	1

  rc = r2;
20033d5c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
20033d60:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
20033d64:	e0bffc17 	ldw	r2,-16(fp)
20033d68:	10000326 	beq	r2,zero,20033d78 <alt_hostfs_seek+0x54>
20033d6c:	e0bffc17 	ldw	r2,-16(fp)
20033d70:	0085c83a 	sub	r2,zero,r2
20033d74:	00000106 	br	20033d7c <alt_hostfs_seek+0x58>
20033d78:	e0bffb17 	ldw	r2,-20(fp)
}
20033d7c:	e037883a 	mov	sp,fp
20033d80:	df000017 	ldw	fp,0(sp)
20033d84:	dec00104 	addi	sp,sp,4
20033d88:	f800283a 	ret

20033d8c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
20033d8c:	deffe904 	addi	sp,sp,-92
20033d90:	df001615 	stw	fp,88(sp)
20033d94:	df001604 	addi	fp,sp,88
20033d98:	e13ffe15 	stw	r4,-8(fp)
20033d9c:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
20033da0:	d0a01d04 	addi	r2,gp,-32652
20033da4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
20033da8:	e0bffe17 	ldw	r2,-8(fp)
20033dac:	10800117 	ldw	r2,4(r2)
20033db0:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
20033db4:	e0bfee04 	addi	r2,fp,-72
20033db8:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
20033dbc:	003da07a 	break	1

  rc = r2;
20033dc0:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
20033dc4:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
20033dc8:	e0bfec17 	ldw	r2,-80(fp)
20033dcc:	1000621e 	bne	r2,zero,20033f58 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
20033dd0:	e0bfee04 	addi	r2,fp,-72
20033dd4:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
20033dd8:	e0bfea17 	ldw	r2,-88(fp)
20033ddc:	10801004 	addi	r2,r2,64
20033de0:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
20033de4:	00001606 	br	20033e40 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
20033de8:	e0bfea17 	ldw	r2,-88(fp)
20033dec:	10800017 	ldw	r2,0(r2)
20033df0:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
20033df4:	e0bfea17 	ldw	r2,-88(fp)
20033df8:	10800017 	ldw	r2,0(r2)
20033dfc:	10803fec 	andhi	r2,r2,255
20033e00:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
20033e04:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
20033e08:	e0bfea17 	ldw	r2,-88(fp)
20033e0c:	10800017 	ldw	r2,0(r2)
20033e10:	10bfc00c 	andi	r2,r2,65280
20033e14:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
20033e18:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
20033e1c:	e0bfea17 	ldw	r2,-88(fp)
20033e20:	10800017 	ldw	r2,0(r2)
20033e24:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
20033e28:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
20033e2c:	e0bfea17 	ldw	r2,-88(fp)
20033e30:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
20033e34:	e0bfea17 	ldw	r2,-88(fp)
20033e38:	10800104 	addi	r2,r2,4
20033e3c:	e0bfea15 	stw	r2,-88(fp)
20033e40:	e0ffea17 	ldw	r3,-88(fp)
20033e44:	e0bfed17 	ldw	r2,-76(fp)
20033e48:	18bfe736 	bltu	r3,r2,20033de8 <_gp+0xffff4888>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
20033e4c:	e0bfff17 	ldw	r2,-4(fp)
20033e50:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
20033e54:	e0bfea17 	ldw	r2,-88(fp)
20033e58:	10800f04 	addi	r2,r2,60
20033e5c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
20033e60:	00000506 	br	20033e78 <alt_hostfs_fstat+0xec>
      *ptr = 0;
20033e64:	e0bfea17 	ldw	r2,-88(fp)
20033e68:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
20033e6c:	e0bfea17 	ldw	r2,-88(fp)
20033e70:	10800104 	addi	r2,r2,4
20033e74:	e0bfea15 	stw	r2,-88(fp)
20033e78:	e0ffea17 	ldw	r3,-88(fp)
20033e7c:	e0bfed17 	ldw	r2,-76(fp)
20033e80:	18bff836 	bltu	r3,r2,20033e64 <_gp+0xffff4904>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
20033e84:	e0bfee17 	ldw	r2,-72(fp)
20033e88:	1007883a 	mov	r3,r2
20033e8c:	e0bfff17 	ldw	r2,-4(fp)
20033e90:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
20033e94:	e0bfef17 	ldw	r2,-68(fp)
20033e98:	1007883a 	mov	r3,r2
20033e9c:	e0bfff17 	ldw	r2,-4(fp)
20033ea0:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
20033ea4:	e0fff017 	ldw	r3,-64(fp)
20033ea8:	e0bfff17 	ldw	r2,-4(fp)
20033eac:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
20033eb0:	e0bff117 	ldw	r2,-60(fp)
20033eb4:	1007883a 	mov	r3,r2
20033eb8:	e0bfff17 	ldw	r2,-4(fp)
20033ebc:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
20033ec0:	e0bff217 	ldw	r2,-56(fp)
20033ec4:	1007883a 	mov	r3,r2
20033ec8:	e0bfff17 	ldw	r2,-4(fp)
20033ecc:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
20033ed0:	e0bff317 	ldw	r2,-52(fp)
20033ed4:	1007883a 	mov	r3,r2
20033ed8:	e0bfff17 	ldw	r2,-4(fp)
20033edc:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
20033ee0:	e0bff417 	ldw	r2,-48(fp)
20033ee4:	1007883a 	mov	r3,r2
20033ee8:	e0bfff17 	ldw	r2,-4(fp)
20033eec:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
20033ef0:	e0bff617 	ldw	r2,-40(fp)
20033ef4:	1007883a 	mov	r3,r2
20033ef8:	e0bfff17 	ldw	r2,-4(fp)
20033efc:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
20033f00:	e0bffb17 	ldw	r2,-20(fp)
20033f04:	1007883a 	mov	r3,r2
20033f08:	e0bfff17 	ldw	r2,-4(fp)
20033f0c:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
20033f10:	e0bffc17 	ldw	r2,-16(fp)
20033f14:	1007883a 	mov	r3,r2
20033f18:	e0bfff17 	ldw	r2,-4(fp)
20033f1c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
20033f20:	e0bffd17 	ldw	r2,-12(fp)
20033f24:	1007883a 	mov	r3,r2
20033f28:	e0bfff17 	ldw	r2,-4(fp)
20033f2c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
20033f30:	e0bff817 	ldw	r2,-32(fp)
20033f34:	1007883a 	mov	r3,r2
20033f38:	e0bfff17 	ldw	r2,-4(fp)
20033f3c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
20033f40:	e0bffa17 	ldw	r2,-24(fp)
20033f44:	1007883a 	mov	r3,r2
20033f48:	e0bfff17 	ldw	r2,-4(fp)
20033f4c:	10c00c15 	stw	r3,48(r2)

    return rc;
20033f50:	e0bfeb17 	ldw	r2,-84(fp)
20033f54:	00000206 	br	20033f60 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
20033f58:	e0bfec17 	ldw	r2,-80(fp)
20033f5c:	0085c83a 	sub	r2,zero,r2
}
20033f60:	e037883a 	mov	sp,fp
20033f64:	df000017 	ldw	fp,0(sp)
20033f68:	dec00104 	addi	sp,sp,4
20033f6c:	f800283a 	ret

20033f70 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
20033f70:	defff504 	addi	sp,sp,-44
20033f74:	df000a15 	stw	fp,40(sp)
20033f78:	df000a04 	addi	fp,sp,40
20033f7c:	e13ffc15 	stw	r4,-16(fp)
20033f80:	e17ffd15 	stw	r5,-12(fp)
20033f84:	e1bffe15 	stw	r6,-8(fp)
20033f88:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
20033f8c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20033f90:	d0a70617 	ldw	r2,-25576(gp)
  
  if (alt_ticks_per_second ())
20033f94:	10003c26 	beq	r2,zero,20034088 <alt_alarm_start+0x118>
  {
    if (alarm)
20033f98:	e0bffc17 	ldw	r2,-16(fp)
20033f9c:	10003826 	beq	r2,zero,20034080 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
20033fa0:	e0bffc17 	ldw	r2,-16(fp)
20033fa4:	e0fffe17 	ldw	r3,-8(fp)
20033fa8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
20033fac:	e0bffc17 	ldw	r2,-16(fp)
20033fb0:	e0ffff17 	ldw	r3,-4(fp)
20033fb4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033fb8:	0005303a 	rdctl	r2,status
20033fbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033fc0:	e0fff917 	ldw	r3,-28(fp)
20033fc4:	00bfff84 	movi	r2,-2
20033fc8:	1884703a 	and	r2,r3,r2
20033fcc:	1001703a 	wrctl	status,r2
  
  return context;
20033fd0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
20033fd4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20033fd8:	d0a70717 	ldw	r2,-25572(gp)
      
      current_nticks = alt_nticks();
20033fdc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
20033fe0:	e0fffd17 	ldw	r3,-12(fp)
20033fe4:	e0bff617 	ldw	r2,-40(fp)
20033fe8:	1885883a 	add	r2,r3,r2
20033fec:	10c00044 	addi	r3,r2,1
20033ff0:	e0bffc17 	ldw	r2,-16(fp)
20033ff4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
20033ff8:	e0bffc17 	ldw	r2,-16(fp)
20033ffc:	10c00217 	ldw	r3,8(r2)
20034000:	e0bff617 	ldw	r2,-40(fp)
20034004:	1880042e 	bgeu	r3,r2,20034018 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
20034008:	e0bffc17 	ldw	r2,-16(fp)
2003400c:	00c00044 	movi	r3,1
20034010:	10c00405 	stb	r3,16(r2)
20034014:	00000206 	br	20034020 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
20034018:	e0bffc17 	ldw	r2,-16(fp)
2003401c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
20034020:	e0bffc17 	ldw	r2,-16(fp)
20034024:	d0e02104 	addi	r3,gp,-32636
20034028:	e0fffa15 	stw	r3,-24(fp)
2003402c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
20034030:	e0bffb17 	ldw	r2,-20(fp)
20034034:	e0fffa17 	ldw	r3,-24(fp)
20034038:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2003403c:	e0bffa17 	ldw	r2,-24(fp)
20034040:	10c00017 	ldw	r3,0(r2)
20034044:	e0bffb17 	ldw	r2,-20(fp)
20034048:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2003404c:	e0bffa17 	ldw	r2,-24(fp)
20034050:	10800017 	ldw	r2,0(r2)
20034054:	e0fffb17 	ldw	r3,-20(fp)
20034058:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2003405c:	e0bffa17 	ldw	r2,-24(fp)
20034060:	e0fffb17 	ldw	r3,-20(fp)
20034064:	10c00015 	stw	r3,0(r2)
20034068:	e0bff817 	ldw	r2,-32(fp)
2003406c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034070:	e0bff717 	ldw	r2,-36(fp)
20034074:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
20034078:	0005883a 	mov	r2,zero
2003407c:	00000306 	br	2003408c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
20034080:	00bffa84 	movi	r2,-22
20034084:	00000106 	br	2003408c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
20034088:	00bfde84 	movi	r2,-134
  }
}
2003408c:	e037883a 	mov	sp,fp
20034090:	df000017 	ldw	fp,0(sp)
20034094:	dec00104 	addi	sp,sp,4
20034098:	f800283a 	ret

2003409c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
2003409c:	defffe04 	addi	sp,sp,-8
200340a0:	df000115 	stw	fp,4(sp)
200340a4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
200340a8:	e03fff15 	stw	zero,-4(fp)
200340ac:	00000506 	br	200340c4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
200340b0:	e0bfff17 	ldw	r2,-4(fp)
200340b4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
200340b8:	e0bfff17 	ldw	r2,-4(fp)
200340bc:	10800804 	addi	r2,r2,32
200340c0:	e0bfff15 	stw	r2,-4(fp)
200340c4:	e0bfff17 	ldw	r2,-4(fp)
200340c8:	10820030 	cmpltui	r2,r2,2048
200340cc:	103ff81e 	bne	r2,zero,200340b0 <_gp+0xffff4b50>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
200340d0:	0001883a 	nop
200340d4:	e037883a 	mov	sp,fp
200340d8:	df000017 	ldw	fp,0(sp)
200340dc:	dec00104 	addi	sp,sp,4
200340e0:	f800283a 	ret

200340e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200340e4:	defffe04 	addi	sp,sp,-8
200340e8:	dfc00115 	stw	ra,4(sp)
200340ec:	df000015 	stw	fp,0(sp)
200340f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200340f4:	d0a00c17 	ldw	r2,-32720(gp)
200340f8:	10000326 	beq	r2,zero,20034108 <alt_get_errno+0x24>
200340fc:	d0a00c17 	ldw	r2,-32720(gp)
20034100:	103ee83a 	callr	r2
20034104:	00000106 	br	2003410c <alt_get_errno+0x28>
20034108:	d0a6fb04 	addi	r2,gp,-25620
}
2003410c:	e037883a 	mov	sp,fp
20034110:	dfc00117 	ldw	ra,4(sp)
20034114:	df000017 	ldw	fp,0(sp)
20034118:	dec00204 	addi	sp,sp,8
2003411c:	f800283a 	ret

20034120 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
20034120:	defffa04 	addi	sp,sp,-24
20034124:	dfc00515 	stw	ra,20(sp)
20034128:	df000415 	stw	fp,16(sp)
2003412c:	df000404 	addi	fp,sp,16
20034130:	e13ffe15 	stw	r4,-8(fp)
20034134:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
20034138:	e0bffe17 	ldw	r2,-8(fp)
2003413c:	10000326 	beq	r2,zero,2003414c <alt_dev_llist_insert+0x2c>
20034140:	e0bffe17 	ldw	r2,-8(fp)
20034144:	10800217 	ldw	r2,8(r2)
20034148:	1000061e 	bne	r2,zero,20034164 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
2003414c:	00340e40 	call	200340e4 <alt_get_errno>
20034150:	1007883a 	mov	r3,r2
20034154:	00800584 	movi	r2,22
20034158:	18800015 	stw	r2,0(r3)
    return -EINVAL;
2003415c:	00bffa84 	movi	r2,-22
20034160:	00001306 	br	200341b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
20034164:	e0bffe17 	ldw	r2,-8(fp)
20034168:	e0ffff17 	ldw	r3,-4(fp)
2003416c:	e0fffc15 	stw	r3,-16(fp)
20034170:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
20034174:	e0bffd17 	ldw	r2,-12(fp)
20034178:	e0fffc17 	ldw	r3,-16(fp)
2003417c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
20034180:	e0bffc17 	ldw	r2,-16(fp)
20034184:	10c00017 	ldw	r3,0(r2)
20034188:	e0bffd17 	ldw	r2,-12(fp)
2003418c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
20034190:	e0bffc17 	ldw	r2,-16(fp)
20034194:	10800017 	ldw	r2,0(r2)
20034198:	e0fffd17 	ldw	r3,-12(fp)
2003419c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
200341a0:	e0bffc17 	ldw	r2,-16(fp)
200341a4:	e0fffd17 	ldw	r3,-12(fp)
200341a8:	10c00015 	stw	r3,0(r2)

  return 0;  
200341ac:	0005883a 	mov	r2,zero
}
200341b0:	e037883a 	mov	sp,fp
200341b4:	dfc00117 	ldw	ra,4(sp)
200341b8:	df000017 	ldw	fp,0(sp)
200341bc:	dec00204 	addi	sp,sp,8
200341c0:	f800283a 	ret

200341c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
200341c4:	defffd04 	addi	sp,sp,-12
200341c8:	dfc00215 	stw	ra,8(sp)
200341cc:	df000115 	stw	fp,4(sp)
200341d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
200341d4:	008800f4 	movhi	r2,8195
200341d8:	1093ef04 	addi	r2,r2,20412
200341dc:	e0bfff15 	stw	r2,-4(fp)
200341e0:	00000606 	br	200341fc <_do_ctors+0x38>
        (*ctor) (); 
200341e4:	e0bfff17 	ldw	r2,-4(fp)
200341e8:	10800017 	ldw	r2,0(r2)
200341ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
200341f0:	e0bfff17 	ldw	r2,-4(fp)
200341f4:	10bfff04 	addi	r2,r2,-4
200341f8:	e0bfff15 	stw	r2,-4(fp)
200341fc:	e0ffff17 	ldw	r3,-4(fp)
20034200:	008800f4 	movhi	r2,8195
20034204:	1093f004 	addi	r2,r2,20416
20034208:	18bff62e 	bgeu	r3,r2,200341e4 <_gp+0xffff4c84>
        (*ctor) (); 
}
2003420c:	0001883a 	nop
20034210:	e037883a 	mov	sp,fp
20034214:	dfc00117 	ldw	ra,4(sp)
20034218:	df000017 	ldw	fp,0(sp)
2003421c:	dec00204 	addi	sp,sp,8
20034220:	f800283a 	ret

20034224 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
20034224:	defffd04 	addi	sp,sp,-12
20034228:	dfc00215 	stw	ra,8(sp)
2003422c:	df000115 	stw	fp,4(sp)
20034230:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
20034234:	008800f4 	movhi	r2,8195
20034238:	1093ef04 	addi	r2,r2,20412
2003423c:	e0bfff15 	stw	r2,-4(fp)
20034240:	00000606 	br	2003425c <_do_dtors+0x38>
        (*dtor) (); 
20034244:	e0bfff17 	ldw	r2,-4(fp)
20034248:	10800017 	ldw	r2,0(r2)
2003424c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
20034250:	e0bfff17 	ldw	r2,-4(fp)
20034254:	10bfff04 	addi	r2,r2,-4
20034258:	e0bfff15 	stw	r2,-4(fp)
2003425c:	e0ffff17 	ldw	r3,-4(fp)
20034260:	008800f4 	movhi	r2,8195
20034264:	1093f004 	addi	r2,r2,20416
20034268:	18bff62e 	bgeu	r3,r2,20034244 <_gp+0xffff4ce4>
        (*dtor) (); 
}
2003426c:	0001883a 	nop
20034270:	e037883a 	mov	sp,fp
20034274:	dfc00117 	ldw	ra,4(sp)
20034278:	df000017 	ldw	fp,0(sp)
2003427c:	dec00204 	addi	sp,sp,8
20034280:	f800283a 	ret

20034284 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
20034284:	defffa04 	addi	sp,sp,-24
20034288:	dfc00515 	stw	ra,20(sp)
2003428c:	df000415 	stw	fp,16(sp)
20034290:	df000404 	addi	fp,sp,16
20034294:	e13ffe15 	stw	r4,-8(fp)
20034298:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
2003429c:	e0bfff17 	ldw	r2,-4(fp)
200342a0:	10800017 	ldw	r2,0(r2)
200342a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
200342a8:	e13ffe17 	ldw	r4,-8(fp)
200342ac:	002f8b80 	call	2002f8b8 <strlen>
200342b0:	10800044 	addi	r2,r2,1
200342b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
200342b8:	00000d06 	br	200342f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
200342bc:	e0bffc17 	ldw	r2,-16(fp)
200342c0:	10800217 	ldw	r2,8(r2)
200342c4:	e0fffd17 	ldw	r3,-12(fp)
200342c8:	180d883a 	mov	r6,r3
200342cc:	e17ffe17 	ldw	r5,-8(fp)
200342d0:	1009883a 	mov	r4,r2
200342d4:	0034cac0 	call	20034cac <memcmp>
200342d8:	1000021e 	bne	r2,zero,200342e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
200342dc:	e0bffc17 	ldw	r2,-16(fp)
200342e0:	00000706 	br	20034300 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
200342e4:	e0bffc17 	ldw	r2,-16(fp)
200342e8:	10800017 	ldw	r2,0(r2)
200342ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
200342f0:	e0fffc17 	ldw	r3,-16(fp)
200342f4:	e0bfff17 	ldw	r2,-4(fp)
200342f8:	18bff01e 	bne	r3,r2,200342bc <_gp+0xffff4d5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
200342fc:	0005883a 	mov	r2,zero
}
20034300:	e037883a 	mov	sp,fp
20034304:	dfc00117 	ldw	ra,4(sp)
20034308:	df000017 	ldw	fp,0(sp)
2003430c:	dec00204 	addi	sp,sp,8
20034310:	f800283a 	ret

20034314 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
20034314:	defffb04 	addi	sp,sp,-20
20034318:	dfc00415 	stw	ra,16(sp)
2003431c:	df000315 	stw	fp,12(sp)
20034320:	df000304 	addi	fp,sp,12
20034324:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
20034328:	d0a00717 	ldw	r2,-32740(gp)
2003432c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20034330:	00003106 	br	200343f8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
20034334:	e0bffd17 	ldw	r2,-12(fp)
20034338:	10800217 	ldw	r2,8(r2)
2003433c:	1009883a 	mov	r4,r2
20034340:	002f8b80 	call	2002f8b8 <strlen>
20034344:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
20034348:	e0bffd17 	ldw	r2,-12(fp)
2003434c:	10c00217 	ldw	r3,8(r2)
20034350:	e0bffe17 	ldw	r2,-8(fp)
20034354:	10bfffc4 	addi	r2,r2,-1
20034358:	1885883a 	add	r2,r3,r2
2003435c:	10800003 	ldbu	r2,0(r2)
20034360:	10803fcc 	andi	r2,r2,255
20034364:	1080201c 	xori	r2,r2,128
20034368:	10bfe004 	addi	r2,r2,-128
2003436c:	10800bd8 	cmpnei	r2,r2,47
20034370:	1000031e 	bne	r2,zero,20034380 <alt_find_file+0x6c>
    {
      len -= 1;
20034374:	e0bffe17 	ldw	r2,-8(fp)
20034378:	10bfffc4 	addi	r2,r2,-1
2003437c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
20034380:	e0bffe17 	ldw	r2,-8(fp)
20034384:	e0ffff17 	ldw	r3,-4(fp)
20034388:	1885883a 	add	r2,r3,r2
2003438c:	10800003 	ldbu	r2,0(r2)
20034390:	10803fcc 	andi	r2,r2,255
20034394:	1080201c 	xori	r2,r2,128
20034398:	10bfe004 	addi	r2,r2,-128
2003439c:	10800be0 	cmpeqi	r2,r2,47
200343a0:	1000081e 	bne	r2,zero,200343c4 <alt_find_file+0xb0>
200343a4:	e0bffe17 	ldw	r2,-8(fp)
200343a8:	e0ffff17 	ldw	r3,-4(fp)
200343ac:	1885883a 	add	r2,r3,r2
200343b0:	10800003 	ldbu	r2,0(r2)
200343b4:	10803fcc 	andi	r2,r2,255
200343b8:	1080201c 	xori	r2,r2,128
200343bc:	10bfe004 	addi	r2,r2,-128
200343c0:	10000a1e 	bne	r2,zero,200343ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
200343c4:	e0bffd17 	ldw	r2,-12(fp)
200343c8:	10800217 	ldw	r2,8(r2)
200343cc:	e0fffe17 	ldw	r3,-8(fp)
200343d0:	180d883a 	mov	r6,r3
200343d4:	e17fff17 	ldw	r5,-4(fp)
200343d8:	1009883a 	mov	r4,r2
200343dc:	0034cac0 	call	20034cac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
200343e0:	1000021e 	bne	r2,zero,200343ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
200343e4:	e0bffd17 	ldw	r2,-12(fp)
200343e8:	00000706 	br	20034408 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
200343ec:	e0bffd17 	ldw	r2,-12(fp)
200343f0:	10800017 	ldw	r2,0(r2)
200343f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
200343f8:	e0fffd17 	ldw	r3,-12(fp)
200343fc:	d0a00704 	addi	r2,gp,-32740
20034400:	18bfcc1e 	bne	r3,r2,20034334 <_gp+0xffff4dd4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
20034404:	0005883a 	mov	r2,zero
}
20034408:	e037883a 	mov	sp,fp
2003440c:	dfc00117 	ldw	ra,4(sp)
20034410:	df000017 	ldw	fp,0(sp)
20034414:	dec00204 	addi	sp,sp,8
20034418:	f800283a 	ret

2003441c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
2003441c:	defffc04 	addi	sp,sp,-16
20034420:	df000315 	stw	fp,12(sp)
20034424:	df000304 	addi	fp,sp,12
20034428:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
2003442c:	e0bfff17 	ldw	r2,-4(fp)
20034430:	10800217 	ldw	r2,8(r2)
20034434:	1000021e 	bne	r2,zero,20034440 <alt_fs_reg+0x24>
  {
    return -ENODEV;
20034438:	00bffb44 	movi	r2,-19
2003443c:	00001306 	br	2003448c <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
20034440:	e0bfff17 	ldw	r2,-4(fp)
20034444:	d0e00704 	addi	r3,gp,-32740
20034448:	e0fffd15 	stw	r3,-12(fp)
2003444c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
20034450:	e0bffe17 	ldw	r2,-8(fp)
20034454:	e0fffd17 	ldw	r3,-12(fp)
20034458:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2003445c:	e0bffd17 	ldw	r2,-12(fp)
20034460:	10c00017 	ldw	r3,0(r2)
20034464:	e0bffe17 	ldw	r2,-8(fp)
20034468:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2003446c:	e0bffd17 	ldw	r2,-12(fp)
20034470:	10800017 	ldw	r2,0(r2)
20034474:	e0fffe17 	ldw	r3,-8(fp)
20034478:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2003447c:	e0bffd17 	ldw	r2,-12(fp)
20034480:	e0fffe17 	ldw	r3,-8(fp)
20034484:	10c00015 	stw	r3,0(r2)

  return 0;
20034488:	0005883a 	mov	r2,zero
} 
2003448c:	e037883a 	mov	sp,fp
20034490:	df000017 	ldw	fp,0(sp)
20034494:	dec00104 	addi	sp,sp,4
20034498:	f800283a 	ret

2003449c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2003449c:	defffc04 	addi	sp,sp,-16
200344a0:	df000315 	stw	fp,12(sp)
200344a4:	df000304 	addi	fp,sp,12
200344a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
200344ac:	00bffa04 	movi	r2,-24
200344b0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
200344b4:	e03ffd15 	stw	zero,-12(fp)
200344b8:	00001906 	br	20034520 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
200344bc:	008800f4 	movhi	r2,8195
200344c0:	1098d604 	addi	r2,r2,25432
200344c4:	e0fffd17 	ldw	r3,-12(fp)
200344c8:	18c00324 	muli	r3,r3,12
200344cc:	10c5883a 	add	r2,r2,r3
200344d0:	10800017 	ldw	r2,0(r2)
200344d4:	10000f1e 	bne	r2,zero,20034514 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
200344d8:	008800f4 	movhi	r2,8195
200344dc:	1098d604 	addi	r2,r2,25432
200344e0:	e0fffd17 	ldw	r3,-12(fp)
200344e4:	18c00324 	muli	r3,r3,12
200344e8:	10c5883a 	add	r2,r2,r3
200344ec:	e0ffff17 	ldw	r3,-4(fp)
200344f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
200344f4:	d0e00b17 	ldw	r3,-32724(gp)
200344f8:	e0bffd17 	ldw	r2,-12(fp)
200344fc:	1880020e 	bge	r3,r2,20034508 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
20034500:	e0bffd17 	ldw	r2,-12(fp)
20034504:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
20034508:	e0bffd17 	ldw	r2,-12(fp)
2003450c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
20034510:	00000606 	br	2003452c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20034514:	e0bffd17 	ldw	r2,-12(fp)
20034518:	10800044 	addi	r2,r2,1
2003451c:	e0bffd15 	stw	r2,-12(fp)
20034520:	e0bffd17 	ldw	r2,-12(fp)
20034524:	10800810 	cmplti	r2,r2,32
20034528:	103fe41e 	bne	r2,zero,200344bc <_gp+0xffff4f5c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
2003452c:	e0bffe17 	ldw	r2,-8(fp)
}
20034530:	e037883a 	mov	sp,fp
20034534:	df000017 	ldw	fp,0(sp)
20034538:	dec00104 	addi	sp,sp,4
2003453c:	f800283a 	ret

20034540 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
20034540:	defffe04 	addi	sp,sp,-8
20034544:	dfc00115 	stw	ra,4(sp)
20034548:	df000015 	stw	fp,0(sp)
2003454c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
20034550:	01440004 	movi	r5,4096
20034554:	0009883a 	mov	r4,zero
20034558:	0034b1c0 	call	20034b1c <alt_icache_flush>
#endif
}
2003455c:	0001883a 	nop
20034560:	e037883a 	mov	sp,fp
20034564:	dfc00117 	ldw	ra,4(sp)
20034568:	df000017 	ldw	fp,0(sp)
2003456c:	dec00204 	addi	sp,sp,8
20034570:	f800283a 	ret

20034574 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
20034574:	defff904 	addi	sp,sp,-28
20034578:	dfc00615 	stw	ra,24(sp)
2003457c:	df000515 	stw	fp,20(sp)
20034580:	df000504 	addi	fp,sp,20
20034584:	e13ffc15 	stw	r4,-16(fp)
20034588:	e17ffd15 	stw	r5,-12(fp)
2003458c:	e1bffe15 	stw	r6,-8(fp)
20034590:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
20034594:	e0800217 	ldw	r2,8(fp)
20034598:	d8800015 	stw	r2,0(sp)
2003459c:	e1ffff17 	ldw	r7,-4(fp)
200345a0:	e1bffe17 	ldw	r6,-8(fp)
200345a4:	e17ffd17 	ldw	r5,-12(fp)
200345a8:	e13ffc17 	ldw	r4,-16(fp)
200345ac:	00347240 	call	20034724 <alt_iic_isr_register>
}  
200345b0:	e037883a 	mov	sp,fp
200345b4:	dfc00117 	ldw	ra,4(sp)
200345b8:	df000017 	ldw	fp,0(sp)
200345bc:	dec00204 	addi	sp,sp,8
200345c0:	f800283a 	ret

200345c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
200345c4:	defff904 	addi	sp,sp,-28
200345c8:	df000615 	stw	fp,24(sp)
200345cc:	df000604 	addi	fp,sp,24
200345d0:	e13ffe15 	stw	r4,-8(fp)
200345d4:	e17fff15 	stw	r5,-4(fp)
200345d8:	e0bfff17 	ldw	r2,-4(fp)
200345dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200345e0:	0005303a 	rdctl	r2,status
200345e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200345e8:	e0fffb17 	ldw	r3,-20(fp)
200345ec:	00bfff84 	movi	r2,-2
200345f0:	1884703a 	and	r2,r3,r2
200345f4:	1001703a 	wrctl	status,r2
  
  return context;
200345f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
200345fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
20034600:	00c00044 	movi	r3,1
20034604:	e0bffa17 	ldw	r2,-24(fp)
20034608:	1884983a 	sll	r2,r3,r2
2003460c:	1007883a 	mov	r3,r2
20034610:	d0a70517 	ldw	r2,-25580(gp)
20034614:	1884b03a 	or	r2,r3,r2
20034618:	d0a70515 	stw	r2,-25580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2003461c:	d0a70517 	ldw	r2,-25580(gp)
20034620:	100170fa 	wrctl	ienable,r2
20034624:	e0bffc17 	ldw	r2,-16(fp)
20034628:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003462c:	e0bffd17 	ldw	r2,-12(fp)
20034630:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
20034634:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
20034638:	0001883a 	nop
}
2003463c:	e037883a 	mov	sp,fp
20034640:	df000017 	ldw	fp,0(sp)
20034644:	dec00104 	addi	sp,sp,4
20034648:	f800283a 	ret

2003464c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2003464c:	defff904 	addi	sp,sp,-28
20034650:	df000615 	stw	fp,24(sp)
20034654:	df000604 	addi	fp,sp,24
20034658:	e13ffe15 	stw	r4,-8(fp)
2003465c:	e17fff15 	stw	r5,-4(fp)
20034660:	e0bfff17 	ldw	r2,-4(fp)
20034664:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034668:	0005303a 	rdctl	r2,status
2003466c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034670:	e0fffb17 	ldw	r3,-20(fp)
20034674:	00bfff84 	movi	r2,-2
20034678:	1884703a 	and	r2,r3,r2
2003467c:	1001703a 	wrctl	status,r2
  
  return context;
20034680:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20034684:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
20034688:	00c00044 	movi	r3,1
2003468c:	e0bffa17 	ldw	r2,-24(fp)
20034690:	1884983a 	sll	r2,r3,r2
20034694:	0084303a 	nor	r2,zero,r2
20034698:	1007883a 	mov	r3,r2
2003469c:	d0a70517 	ldw	r2,-25580(gp)
200346a0:	1884703a 	and	r2,r3,r2
200346a4:	d0a70515 	stw	r2,-25580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
200346a8:	d0a70517 	ldw	r2,-25580(gp)
200346ac:	100170fa 	wrctl	ienable,r2
200346b0:	e0bffc17 	ldw	r2,-16(fp)
200346b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200346b8:	e0bffd17 	ldw	r2,-12(fp)
200346bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
200346c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
200346c4:	0001883a 	nop
}
200346c8:	e037883a 	mov	sp,fp
200346cc:	df000017 	ldw	fp,0(sp)
200346d0:	dec00104 	addi	sp,sp,4
200346d4:	f800283a 	ret

200346d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
200346d8:	defffc04 	addi	sp,sp,-16
200346dc:	df000315 	stw	fp,12(sp)
200346e0:	df000304 	addi	fp,sp,12
200346e4:	e13ffe15 	stw	r4,-8(fp)
200346e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
200346ec:	000530fa 	rdctl	r2,ienable
200346f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
200346f4:	00c00044 	movi	r3,1
200346f8:	e0bfff17 	ldw	r2,-4(fp)
200346fc:	1884983a 	sll	r2,r3,r2
20034700:	1007883a 	mov	r3,r2
20034704:	e0bffd17 	ldw	r2,-12(fp)
20034708:	1884703a 	and	r2,r3,r2
2003470c:	1004c03a 	cmpne	r2,r2,zero
20034710:	10803fcc 	andi	r2,r2,255
}
20034714:	e037883a 	mov	sp,fp
20034718:	df000017 	ldw	fp,0(sp)
2003471c:	dec00104 	addi	sp,sp,4
20034720:	f800283a 	ret

20034724 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
20034724:	defff504 	addi	sp,sp,-44
20034728:	dfc00a15 	stw	ra,40(sp)
2003472c:	df000915 	stw	fp,36(sp)
20034730:	df000904 	addi	fp,sp,36
20034734:	e13ffc15 	stw	r4,-16(fp)
20034738:	e17ffd15 	stw	r5,-12(fp)
2003473c:	e1bffe15 	stw	r6,-8(fp)
20034740:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
20034744:	00bffa84 	movi	r2,-22
20034748:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2003474c:	e0bffd17 	ldw	r2,-12(fp)
20034750:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
20034754:	e0bff817 	ldw	r2,-32(fp)
20034758:	10800808 	cmpgei	r2,r2,32
2003475c:	1000271e 	bne	r2,zero,200347fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034760:	0005303a 	rdctl	r2,status
20034764:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034768:	e0fffb17 	ldw	r3,-20(fp)
2003476c:	00bfff84 	movi	r2,-2
20034770:	1884703a 	and	r2,r3,r2
20034774:	1001703a 	wrctl	status,r2
  
  return context;
20034778:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2003477c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
20034780:	00880134 	movhi	r2,8196
20034784:	10a46a04 	addi	r2,r2,-28248
20034788:	e0fff817 	ldw	r3,-32(fp)
2003478c:	180690fa 	slli	r3,r3,3
20034790:	10c5883a 	add	r2,r2,r3
20034794:	e0fffe17 	ldw	r3,-8(fp)
20034798:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
2003479c:	00880134 	movhi	r2,8196
200347a0:	10a46a04 	addi	r2,r2,-28248
200347a4:	e0fff817 	ldw	r3,-32(fp)
200347a8:	180690fa 	slli	r3,r3,3
200347ac:	10c5883a 	add	r2,r2,r3
200347b0:	10800104 	addi	r2,r2,4
200347b4:	e0ffff17 	ldw	r3,-4(fp)
200347b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
200347bc:	e0bffe17 	ldw	r2,-8(fp)
200347c0:	10000526 	beq	r2,zero,200347d8 <alt_iic_isr_register+0xb4>
200347c4:	e0bff817 	ldw	r2,-32(fp)
200347c8:	100b883a 	mov	r5,r2
200347cc:	e13ffc17 	ldw	r4,-16(fp)
200347d0:	00345c40 	call	200345c4 <alt_ic_irq_enable>
200347d4:	00000406 	br	200347e8 <alt_iic_isr_register+0xc4>
200347d8:	e0bff817 	ldw	r2,-32(fp)
200347dc:	100b883a 	mov	r5,r2
200347e0:	e13ffc17 	ldw	r4,-16(fp)
200347e4:	003464c0 	call	2003464c <alt_ic_irq_disable>
200347e8:	e0bff715 	stw	r2,-36(fp)
200347ec:	e0bffa17 	ldw	r2,-24(fp)
200347f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200347f4:	e0bff917 	ldw	r2,-28(fp)
200347f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
200347fc:	e0bff717 	ldw	r2,-36(fp)
}
20034800:	e037883a 	mov	sp,fp
20034804:	dfc00117 	ldw	ra,4(sp)
20034808:	df000017 	ldw	fp,0(sp)
2003480c:	dec00204 	addi	sp,sp,8
20034810:	f800283a 	ret

20034814 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
20034814:	defff904 	addi	sp,sp,-28
20034818:	dfc00615 	stw	ra,24(sp)
2003481c:	df000515 	stw	fp,20(sp)
20034820:	df000504 	addi	fp,sp,20
20034824:	e13ffc15 	stw	r4,-16(fp)
20034828:	e17ffd15 	stw	r5,-12(fp)
2003482c:	e1bffe15 	stw	r6,-8(fp)
20034830:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
20034834:	e1bfff17 	ldw	r6,-4(fp)
20034838:	e17ffe17 	ldw	r5,-8(fp)
2003483c:	e13ffd17 	ldw	r4,-12(fp)
20034840:	00329a40 	call	200329a4 <open>
20034844:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
20034848:	e0bffb17 	ldw	r2,-20(fp)
2003484c:	10001c16 	blt	r2,zero,200348c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
20034850:	008800f4 	movhi	r2,8195
20034854:	1098d604 	addi	r2,r2,25432
20034858:	e0fffb17 	ldw	r3,-20(fp)
2003485c:	18c00324 	muli	r3,r3,12
20034860:	10c5883a 	add	r2,r2,r3
20034864:	10c00017 	ldw	r3,0(r2)
20034868:	e0bffc17 	ldw	r2,-16(fp)
2003486c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
20034870:	008800f4 	movhi	r2,8195
20034874:	1098d604 	addi	r2,r2,25432
20034878:	e0fffb17 	ldw	r3,-20(fp)
2003487c:	18c00324 	muli	r3,r3,12
20034880:	10c5883a 	add	r2,r2,r3
20034884:	10800104 	addi	r2,r2,4
20034888:	10c00017 	ldw	r3,0(r2)
2003488c:	e0bffc17 	ldw	r2,-16(fp)
20034890:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
20034894:	008800f4 	movhi	r2,8195
20034898:	1098d604 	addi	r2,r2,25432
2003489c:	e0fffb17 	ldw	r3,-20(fp)
200348a0:	18c00324 	muli	r3,r3,12
200348a4:	10c5883a 	add	r2,r2,r3
200348a8:	10800204 	addi	r2,r2,8
200348ac:	10c00017 	ldw	r3,0(r2)
200348b0:	e0bffc17 	ldw	r2,-16(fp)
200348b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
200348b8:	e13ffb17 	ldw	r4,-20(fp)
200348bc:	0032c6c0 	call	20032c6c <alt_release_fd>
  }
} 
200348c0:	0001883a 	nop
200348c4:	e037883a 	mov	sp,fp
200348c8:	dfc00117 	ldw	ra,4(sp)
200348cc:	df000017 	ldw	fp,0(sp)
200348d0:	dec00204 	addi	sp,sp,8
200348d4:	f800283a 	ret

200348d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
200348d8:	defffb04 	addi	sp,sp,-20
200348dc:	dfc00415 	stw	ra,16(sp)
200348e0:	df000315 	stw	fp,12(sp)
200348e4:	df000304 	addi	fp,sp,12
200348e8:	e13ffd15 	stw	r4,-12(fp)
200348ec:	e17ffe15 	stw	r5,-8(fp)
200348f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
200348f4:	01c07fc4 	movi	r7,511
200348f8:	01800044 	movi	r6,1
200348fc:	e17ffd17 	ldw	r5,-12(fp)
20034900:	010800f4 	movhi	r4,8195
20034904:	2118d904 	addi	r4,r4,25444
20034908:	00348140 	call	20034814 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
2003490c:	01c07fc4 	movi	r7,511
20034910:	000d883a 	mov	r6,zero
20034914:	e17ffe17 	ldw	r5,-8(fp)
20034918:	010800f4 	movhi	r4,8195
2003491c:	2118d604 	addi	r4,r4,25432
20034920:	00348140 	call	20034814 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
20034924:	01c07fc4 	movi	r7,511
20034928:	01800044 	movi	r6,1
2003492c:	e17fff17 	ldw	r5,-4(fp)
20034930:	010800f4 	movhi	r4,8195
20034934:	2118dc04 	addi	r4,r4,25456
20034938:	00348140 	call	20034814 <alt_open_fd>
}  
2003493c:	0001883a 	nop
20034940:	e037883a 	mov	sp,fp
20034944:	dfc00117 	ldw	ra,4(sp)
20034948:	df000017 	ldw	fp,0(sp)
2003494c:	dec00204 	addi	sp,sp,8
20034950:	f800283a 	ret

20034954 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
20034954:	defffa04 	addi	sp,sp,-24
20034958:	df000515 	stw	fp,20(sp)
2003495c:	df000504 	addi	fp,sp,20
20034960:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034964:	0005303a 	rdctl	r2,status
20034968:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003496c:	e0fffc17 	ldw	r3,-16(fp)
20034970:	00bfff84 	movi	r2,-2
20034974:	1884703a 	and	r2,r3,r2
20034978:	1001703a 	wrctl	status,r2
  
  return context;
2003497c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
20034980:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
20034984:	e0bfff17 	ldw	r2,-4(fp)
20034988:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
2003498c:	e0bffd17 	ldw	r2,-12(fp)
20034990:	10800017 	ldw	r2,0(r2)
20034994:	e0fffd17 	ldw	r3,-12(fp)
20034998:	18c00117 	ldw	r3,4(r3)
2003499c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
200349a0:	e0bffd17 	ldw	r2,-12(fp)
200349a4:	10800117 	ldw	r2,4(r2)
200349a8:	e0fffd17 	ldw	r3,-12(fp)
200349ac:	18c00017 	ldw	r3,0(r3)
200349b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
200349b4:	e0bffd17 	ldw	r2,-12(fp)
200349b8:	e0fffd17 	ldw	r3,-12(fp)
200349bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
200349c0:	e0bffd17 	ldw	r2,-12(fp)
200349c4:	e0fffd17 	ldw	r3,-12(fp)
200349c8:	10c00015 	stw	r3,0(r2)
200349cc:	e0bffb17 	ldw	r2,-20(fp)
200349d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200349d4:	e0bffe17 	ldw	r2,-8(fp)
200349d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
200349dc:	0001883a 	nop
200349e0:	e037883a 	mov	sp,fp
200349e4:	df000017 	ldw	fp,0(sp)
200349e8:	dec00104 	addi	sp,sp,4
200349ec:	f800283a 	ret

200349f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
200349f0:	defffb04 	addi	sp,sp,-20
200349f4:	dfc00415 	stw	ra,16(sp)
200349f8:	df000315 	stw	fp,12(sp)
200349fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20034a00:	d0a02117 	ldw	r2,-32636(gp)
20034a04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20034a08:	d0a70717 	ldw	r2,-25572(gp)
20034a0c:	10800044 	addi	r2,r2,1
20034a10:	d0a70715 	stw	r2,-25572(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20034a14:	00002e06 	br	20034ad0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
20034a18:	e0bffd17 	ldw	r2,-12(fp)
20034a1c:	10800017 	ldw	r2,0(r2)
20034a20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
20034a24:	e0bffd17 	ldw	r2,-12(fp)
20034a28:	10800403 	ldbu	r2,16(r2)
20034a2c:	10803fcc 	andi	r2,r2,255
20034a30:	10000426 	beq	r2,zero,20034a44 <alt_tick+0x54>
20034a34:	d0a70717 	ldw	r2,-25572(gp)
20034a38:	1000021e 	bne	r2,zero,20034a44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
20034a3c:	e0bffd17 	ldw	r2,-12(fp)
20034a40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
20034a44:	e0bffd17 	ldw	r2,-12(fp)
20034a48:	10800217 	ldw	r2,8(r2)
20034a4c:	d0e70717 	ldw	r3,-25572(gp)
20034a50:	18801d36 	bltu	r3,r2,20034ac8 <alt_tick+0xd8>
20034a54:	e0bffd17 	ldw	r2,-12(fp)
20034a58:	10800403 	ldbu	r2,16(r2)
20034a5c:	10803fcc 	andi	r2,r2,255
20034a60:	1000191e 	bne	r2,zero,20034ac8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
20034a64:	e0bffd17 	ldw	r2,-12(fp)
20034a68:	10800317 	ldw	r2,12(r2)
20034a6c:	e0fffd17 	ldw	r3,-12(fp)
20034a70:	18c00517 	ldw	r3,20(r3)
20034a74:	1809883a 	mov	r4,r3
20034a78:	103ee83a 	callr	r2
20034a7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
20034a80:	e0bfff17 	ldw	r2,-4(fp)
20034a84:	1000031e 	bne	r2,zero,20034a94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
20034a88:	e13ffd17 	ldw	r4,-12(fp)
20034a8c:	00349540 	call	20034954 <alt_alarm_stop>
20034a90:	00000d06 	br	20034ac8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
20034a94:	e0bffd17 	ldw	r2,-12(fp)
20034a98:	10c00217 	ldw	r3,8(r2)
20034a9c:	e0bfff17 	ldw	r2,-4(fp)
20034aa0:	1887883a 	add	r3,r3,r2
20034aa4:	e0bffd17 	ldw	r2,-12(fp)
20034aa8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20034aac:	e0bffd17 	ldw	r2,-12(fp)
20034ab0:	10c00217 	ldw	r3,8(r2)
20034ab4:	d0a70717 	ldw	r2,-25572(gp)
20034ab8:	1880032e 	bgeu	r3,r2,20034ac8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
20034abc:	e0bffd17 	ldw	r2,-12(fp)
20034ac0:	00c00044 	movi	r3,1
20034ac4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
20034ac8:	e0bffe17 	ldw	r2,-8(fp)
20034acc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20034ad0:	e0fffd17 	ldw	r3,-12(fp)
20034ad4:	d0a02104 	addi	r2,gp,-32636
20034ad8:	18bfcf1e 	bne	r3,r2,20034a18 <_gp+0xffff54b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
20034adc:	0001883a 	nop
}
20034ae0:	0001883a 	nop
20034ae4:	e037883a 	mov	sp,fp
20034ae8:	dfc00117 	ldw	ra,4(sp)
20034aec:	df000017 	ldw	fp,0(sp)
20034af0:	dec00204 	addi	sp,sp,8
20034af4:	f800283a 	ret

20034af8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
20034af8:	deffff04 	addi	sp,sp,-4
20034afc:	df000015 	stw	fp,0(sp)
20034b00:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
20034b04:	000170fa 	wrctl	ienable,zero
}
20034b08:	0001883a 	nop
20034b0c:	e037883a 	mov	sp,fp
20034b10:	df000017 	ldw	fp,0(sp)
20034b14:	dec00104 	addi	sp,sp,4
20034b18:	f800283a 	ret

20034b1c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
20034b1c:	defffb04 	addi	sp,sp,-20
20034b20:	df000415 	stw	fp,16(sp)
20034b24:	df000404 	addi	fp,sp,16
20034b28:	e13ffe15 	stw	r4,-8(fp)
20034b2c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
20034b30:	e0bfff17 	ldw	r2,-4(fp)
20034b34:	10840070 	cmpltui	r2,r2,4097
20034b38:	1000021e 	bne	r2,zero,20034b44 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
20034b3c:	00840004 	movi	r2,4096
20034b40:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
20034b44:	e0fffe17 	ldw	r3,-8(fp)
20034b48:	e0bfff17 	ldw	r2,-4(fp)
20034b4c:	1885883a 	add	r2,r3,r2
20034b50:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20034b54:	e0bffe17 	ldw	r2,-8(fp)
20034b58:	e0bffc15 	stw	r2,-16(fp)
20034b5c:	00000506 	br	20034b74 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
20034b60:	e0bffc17 	ldw	r2,-16(fp)
20034b64:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20034b68:	e0bffc17 	ldw	r2,-16(fp)
20034b6c:	10800804 	addi	r2,r2,32
20034b70:	e0bffc15 	stw	r2,-16(fp)
20034b74:	e0fffc17 	ldw	r3,-16(fp)
20034b78:	e0bffd17 	ldw	r2,-12(fp)
20034b7c:	18bff836 	bltu	r3,r2,20034b60 <_gp+0xffff5600>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
20034b80:	e0bffe17 	ldw	r2,-8(fp)
20034b84:	108007cc 	andi	r2,r2,31
20034b88:	10000226 	beq	r2,zero,20034b94 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
20034b8c:	e0bffc17 	ldw	r2,-16(fp)
20034b90:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
20034b94:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
20034b98:	0001883a 	nop
20034b9c:	e037883a 	mov	sp,fp
20034ba0:	df000017 	ldw	fp,0(sp)
20034ba4:	dec00104 	addi	sp,sp,4
20034ba8:	f800283a 	ret

20034bac <atexit>:
20034bac:	200b883a 	mov	r5,r4
20034bb0:	000f883a 	mov	r7,zero
20034bb4:	000d883a 	mov	r6,zero
20034bb8:	0009883a 	mov	r4,zero
20034bbc:	0034d281 	jmpi	20034d28 <__register_exitproc>

20034bc0 <exit>:
20034bc0:	defffe04 	addi	sp,sp,-8
20034bc4:	000b883a 	mov	r5,zero
20034bc8:	dc000015 	stw	r16,0(sp)
20034bcc:	dfc00115 	stw	ra,4(sp)
20034bd0:	2021883a 	mov	r16,r4
20034bd4:	0034e400 	call	20034e40 <__call_exitprocs>
20034bd8:	008800f4 	movhi	r2,8195
20034bdc:	109d5904 	addi	r2,r2,30052
20034be0:	11000017 	ldw	r4,0(r2)
20034be4:	20800f17 	ldw	r2,60(r4)
20034be8:	10000126 	beq	r2,zero,20034bf0 <exit+0x30>
20034bec:	103ee83a 	callr	r2
20034bf0:	8009883a 	mov	r4,r16
20034bf4:	00322580 	call	20032258 <_exit>

20034bf8 <_fputs_r>:
20034bf8:	defff804 	addi	sp,sp,-32
20034bfc:	dc400615 	stw	r17,24(sp)
20034c00:	2023883a 	mov	r17,r4
20034c04:	2809883a 	mov	r4,r5
20034c08:	dc000515 	stw	r16,20(sp)
20034c0c:	dfc00715 	stw	ra,28(sp)
20034c10:	3021883a 	mov	r16,r6
20034c14:	d9400315 	stw	r5,12(sp)
20034c18:	002f8b80 	call	2002f8b8 <strlen>
20034c1c:	d8800215 	stw	r2,8(sp)
20034c20:	d8800415 	stw	r2,16(sp)
20034c24:	d8800304 	addi	r2,sp,12
20034c28:	d8800015 	stw	r2,0(sp)
20034c2c:	00800044 	movi	r2,1
20034c30:	d8800115 	stw	r2,4(sp)
20034c34:	88000226 	beq	r17,zero,20034c40 <_fputs_r+0x48>
20034c38:	88800e17 	ldw	r2,56(r17)
20034c3c:	10001226 	beq	r2,zero,20034c88 <_fputs_r+0x90>
20034c40:	8080030b 	ldhu	r2,12(r16)
20034c44:	10c8000c 	andi	r3,r2,8192
20034c48:	1800061e 	bne	r3,zero,20034c64 <_fputs_r+0x6c>
20034c4c:	81001917 	ldw	r4,100(r16)
20034c50:	00f7ffc4 	movi	r3,-8193
20034c54:	10880014 	ori	r2,r2,8192
20034c58:	20c6703a 	and	r3,r4,r3
20034c5c:	8080030d 	sth	r2,12(r16)
20034c60:	80c01915 	stw	r3,100(r16)
20034c64:	d80d883a 	mov	r6,sp
20034c68:	800b883a 	mov	r5,r16
20034c6c:	8809883a 	mov	r4,r17
20034c70:	002d6180 	call	2002d618 <__sfvwrite_r>
20034c74:	dfc00717 	ldw	ra,28(sp)
20034c78:	dc400617 	ldw	r17,24(sp)
20034c7c:	dc000517 	ldw	r16,20(sp)
20034c80:	dec00804 	addi	sp,sp,32
20034c84:	f800283a 	ret
20034c88:	8809883a 	mov	r4,r17
20034c8c:	00276b80 	call	200276b8 <__sinit>
20034c90:	003feb06 	br	20034c40 <_gp+0xffff56e0>

20034c94 <fputs>:
20034c94:	008800f4 	movhi	r2,8195
20034c98:	109d5a04 	addi	r2,r2,30056
20034c9c:	280d883a 	mov	r6,r5
20034ca0:	200b883a 	mov	r5,r4
20034ca4:	11000017 	ldw	r4,0(r2)
20034ca8:	0034bf81 	jmpi	20034bf8 <_fputs_r>

20034cac <memcmp>:
20034cac:	01c000c4 	movi	r7,3
20034cb0:	3980192e 	bgeu	r7,r6,20034d18 <memcmp+0x6c>
20034cb4:	2144b03a 	or	r2,r4,r5
20034cb8:	11c4703a 	and	r2,r2,r7
20034cbc:	10000f26 	beq	r2,zero,20034cfc <memcmp+0x50>
20034cc0:	20800003 	ldbu	r2,0(r4)
20034cc4:	28c00003 	ldbu	r3,0(r5)
20034cc8:	10c0151e 	bne	r2,r3,20034d20 <memcmp+0x74>
20034ccc:	31bfff84 	addi	r6,r6,-2
20034cd0:	01ffffc4 	movi	r7,-1
20034cd4:	00000406 	br	20034ce8 <memcmp+0x3c>
20034cd8:	20800003 	ldbu	r2,0(r4)
20034cdc:	28c00003 	ldbu	r3,0(r5)
20034ce0:	31bfffc4 	addi	r6,r6,-1
20034ce4:	10c00e1e 	bne	r2,r3,20034d20 <memcmp+0x74>
20034ce8:	21000044 	addi	r4,r4,1
20034cec:	29400044 	addi	r5,r5,1
20034cf0:	31fff91e 	bne	r6,r7,20034cd8 <_gp+0xffff5778>
20034cf4:	0005883a 	mov	r2,zero
20034cf8:	f800283a 	ret
20034cfc:	20c00017 	ldw	r3,0(r4)
20034d00:	28800017 	ldw	r2,0(r5)
20034d04:	18bfee1e 	bne	r3,r2,20034cc0 <_gp+0xffff5760>
20034d08:	31bfff04 	addi	r6,r6,-4
20034d0c:	21000104 	addi	r4,r4,4
20034d10:	29400104 	addi	r5,r5,4
20034d14:	39bff936 	bltu	r7,r6,20034cfc <_gp+0xffff579c>
20034d18:	303fe91e 	bne	r6,zero,20034cc0 <_gp+0xffff5760>
20034d1c:	003ff506 	br	20034cf4 <_gp+0xffff5794>
20034d20:	10c5c83a 	sub	r2,r2,r3
20034d24:	f800283a 	ret

20034d28 <__register_exitproc>:
20034d28:	defffa04 	addi	sp,sp,-24
20034d2c:	dc000315 	stw	r16,12(sp)
20034d30:	040800f4 	movhi	r16,8195
20034d34:	841d5904 	addi	r16,r16,30052
20034d38:	80c00017 	ldw	r3,0(r16)
20034d3c:	dc400415 	stw	r17,16(sp)
20034d40:	dfc00515 	stw	ra,20(sp)
20034d44:	18805217 	ldw	r2,328(r3)
20034d48:	2023883a 	mov	r17,r4
20034d4c:	10003726 	beq	r2,zero,20034e2c <__register_exitproc+0x104>
20034d50:	10c00117 	ldw	r3,4(r2)
20034d54:	010007c4 	movi	r4,31
20034d58:	20c00e16 	blt	r4,r3,20034d94 <__register_exitproc+0x6c>
20034d5c:	1a000044 	addi	r8,r3,1
20034d60:	8800221e 	bne	r17,zero,20034dec <__register_exitproc+0xc4>
20034d64:	18c00084 	addi	r3,r3,2
20034d68:	18c7883a 	add	r3,r3,r3
20034d6c:	18c7883a 	add	r3,r3,r3
20034d70:	12000115 	stw	r8,4(r2)
20034d74:	10c7883a 	add	r3,r2,r3
20034d78:	19400015 	stw	r5,0(r3)
20034d7c:	0005883a 	mov	r2,zero
20034d80:	dfc00517 	ldw	ra,20(sp)
20034d84:	dc400417 	ldw	r17,16(sp)
20034d88:	dc000317 	ldw	r16,12(sp)
20034d8c:	dec00604 	addi	sp,sp,24
20034d90:	f800283a 	ret
20034d94:	008800f4 	movhi	r2,8195
20034d98:	10a21c04 	addi	r2,r2,-30608
20034d9c:	10002626 	beq	r2,zero,20034e38 <__register_exitproc+0x110>
20034da0:	01006404 	movi	r4,400
20034da4:	d9400015 	stw	r5,0(sp)
20034da8:	d9800115 	stw	r6,4(sp)
20034dac:	d9c00215 	stw	r7,8(sp)
20034db0:	00288700 	call	20028870 <malloc>
20034db4:	d9400017 	ldw	r5,0(sp)
20034db8:	d9800117 	ldw	r6,4(sp)
20034dbc:	d9c00217 	ldw	r7,8(sp)
20034dc0:	10001d26 	beq	r2,zero,20034e38 <__register_exitproc+0x110>
20034dc4:	81000017 	ldw	r4,0(r16)
20034dc8:	10000115 	stw	zero,4(r2)
20034dcc:	02000044 	movi	r8,1
20034dd0:	22405217 	ldw	r9,328(r4)
20034dd4:	0007883a 	mov	r3,zero
20034dd8:	12400015 	stw	r9,0(r2)
20034ddc:	20805215 	stw	r2,328(r4)
20034de0:	10006215 	stw	zero,392(r2)
20034de4:	10006315 	stw	zero,396(r2)
20034de8:	883fde26 	beq	r17,zero,20034d64 <_gp+0xffff5804>
20034dec:	18c9883a 	add	r4,r3,r3
20034df0:	2109883a 	add	r4,r4,r4
20034df4:	1109883a 	add	r4,r2,r4
20034df8:	21802215 	stw	r6,136(r4)
20034dfc:	01800044 	movi	r6,1
20034e00:	12406217 	ldw	r9,392(r2)
20034e04:	30cc983a 	sll	r6,r6,r3
20034e08:	4992b03a 	or	r9,r9,r6
20034e0c:	12406215 	stw	r9,392(r2)
20034e10:	21c04215 	stw	r7,264(r4)
20034e14:	01000084 	movi	r4,2
20034e18:	893fd21e 	bne	r17,r4,20034d64 <_gp+0xffff5804>
20034e1c:	11006317 	ldw	r4,396(r2)
20034e20:	218cb03a 	or	r6,r4,r6
20034e24:	11806315 	stw	r6,396(r2)
20034e28:	003fce06 	br	20034d64 <_gp+0xffff5804>
20034e2c:	18805304 	addi	r2,r3,332
20034e30:	18805215 	stw	r2,328(r3)
20034e34:	003fc606 	br	20034d50 <_gp+0xffff57f0>
20034e38:	00bfffc4 	movi	r2,-1
20034e3c:	003fd006 	br	20034d80 <_gp+0xffff5820>

20034e40 <__call_exitprocs>:
20034e40:	defff504 	addi	sp,sp,-44
20034e44:	df000915 	stw	fp,36(sp)
20034e48:	dd400615 	stw	r21,24(sp)
20034e4c:	dc800315 	stw	r18,12(sp)
20034e50:	dfc00a15 	stw	ra,40(sp)
20034e54:	ddc00815 	stw	r23,32(sp)
20034e58:	dd800715 	stw	r22,28(sp)
20034e5c:	dd000515 	stw	r20,20(sp)
20034e60:	dcc00415 	stw	r19,16(sp)
20034e64:	dc400215 	stw	r17,8(sp)
20034e68:	dc000115 	stw	r16,4(sp)
20034e6c:	d9000015 	stw	r4,0(sp)
20034e70:	2839883a 	mov	fp,r5
20034e74:	04800044 	movi	r18,1
20034e78:	057fffc4 	movi	r21,-1
20034e7c:	008800f4 	movhi	r2,8195
20034e80:	109d5904 	addi	r2,r2,30052
20034e84:	12000017 	ldw	r8,0(r2)
20034e88:	45005217 	ldw	r20,328(r8)
20034e8c:	44c05204 	addi	r19,r8,328
20034e90:	a0001c26 	beq	r20,zero,20034f04 <__call_exitprocs+0xc4>
20034e94:	a0800117 	ldw	r2,4(r20)
20034e98:	15ffffc4 	addi	r23,r2,-1
20034e9c:	b8000d16 	blt	r23,zero,20034ed4 <__call_exitprocs+0x94>
20034ea0:	14000044 	addi	r16,r2,1
20034ea4:	8421883a 	add	r16,r16,r16
20034ea8:	8421883a 	add	r16,r16,r16
20034eac:	84402004 	addi	r17,r16,128
20034eb0:	a463883a 	add	r17,r20,r17
20034eb4:	a421883a 	add	r16,r20,r16
20034eb8:	e0001e26 	beq	fp,zero,20034f34 <__call_exitprocs+0xf4>
20034ebc:	80804017 	ldw	r2,256(r16)
20034ec0:	e0801c26 	beq	fp,r2,20034f34 <__call_exitprocs+0xf4>
20034ec4:	bdffffc4 	addi	r23,r23,-1
20034ec8:	843fff04 	addi	r16,r16,-4
20034ecc:	8c7fff04 	addi	r17,r17,-4
20034ed0:	bd7ff91e 	bne	r23,r21,20034eb8 <_gp+0xffff5958>
20034ed4:	008800f4 	movhi	r2,8195
20034ed8:	10a22104 	addi	r2,r2,-30588
20034edc:	10000926 	beq	r2,zero,20034f04 <__call_exitprocs+0xc4>
20034ee0:	a0800117 	ldw	r2,4(r20)
20034ee4:	1000301e 	bne	r2,zero,20034fa8 <__call_exitprocs+0x168>
20034ee8:	a0800017 	ldw	r2,0(r20)
20034eec:	10003226 	beq	r2,zero,20034fb8 <__call_exitprocs+0x178>
20034ef0:	a009883a 	mov	r4,r20
20034ef4:	98800015 	stw	r2,0(r19)
20034ef8:	00288840 	call	20028884 <free>
20034efc:	9d000017 	ldw	r20,0(r19)
20034f00:	a03fe41e 	bne	r20,zero,20034e94 <_gp+0xffff5934>
20034f04:	dfc00a17 	ldw	ra,40(sp)
20034f08:	df000917 	ldw	fp,36(sp)
20034f0c:	ddc00817 	ldw	r23,32(sp)
20034f10:	dd800717 	ldw	r22,28(sp)
20034f14:	dd400617 	ldw	r21,24(sp)
20034f18:	dd000517 	ldw	r20,20(sp)
20034f1c:	dcc00417 	ldw	r19,16(sp)
20034f20:	dc800317 	ldw	r18,12(sp)
20034f24:	dc400217 	ldw	r17,8(sp)
20034f28:	dc000117 	ldw	r16,4(sp)
20034f2c:	dec00b04 	addi	sp,sp,44
20034f30:	f800283a 	ret
20034f34:	a0800117 	ldw	r2,4(r20)
20034f38:	80c00017 	ldw	r3,0(r16)
20034f3c:	10bfffc4 	addi	r2,r2,-1
20034f40:	15c01426 	beq	r2,r23,20034f94 <__call_exitprocs+0x154>
20034f44:	80000015 	stw	zero,0(r16)
20034f48:	183fde26 	beq	r3,zero,20034ec4 <_gp+0xffff5964>
20034f4c:	95c8983a 	sll	r4,r18,r23
20034f50:	a0806217 	ldw	r2,392(r20)
20034f54:	a5800117 	ldw	r22,4(r20)
20034f58:	2084703a 	and	r2,r4,r2
20034f5c:	10000b26 	beq	r2,zero,20034f8c <__call_exitprocs+0x14c>
20034f60:	a0806317 	ldw	r2,396(r20)
20034f64:	2088703a 	and	r4,r4,r2
20034f68:	20000c1e 	bne	r4,zero,20034f9c <__call_exitprocs+0x15c>
20034f6c:	89400017 	ldw	r5,0(r17)
20034f70:	d9000017 	ldw	r4,0(sp)
20034f74:	183ee83a 	callr	r3
20034f78:	a0800117 	ldw	r2,4(r20)
20034f7c:	15bfbf1e 	bne	r2,r22,20034e7c <_gp+0xffff591c>
20034f80:	98800017 	ldw	r2,0(r19)
20034f84:	153fcf26 	beq	r2,r20,20034ec4 <_gp+0xffff5964>
20034f88:	003fbc06 	br	20034e7c <_gp+0xffff591c>
20034f8c:	183ee83a 	callr	r3
20034f90:	003ff906 	br	20034f78 <_gp+0xffff5a18>
20034f94:	a5c00115 	stw	r23,4(r20)
20034f98:	003feb06 	br	20034f48 <_gp+0xffff59e8>
20034f9c:	89000017 	ldw	r4,0(r17)
20034fa0:	183ee83a 	callr	r3
20034fa4:	003ff406 	br	20034f78 <_gp+0xffff5a18>
20034fa8:	a0800017 	ldw	r2,0(r20)
20034fac:	a027883a 	mov	r19,r20
20034fb0:	1029883a 	mov	r20,r2
20034fb4:	003fb606 	br	20034e90 <_gp+0xffff5930>
20034fb8:	0005883a 	mov	r2,zero
20034fbc:	003ffb06 	br	20034fac <_gp+0xffff5a4c>
